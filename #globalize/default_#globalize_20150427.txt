[05:12:09] <globalize-commit> [globalize] rxaviers force-pushed fix-398-runtime from c1db006 to d1aec6f: http://git.io/vfl5x
[05:12:09] <globalize-commit> globalize/fix-398-runtime d1aec6f Rafael Xavier de Souza: All: Runtime support (smaller and quicker code for production)...
[05:30:18] <globalize-commit> [globalize] rxaviers force-pushed fix-398-runtime from d1aec6f to dc55156: http://git.io/vfl5x
[05:30:18] <globalize-commit> globalize/fix-398-runtime dc55156 Rafael Xavier de Souza: All: Runtime support (smaller and quicker code for production)...
[09:53:13] <scott_gonzalez> rxaviers: Regarding https://github.com/jquery/globalize/issues/441
[09:53:22] <scott_gonzalez> The problem is that cldr is a peer dependency, right?
[09:53:39] <rxaviers> cldr is a actual dependency
[09:53:43] <rxaviers> cldr-data is a peer dependency
[09:53:57] <scott_gonzalez> So do you know why it can't find the module?
[09:54:14] <scott_gonzalez> What's the difference between cldr and cldrjs?
[09:54:17] <rxaviers> Yeap, inonsistency between bower vs. npm module names for the cldrjs project.
[09:54:45] <rxaviers> actually, inconcistency of the naming between amd and cjs for that module.
[09:55:00] <scott_gonzalez> oy
[09:55:12] <scott_gonzalez> Why not just change bower to use cldrjs?
[09:55:53] <rxaviers> Even if we had the same name cldrjs for both amd, cjs, npm or bower, the paths aren't the same.
[09:56:18] <rxaviers> For AMD we can require("cldr/event") for example. But, it doesnt make sense for node.
[09:56:20] <scott_gonzalez> TBH, if I was managing this project, I'd say "not my problem. Tell webpack to work properly"
[09:56:46] <scott_gonzalez> But you also know my aversion for all the module system insanity.
[09:56:50] <rxaviers> Yeap, the root problem is webpack trying to parse wrong stuff
[09:56:56] <rxaviers> I know :D
[09:57:36] <scott_gonzalez> Look, we built a tool that works with everything!
[09:57:44] <scott_gonzalez> (as long as you write it in this specific way)
[09:58:03] <rxaviers> Lol
[10:00:19] <scott_gonzalez> I commented on the issue.
[10:00:32] <rxaviers> thanks!
[10:31:07] <scott_gonzalez> rxaviers: It really sounds to me like renaming the bower module to cldrjs will fix this.
[10:34:22] <rxaviers> scott_gonzalez, let's see..
[14:35:30] <tniessen> rxaviers: Did not expect jQuery to get that few slots :(
[14:35:55] <tniessen> anyway, thanks for your support
[14:37:04] <rxaviers> It's the first time jQuery has applied to the GSoC and it seems like that was the cause. Unfortunately, no slots for Globalize :(
[14:37:51] <rxaviers> I hope you find some time to stay in touch with the project :)
[14:42:17] <tniessen> rxaviers: I hope so too
[14:42:30] <tniessen> Will take my final exams during the next weeks and hope to get some time afterwards
[14:42:57] <rxaviers> good luck on your exams
[14:43:05] <tniessen> Thanks :)
[14:45:44] <tniessen> I still think there is something wrong with the slot allocations... jQuery got more than 3% of the applications but only 0.3% of the slots. Sure, it's new to GSoC but that's an extreme ratio
[14:46:40] <tniessen> In fact, less than 2% of the applicants could be selected
