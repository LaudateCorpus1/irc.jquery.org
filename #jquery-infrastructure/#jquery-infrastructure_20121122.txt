[01:18:01] <jzaefferer> gnarf: any update on infrastructure docs?
[01:18:10] <jzaefferer> didn't see anything in the status update
[01:18:55] <gnarf> jzaefferer: is there a specific document you're concerned with producing?
[01:20:19] <jzaefferer> gnarf: not really. Mostly a "here's what you can look at when shit breaks and Corey isn't around", for now. That status monitor ( https://github.com/jquery/infrastructure/issues/122 ) would be a great help in that case as well.
[01:23:04] <gnarf> yeah - i'll make that my project tomorrow, making sure notifier can send e-mails
[01:23:30] <gnarf> I really want to find a way to do IRC as well
[10:52:12] <Krinkle> gnarf: :-( my answer is down to #2 again. http://stackoverflow.com/questions/1966503/does-imdb-provide-an-api/7744369#7744369
[10:52:26] <Krinkle> always in constant state of flux
[10:52:51] <ryanneufeld> Krinkle: 
[10:53:18] <ryanneufeld> Krinkle: http://i.minus.com/iUtOtQA9neX8D.gif
[10:53:30] <Krinkle> lol
[10:53:39] <Krinkle> +10	 35 secs ago	upvote	Does IMDB provide an API?
[10:53:42] <Krinkle> thx
[10:53:44] <ryanneufeld> http://tad.minus.com/lvuLxVbWnRmVf
[10:55:08] <Krinkle> its not easy fighting a battle with a 2 year set back from the start
[10:55:22] <Krinkle> but it's not bad in retrospect.
[10:55:41] <ryanneufeld> And who are we without the internet to prove that we're cool?
[10:56:15] <Krinkle> I have some doubts in stackoverflow's sorting algorythm though. 
[10:56:28] <Krinkle> I mean, I get it. 67-4 is the same as 63
[10:56:45] <Krinkle> but having 4 -1's and 0 -1's should also count for something I suppose.
[10:56:59] <Krinkle> anyhow, thx :)
[15:10:33] <Krinkle> gruntified and puppetized
[15:11:27] <ryanneufeld> I just glanced at my log window and saw this: http://cl.ly/image/2s1u2u2F3U1s
[15:11:32] <ryanneufeld> I was like :|
[15:11:44] <ryanneufeld> Then I was like lol :)
[15:37:24] <Krinkle> Hi
[15:37:26] <Krinkle> I had to share that
[15:37:55] <Krinkle> I was talking here and just mentioned those terms and people were like "what are yout alking about?"
[15:38:02] <Krinkle> Makes perfect sense right?
[15:38:24] <Krinkle> Just gruntify that tool, puppetise that application and lets run it!
[15:38:40] <Krinkle> Just reversing the polarity of the neutron flow
[15:38:46] <Krinkle> ryanneufeld: :D
[15:39:16] <ryanneufeld> puppetize the gruntification
[15:39:37] <Krinkle> Red Hot Chili Peppers - Gruntification
[15:39:39] <Krinkle> Wait..
[15:39:42] <ryanneufeld> and you could gruntify the puppetization too, but that would be silly
[15:39:49] <ryanneufeld> wat
[15:39:49] <b-ot> some dude good examples. i need a sultion without a bar. only with arrows. left right.
[15:40:05] <Krinkle> wat wat
[15:40:06] <Krinkle> wat
[15:40:06] <b-ot> OR DID NOT THUSLY YOU DO WATCH DONE RAINBOW ERITREA HONEYSUCKLE
[15:40:17] <Krinkle> oh we have a Math.random() response now in b-ot
[15:40:21] <Krinkle> reminds me out LOUDBOT
[15:40:43] <Krinkle> ryanneufeld: you know LOUDBOT?
[15:41:30] <Krinkle> an irc bot that keeps track of all CAPS messages and responds with one to such message.
[15:41:43] <Krinkle> especially fun with 2 of them in a room :P
[15:42:30] <Krinkle> http://loudversations.tumblr.com/
[15:45:10] <ryanneufeld> ?bestof
[15:45:10] <b-ot> ryanneufeld, http://oksoclap.com/bestofot
[15:47:39] <Krinkle> http://www.bash.org/
[15:48:04] <Krinkle> http://www.bash.org/?20623
[15:48:16] <Krinkle> there's too many of them
[17:34:39] <clarkbox> found a site responsible for 4000 hits an hour to a 404
[17:35:48] <clarkbox> and nowâ€¦ 
[17:35:49] <clarkbox> http://data.woopieapi.com/wos/g/gadgets/ifr?container=default&mid=0&nocache=1&country=ALL&lang=ALL&view=canvas&parent=http%3A%2F%2Frealworld.aima.woopie.jp&appId=128002&errorUrl=http%3A%2F%2Frealworld.aima.woopie.jp%2Fv2%2Ffiles%2Ferror.html&communityUrl=http%3A%2F%2Frealworld.aima.woopie.jp%2Fv2%2Fc%2F6%2Fbbs&userOrigin=realworld.jp&currentPartnerId=realworld.jp&st=dklxSnV5N3R6Mm5CRlU5N0clMkJ3UkZVVmRzTCUyQkpsb1NxUjgxU0pNcTU3WWNDYiUyRlBkeC
[17:35:49] <clarkbox> VRM3NMZE10dzBRYVlyc3dncTlEUHdkdGZ5RFhRZkolMkJmRDF2NWw1SzdJNHpkdSUyQkZSUFB1MFlkUWk5RkdxUE5rVkdxcDJOUHhPTG1Vc2VpWUVaM21ibzZDM2JlT3h2NkJjcEtiYjdLdnZUQUhzanluWXZ0VyUyQjgyWEZDVjVydkNaJTJCYTVZZWVvQndEaGM0am1kaENtJTJCRU52Znpaa1pCaVFGZHJva3dyZDQ4JTNE&url=http%3A%2F%2Fwoopie.nopara.jp%2Faima%2FgenGadgetXml.php
[17:35:56] <clarkbox> lovely js alert()
[17:36:33] <clarkbox> lets see how long it takes them to fix
[17:39:16] <Krinkle|detached> clarkbox: So I've been playing with splunk and ts-bs log format
[17:39:38] <Krinkle> clarkbox: http://cl.ly/image/3T3P3k0t0G0u
[17:39:55] <Krinkle> clarkbox: http://cl.ly/image/3D1y2a2e1e0v
[17:40:17] <Krinkle> clarkbox: Gonna forward those to browserstack
[17:40:36] <clarkbox> ah nice
[17:40:40] <clarkbox> you can do an export
[17:40:54] <Krinkle> these are cases of a browserstack worker starting, and going to status=running, but they didn't visit the url (aka not in the swarm)
[17:41:19] <Krinkle> which has been a common bug in mobile browsers (hard to get control from a vm for them)
[17:41:23] <Krinkle> but I see a spike on IE7 now
[17:41:32] <Krinkle> that explains why there are so many IE7 spawn
[17:41:50] <Krinkle> not because it is so slow and is always the last (which means we start 2 to speed it up)
[17:42:00] <Krinkle> but because we constantly terminate the dead ones and restart them
[17:42:17] <Krinkle> or rather, they aren't alive to begin with
[17:42:34] <Krinkle> clarkbox: yeah, but in this case I'll give them a PNG for readability
[17:43:35] <clarkbox> right on. feel free to create them an unprivileged account in splunk so they can have an interactive look
[17:43:51] <clarkbox> i gotta go. afk for the next couple hours
[17:44:25] <Krinkle> clarkbox: okay, will cc you on the mail. And about that splunk account, I'll see what I can do.
[18:31:02] <gnarf> Krinkle: when i wrote my browserstack thing, i sorted IE's first
[18:31:12] <gnarf> it makes more sense to start with the longest running browsers
[18:31:27] <Krinkle> no need to in this case
[18:31:41] <Krinkle> We sort them by neediness
[18:31:54] <Krinkle> And at least 1 worker for each needed browser.
[18:32:09] <Krinkle> Then more by number pending runs until the available number of workers is reached.
[18:32:23] <Krinkle> So naturally there will be more workers for the slowest browser
[18:32:28] <gnarf> sure, but if you start with the IE's if everything else is equal
[18:32:39] <gnarf> then they get the initial jump
[18:32:43] <Krinkle> Nope
[18:32:58] <gnarf> like IE vs Chrome - both need 20 jobs, start the IE first
[18:33:10] <gnarf> it will result in a shorter overall run time
[18:33:22] <gnarf> to stack the longest running at the start
[18:33:23] <Krinkle> I'm open to improvements, but I worked on the algorithm. This case was high in the goals. 
[18:34:03] <Krinkle> We loop through, regardless of neediness, if it has > 0 pending runs, we start a worker. Then we sort by number of pending runs, IE will have more pending runs because it is slower.
[18:34:08] <Krinkle> thus it is started first
[18:34:22] <Krinkle> in the second round
[18:34:40] <Krinkle> and in the first round we start one of each regardless of the number
[18:35:06] <Krinkle> the first round can even spawn more workers than we have quota for
[18:35:09] <Krinkle> they'll just go in the queue
[18:35:19] <gnarf> right, but then you queue ie
[18:35:22] <Krinkle> no
[18:35:42] <Krinkle> Unless there are workers left behind from the last run,  nothing will be queued.
[18:36:14] <gnarf> The algo I had was a sort - Sort by needed runs, then by IE, then by version lowest first - it also only started up to 6 on the first pass and waited for no queued status before it would start beyond 6
[18:36:40] <gnarf> just to ensure that those IE's got moving first
[18:36:55] <gnarf> the IE tests take 2 to 3 times longer than any other
[18:37:03] <Krinkle> That's essentially what I did in my rewrite too, except the default limit is now 10
[18:37:11] <Krinkle> sort by version is implied from the ID.
[18:37:27] <Krinkle> IE is within the first 10 in this case, but I don't enforce it. It is good enough.
[18:37:42] <Krinkle> the first 10 is "Chrome 22, 23, IE, 5, 6,7, 8, 9, 10"
[18:37:48] <Krinkle> not 5
[18:38:01] <Krinkle> They are started simulataniously
[18:38:01] <gnarf> Krinkle: every swarm run i watched last night, IE7 was the last to start moving
[18:38:13] <Krinkle> Yes, but that is in no way related to this script
[18:38:30] <Krinkle> if you read the conversation and clicked the links, you'd know
[18:38:37] <Krinkle> no offense :)
[18:38:48] <gnarf> i jumped in late
[18:38:50] <gnarf> none taken
[18:38:52] <Krinkle> http://cl.ly/image/3T3P3k0t0G0u
[18:38:55] <gnarf> didn't read back very far :)
[18:39:12] <gnarf> so 44 "false starts" basically?
[18:39:14] <Krinkle> They have an issue where some workers do boot but don't visit the url.
[18:39:22] <Krinkle> Yep
[18:39:24] <gnarf> lame
[18:39:36] <Krinkle> so those idle until the the second round when the script will kill it and spawn a new one.
[18:39:44] <gnarf> yeah
[18:39:47] <Krinkle> 44 over the last 24 hours
[18:39:48] <gnarf> makes sense
[18:39:55] <Krinkle> total of 128 IE7s over last 24 hours
[18:40:32] <gnarf> thats painful to work around
[18:40:54] <Krinkle> I suppose what we could do is keep track in the script how many rounds until a browser is terminated on average. and take that into account in the sorting of the second round onwards.
[18:41:07] <gnarf> I went to great lengths to try to ensure I never had more than one "queue" browser tho
[18:41:10] <Krinkle> (that doesn't fix this issue, but I mean to address the: let slow browsers go first)
[18:41:36] <Krinkle> gnarf: I gave that up for simplicity in the script and it works out well
[18:41:42] <Krinkle> h/o, let me show you
[18:41:52] <Krinkle> https://github.com/clarkbox/testswarm-browserstack/blob/master/src/testswarm-browserstack.js#L435
[18:41:58] <Krinkle> scroll to Task 1
[18:42:17] <Krinkle> eh, Task 2 I mean
[18:42:22] <Krinkle> that's where the spawning starts
[18:42:34] <Krinkle> first, make sure we have at least 1 worker for each browser that has pending runs
[18:42:38] <gnarf> right right
[18:42:39] <Krinkle> ignoring the stacklimit
[18:43:30] <Krinkle> Task 3 will start more if there is quota. And then (if we run with run-loop), it will go back to task 0 after 60 seconds
[18:44:03] <Krinkle> usually after a new job is submitted the next loop will do nothing in task 3, and then future loops will start more workers for the slow ones.
[18:44:37] <Krinkle> I also optimised it by working with a local perception of the status instead of updating it from the API
[18:45:07] <Krinkle> so when a spawn is done, we don't handle the promise, we just update our perception and take that its there, so that we can continue the spawn loop.
[18:49:09] <gnarf> nod
[18:49:10] <Krinkle> gnarf: btw, when was this and do you still have the script?
[18:50:08] <gnarf> it was that "gnarf-test.js" that was running a while back
[18:50:10] <Krinkle> clarkbox: jzaefferer: gnarf: sent the browserstack mail
[18:50:26] <Krinkle> gnarf: I recall seeing that somewhere, yeah.
[18:50:29] <Krinkle> on the old server
[18:50:36] <gnarf> it was on jq03
[18:50:39] <Krinkle> ok
[18:50:43] <gnarf> it was right after we moved it
[18:50:48] <gnarf> but it doesn't seem to be there anymore
[18:50:56] <gnarf> like someone has re-cloned/reset the directory
[18:51:06] <Krinkle> I think it was lost when the directory structure was changed to /var/www and /tools
[18:51:22] <Krinkle> (from /srv/swarm.jquery.org/htdocs and ./tools)
[18:52:06] <Krinkle> testswarm-browserstack has been re-cloned a few times since then too
[18:52:17] <gnarf> yeah
[18:52:21] <gnarf> i dunno if i still have a copy
[18:54:06] <gnarf> I remember pointing it out to you when you started your rewrite
[18:54:57] <Krinkle> yep
[18:56:42] <gnarf> looks like there is a copy in /home/gnarf
[18:56:45] <gnarf> it's prolly old tho
[18:58:07] <gnarf> the sort is in filterNeeded
[19:00:13] <Krinkle> gnarf: this looks interesting:
[19:00:14] <Krinkle> !~_.indexOf
[19:00:24] <gnarf> dirty tricks
[19:00:36] <Krinkle> 5 years ago that would freak me out
[19:00:53] <Krinkle> all I would recognize is !, . and indexOf
[19:00:56] <gnarf> ~ converts -1 to 0, and everything else non-zero
[19:01:00] <Krinkle> what is ~ and _ in there
[19:01:01] <Krinkle> :P
[19:01:09] <Krinkle> I know now how it works and what it does, but I still don't like it.
[19:01:15] <Krinkle> just use !== 01
[19:01:17] <Krinkle> just use !== -1
[19:01:24] <Krinkle> be explicit
[19:01:26] <Krinkle> I like that, anyway
[19:01:32] <gnarf> it wasn't something i was submitting
[19:01:35] <gnarf> just hacking it together
[19:01:36] <gnarf> :)
[19:01:44] <Krinkle> I'm not judging you
[19:01:57] <gnarf> if anyone else needs to read it, i never use that trick really
[19:02:21] <gnarf> basically i limited to a lower number, and only allowed spawning beyond that number when there were no "queue" browsers
[19:03:04] <Krinkle> When would that be?
[19:03:24] <Krinkle> I'm not sure I follow that exactly. You update from /workers periodically?
[19:03:32] <gnarf> yup
[19:03:36] <Krinkle> after spawning it is queue by default at the begining
[19:03:48] <Krinkle> even if it is the only worker in the world.
[19:04:12] <gnarf> i would spawn up to 7 i think, then if all 7 were not "queue" it would start an 8th
[19:04:13] <gnarf> etc
[19:04:27] <gnarf> because occasionally it could get up to 10 at once, but not very often
[19:04:53] <Krinkle> interesting.
[19:05:22] <gnarf> but i wanted to try to make sure that I wasn't queueing more browsers than actually could be started
[19:05:33] <gnarf> it seemed that browserstack didn't pay attention to the order we queued
[19:05:48] <gnarf> it would just start via random selection from the queue
[19:07:42] <Krinkle> I guess it goes by availability of that cluster / browser image.
[19:07:49] <gnarf> yeah
[19:08:47] <Krinkle> And for GUI users it starts up a new VM by cloning an already booted VM form its paused state. 
[19:08:51] <Krinkle> (I think)
[19:09:05] <Krinkle> I mean, how else can it start a VM in 10 seconds.
[19:09:20] <Krinkle> or they set them up in advance and keep a few spare ones ready to go
[19:09:25] <Krinkle> (or both)
[19:09:30] <gnarf> well, generally you'd clone a saved running state for this task in general
[19:09:35] <Krinkle> yeah
[19:09:45] <gnarf> but you probbably pre-start them
[19:10:15] <Krinkle> like 2 of each, and whenever one is taken, start a new spare one in the background of a potential next user
[19:10:23] <Krinkle> of*for
[19:10:42] <Krinkle> gnarf: html3test?
[19:10:48] <Krinkle> lol
[19:10:56] <Krinkle> (checking out your github connections)
[19:11:05] <gnarf> heh
[19:11:12] <gnarf> i thought that one was funny
[19:13:02] <Krinkle> hm.. is it a plain clone of html5test or more than that?
[19:15:51] <gnarf> someone started it up
[19:15:54] <gnarf> i laughed
[19:15:57] <gnarf> that was the end of it
[19:16:04] <gnarf> i think it had a blink tag
[19:16:51] <Krinkle> hehe
[19:18:11] <Krinkle> gnarf: http://ot-crew.com/ interesting
