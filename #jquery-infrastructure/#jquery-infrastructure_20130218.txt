[10:52:52] <ryanneufeld> ping gnarf
[13:12:34] <gnarf> ryanneufeld: pong
[13:20:16] <jqcommit> 01[13infrastructure01] 15gnarf37 pushed 1 new commit to 06puppet-stage: 02https://github.com/jquery/infrastructure/commit/862a6db26eeb8ca06f878b52997d61596ed36116
[13:20:16] <jqcommit> 13infrastructure/06puppet-stage 14862a6db 15Corey Frang: Testing redirects on stage.jquerymobile.com
[13:32:12] <gnarf> scott_gonzalez: you around?
[13:33:21] <scott_gonzalez> yup
[13:34:05] <gnarf> scott_gonzalez: so, wondering if your git tools will help me here
[13:34:12] <gnarf> i want to rewrite view on node
[13:34:27] <scott_gonzalez> What info do you need?
[13:34:46] <gnarf> a) a way to fetch all tags/branches
[13:34:56] <gnarf> b) a way to get all tags/branches current commit id
[13:35:02] <gnarf> pretty much it
[13:37:05] <scott_gonzalez> So right now it doesn't provide any of that.
[13:37:23] <scott_gonzalez> I already planned on adding a.
[13:37:36] <scott_gonzalez> I can work on adding b to the existing .branches() and .tags() methods.
[13:38:12] <gnarf> cool
[13:38:24] <gnarf> lemme know when to dig in :)
[13:38:40] <scott_gonzalez> ok
[13:39:07] <scott_gonzalez> For the fetch, what I've been thinking in terms of API is:
[13:39:25] <scott_gonzalez> repo.fetch( callback ) if you already have a clone.
[13:39:49] <scott_gonzalez> repo.fetch( { remote: url }, callback ) if you want to create a clone if it doesn't already exist.
[13:40:12] <scott_gonzalez> And maybe repo.fetch( { remote: name }, callback ) if you want to fetch from a named remote.
[13:40:20] <gnarf> scott_gonzalez: i think "git remote update" will do both fetches btw
[13:41:20] <scott_gonzalez> oh, that'd be nice
[13:41:31] <scott_gonzalez> I'll need to test that out.
[13:41:43] <gnarf> http://stackoverflow.com/questions/1204190/does-git-fetch-tags-include-git-fetch
[13:41:47] <gnarf> found it there
[13:42:20] <gnarf> a timestamp on that tag/branch commit might be useful too
[13:42:59] <scott_gonzalez> Yup, already got the timestamps: https://github.com/scottgonzalez/node-git-tools#tags-callback-
[13:44:02] <scott_gonzalez> One nice thing about this project is that I'm learning more about git :-)
[13:44:26] <scott_gonzalez> I've never used for-each-ref before, but I'm using it for a few things in this.
[13:44:48] <scott_gonzalez> Also, using rev-parse to get the current branch.
[13:44:59] <scott_gonzalez> Instead of parsing the output of `git branch` for *
[13:46:30] <gnarf> so the other commands we do
[13:46:53] <gnarf> checkout force the commit, then checkout-index to a folder
[13:51:45] <jqcommit> 01[13infrastructure01] 15gnarf37 pushed 1 new commit to 06puppet-stage: 02https://github.com/jquery/infrastructure/commit/76bf259b4a70bf7391a663e12c48d5c0a8ff2d9e
[13:51:45] <jqcommit> 13infrastructure/06puppet-stage 1476bf259 15Corey Frang: Updating redirect for /test/ urls
[13:52:55] <scott_gonzalez> gnarf: I haven't decided how far I want to go for simple tasks.
[13:53:09] <scott_gonzalez> Like `git checkout -f abc123` is a simple task.
[13:53:18] <gnarf> yeah
[13:53:21] <scott_gonzalez> There's no resulting data that's useful to parse.
[13:53:26] <scott_gonzalez> And there's nothing complicated about it.
[13:53:41] <gnarf> maybe you should just have a util for shelling out to git with an arb command
[13:53:43] <gnarf> like
[13:53:46] <scott_gonzalez> So I don't know if I want to have a repo.checkout( committish )
[13:53:56] <gnarf> .command( "checkout --force abc123" , cb )
[13:53:58] <scott_gonzalez> But you can do repo.exec( "checkout", "-f", "abc123", callback )
[13:54:34] <gnarf> that works
[13:54:35] <scott_gonzalez> Yeah, so we're on the same page for that :-)
[13:55:05] <scott_gonzalez> repo.exec() is just a wrapper around child_process.spawn() with `git` prepended :-)
[14:00:19] <gnarf> cool
[14:00:27] <gnarf> more reading on git remote update
[14:00:32] <gnarf> i dunno if it does the fetch --tags
[14:01:05] <scott_gonzalez> I'll just do a quick test right now.
[14:01:47] <gnarf> yeah
[14:01:56] <gnarf> might also be worth doing --prune
[14:03:54] <gnarf> yeah, remote update didn't grab tags
[14:03:58] <gnarf> grrr git
[14:04:02] <scott_gonzalez> It does not.
[14:10:02] <gnarf> so
[14:10:05] <gnarf> looking in the docs
[14:10:13] <gnarf> This is a short-hand for giving "refs/tags/:refs/tags/" refspec from the command line, to ask all tags to be fetched and stored locally. Because this acts as an explicit refspec, the default refspecs (configured with the remote.$name.fetch variable) are overridden and not used.
[14:10:17] <gnarf> ^^ -tags
[14:10:19] <gnarf> however
[14:10:42] <gnarf> air:2(master)$ git fetch origin "refs/tags/:refs/tags/"
[14:10:42] <gnarf> fatal: Invalid refspec 'refs/tags/:refs/tags/'
