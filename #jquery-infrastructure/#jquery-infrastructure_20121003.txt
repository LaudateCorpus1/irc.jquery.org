[09:31:01] <jzaefferer> gnarf clarkbox ryanneufeld danheberden scott_gonzalez: We're about to release jQuery UI 1.9.0 very soon, we'll need infrastructure support to get sites from stage to live
[09:32:05] <jzaefferer> I'm still clueless about puppet :/
[09:59:49] <clarkbox> ok ill be around
[10:00:01] <clarkbox> jzaefferer
[10:11:28] <jzaefferer> clarkbox: great. So far the idea is to get everything new on the live servers, then switch over the DNS once we're ready
[10:11:33] <jzaefferer> I don't know if that is feasible
[10:13:03] <clarkbox> are there any new domains?
[10:13:30] <clarkbox> if its existing domains, then its just a matter of uploading the files.
[10:13:52] <clarkbox> puppet just provisions the machine, and installs all required services
[10:14:08] <clarkbox> does not take care of assets like HTML
[10:14:33] <clarkbox> i gotta run for now. ill be back on later (2 or 3:00 pacific time)
[10:14:37] <clarkbox> pm
[10:21:05] <jzaefferer> existing domains, yeah, but we want to switch the existing site over to new theme, and everything is different...
[12:52:11] <gnarf> jzaefferer: its doable - DNS is ~1 hr
[12:52:31] <gnarf> jzaefferer: when is soon? You're gonna need me or danheberden to do the domain swap
[17:11:50] <jqcommit> [infrastructure] Krinkle force-pushed testswarm-browserstack from 3f1595b to 8e72218: https://github.com/jquery/infrastructure/commits/testswarm-browserstack
[17:11:50] <jqcommit> [infrastructure/testswarm-browserstack] WIP - services.pp: Puppetize testswarm stuff - Timo Tijhof
[17:18:01] <Krinkle> gnarf: basically what I'm after (tell me if there's a better way) is to create a class for testswarm, and then in services.pp call it with a few parameters (e.g. public_html => /var/www/swarm, mysqldb => testswarm, .. )
[17:18:28] <Krinkle> does that make sense?
[17:18:56] <Krinkle> things like mysql user/password, what is common. Let is be autogenerated by the class, or given to the class specifically?
[17:19:13] <Krinkle> (well, user should be fixed)
[17:32:01] <Krinkle> looking at the wordpress directory for inspiration, combined with the gitclone one
[18:45:12] <ryanneuf_> gnarf: you around?
[18:59:30] <gnarf> ryanneuf_: sup
[18:59:39] <ryanneuf_> o/
[18:59:51] <ryanneuf_> was gonna take a look at my tickets tonight
[18:59:58] <gnarf> Krinkle|detached: it does make sense, please do -- you can use jquery::testswarm if you want
[19:00:01] <ryanneuf_> and was hoping you might be around to assist
[19:00:14] <gnarf> i'll be about
[19:00:21] <ryanneuf_> I left my IRC logged in at work :(
[19:00:25] <gnarf> might need to ping me on skype tho
[19:00:40] <gnarf> ryanneuf_: set up ZNC on a box somewhere, then it wont matter
[19:00:40] <ryanneuf_> how do I kick the other me out?
[19:00:47] <ryanneuf_> ZNC?
[19:01:22] <gnarf> ryanneuf_: its an irc client that is an irc server... a "bouncer" -- you stay connected 24/7 and when you connect to the ZNC you get backlog / you can have two clients connected to the same nick on ZNC
[19:01:40] <ryanneuf_> oooh
[19:01:45] <ryanneuf_> neato
[19:01:56] <ryanneuf_> I'll have to add that to my todo list
[19:01:56] <gnarf> ryanneuf_: /msg nickserv help ghost
[19:02:34] <gnarf> you can ghost ryanneufeld and then change your nick
[19:02:55] <ryanneufeld> WHEEE
[19:12:05] <ryanneufeld> gnarf, I'm just looking at ZNC now...
[19:12:17] <ryanneufeld> I think i'll set up a subdomain on my home server for it
[19:12:40] <gnarf> ryanneufeld: might I also suggest you use SSL irc ports across the whole thing if you don't already :)
[19:12:52] <ryanneufeld> I think I do
[19:13:00] <ryanneufeld> but not a bad idea
[19:15:59] <ryanneufeld> now I want to get this working http://markembling.info/2011/10/dhcp-and-dynamic-dns
[19:25:11] <Krinkle|detached> gnarf: cool, I already started (my internet is flaky today, announced maintenance)
[19:25:53] <Krinkle> gnarf: I started outside jquery namespace, I'm trying to make it general purpose (e.g. our variables as parameters).
[19:26:04] <gnarf> Krinkle: sure
[19:26:09] <gnarf> Krinkle: that works too
[19:26:11] <gnarf> :)
[19:26:16] <Krinkle> So we can maybe publish it somewhere (and I'd like to use it myself, since puppet is awesome)
[19:27:08] <Krinkle> gnarf: one question so far. a "package" statement (e.g package { ['php5', 'php5-mysql', 'git'] : ensure => 'present', require => Class['dotdeb'] })
[19:27:15] <Krinkle> is that automatically a dependency?
[19:27:27] <Krinkle> e.g. should I later in cron {} still have require Package['curl'] ?
[19:27:38] <gnarf> well for a cron {} it prolly doesn't matter
[19:27:42] <gnarf> but theoretically yes
[19:27:46] <gnarf> you should still require those things
[19:27:50] <gnarf> also
[19:27:59] <Krinkle> and if so, do I need both package {} and require => Package[''] ?
[19:28:13] <gnarf> yes, you must define the resource before you require it
[19:28:15] <Krinkle> or is only require => Package[''] sufficient?
[19:28:17] <Krinkle> okay
[19:28:26] <Krinkle> I thought maybe Package[''] is directly
[19:28:47] <Krinkle> i.e. that the package thing has all names predefined as resources
[19:28:48] <gnarf> you can also define resource dependency with -> and <-
[19:29:01] <Krinkle> yeah, I saw that in some docs
[19:29:15] <Krinkle> wasn't sure if it meant the same
[19:29:36] <gnarf> <- and -> just make more sense sometimes
[19:29:36] <Krinkle> I guess that's useful if there is a long list of things linear dependent, right?
[19:29:41] <gnarf> yeah
[19:29:44] <Krinkle> (to avoid a  require b, require c etc.
[19:30:39] <Krinkle> I see we mostly use $name to ensure uniqueness in resources, but I also see $title in the documentation. I know that $name can be overwritten, $title can't
[19:30:42] <Krinkle> docs say use $title if in doubt
[19:30:46] <Krinkle> what's your take?
[19:30:56] <Krinkle> e.g. in an exec { "do foo" }
[19:31:27] <Krinkle> I currently put " $name" after it
[19:33:37] <Krinkle> gnarf: is the scope of the names of resources global? I think it is (which is why many manifests on the net put $name in it)
[19:33:49] <gnarf> Krinkle: yes
[19:33:57] <Krinkle> gnarf: but in zabbix::proxy  is a "exec{ 'initialize_proxy_db': .. }"
[19:34:01] <Krinkle> which seems rather generic
[19:34:11] <Krinkle> so, bad example I suppose?
[19:34:14] <gnarf> Krinkle: yup
[19:34:17] <Krinkle> okidoki
[19:34:41] <gnarf> Krinkle: first come first conflict :)
[19:34:44] <Krinkle> gnarf: I see over a dozen ways to create mysql user and populate database. Note sure which to pick.
[19:35:04] <Krinkle> I understand that calling mysql_user {} is redundant as mysql::rights already does that
[19:35:09] <Krinkle> so that's taken care of.
[19:35:18] <Krinkle> but what about creating the schema
[19:36:09] <gnarf> Krinkle: https://github.com/jquery/infrastructure/blob/puppet-master/modules/wordpress/manifests/init.pp#L60-69
[19:36:22] <gnarf> i wouldn't create schema in puppet
[19:36:54] <gnarf> the software should be able to "install" assuming it has the correct credentials
[19:36:57] <gnarf> imo
[19:36:59] <gnarf> but
[19:37:27] <Krinkle> yeah, I already have database and rights set up (took it from zabbix::server, same snippet basically)
[19:37:49] <Krinkle> gnarf: I see some do exec /usr/bin/mysql and import it by path
[19:38:07] <Krinkle> oh nevermind, silly me
[19:38:10] <gnarf> you could do that, but the issue is making sure to only run it once
[19:38:15] <Krinkle> gnarf: sure
[19:38:18] <Krinkle> I already abstracted this in testswarm
[19:38:22] <Krinkle> scripts/dbInstall.php
[19:38:28] <gnarf> i was gonna say tho, yeah something like that
[19:38:31] <gnarf> thats the way it should go
[19:38:36] <Krinkle> which doesn't re-install unless --force is given
[19:38:44] <Krinkle> (which nukes it and re-installs)
[19:38:49] <Krinkle> alrighty
[19:39:11] <gnarf> Krinkle: you could exec it every time then, or have it create a file that puppet can look for
[19:39:21] <Krinkle> yeah
[19:39:23] <Krinkle> btw, I'm getting a parse error I can't seem to get rid of.
[19:39:28] <Krinkle> Error: Could not parse for environment production: Syntax error at 'ensure'; expected '}' at /Users/krinkle/Development/github/jquery/infrastructure/modules/testswarm/manifests/init.pp:34
[19:39:34] <Krinkle>   mysql::rights { "$mysql_user"
[19:39:34] <Krinkle>     ensure   => 'present',
[19:39:34] <Krinkle>     database => $mysql_database,
[19:39:36] <Krinkle>     user     => $mysql_user,
[19:39:38] <Krinkle>     password => $mysql_password,
[19:39:40] <Krinkle>   }
[19:39:45] <gnarf> Krinkle: no : after the name
[19:39:49] <gnarf> also
[19:39:52] <gnarf> no need to quote "present"
[19:40:10] <Krinkle> Following puppet style guide, quote all values, unquote keys
[19:40:28] <gnarf> sure, still need a : after the name tho ;)
[19:40:37] <Krinkle> yeah
[19:40:41] <Krinkle> I never mind, I misread
[19:40:45] <Krinkle> it didn't mean those values
[19:40:56] <Krinkle> thx, missed the colon indeed. new language :)
[19:42:05] <Krinkle> I'll show the progress so far
[19:42:15] <jqcommit> [infrastructure] Krinkle force-pushed testswarm-browserstack from 8e72218 to 91a837d: https://github.com/jquery/infrastructure/commits/testswarm-browserstack
[19:42:15] <jqcommit> [infrastructure/testswarm-browserstack] WIP - services.pp: Puppetize testswarm stuff - Timo Tijhof
[19:42:58] <Krinkle> https://github.com/jquery/infrastructure/blob/91a837d57bcda0cbd4957df7f0a4d89d6e4b88d5/modules/testswarm/manifests/init.pp
[19:43:37] <gnarf> Krinkle: so, you're gonna run into an issue with the Package deps defined in the testswarm pp file -- because if anything else defines the same package its an error...
[19:44:07] <Krinkle> hm.. because the resource name of package {} must be unique
[19:44:13] <gnarf> yup
[19:44:19] <Krinkle> so how is this usually solved?
[19:44:42] <gnarf> you generally don't define the package unless you're responsible for installing it
[19:44:49] <gnarf> you can just be like "requires these packages
[19:45:02] <gnarf> or
[19:46:11] <gnarf> its actually a pretty common puppet issue
[19:46:20] <gnarf> i'm sure theres a decent google result on ways to handle
[19:46:32] <Krinkle> I would expect Package to be like a nameless thing
[19:46:52] <Krinkle> like there would be no package {} syntax only Package['..']
[19:47:17] <gnarf> actually
[19:47:44] <gnarf> package { 'swarm php5-imagick':  name => 'php5-imagick', ensure => 'installed', }
[19:47:51] <gnarf> or something like that
[19:48:23] <gnarf> some good answers on https://groups.google.com/forum/?fromgroups=#!topic/puppet-users/z9gEuwDasL4
[19:48:35] <Krinkle> hm.. seems a bit odd, I mean the packages already have a name. should be able to use that multiple times
[19:48:36] <Krinkle> lets see
[19:49:17] <Krinkle> gnarf: hm.. but 'swarm php5-mysql' would still not be unique enough though, right?
[19:49:25] <Krinkle> if there are 2 instances of testswarm class
[19:49:29] <gnarf> truth
[19:49:33] <gnarf> but if its a class
[19:49:35] <gnarf> there can't be two
[19:49:40] <gnarf> it should be a define if there can be two
[19:50:22] <gnarf> Krinkle: the virtual resources is the "right way"
[19:50:37] <Krinkle> I want to like, do, in a node or some other class: testswarm { (optional name:) server => 'swarm.jquery.org' } testswarm { (optional name:) server => 'swarm.jqueryui.com' }
[19:50:40] <gnarf> Krinkle: the just include the packages in another place and say you require them in the readme
[19:50:41] <Krinkle> (for example)
[19:50:48] <Krinkle> "virtual resources"
[19:51:10] <gnarf> Krinkle: using realize and virtual resources - the link i posted earlier had an example
[19:51:30] <Krinkle> ok, reading ^ now + http://docs.puppetlabs.com/guides/virtual_resources.html
[19:51:47] <gnarf> Krinkle: but to "get it done" just include the packages in the node and require them from the package
[19:52:17] <gnarf> Krinkle: the users module uses virtual resources, thing is, two packages can realize the same virtual and not conflict
[19:52:25] <Krinkle> right
[19:53:05] <gnarf> if you require a resource and it isn't defined it will complain, so its safe enough to ask the "user" of the module to add those packages
[19:53:11] <gnarf> or
[19:53:24] <gnarf> make a swarm::packages class that requires them
[19:54:15] <Krinkle> without a package {} ?
[19:54:45] <Krinkle> so I will convert this to a define instead of a class I guess
[19:55:52] <Krinkle> so you recommend leaving out the package {} statements and using only require Package['name'], and instruct the user to have those packages defined?
[19:56:05] <gnarf> Krinkle: easiest path for now, yes
[19:58:18] <gnarf> ryanneufeld: how much longer you gonna want me "around" to help? :)
[19:59:49] <Krinkle> gnarf: lol, found the ultimate solution http://www.creativeeducationalsystems.com/web_files/COH-Puppet-package.html
[19:59:51] <Krinkle> thanks good
[19:59:53] <Krinkle> thanks google
[20:00:03] <Krinkle> Puppetry : Conflict Resolution
[20:00:12] <Krinkle> Early Childhood "Package"
[20:00:40] <gnarf> heh
[20:19:37] <ryanneufeld> gnarf: not sure
[20:19:54] <ryanneufeld> if you gotta go, I'm sure I'll be able to break it myself
[20:20:06] <ryanneufeld> I was just wondering about that zabbix script
[20:20:28] <ryanneufeld> should it be part of the zabbix module, or the nginx module, or maybe the jwuery module
[20:20:36] <ryanneufeld> I'm' just not sure where it really belongs
[20:21:49] <gnarf> ryanneufeld: make it jquery::nginx which then uses zabbix/nginx
[20:22:02] <gnarf> so rather than including nginx as we do now, we include jquery::nginx
[20:22:22] <gnarf> seems smart?
[20:22:25] * gnarf shrugs
[20:22:30] <ryanneufeld> smrt
[20:22:46] <ryanneufeld> I'm actually just starting now
[20:22:50] <gnarf> ryanneufeld: "webhost" could work as a temp testing ground
[20:22:55] <ryanneufeld> I was eating/applying for jobs
[20:22:58] <gnarf> i think that is just the generic "nginx host"
[20:23:02] <gnarf> right?
[20:23:13] <ryanneufeld> how do i know?
[20:23:49] <gnarf> https://gist.github.com/f7ba65cc8051784e1547
[20:24:03] <gnarf> seems like all the nginx servers include webhost
[20:24:33] <gnarf> but jquery::nginx makes sense too
[20:24:40] <gnarf> whatevers clever ryanneufeld ;)
[20:24:46] <ryanneufeld> yeah
[20:24:59] <gnarf> just make webhost include jquery::nginx instead of nginx
[20:25:03] <gnarf> boom
[20:25:19] <ryanneufeld> the whole things a bit overwhelming for one that knows little of the puppet world
[20:26:23] <gnarf> ryanneufeld: well thats why we got vagrant test boxes :)
[20:26:30] <ryanneufeld> ha
[20:26:30] <ryanneufeld> yeah
[20:26:42] <ryanneufeld> if I fuck it up I can just start over
[20:26:45] <ryanneufeld> love that
[20:27:13] <Krinkle> gnarf: Sublime Text 2?
[20:27:46] <Krinkle> (the gist gave it away, if it is)
[20:28:10] <ryanneufeld> haha, yeah
[20:28:14] <gnarf> Krinkle: aye
[20:28:17] <Krinkle> me too
[20:28:19] <Krinkle> love it
[20:28:21] <ryanneufeld> I <3 st2
[20:28:35] <Krinkle> using a puppet syntax lighter?
[20:28:40] <ryanneufeld> ruby
[20:28:52] <Krinkle> (since it doesn't have one by default_
[20:28:54] <ryanneufeld> set .pp files to open with ruby syntax
[20:29:01] <ryanneufeld> pp is ruby mostly
[20:29:13] <ryanneufeld> (friend learned this at puppet conf)
[20:29:15] <gnarf> the syntax for textmate works
[20:29:18] <Krinkle> I installed this one https://github.com/eklein/sublime-text-puppet/
[20:29:21] <Krinkle> yeah
[20:30:11] <ryanneufeld> nginx's rewrite rules are so much easier to make sense of
[20:30:14] <ryanneufeld> like srsly
[20:31:04] <ryanneufeld> so gnarf in the webhost we include nginx
[20:31:11] <ryanneufeld> you're suggesting I make jquery::nginx
[20:31:15] <ryanneufeld> and use that instead?
[20:31:30] <gnarf> yup
[20:31:42] <gnarf> and let that install the zabbix stuff to monitor too
[20:31:58] <gnarf> class that includes the other class
[20:32:11] <gnarf> or extends it, whatever thats called
[20:32:19] <ryanneufeld> what's the best box to test with?
[20:32:21] <ryanneufeld> jq02?
[20:33:07] <gnarf> class jquery::nginx inherits nginx
[20:33:13] <gnarf> thats it
[20:33:36] <gnarf> ryanneufeld: jq01 has less git cloning i think
[20:33:37] <gnarf> :)
[20:33:41] <ryanneufeld> ok
[20:34:15] <ryanneufeld> so what's the diff between jq01 and jq01.stage?
[20:34:27] <gnarf> theoretically nothing
[20:34:41] <gnarf> but there are a few diffs... one has the "stage." prefix in the wordpress settings
[20:35:02] <gnarf> it should use the puppet --environment="stage"
[20:35:39] <gnarf> so you can $var = $::environment ? { stage => "value", default => "other value" }
[20:35:52] <ryanneufeld> ah
[20:36:08] <gnarf> im not sure if it does tho
[20:36:31] <gnarf> vagrant that is
[20:36:34] <gnarf> puppet definitely does
[20:36:38] <gnarf> on the server
[20:36:52] <gnarf> also the "stage" servers read from the puppet-stage branch
[20:36:59] <ryanneufeld> okay
[20:36:59] <gnarf> where the non-stage servers are on puppet-master
[20:37:10] <ryanneufeld> I'm gonna fix that bloddy puppet shell provisioner
[20:37:26] <ryanneufeld> why are we installing it from the deb instead of the repo?
[20:37:30] <gnarf> ryanneufeld: if you can make us a .box - I'm interested in saving all that time
[20:37:42] <gnarf> just start with the right version installed
[20:37:46] <ryanneufeld> yeah
[20:37:54] <ryanneufeld> I'm not sure I understand what the difference is
[20:38:10] <gnarf> we should install from the puppetlabs repo
[20:38:22] <gnarf> the latest
[20:38:44] <gnarf> you can do that in the .box and we can update it when a new version is released right?
[20:38:46] <ryanneufeld> gnarf: https://gist.github.com/3a5a3109b2ce8ae0438f
[20:38:47] <ryanneufeld> tf?
[20:39:10] <ryanneufeld> gnarf: it would actually be better to let puppet manage the install of itself
[20:39:21] <ryanneufeld> you can have puppet ensure package puppet latest
[20:39:34] <ryanneufeld> and I'm wondering if there is a repo we can install or something
[20:40:07] <gnarf> ryanneufeld: yeah, puppetlabs
[20:40:37] <gnarf> ryanneufeld: whats the diff ?
[20:41:03] <ryanneufeld> it just seems like a pain in the ass to manage the deb file
[20:41:10] <ryanneufeld> and the way we're doing it now
[20:41:15] <ryanneufeld> if the latest breaks shit
[20:41:18] <gnarf> ryanneufeld: https://gist.github.com/baae7c8c3fb0541f8f01
[20:41:40] <ryanneufeld> hm
[20:41:45] <ryanneufeld> did you see the error in mine
[20:41:45] <ryanneufeld> ?
[20:41:48] <gnarf> ryanneufeld: there is a shell script dan wrote
[20:41:52] <gnarf> ryanneufeld: yeah, can't repro
[20:41:53] <ryanneufeld> yes
[20:41:56] <gnarf> whats your git diff ?
[20:41:56] <ryanneufeld> it's broken
[20:42:20] <gnarf> ryanneufeld: do you have gist-diff installed?
[20:42:26] <ryanneufeld> https://gist.github.com/99bf63bba4786c967e76
[20:42:30] <ryanneufeld> no
[20:42:32] <ryanneufeld> I don't
[20:42:51] <gnarf> https://github.com/scottgonzalez/pretty-diff @ryanneufeld
[20:43:33] <ryanneufeld> ohic
[20:44:22] <gnarf> ryanneufeld: stage some shit and git gd head
[20:44:46] <ryanneufeld> I might have to install node
[20:44:59] <ryanneufeld> I don't use node for anything at the momeny
[20:45:03] <ryanneufeld> *moment
[20:45:24] <gnarf> do it
[20:45:27] <gnarf> its easy
[20:45:28] <ryanneufeld> brew install node
[20:45:29] <gnarf> use nave
[20:45:53] <gnarf> ryanneufeld: https://github.com/isaacs/nave
[20:45:58] <gnarf> nave usemain stable
[20:46:39] <ryanneufeld> the fact that tool exists scares the shit out of me
[20:47:01] <ryanneufeld> that nodejs is changing so much that you'd need to have a tool to manage the versions like taht
[20:47:18] <gnarf> ryanneufeld: its nice tho
[20:47:24] <gnarf> you can test old versions easy
[20:47:36] <ryanneufeld> fairnuff
[20:50:41] <ryanneufeld> 0.8.11?
[20:50:55] <gnarf> sure if thats stable :)
[20:54:53] <ryanneufeld> gnarf: https://gist.github.com/66b400b8a7f85511d961
[20:55:33] <ryanneufeld> scott_gonzalez: https://gist.github.com/66b400b8a7f85511d961 ?
[20:55:40] <gnarf> scott_gonzalez: broken? :)
[20:56:09] <gnarf> ryanneufeld: you can just git diff head | pbcopy and paste it in a gist? :)
[20:56:33] <ryanneufeld> I have this in my git config
[20:56:39] <ryanneufeld> github.user=username
[20:56:39] <ryanneufeld> github.token=88c34dbda5540eeb82c6fada74c2c4cb
[20:56:45] <gnarf> doh
[20:56:51] <gnarf> ryanneufeld: public logged, change that :)
[20:57:10] <ryanneufeld> how?
[20:58:00] <gnarf> ryanneufeld: https://github.com/settings/applications maybe?
[20:58:41] <ryanneufeld> that might have been from the github app
[20:59:55] <gnarf> might havd
[21:05:35] <ryanneufeld> https://gist.github.com/99bf63bba4786c967e76
[22:07:25] <gnarf> https://gist.github.com/3847e38b62f8283e332a
[22:18:36] <Krinkle> gnarf: Any idea how to allow a config file to be extended? I've got settings.json.erb with a few <% vars %>
[22:18:42] <Krinkle> I considered this:
[22:18:45] <Krinkle> <%# If there is more JSON, add a comma first%>
[22:18:45] <Krinkle> <% if @settings_extra %>
[22:18:45] <Krinkle> , <%= @settings_extra %>
[22:18:46] <Krinkle> <% end %>
[22:18:53] <Krinkle> but that doesn't work if it tries to extend a key that is already in that object.
[22:19:38] <ryanneufeld> that seems like a pain in the ass to maintain
[22:19:50] <ryanneufeld> like who would understand that if you got hit by a bus?
[22:19:57] <gnarf> :)
[22:20:08] <Krinkle> exactly
[22:20:11] <gnarf> are there settings?
[22:20:17] <Krinkle> https://github.com/Krinkle/infrastructure/commit/b0974538fbf6b95e4ca54ae33362b515effdf54b#diff-4
[22:20:19] <gnarf> why not make them config vars on the class ?
[22:20:24] <Krinkle> I have
[22:20:50] <Krinkle> but the "web" property can contain more
[22:21:04] <gnarf> define all the defaults possible
[22:21:25] <Krinkle> Maybe its possible to create a hash in puppet and convert to puppet (not using erb)
[22:21:33] <ryanneufeld> DEFINE ALL THE THINGS!!
[22:21:34] <Krinkle> gnarf: that's not an option
[22:21:45] <Krinkle> because there is freeform options
[22:22:06] <Krinkle> let me show you
[22:22:15] <Krinkle> https://github.com/jquery/testswarm/blob/master/config/settings-default.json#L35
[22:22:22] <Krinkle> browserSets can contain anything
[22:22:40] <Krinkle> by default there is 'default' and 'currentDesktop'
[22:22:48] <Krinkle> one can add 'mobile' or 'popular' or 'whatever'
[22:23:07] <ryanneufeld> when your settings file get's that complec
[22:23:12] <ryanneufeld> it's time for a DB
[22:23:12] <gnarf> why aren't these settings in mysql?
[22:23:21] <Krinkle> Nonsense
[22:23:41] <Krinkle> so one should be able to just pass in the path to a json file or string
[22:24:40] <Krinkle> db doesn't make sense, some of these can be overridden per-job from nodejs cli
[22:24:53] <Krinkle> e.g. some we pass from grunt even in jquery/jquery
[22:26:00] <Krinkle> anyway, ideally I'd have a simple hash in the puppet define, and then something like $.extend() and then toJSON it (either from within puppet content => toJSON( settings ), or within ruby perhaps with a 1 line template)
[22:26:29] <gnarf> Krinkle: it seems bad to try to maintain this file in puppet then
[22:26:55] <gnarf> you don't just build like dynamic config hashes and export them using puppet
[22:27:34] <gnarf> json config files are really hard for this
[22:27:46] <Krinkle> it used to be PHP ini ;-)
[22:27:57] <gnarf> almost easier
[22:28:04] <Krinkle> not really
[22:28:12] <Krinkle> not the way it was implemented
[22:28:23] <Krinkle> anyway, I'll figure it out. Got a few ideas already.
[22:28:29] <ryanneufeld> I think you're abusing puppet for this
[22:28:29] <ryanneufeld> puppet's main purpose is for systems configuration management. It seems like you're attempting bend it to configure an app
[22:28:48] <Krinkle> I'm not.
[22:29:11] <gnarf> will i need to edit puppet to change browser sets?
[22:29:18] <Krinkle> No
[22:29:22] <Krinkle> It shouldn't
[22:29:31] <Krinkle> What I'm trying to do is make it install testswarm. No more no less.
[22:29:52] <Krinkle> However these are the things I hit, I don't want it this way any more than you do.
[22:30:14] <gnarf> like, we just git cloned it
[22:30:18] <gnarf> and then config it
[22:30:31] <Krinkle> Anyway, I've got an idea, that will also fix a pending bug we have in Wikimedia. Namely the option to store the config file somewhere else
[22:30:32] <ryanneufeld> configure puppet to clone a different branch
[22:30:57] <gnarf> it seems like that browser sets should be in a different json imo
[22:31:00] <Krinkle> somewhere not in public html.
[22:31:00] <gnarf> or in the db
[22:31:08] <gnarf> somewhere not in a config file?
[22:31:17] <gnarf> beyond mysql info, most of the "config" can be DB
[22:31:28] <gnarf> right?
[22:31:38] <Krinkle> I know it can be, but in this case that doesn't make it easier for anything except this.
[22:33:07] <gnarf> so, instead of battling the issue that testswarm seems overly reliant on this single flat file config, you battle building crazy complex/custom json files in puppet?
[22:33:16] <Krinkle> No, not at all
[22:33:22] <Krinkle> I'm improvising, one step at a time.
[22:33:24] <gnarf> im just trying to understand whtas happening i guess
[22:33:25] <gnarf> :)
[22:33:33] <Krinkle> Now this fails, so I'm going back into testswarm and fix it there.
[22:34:05] <gnarf> Krinkle: in general the way you handle this problem in puppet is using the "conf.d" style configs
[22:34:09] <Krinkle> if it worked easily in puppet, there was no reason to spend half a day changing testswarm to implement a low priority feature
[22:34:25] <Krinkle> so I just tried quickly
[22:34:28] <gnarf> just doesn't work with flat JSON
[22:34:40] <Krinkle> forget about JSON
[22:39:22] <Krinkle> Instead of enforcing from testswarm internals that there must be a settings.json file in ./config, I'll instead make it a 1-line php file
[22:39:37] <Krinkle> which is sample- (in other words, not part of the repo, but for local installs)
[22:39:56] <Krinkle> by default it will (for simple installs and b/c) just load settings.json
[22:40:10] <Krinkle> for more advanced installs it can load it from /etc/ or puppet or mix and merge.
[22:40:16] <jqcommit> [infrastructure] ryanneufeld pushed 1 new commit to puppet-stage: https://github.com/jquery/infrastructure/commit/c798ab65239851f9469086b52f2d93b00ff0d062
[22:40:16] <jqcommit> [infrastructure/puppet-stage] Squashed commit of the following: - Ryan Neufeld
[22:40:40] <Krinkle> it also avoids situations where someone messes up apache/nginx and exposes databse passwords on swarm.example.org/config/settings.json
[22:40:41] <Krinkle> :)
[22:40:59] <Krinkle> which, if it weren't for the fact that it was already like that, I'd make a requirement.
[22:41:35] <jqcommit> [infrastructure] ryanneufeld pushed 1 new commit to puppet-master: https://github.com/jquery/infrastructure/commit/c138cb40f5759a3265e119832167240f1325e785
[22:41:35] <jqcommit> [infrastructure/puppet-master] Squashed commit of the following: - Ryan Neufeld
[22:48:02] <gnarf> sleepy time for me
[22:51:44] <gnarf> I'm just going from like most every other app btw with the "put those options in the db setup" suggestion
[22:52:17] <gnarf> like wordpress's settings are pretty specific too tho, its just not a great target for puppeting some things
[23:22:38] <Krinkle> wordpress is actually pretty sweet
[23:22:56] <Krinkle> for server stuff you can hardcode them in wp-config.php and for anything else there is a GUI in the database
[23:23:28] <Krinkle> and wp-config rules last
[23:24:00] <Krinkle> "GUI in the database", there is a web GUI in wp-admin that saves to mysql.
