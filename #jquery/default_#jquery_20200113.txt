[11:01:14] <zenox> hi, so i'm trying to iterate over a collection using $collection.each(index => { console.log($(this).html())}); but i'm seeing the whole html output for the page, not the individual selector
[11:01:57] <zenox> however, if i look with a for, and be like $collection.get(3).name - i see the name of the selection (an input), so i know my selector is fine
[11:02:17] <zenox> i've checked the docs on .each and don't see what i'm doing wrong
[11:02:33] <zenox> and i see it's mighty quiet in here too!
[11:33:44] <shoky> zenox: `this` behaves differently in arrow functions - it gets the same value as it had outside the function.  not really good for using jquery's `this`
[11:34:42] <shoky> zenox: either don't use an arrow function, or instead of using `this`, use the 2nd argument to the .each callback which is the element
[12:21:57] <zenox> shoky - thanks, i realised and fixed :)
[12:22:28] <zenox> i chose the 2nd param as it's explicit... and saves me writing "function(...)"
[14:02:19] <dFence> hey guys! I got some strange behavior: I’m rendering a form with one element that allows to add elements (html template is stored in a data-prototype attribute); I’m listening to the „Add“ button via $('parentNode‘).on('click‘, '#add-button‘) – for some reason, the click-element is called twice; any idea why the event is triggered twice?
[14:02:33] <robertmaxrees> we'd need to see the code.
[14:03:37] <robertmaxrees> dFence i say that because it could be any number of reasons.  Maybe you're binding twice, or maybe you're running into some weird triggering scenario.
[14:04:27] <dFence> robertmaxrees: I only get one element back on the selector; one sec, I’ll throw together a fiddle
[14:06:53] <SylvanCyborg> dFence: is #add-button a unique element, or are there many?
[14:07:07] <SylvanCyborg> cause if many, use a class not an id
[14:07:15] <dFence> SylvanCyborg: I simplified it a bit for sake for brevity
[14:07:50] <robertmaxrees> SylvanCyborg in this particular case, that wouldn't explain the issue :)
[14:12:02] <dFence> oh great… fiddle kills unsaved code when you change the layout -_-
[14:12:17] <robertmaxrees> wat
[14:13:10] <dFence> https://jsfiddle.net/0t7w4sou/  I’ve shrunk it down to the „offending“ bit
[14:13:40] <dFence> it’s a nested expandable, the „Band“ and „Colors“ bits are both running through the same code
[14:13:49] <robertmaxrees> so how do i replicate the bug?
[14:13:58] <dFence> robertmaxrees: hit „Add Color"
[14:14:11] <dFence> it should only add one row under „colors“, instead it gets fired twice
[14:14:12] <robertmaxrees> alright.
[14:14:33] <dFence> I can reproduce the issue when some „Color“ elements are already in the original DOM, only if I start blank it works properly
[14:14:58] <dFence> so the fiddle is the „edit“ scenario
[14:15:04] <SylvanCyborg> dFence: also, use $(document).on('click', 'selector...
[14:15:05] <dFence> with some elements already present from the start
[14:15:20] <SylvanCyborg> that will bind both existing and newly created elements
[14:15:30] <robertmaxrees> SylvanCyborg so will the version he has here.
[14:15:46] <robertmaxrees> binding to document is a bad idea - you want to scope down to the relevant component.
[14:16:22] <robertmaxrees> dFence i see the issue.
[14:16:44] <robertmaxrees> [data-append=true] - you've got one nested within the other.
[14:17:03] <dFence> holy shitbiscuits it works!
[14:17:18] <robertmaxrees> :)
[14:17:19] <dFence> robertmaxrees: thanks!!!
[14:17:44] <robertmaxrees> definitely :)
[14:17:46] <dFence> I assumed that since I needed something already present in the DOM at the $.ready, I need to go only up to the parent node
[14:17:56] <robertmaxrees> well.
[14:18:03] <robertmaxrees> i wouldn't nest the way you are here.
[14:18:22] <dFence> what do you suggest?
[14:18:23] <robertmaxrees> also: storing templates in data attributes is kinda weird.  same with selecting on attributes.
[14:18:48] <robertmaxrees> you're nesting a data-append within a data-append.  that makes your code really difficult to grok.
[14:19:29] <robertmaxrees> also: mixing/matching data attributes with the .data() method in jquery can lead to some really nasty bugs, since they don't necessarily access the same thing.
[14:19:59] <dFence> gotcha, I’ll try and clean it up a bit
[14:20:01] <dFence> cheers mate!
[14:20:10] <robertmaxrees> happy hacking
[14:37:51] <dFence> while I’m here: want to prefill the „*_bandOrder“ input-elements when appending elements with the current index - how can I grab the element?
[14:39:12] <robertmaxrees> updated fiddle?
[14:41:19] <robertmaxrees> is it the element you're creating from that "prototype" data attribute?
[14:44:16] <dFence> robertmaxrees: yup
[14:44:35] <dFence> it’s stored in the newForm
[14:45:06] <robertmaxrees> let newForm = prototype; uhhh
[14:45:08] <robertmaxrees> why do you do that?
[14:45:35] <dFence> robertmaxrees: still of a work in progress - it’s based on the sample code from symfony; once it’s working, I’ll clean it up
[14:45:41] <robertmaxrees> heh
[14:46:14] <robertmaxrees> either way, you're basically alreadyu doing that in a few spots.
[14:47:19] <dFence> robertmaxrees: yeah, but via regex-replace
[14:47:37] <robertmaxrees> so you're asking how you'd instead do it using jquery?
[14:49:20] <dFence> robertmaxrees: the bandOrder-input is empty in the prototype, I’d like to prefill it before the .append() call
[14:49:50] <dFence> I thought using jquery might be more elegant, if regexReplace is more suitable, by all means
[14:49:52] <robertmaxrees> right, and i'm saying that it looks like you already have a way to do that, so I'm confused :)
[14:49:56] <robertmaxrees> ah.
[14:50:01] <robertmaxrees> just had to say as much.
[14:50:05] <robertmaxrees> you'd do something like const $newForm = $(newForm);  $newForm.find('.whatever').val('foo');
[14:50:06] <dFence> :)
[14:50:17] <robertmaxrees> and then make sure $newForm is what gets modified/appended.
[14:50:20] <dFence> and then append $newform?
[14:50:29] <dFence> gotcha, let me take it for a spin
[14:54:24] <dFence> now we’re cooking!
[14:55:05] <robertmaxrees> fwiw you should really look into using a templating engine at some point.
[14:55:31] <robertmaxrees> jquery can do fine in a pinch, but it's not very good at it.
[17:52:58] <Lucenut> Any jquery gurus want to take a look at my attempt at asych posting? https://pastebin.com/YfPhgiNx
[17:53:17] <Lucenut> It's a grid of "Contacts" inside another page/form.
[17:53:46] <robertmaxrees> posting the source for a coldfusion file that's hundreds of lines long with a vague question is a great way to not get responses ;)
[17:53:51] <robertmaxrees> share out just the JS.
[17:53:51] <Lucenut> The handlers I have for add/edit/delete "work" when the page first loads.
[17:54:24] <Lucenut> But then the next click on my buttons does nothing. But then click AGAIN and they work again.
[17:54:36] <robertmaxrees> Lucenut ^ see my feedback for you.
[17:54:46] <Lucenut> I was still typing. :-)
[17:55:05] <Lucenut> I was still typing. :-)
[17:55:14] <Lucenut> Oops.
[17:55:26] <Lucenut> Most  people want to see MORE code.
[17:55:35] <robertmaxrees> start with just the relevant bits.
[17:56:08] <robertmaxrees> the relevant JS and markup, that is.
[18:02:05] <Lucenut> https://pastebin.com/TPVpjWYZ
[18:02:25] <robertmaxrees> :|
[18:02:40] <robertmaxrees> binding handlers within other handlers is a really bad idea.
[18:02:40] <Lucenut> That is the basic grid row with edit/delete links.
[18:03:11] <robertmaxrees> .#editContact also doesn't make sense.
[18:03:14] <Lucenut> Hmm, I'm not a professional js guy. What do you mean by that?
[18:03:35] <robertmaxrees> so you have $('body').on('click', '.#editContact', function(event) { and then first line after that you have $("#editContact").on("click", function(event) {
[18:04:03] <robertmaxrees> fix that first one to be $('body').on('click', '#editContact', function(event) { and then remove that inner .click()
[18:04:13] <Lucenut> The edit image calls this coldfusion template that changes that row in the grid to form inputs.
[18:04:41] <Lucenut> OK, thanks. Lemme try that.
[18:04:55] <robertmaxrees> fwiw '.#editContact isn'
[18:05:05] <robertmaxrees> *isn't a thing.  it's either .editContact or #editContact
[18:08:42] <Lucenut> Holy shit! I think that was it!
[18:08:52] <robertmaxrees> do you understand what you were doing wrong?
[18:08:53] <Lucenut> Thanks Robert.
[18:09:04] <Lucenut> I think they are all firing first click now.
[18:10:20] <robertmaxrees> right, do you understand what you were doing before vs what you're doing now?
[18:11:34] <Lucenut> Slightly yes. I was kinda cribbing ideas from googling.
[18:11:50] <robertmaxrees> do you understand the difference between the two syntaxes tho?
[18:14:00] <Lucenut> Not 100%. I started just using click() then found .onclick(), then found the body onclick().
[18:14:09] <robertmaxrees> heh
[18:14:22] <robertmaxrees> i would read up and understand the differences between .on() and .click()
[18:14:24] <Lucenut> Got working better each time.
[18:14:31] <Lucenut> OK
[18:19:11] <robertmaxrees> you should give https://learn.jquery.com/ a go.
[18:19:24] <robertmaxrees> it'll cover the basics and help you better understand things :)
