[09:07:02] <Phruis`> does the serialize method assign the values "on"
[09:07:05] <Phruis`> to checkboxes
[09:09:46] <Phruis`> why doesn't it use the default values
[09:18:49] <Cork> Phruis`: it doesn't and it does
[09:19:16] <Cork> but most forms has two places for the name used in checkboxes
[09:19:30] <Cork> one hidden field and one that is the checkbox
[09:19:39] <Cork> the on might comes from the hidden field
[09:23:45] <Phruis`> strange because i am going over something i didn't design and the fields I put in have no value of "on" but that is what is passed
[09:23:58] <Phruis`> one form using serialize and the other just a post
[09:24:06] <Phruis`> the post is "true" the serialize is "on"
[09:25:00] <Cork> Phruis`: if a checkbox have no value attribute they get the value "on" from the browser
[09:25:10] <Cork> but this is not a jquery value
[09:25:20] <Cork> it is just what the field gets if there is no value
[13:16:07] <z1haze> how could i get `this` inside the callback of debounce? $formsToScrub.find(':input:not(:hidden)').on('input', debounce(async function () {
[13:16:48] <robertmaxrees> which debounce are you using?
[13:16:54] <z1haze> just made my own
[13:17:05] <z1haze> hang on ill put it up
[13:17:12] <robertmaxrees> might just be able to do }.bind(this) on the function.
[13:17:14] <z1haze> https://jsfiddle.net/z1haze/whf5nLrc/13/
[13:17:15] <robertmaxrees> not sure though.
[13:17:35] <z1haze> that's probably correct. ill try
[13:17:38] <z1haze> thank you
[13:17:47] <taplar> do you actually need the `async` keyword?
[13:18:13] <z1haze> it helps yeah, theres a lot of async stuff going on in there
[13:18:25] <taplar> but it's associated with an event handler
[13:18:28] <robertmaxrees> ^
[13:18:34] <z1haze> so?
[13:18:35] <taplar> which are already inheriently asynchronous in nature
[13:18:45] <z1haze> yeah but you can't use async await without it
[13:18:50] <robertmaxrees> huh?
[13:18:59] <z1haze> `await updateForm($form);`
[13:19:07] <robertmaxrees> the handler itself doesn't need to be async tho.
[13:19:13] <robertmaxrees> you're already debouncing it.
[13:19:14] <z1haze> in order to use that syntax, you have to prefix the function with async
[13:19:27] <robertmaxrees> you likely doin't need to await at all though.
[13:19:32] <z1haze> so? there's still async actions that happen in the event handler
[13:19:33] <z1haze> i do
[13:19:37] <z1haze> i can just show you i guess
[13:20:03] <z1haze> https://bpaste.net/AEIA
[13:20:18] <robertmaxrees> async/await is only useful when the function calling yours needs to wait on the inner asynchronous function to complete.
[13:20:23] <robertmaxrees> event handlers don't need that,.
[13:20:30] <z1haze> see the paste, it does.
[13:21:13] <robertmaxrees> ah.  gotcha.  lots going on in there.
[13:21:35] <z1haze> its been a change handler for a long while now
[13:21:40] <z1haze> im experimenting with the debounce
[13:21:45] <z1haze> trying to cut back on ajax calls
[13:22:03] <z1haze> browser autofill is sometimes sending like 5 requests
[13:22:42] <robertmaxrees> lots of opportunities for optimizing this.
[13:23:17] <z1haze> im open to suggestions for sure
[13:23:25] <robertmaxrees> why not use a delegated handler instead?
[13:23:46] <robertmaxrees> or, even better, bind directly to the form.
[13:23:54] <z1haze> what would i gain? i thought delegated handlers were for when the element want on the dom when bound
[13:24:10] <robertmaxrees> they're also so you don't bind multiple listeners.
[13:24:13] <z1haze> also, that .bind(this) isnt working.. any other thoughts
[13:24:20] <robertmaxrees> show me.
[13:24:25] <z1haze> its in the paste
[13:24:33] <robertmaxrees> update the fiddle ;)
[13:24:41] <z1haze> haha ok
[13:25:10] <z1haze> https://jsfiddle.net/z1haze/whf5nLrc/14/
[13:26:11] <robertmaxrees> oh, becuase of your debounce function.
[13:26:28] <z1haze> because it returns a function?
[13:26:30] <robertmaxrees> no.
[13:26:43] <robertmaxrees> because setTimeout is in the window scope.
[13:26:47] <robertmaxrees> *contact, rather
[13:26:54] <robertmaxrees> **context.  can't type today.
[13:26:57] <robertmaxrees> https://jsfiddle.net/robertmaxrees/ghpboa0w/1/
[13:26:59] <z1haze> would it work if i made it an arrow function?
[13:27:16] <robertmaxrees> nope, because arrow functions can't have their "this" set.  check out my update.
[13:27:59] <z1haze> cool. im a bit fuzzy on this bind and call stuff
[13:28:06] <z1haze> i kinda just know enough to get me in trouble
[13:28:27] <robertmaxrees> tbh the "smarter" way to do it would be to pass the event object around, instead.
[13:29:00] <z1haze> and just get the e.target?
[13:29:04] <robertmaxrees> yeah.
[13:29:07] <z1haze> hmm
[13:29:13] <robertmaxrees> bbiab
[13:29:26] <z1haze> but what about those optimizations you were going to share :D
[14:02:00] <z1haze> how might i go about having a debounce handler and a normal handler on the same element? would i just do another .on() handler or is ther a better way?
[14:02:10] <robertmaxrees> huh?
[14:02:26] <z1haze> i basically want to update a data prop to store the last konwn value of a field, but i don't want that to go into my debounce function
[14:02:33] <z1haze> because i want to ensure it gets updated for each field
[14:03:36] <z1haze> right now, i store a last konwn value on a data prop, but im noticing since im debouncing, its only updating the field if it debounce time.. eg if i autofill 5 fields, its only doing to do the debounce handler on the last one.. but what i want is to update the last konwn value for all of the updated fields
[14:03:47] <robertmaxrees> could do that as two separate handlers or reimplement the debouce so you have a single handler that does both.
[14:05:09] <z1haze> you mentioned earlier, lots of ways to optimize my handler
[14:05:14] <robertmaxrees> yep.
[14:05:15] <z1haze> are you able to share some of those?
[14:05:20] <robertmaxrees> i did earlier.
[14:05:31] <z1haze> you mentioned using a delegated listener
[14:05:34] <robertmaxrees> yep.
[14:05:40] <z1haze> that's it?
[14:05:51] <robertmaxrees> there are other unlocks from there.
[14:06:02] <robertmaxrees> let me pull your code back up.
[14:07:19] <z1haze> hmm i think if i update the last known value outside of the debounce, and then compare the current value with the last known val inside of the debounce callback.. wont they always be equal?
[14:07:36] <robertmaxrees> dunno, haven't really dug into it that far in i'm honest.
[14:07:56] <z1haze> just meant logically thinking
[14:08:01] <z1haze> ill have to experiment. no worries
[14:09:24] <robertmaxrees> so in general, I'd spend time abstracting things out into functions for readability's sake.  i'd also decide if you want to use async/await or plain old promises.
[14:09:36] <robertmaxrees> kind of strange to mix and match the two.
[14:11:29] <robertmaxrees> also, store the result of $(this) at the top of the form and use that instead of passing 'this' through $() multiple times.
[14:15:40] <z1haze> i had a discussion about that in ##javascript many months ago when implementing
[14:15:55] <robertmaxrees> lol
[14:15:56] <z1haze> it was the general consensus that doing await.catch() is common. I think GreenJello had said he often does that
[14:16:04] <robertmaxrees> that's... weird.
[14:16:11] <z1haze> and i do respect his opinion just as much as yours
[14:16:13] <robertmaxrees> either way, you asked.
[14:16:20] <robertmaxrees> :shrug:
[14:16:47] <z1haze> i kinda though it was abstracted pretty well
[14:17:13] <z1haze> unless we just want a single line handler then no, it definitely is not
[14:17:32] <robertmaxrees> i'm allergic to code wherein a single line requires a 9 line comment to explain it.
[14:17:44] <z1haze> haha yeahhhh
[14:17:53] <robertmaxrees> there's nothing wrong with abstracting logic out into a separate function just to give it a name.
[14:17:59] <z1haze> i dont disagree :\ the business logic is pretty wild
[14:18:14] <z1haze> question on the $(this) definition thing
[14:18:31] <z1haze> i thought that $(this) was cheap, as its not actually doing a dom query.. i wrong though right?
[14:18:59] <z1haze> anything other than `this` i always store in a var if im using more than once
[14:19:05] <taplar> $() is creating a new jQuery object every time
[14:19:05] <robertmaxrees> $() still runs the jquery constructor, so you're spitting out a new object every time.,
[14:19:08] <robertmaxrees> ^
[14:19:23] <z1haze> oh, i thought it just returned the same one
[14:19:27] <taplar> nope
[14:19:27] <z1haze> whoops
[14:19:28] <robertmaxrees> nope.
[14:19:32] <z1haze> good to know
[14:19:58] <taplar> var x = $(this);  x.hi = function(){ console.log('hi'); };  x.hi();  $(this).hi();
[14:20:31] <z1haze> noted. made that update
[14:20:42] <robertmaxrees> also: back to my thing abouit promises - then get rid of the try/catch ;)
[14:22:31] <z1haze> https://bpaste.net/7MDQ better?
[14:22:49] <robertmaxrees> why have two catches?
[14:22:56] <robertmaxrees> maybe i'm not clear on what the real issue is.
[14:23:15] <z1haze> if the catch errors..
[14:23:33] <robertmaxrees> you already have once catch though...
[14:23:39] <z1haze> eg it can fail for multiple reasons, i only have a fallback fix for one of them
[14:23:51] <robertmaxrees> 'k
[14:23:51] <robertmaxrees> lol
[14:23:52] <z1haze> yes, but the first catch actually returns a value into the response var
[14:23:53] <robertmaxrees> i give up.
[14:24:05] <z1haze> mybe you dont understand how .catch works
[14:24:10] <robertmaxrees> no, i do.
[14:24:34] <z1haze> const response = await scrubAddress($form).catch(error => handleScrubRejectPage(error, $form)) will return a value into response that comes from handleScrubRejectPage
[14:24:45] <z1haze> but if handleScrubRejectPage fails. .then we have to handle that too
[14:24:47] <robertmaxrees> it's almost impossible to give feedback on code like this when i a) don't really know what it's doing, b) don't know the problem domain in the first place, and c) when my feedback keeps getting a "oh yeah but..."
[14:24:51] <robertmaxrees> so meh.
[14:25:06] <z1haze> its really not. its valuable
[14:25:25] <robertmaxrees> not a fun nor productive exercize for me to participate in.
[14:25:33] <z1haze> i wanted to learn more about the delegated listener change but you didnt seem to want to go into that
[14:25:40] <z1haze> so i didnt push
[14:25:41] <robertmaxrees> what about it?
[14:25:43] <robertmaxrees> huh?
[14:25:51] <z1haze> you jsut said it would be better, and then 'unlocks more from there'
[14:25:56] <robertmaxrees> yep.
[14:26:03] <z1haze> that isnt a good reason to just go change code
[14:26:03] <robertmaxrees> what about that says "i don't want to talk about that"?
[14:26:11] <robertmaxrees> lmao
[14:26:12] <z1haze> well i thought you would elaborate
[14:26:14] <robertmaxrees> i give up on this channel.
[14:26:16] <robertmaxrees> enjoy duder.
[14:26:34] <z1haze> some people its like their way or the highway
[14:26:39] <shoky_> lol.
[14:27:17] <z1haze> if someone gives you advice, you should be able to ask to understand the reason behind it
[14:27:26] <z1haze> not just 'its better because i said so'
[14:28:42] <z1haze> and now i see why i shouldnt have removed that try catch..
[14:29:06] <z1haze> when you 'return' from a promise it doesnt actually return from the function, which is what i need :D
