[02:16:06] <eoli3n> Cork: i pasted syscheckpass function :)
[02:16:15] <eoli3n> 112521        eoli3n   here's the function-> http://ix.io/1TG9
[02:16:17] <eoli3n> 112521        eoli3n   here's the function-> http://ix.io/1TG9
[02:16:25] <eoli3n> oups sorry for double paste
[02:16:48] <Cork> ya, suspected as much
[02:16:58] <eoli3n> ?
[02:17:06] <Cork> eoli3n: $.get. $.post and $.ajax is async functions
[02:17:10] <Cork> you can't return from them
[02:17:17] <Woet> s/is/are/
[02:17:22] <Woet> :)
[02:17:33] <eoli3n> what if i disable async ?
[02:17:44] <eoli3n> or is there any fix for this ?
[02:18:05] <Cork> instead you have to return either the jqxhr object from $.get or create a new $.deferred object
[02:18:26] <Cork> eoli3n: it means the code doesn't ryn syncronly, meaning it doesn't wait for the function to complete
[02:19:13] <eoli3n> i understand but, is "jQuery.ajaxSetup({async:false});" a good fix for this ?
[02:19:23] <Cork> no, noooo no...
[02:19:30] <eoli3n> ahah ok
[02:19:35] <Cork> sync ajax calls is old and BAD
[02:19:44] <eoli3n> bad, ok :)
[02:19:59] <eoli3n> lets return the object
[02:20:02] <eoli3n> my test will work
[02:20:14] <Cork> well you will have to change how you do your tests
[02:20:19] <Cork> give me a min
[02:20:47] <Cork> ugg... i just noticed you use global variables...
[02:20:49] <eoli3n> if i test if (object) it will work i think. Because it will test if var is empty or not
[02:21:12] <Cork> you should ALWAYS use var when you define a variable, else it will escape the function you write it in
[02:21:16] <eoli3n> var test = syscheckpass(); if (test){ do it }
[02:21:33] <Cork> 'li = $("#sysprogressli-pass");'
[02:21:37] <eoli3n> ah
[02:21:40] <Cork> li will be a global variable
[02:21:41] <Woet> eoli3n: stop guessing and start reading documentation about async functions and callbacks
[02:22:29] <eoli3n> Hi Woet it seems you need some love, <3
[02:23:04] <Cork> eoli3n: https://jsfiddle.net/2gpad3zf/
[02:23:09] <Woet> eoli3n: https://medium.com/codebuddies/getting-to-know-asynchronous-javascript-callbacks-promises-and-async-await-17e0673281ee
[02:23:12] <Cork> that is the format you need to hold
[02:24:41] <eoli3n> thx, lets try to understand it :)
[02:25:07] <Cork> ya, feel free to ask if it is anything you don't understand
[02:25:44] <Cork> (and there most likely will be)
[02:26:11] <eoli3n> Woet is right i need to understand how callback function works
[02:26:18] <eoli3n> i see you change my .done to .then
[02:26:29] <eoli3n> and you call .done(ok)
[02:26:42] <Cork> eoli3n: ya, it is another method of deferred (what ajax uses in jquery)
[02:26:48] <Cork> it lets you modify a deferred object
[02:27:07] <Cork> it makes the call at the bottom check for ok instead of duplicating the data check
[02:28:24] <Cork> if you wanted to leave access to the data value if you like, it is up to what you want to let out of that function
[02:34:07] <eoli3n> ok i think i get this
[02:37:58] <eoli3n> when i follow your exact exemple, i have a syntax error http://ix.io/1TKe
[02:38:14] <eoli3n> unexpected token { at the first line
[02:38:27] <eoli3n> (second)
[02:38:28] <Cork> lol
[02:38:29] <Cork> sorry
[02:38:42] <Cork> .done(ok) should be done(function(ok)
[02:38:57] <eoli3n> https://api.jquery.com/deferred.then/
[02:39:02] <eoli3n> i saw that here but was not sure
[02:39:04] <eoli3n> thx
[02:39:52] <Cork> ya, i can strongly recommend looking through api.jquery.com, it has a wealth of information
[02:41:39] <eoli3n> jQuery.Deferred exception: Cannot read property 'done' of undefined TypeError: Cannot read property 'done' of undefined
[02:41:58] <eoli3n> http://ix.io/1TKh
[02:43:08] <Cork> hmm
[02:43:37] <Cork> and you did return the deferred object inside syscheckpass?
[02:44:01] <Cork> cause ya, else you will return undefined and nothing will work
[02:44:09] <eoli3n> https://jsfiddle.net/2gpad3zf/
[02:44:13] <eoli3n> you didn't, so no
[02:44:16] <eoli3n> ?
[02:44:32] <eoli3n> just changed to then
[02:44:34] <eoli3n> .then
[02:44:40] <eoli3n> letting return true;
[02:44:42] <Cork> oh, gah... i forgot to add the return on line 8...
[02:45:01] <Cork> https://jsfiddle.net/1xsh6u0w/
[02:45:23] <Cork> and to fix the other typo too https://jsfiddle.net/1xsh6u0w/1/
[02:46:04] <eoli3n> oh ok, then its more clear
[02:46:07] <eoli3n> !
[02:46:28] <Cork> eoli3n: the return inside .then returns in the function given to it
[02:46:44] <Cork> it doesn't return from the outher function
[02:46:52] <Cork> just to make that clear
[02:51:44] <eoli3n> i'm searching for a complete explaination in fr for this
[02:51:52] <eoli3n> i don't get everything from jquery.com
[02:53:07] <Cork> you will prob have to look for a book for that, cause all the web documentation is in english as far as i know
[02:53:52] <eoli3n> i could be clear in en, but i need a noob explaination
[02:54:07] <eoli3n> https://makandracards.com/makandra/39543-jquery-promises-done-and-then-are-not-the-same
[02:54:11] <eoli3n> reading this
[02:54:23] <Cork> have you read through learn.jquery.com that i recommended yesterday?
[02:54:50] <eoli3n> didnt notice that, no
[02:55:17] <eoli3n> i'm on
[02:57:57] <eoli3n> i don't understand how .done(function(ok) can acces to my returns true or false
[02:58:39] <Cork> eoli3n: the return value given to .then replaces the old value from $.get
[03:00:15] <Cork> so the return on line 22 gets returned to then on line 11 and then becomes a new deferred object returned on line 8
[03:00:32] <Cork> and then .done is called on and gets you the ok value on line 41
[03:00:34] <Cork> (in https://jsfiddle.net/1xsh6u0w/1/ )
[03:00:55] <eoli3n> ok i understand
[03:01:00] <eoli3n> thx Cork
[03:01:06] <Cork> np
[03:17:15] <eoli3n> hm
[03:17:25] <eoli3n> i'm trying another thing with my next function
[03:17:38] <eoli3n> it's pretty the same as the first except it as to recurse
[03:17:44] <eoli3n> with an incremented index
[03:18:03] <eoli3n> function(id) if ok function(id+1)
[03:18:18] <eoli3n> http://ix.io/1TKi
[03:18:18] <Cork> you can't run code in argument declarations
[03:18:25] <eoli3n> that was not js
[03:18:29] <eoli3n> just to explain
[03:18:51] <eoli3n> problem of my exemple is that it doesnt wait for the answer and jump to the next recusion
[03:19:02] <eoli3n> problem of my paste*
[03:19:19] <Cork> eh... you apparently didn't understand the comments about async before...
[03:19:27] <Cork> cause you're doing the exact same thing again
[03:19:34] <Cork> you can't return values from async calls
[03:19:48] <eoli3n> i'm using then and done :(
[03:19:57] <eoli3n> i miss something
[03:20:17] <Cork> ya, but you check for the return value outside the then/done function callback
[03:20:18] <eoli3n> ahhh
[03:20:19] <eoli3n> no i get
[03:20:22] <eoli3n> ok
[03:20:27] <eoli3n> yep
[03:20:34] <Cork> also you don't want to use while
[03:20:44] <eoli3n> why that ?
[03:21:12] <Cork> cause it is a sync code execution form
[03:21:20] <Cork> and doesn't work with async calls
[03:21:47] <Cork> (there are ways around this is future javascript, but it isn't usable yet)
[03:22:02] <eoli3n> so i recurse inside the function ? i did that before
[03:22:45] <Cork> you need to define a function that checks the response value from iptcheck and then if it isn't what you want calls again
[03:23:38] <eoli3n> or i do as before > http://ix.io/1TKk
[03:24:12] <Cork> like function tester(data) { if(data == "") { call(); } }  function call() { iptcheck().done(tester); } call();
[03:24:17] <eoli3n> (thats from a previous commit, that's why there is no var before "li"
[03:24:53] <Cork> eoli3n: that won't change anything
[03:25:01] <eoli3n> it works like that
[03:25:03] <Cork> you still can't wait loop around the check
[03:25:07] <eoli3n> it does
[03:25:13] <eoli3n> i don't know why but it does :)
[03:25:16] <Cork> you don't have any retry in the old code
[03:25:22] <Cork> and then change i did didn't change any of those
[03:25:45] <eoli3n> / recurse if ok
[03:25:47] <eoli3n>           iptcheck(url, password, user, index + 1);
[03:25:53] <eoli3n> it works well
[03:26:05] <eoli3n> it runs with index0 then wait for it to finish, then next
[03:26:15] <Cork> ah, i didn't notice the new function name
[03:26:23] <eoli3n> yep it's a newer one
[03:26:31] <eoli3n> another
[03:26:32] <eoli3n> one
[03:26:39] <Cork> ya, that is an option, you can do the same from the done callback you used in the latest paste too
[03:27:00] <Cork> the problem is chaining
[03:27:09] <eoli3n> ahh
[03:27:12] <Cork> and inline functions gets lost in chaining
[03:27:13] <eoli3n> ok lets try it with done
[03:27:27] <Cork> that wasn't the point i was trying to make...
[03:27:32] <eoli3n> oh
[03:27:46] <Cork> use declared functions insted if inline functions
[03:28:00] <eoli3n> tester function ?
[03:28:11] <Cork> function tester() {} ya
[03:28:16] <eoli3n> ok lets try that
[03:34:38] <eoli3n> so i need to return data from iptcheck
[03:34:53] <Cork> you can't
[03:35:24] <eoli3n> so function tester should be inside iptcheck()?
[03:35:39] <Cork> no
[03:35:59] <eoli3n> so where tester function could read "data" ?
[03:36:26] <Cork> through the .done callback
[03:36:35] <Cork> .done(tester)
[03:36:56] <Cork> same as what you did before with function(ok) {}
[03:37:08] <eoli3n> yep yep i'm trying to get that
[03:42:45] <eoli3n> i'm near...
[03:42:59] <eoli3n> http://ix.io/1TKl
[03:43:40] <eoli3n> and the function http://ix.io/1TKm
[03:43:57] <Cork> ya, that should actaully work
[03:44:02] <eoli3n> it doesnt
[03:44:08] <eoli3n> it doest recurse
[03:44:10] <Cork> (and was actaully basically what i meant)
[03:44:13] <eoli3n> it stop after index0
[03:44:45] <Cork> you don't return anything from then there
[03:44:57] <Cork> so you nurf the deferred object
[03:45:02] <Cork> replace then with done and it should work
[03:45:16] <Cork> (or add back the return true / return false values)
[03:45:37] <Cork> and check ok instead of data == "" in the tester function
[03:47:41] <eoli3n> index is undefined, i need to pass index to tester function
[03:48:41] <eoli3n> done(tester) ?? does it call tester function properly ?
[03:48:41] <Cork> you could move the tester definition inside the run function
[03:48:59] <Cork> it references tester
[03:49:06] <eoli3n> ok
[03:49:13] <Cork> it is meant to send the reference to .done so IT can call it when it wants to
[03:49:32] <Cork> that is the difference to tester() that would execute the function directly
[03:49:42] <eoli3n> ahah
[03:49:47] <eoli3n> it works great -> http://ix.io/1TKn
[03:49:53] <eoli3n> but it doesnt stop when it fails
[03:50:31] <eoli3n> function :http://ix.io/1TKo
[03:50:34] <Cork> cause cause ok != data
[03:50:41] <Cork> tester(data) <--
[03:50:52] <eoli3n> rrrr sorry for that
[03:50:58] <Cork> :)
[03:51:35] <Cork> also note as tesrer is inside syscheckpass callback it _inherits_ the ok variable from there
[03:51:41] <Cork> that is why it never stops for you
[03:51:53] <Cork> (else it would always be undefined and never succeed)
[03:52:02] <eoli3n> it works great now :)
[03:52:35] <eoli3n> thx a lot Cork, i don't get everything i did, its not very fresh in my mind, i need to learn more about everything
[03:52:57] <eoli3n> i understand at 90% but in 2 days it will be 50% :P
[03:55:38] <Cork> heh, ya write notes and repeate ;P
[03:55:46] <eoli3n> comments comments and comments
[03:56:31] <Cork> and you seam to have the correct viewpoint on codeing, so i don't thing you will have much trouble (make sure you understand the code you use)
[03:56:53] <eoli3n> thx, "(make sure you understand the code you use)" that's important !
[03:57:06] <Cork> suppricingly many ppl come here and just copy paste the given code and "ok, i'm done"
[03:57:11] <Cork> and then ... ugg
[03:57:14] <Cork> ya, it really is!
[03:57:42] <eoli3n> i'm a python dev normally, i just have some little web projects with some php/js
[03:58:06] <Cork> i could have guessed :D
[03:58:21] <eoli3n> ^^'
[03:58:47] <Cork> it showed through that you knew farily much what you where doing
[04:03:41] <eoli3n> http://ix.io/1TKr.gif
[04:03:47] <eoli3n> that's the app
[04:04:18] <Cork> nice
[04:04:29] <eoli3n> thx
[04:04:56] <eoli3n> iptcheck recurse function calls a webservice which runs ansible to test some things about linux user account
[07:23:36] <eoli3n> Cork: again... http://ix.io/1TKU
[07:23:56] <eoli3n> i was thinking that if there isn't any ajax request  i could use return "nomore";
[07:24:11] <eoli3n> but there are again async issues
[07:24:17] <eoli3n> ender() start directly
[07:24:53] <Cork> not sure what ender is meant to be
[07:25:02] <eoli3n> (var tester2 = run(); if(tester2 == "nomore"){ender()}
[07:25:07] <eoli3n> a new function
[07:25:25] <eoli3n> 1 sec
[07:25:29] <eoli3n> lets paste it properly
[07:25:39] <Cork> just put a test in tester that checks if it should call ipcheck again or not
[07:25:46] <Cork> why overcomplicate it?
[07:25:50] <eoli3n> that part is ok
[07:25:52] <eoli3n> next round noxw
[07:25:54] <eoli3n> now
[07:25:56] <eoli3n> :)
[07:26:04] <eoli3n> in iptcheck there's 3 cases
[07:26:15] <eoli3n> no 2 cases
[07:26:17] <eoli3n> sorry
[07:26:25] <eoli3n> 1 an error is detected, it stopped
[07:26:36] <eoli3n> 2 no error, everything is ok, so start ender()
[07:26:47] <eoli3n> which is an info msg display
[07:27:03] <Cork> ok?
[07:27:11] <Cork> where does the loop come into this?
[07:27:25] <Cork> sounds like you have three cases
[07:27:31] <eoli3n> previous loop we did ?
[07:27:37] <eoli3n> this is in run()
[07:27:38] <Cork> ya
[07:27:47] <eoli3n> ah
[07:27:49] <Cork> 1. done done yet, 2. error abort, 3. complete
[07:28:07] <eoli3n> i don't understand the first case
[07:28:27] <Cork> your check again i suspect is cause the data doesn't exist yet?
[07:28:28] <eoli3n> the final status could only be "error" or "everything is ok"
[07:28:37] <Cork> ya, final, that is my point
[07:29:01] <Cork> 1. the loop, 2. it failed, 3. done
[07:29:13] <Cork> that the cases i see the then should return
[07:29:13] <eoli3n> oh inside the function yes
[07:29:28] <Cork> also i would prob move that over to status codes
[07:29:40] <eoli3n> how ?
[07:30:17] <Cork> return a 5xx code from the server when it has problem
[07:30:35] <Cork> then .then and .done won't fire for that case at all (.fail triggers insteasd)
[07:30:36] <eoli3n> wait a sec for a paste
[07:31:06] <Cork> then you just have to handle if it has the data it needs
[07:31:36] <eoli3n> http://ix.io/1TKV
[07:31:38] <eoli3n> check bottom
[07:31:50] <eoli3n> cant i do a check on that return ?
[07:31:58] <Cork> ya, but i'm not talking about javascript
[07:32:16] <eoli3n> i don't get what you mean then
[07:32:20] <Cork> the server should return 404 when it doesn't find the data, 5xx when something goes wrong and 200 and data when it finds it
[07:32:37] <eoli3n> yep but my pb is inside js algorythm
[07:32:42] <Cork> then you can just process the data on 200, request it again on 404
[07:32:46] <Cork> and stop on 500
[07:32:53] <Cork> making every thing much cleaner
[07:33:15] <Cork> but that requires fixing the server code
[07:33:23] <eoli3n> i think i get what you mean
[07:33:30] <eoli3n> : return $.get(url, { password: password, user: user, step: index })
[07:33:45] <eoli3n> url will return 404 if index is not existent ?
[07:34:19] <Cork> if i read what you're trying to do; ya
[07:34:40] <eoli3n> that's a point but srv will answer so its a pb
[07:34:51] <eoli3n> i need to fix it in js
[07:35:16] <Cork> ok so you can't fix the server to actaully give valid answers, that's a pitty...
[07:35:33] <eoli3n> that's complicated, the tool behind the srv is complex
[07:35:48] <Cork> well then i would change return true to return { found: true/false, error: true/false }
[07:35:53] <eoli3n> https://github.com/eoli3n/shellcast
[07:35:57] <eoli3n> that's the tool i wrote
[07:36:05] <Cork> and ok to => data and data.error or data.found
[07:36:56] <Cork> then the handler has the data it needs to know what to do with the call
[07:37:07] <eoli3n> i think i get it ! lets try
[07:37:09] <eoli3n> thx !
[07:42:18] <eoli3n> else(data and ! data.found)
[07:42:23] <eoli3n> how to reverse data.found ?
[07:42:48] <Cork> you should always have data so no need for the first check
[07:43:03] <eoli3n> yep
[07:43:30] <Cork> if(data.error) {} else if(data.found) {} else {}
[07:43:48] <eoli3n> i don't have the case data.error
[07:43:48] <Cork> is how i would structure it
[07:43:59] <Cork> you do
[07:44:05] <eoli3n> not in run(), i dont trigger anything
[07:44:07] <Cork> as you don't have separate flows for it
[07:44:17] <Cork> you do you just don't send any data
[07:44:21] <eoli3n> i have but i dont use
[07:44:21] <Cork> so send the state
[07:44:30] <eoli3n> wait i dont get something
[07:44:34] <eoli3n> function tester(ok) { if(data.found) { run(index+1); } else(! data.found) { ender() }}
[07:44:38] <eoli3n> that's what i need i think
[07:44:57] <Cork> you can't do that as the ajax deferred object is always used
[07:45:01] <eoli3n> if error, its catched inside the function
[07:45:12] <Cork> ya, but the code still deferres
[07:45:39] <eoli3n> sorry, but i dont get the thing
[07:45:46] <Cork> an option is to create your own $.Deferred(); object and use that instead of the ajax one
[07:46:03] <Cork> eoli3n: $.get triggers a deferred, it is what you use with .done
[07:46:16] <Cork> the .then inside the function just changes the data in the deferred object
[07:46:26] <Cork> you still always get it in the .done callback
[07:46:29] <Cork> you can't halt it
[07:46:56] <Cork> to do that you would have to create a new separate deferred object that you can control yourself
[07:48:10] <eoli3n> this works : function tester(ok) { if(data.found) { run(index+1); }
[07:48:23] <Cork> uh... what?
[07:48:29] <eoli3n> that's the previous code
[07:48:30] <Cork> your mixing variable names again
[07:48:43] <eoli3n> oh wrong paste
[07:49:09] <eoli3n> not wrong paste, wrong me
[07:51:26] <Cork> eoli3n: https://jsfiddle.net/kerfq5sg/1/
[07:51:27] <eoli3n> ok better : function tester(data) { if(data.found) { run(index+1); } else {if (! data.found) { ender(); }}}
[07:51:41] <eoli3n> so i can't understand why the first if works, but not the second
[07:51:45] <Cork> that way you don't have to trigger .done if the request failed
[07:51:57] <Cork> eoli3n: you return false on error in the old one
[07:52:11] <eoli3n> that's what me misunderstand, request nevers fails
[07:52:19] <Cork> now you replace it with returning an object on succes and undefined on error
[07:52:24] <Cork> that won't work
[07:52:33] <Cork> eoli3n: the error state
[07:53:00] <eoli3n> wowow ^^' a sec i read your jsfiddle
[07:53:41] <eoli3n> my brain is dying
[07:54:01] <eoli3n> i need to understand the first point firstly
[07:54:12] <Cork> i forgot to change then to done in that fiddle https://jsfiddle.net/opuz5v14/
[07:54:33] <Cork> eoli3n: .then forwards the deferred object just changing the data in it
[07:54:44] <eoli3n> yes
[07:54:53] <Cork> eoli3n: that mean you can't "not" trigger the following done state
[07:55:08] <eoli3n> i don't get that point
[07:55:12] <Cork> so you cant "abort" when you get the error case in the else block
[07:55:25] <Cork> .done in the outside case will still trigger
[07:55:40] <Cork> you will just replace the data in it with undefined
[07:56:29] <Cork> and as undefined.found is an exception the code will just crash
[07:56:52] <eoli3n> yes i have "jquery.min.js:2 jQuery.Deferred exception: iptcheck(...).done is not a function TypeError: iptcheck(...).done is not a function"
[07:57:28] <Cork> returning undefined from insite then shouldn't wipe the deferred object; i think...
[07:57:41] <Cork> never really do that so not sure
[08:02:48] <eoli3n> i don't get something
[08:02:51] <eoli3n> point by point
[08:03:00] <eoli3n> we was using .then
[08:03:13] <eoli3n> returning true or false
[08:03:26] <eoli3n> then function tester(ok) { if(ok) { run(index+1); } }
[08:04:16] <eoli3n> i changed return true or false by 'return { found: true, error: false };' and 'return { found: true, error: true };' adding a new 'return { found: false, error: false };
[08:04:42] <eoli3n> then just changed the var i query in .done : function tester(data) { if(data.found) { run(index+1); }}
[08:04:56] <eoli3n> here, why do i get a "jquery.min.js:2 jQuery.Deferred exception: iptcheck(...).done is not a function TypeError: iptcheck(...).done is not a function"
[08:05:05] <eoli3n> that's what you're explaining but i dont understand
[08:05:44] <eoli3n> ohhhhhh
[08:05:48] <eoli3n> i think i have it
[08:05:57] <eoli3n> a little piece of it...
[08:06:11] <eoli3n> return { found: false, error: false } cannot work because i'm using the defered object from get
[08:06:15] <eoli3n> here there's no get
[08:06:19] <eoli3n> is that a point ?
[08:06:30] <eoli3n> if i create my own defered then i can catch that case
[08:09:36] <Cork> eoli3n: hmm that error might be from me useing .then wrong...
[08:09:38] <Cork> let me check
[08:10:09] <eoli3n> but is this what you meant ?
[08:10:24] <eoli3n> 140605        eoli3n   return { found: false, error: false } cannot work because i'm using the defered object from get
[08:11:29] <Cork> no
[08:11:34] <eoli3n> :''(
[08:11:45] <Cork> as long as you always return something inside the .then it should work...
[08:11:59] <Cork> not actually sure why you get the .done is undefined...
[08:12:00] <eoli3n> yep but i'm returning something OUTSIDE .then
[08:12:20] <eoli3n> i'm trying with your jsfiddle exemple
[08:12:23] <Cork> ah!
[08:12:34] <Cork> japp that will replace the deferred object
[08:12:42] <eoli3n> japp?
[08:13:00] <Cork> if you return {} from the function instead of $.get you won't have the deferred object
[08:13:17] <Cork> and that would give you the exception
[08:13:45] <eoli3n> ok
[08:13:56] <Cork> what i wrote did the return inside the .then function though
[08:14:49] <eoli3n> but in your exemple where is the case "complete" ?
[08:14:57] <eoli3n> https://jsfiddle.net/opuz5v14/
[08:15:48] <Cork> that would have to be as data on defer.resolve();
[08:16:15] <Cork> defer.resolve({ found: true/false }) for example
[08:16:36] <eoli3n> ok i think i get something
[08:18:43] <eoli3n> ok its running... crossing fingers
[08:19:32] <eoli3n> holy shit ... i'm brainfucked
[08:19:35] <eoli3n> it works
[08:19:38] <eoli3n> <3
[08:22:52] <eoli3n> http://ix.io/1TL5
[08:22:56] <eoli3n> iptcheck function
[08:23:19] <eoli3n> and run http://ix.io/1TL6
[12:05:36] <jax> hello
[12:05:42] <jax> any idea why this fadeOut doesn't work? https://dpaste.de/ZWSR
[12:06:23] <jax> basically all the fadeIns and delays work.. but the image is never faded out
[12:10:50] <shoky_> jax: .delay() doesn't have a callback argument. weird that it's calling those callbacks you're passing. but it's screwing up the rest anyway so don't do it. you can use the .fadeIn()'s callback and setTimeout
[12:17:00] <jax> thx. i used queue and dequeue that seemed to fix it
[12:17:04] <jax> but your approach works too!
[14:02:52] <Sneha> Hello everyone, can some one help me in converting the custom jquery-ui file version from 1.8.15 to 1.12.1 . Basically I'm looking for a way/tool for conversion ! Any kind of guidance would be appreciated. Thanks in advance !
[16:36:26] <rwtrecs> hello! please, can anybody help me? I'm trying to use Ajax with Bootstrap tabs. and when I change the tab, the data don't reload properly.
[18:05:28] <exegesis> any canvas experts here?
[18:27:07] <exegesis> can anyone tell my what lines 191-194 do? https://github.com/JDStraughan/html5-lightcycles/blob/master/main.js#L191
[18:39:26] <makr8100> js question, but here goes anyways cuz I'm about to leave for the day...  context.moveTo moves the cursor
[18:39:40] <makr8100> context.lineTo draws a line on the canvas
[18:40:01] <makr8100> looks to me like it's drawing a filled rectangle
