[09:22:13] <Phruis> i have a situation where I am serilaizing input from a form, but I have to put it in a specific form.  When I do that it works great using serializeArray.reduce, but I have a situation where if one of my inputs is actually an array of the form form_name[] it just overrides the value with the last option from the reduce.  How should I handle this?
[09:23:22] <Phruis> here is my code
[09:23:32] <Phruis> $('#filter-form').serializeArray().reduce((obj, field) => ({...obj, [field.name]: field.value}), {}); formValues = $.extend(true, data, formValues);
[09:24:01] <Phruis> i am guessing for field.name I need to check if it is an array?  I could just look at the last two letters and figure it out but seems hacky
[09:29:56] <Cork> Phruis: have a look at the plugin serializeObject it might help you
[09:43:17] <jak2000> hi all, https://jsfiddle.net/gj4hc621/3/    <--- i have a tabl and want change the cell i have id and data to change, any ideas? thanks
[09:45:30] <Cork> jak2000: not sure what you mean
[09:45:42] <Cork> if you have the id of the row just change it
[09:46:38] <Cork> ah you don't have the id as a value on the row
[09:46:42] <jak2000>  if user type by sample id: 114 and in input salary put 6780 i want change the cell of salary of the third row....
[09:46:50] <Cork> jak2000: i would set a data-id attribute on the tr element
[09:47:00] <jak2000> ok modifying the
[09:47:26] <Cork> then you can do $('myTable tr[data-id="114"]') and modify the tds you want from there
[09:47:34] <Cork> *then you can do $('#myTable tr[data-id="114"]') and modify the tds you want from there
[09:47:45] <jak2000> ok
[09:50:47] <jak2000> Cork: https://jsfiddle.net/gj4hc621/4/    i am by the way?
[09:54:18] <jak2000> mmm how to modify the td?
[09:54:47] <Uhkis> .text('something')
[09:55:19] <jak2000> yes but how to reffer to salary? need add class to the td?
[09:56:08] <jak2000> ooo whitouth class
[09:56:36] <jak2000> done: https://jsfiddle.net/gj4hc621/5/
[09:57:28] <jak2000> why not work with class: https://jsfiddle.net/gj4hc621/6/     ?
[09:59:55] <jak2000> done... .salary
[10:00:38] <Uhkis> also if you're using that data-salary with the same id, you could just use that as the selector
[10:02:03] <jak2000> ooo really how to?
[10:02:15] <jak2000> interesting
[10:03:01] <Uhkis> $("#myTable tr[data-salary='"+widEmpleado+"']")
[10:04:06] <thykka> probably don't need the "#myTable tr" parts, unless you have multiple elements which share the same data-id value
[10:04:30] <thykka> $(`[data-salary="${widEmpleado}"]`)
[10:05:45] <Uhkis> faster with the id
[10:10:44] <thykka> faster without the tr..
[10:10:58] <thykka> but still, that would be premature optimization. Write code for people, not for comptuers
[10:11:16] <jak2000> ok thanks
[10:12:16] <thykka> and unless you're doing something to process thousands of elements at once (which you probably shouldn't be doing in the first place), the performance impact is practically unnoticeable
[10:12:47] <jak2000> thykka: can you (for learn purposses) optimize the fiddle? please
[10:13:08] <thykka> what do you mean by "optimize"?
[10:13:27] <Uhkis> maybe you should stick with the basics before trying to optimize anything
[10:14:13] <jak2000> thykka: you say: "remove tr.. and .. "
[10:14:32] <thykka> right, because it's unnecessarily specific. Only include what is relevant
[10:15:15] <thykka> when someone reads that code, they'll be thinking "wait.. are there other elements with this data-salary attribute? Are there similar elements outside of #myTable?"
[10:15:56] <thykka> all of that adds to the cognitive load of reading code, so you'll want to keep it at a minimum. As simple as it possibly can.
[10:29:00] <jak2000> okay
[10:29:03] <jak2000> understand
[10:34:19] <taplar> I would disagree that the selector without the tr is better than the one with.  Primarily due to attribute selectors performing dom scans on the entire context.  Scoping down with attribute selectors is always a good idea
[10:36:54] <JuJUBee> I have a bunch of td class=grade_input and I want to add a button to fill empty td with "mi"  I am using $('input[class="grade_input"]').each(function(if($(this).text().trim() ==""))}); as my selector, is this correct?
[10:37:25] <taplar> you want filter() rather than each()
[10:37:40] <taplar> filter(function(){ return !this.value.trim(); })
[10:38:00] <taplar> err, this.innerHTML or this.innerText, since it's a td
[10:38:28] <thykka> taplar, and what do you gain by that? 3ms per click event?
[10:38:39] <thykka> at the cost of readability
[10:38:47] <taplar> you would gain a good coding practice for when it does matter
[10:38:55] <thykka> x)
[10:38:55] <taplar> and i disagree that it is not readable
[10:40:34] <thykka> so you're saying it's better to optimize things that don't really need optimizing in reality, just because there are situations where optimization could be needed?
[10:40:50] <Uhkis> we didn't even start with the browser support of those backticks ;)
[10:41:24] <taplar> I'm saying that when you want to figure out what 3 * 6 is, you don't mentally go 3 + 3 + 3
[10:41:29] <taplar> because you learned, and grew
[10:41:37] <taplar> same thing with programming
[10:41:50] <thykka> support is pretty good, only IE11 would choke on template literals
[10:41:53] <taplar> you learn best practices, you rely on them, and you recognise when there are exceptions
[10:42:11] <thykka> seems we disagree on where the exception should be
[10:42:52] <thykka> iÂ say make an exception when the situation requires it, you say make an exception always, because one day you might *have* to do it
[10:42:58] <Uhkis> thykka: that's unfortunately still very used in corporate context
[10:43:13] <taplar> but it's not an exception if it's the primary way you operate.  that's my point
[10:43:38] <taplar> you're arguing that it's not worth it because the time gained is not worth it
[10:43:50] <thykka> Uhkis, sure, but if we're going there, we might as well discuss why there's no Babel step in the build process..
[10:43:56] <taplar> but it doesn't take that much time to type a better selector
[10:44:46] <thykka> it takes time, maintenance and mental processing power
[10:44:53] <taplar> i disagree
[10:45:02] <thykka> and mental processing power is always limited
[10:46:02] <thykka> clock cycles might also be limited, but that bottleneck can be fixed when and if it arises
[10:46:29] <thykka> whereas everything that adds complexity to the code, makes future development that much slower
[10:46:52] <taplar> and a simple tag added to a selector breaks the camels back for you
[10:47:15] <thykka> if we're talking principles, then yes
[10:47:35] <taplar> yeah, we just disagree then
[10:47:35] <Uhkis> unbelievable how 2 characters can resurrect this channel :D
[10:48:19] <JuJUBee> https://jsfiddle.net/omhwbyzc/1/
[10:49:26] <taplar> i have strong opinions about working best practices into your go to strategies.  it's often the case that people argue that doing one thing over another is over optimization.  however I argue it's not over optimization once you've learned a better practice into your go to practices.  at that point it is just reflexive.
[10:49:42] <Uhkis> JuJUBee: there's no inputs with that class in the html
[10:50:50] <Uhkis> JuJUBee: you probably want $('.grade_input')
[10:51:40] <JuJUBee> Wow, couldn't see the forest through the trees...  But there are td with that class?  Still...
[10:51:44] <JuJUBee> Thanks
[10:52:54] <taplar> https://jsfiddle.net/21sz4ecg/  you can optionally just use the text() with a callback JuJUBee
[10:53:43] <Uhkis> JuJUBee: yes, but you explicitly told it to find <input> with that class
[10:54:27] <JuJUBee> Ah, i see now.  I forgot the input code when I re typed it...  The original has inputs...
[10:54:40] <Uhkis> and since we're talking readability, $('input.grade_input') would've been more readable
[10:55:16] <JuJUBee> I'm a novice, I admit
[10:57:35] <thykka> taplar, I work in an environment where lots of other devs of various skill levels have to read code written by others. I've seen some crazy stuff, as well as stuff that is a pleasure to work with. And a key difference between those has to do with who the developer wrote the code for. If you're relying on learned practises, you're writing for yourself. If that practise has to be incorporated, it should
[10:57:36] <thykka> probably be abstracted into a form that documents itself for the next developer, IMO
[10:57:47] <jak2000> escuse me again:
[10:57:51] <jak2000> $("#myTable tr[data-salary='"+widEmpleado+"']").find('.salary').html(wSalary);   <--- not change
[10:58:05] <jak2000> $(`[data-salary="${widEmpleado}"]`).find('.salary').html(wSalary);   <--- not change the value :(
[10:58:37] <jak2000> $("#myTable tr[data-id='"+widEmpleado+"']").find('.salary').html(wSalary);   <--- this change the value
[10:58:43] <taplar> I understand working with developers of different levels.  However, if you are arguing that your fellow developers cannot understand methods of scoping down selectors, then that is something they need to learn, and you can help teach them.
[10:59:06] <JuJUBee> Uhkis, so when I press the button on my test site, I see the mi inserted in the console code when inspecting but it does not show on the page?
[10:59:06] <taplar> I, personally, believe developers are competent enough to grow and learn
[10:59:21] <thykka> no, what i mean is that selector is implicit regarding why it's written as it is.
[10:59:33] <thykka> if you want to scope it, be explicit about it
[10:59:52] <taplar> it's that what we are arguing?
[11:00:04] <jak2000> here my fiddle: https://jsfiddle.net/gj4hc621/7/
[11:00:12] <taplar> *isn't
[11:02:44] <thykka> jak2000, you have an extra .find('.salary') in there
[11:02:57] <thykka> that is unnecessary, as the element selected is already the one with class="salary"
[11:02:59] <JuJUBee> Uhkis, figured it out.
[11:03:26] <jak2000> done: https://jsfiddle.net/gj4hc621/8/
[11:06:11] <thykka> taplar, would you say this, being more optimized, is even better? $(window.myTable).find(`tr[data-id="${theId}"]`)
[11:07:04] <taplar> Given that series of commands, I could be convinced to leave the tr off.  The scope has already been reduced by the jQuery element being operated upon
[11:10:45] <taplar> Unless you're asking if I think that is better than $('#myTable tr[...]') ?
[11:11:51] <Uhkis> tr would still be microseconds faster :D
[11:12:11] <thykka> window.myTable is faster than selecting with '#myTable'
[11:12:26] <thykka> disregarding all the pitfalls it has...
[11:12:41] <taplar> Not entirely sure about that one.  Especially with new versions using querySelectorAll
[11:12:55] <taplar> *rather than sizzle
[11:13:18] <thykka> how so? jQuery will get the element directly, without having to parse and process the selector
[11:14:18] <taplar> Sure, where as querySelectorAll will do all the work within a single javascript engine command
[11:14:49] <taplar> Both have to do a lookup, depending upon version, Sizzle may do multiple lookups
[11:15:34] <thykka> there's no lookup when accessing the element directly via window, is there?
[11:15:43] <taplar> The find() is a lookup
[11:16:07] <thykka> right, i was referring to window.myTable vs. '#myTable' as a selector
[11:17:12] <taplar> Right, and given that ids are hashed in some manner by the browser, I'm uncertain if there are any differences between operating upon a reduced scope explicitly, and using a selector with a reduced scope.
[11:17:45] <taplar> Because the engine may just as quickly, or faster, be able to do the same thing when it resolves the hash lookup
[11:17:55] <taplar> I dunno.
[11:20:07] <taplar> But, if through being involved in the community, or with playing around, I came across evidence that one is predominantly more performant than the other, you bet I'd modify my way of thinking about those things, :)
[11:30:10] <thykka> okay, so interestingly it's marginally faster to do document.getElementById('myElement').querySelector('[data-id="1"]') than it is to do document.querySelector('#myElement [data-id="1"]')
[11:30:32] <thykka> and accessing the IDful element via window is a LOT slower than I expected
[11:31:12] <taplar> also to make it more fun, consider that you tested it in just one browser? :)
[11:31:47] <thykka> just chrome and firefox, yes. Possibly different on Safari or IE
[11:32:24] <thykka> but on firefox the difference is 17%, whereas on chrome it's too small to ,atter
[11:32:27] <thykka> *matter
[11:48:44] <taplar> Actually that conceptually makes sense.  getElementById is more explicit than querySelector, so you seeing some speed difference between the two would suggest you removed some time querySelector had to take to figure out what to do with that selector token
[11:49:29] <taplar> Dunno why the window.myId would be slower though
[12:16:39] <AdamPDotty> window.myId is the good old register_globals all over again
[12:16:45] <thykka> hmm.. "Initially, there is no property window.foo. But the first time it is accessed (either directly or via the global variable foo), it is created automatically. "
[12:16:48] <thykka> from https://2ality.com/2012/08/ids-are-global.html
[12:17:55] <taplar> interesting
[12:20:55] <taplar> heh, it's kinda like, you shouldn't do this, but we want to be backwards compatible, so we'll only do it if you try to use it
[12:25:30] <Uhkis> wow, you guys are still on that :D
[12:25:46] <taplar> hey, it's fun stuff, :)
[12:25:54] <thykka> what can I say, I like boring things
[12:27:24] <AdamPDotty> likewise
[12:27:39] <Uhkis> good learning opportunity for (almost) everyone too
[12:28:49] <AdamPDotty> ah, its nasty
[12:29:04] <AdamPDotty> breaks old code for no good reason
[12:29:22] <taplar> the window.id thing?
[12:29:55] <AdamPDotty> sure
[12:30:23] <taplar> i know that's the reason why <element id="submit" name="submit"> is a bad thing, but you thinking of something else as well?
[12:31:53] <AdamPDotty> I thought it to be intuitive to have the var with the value of a select or such with the same name as the id of the select. Not anymore.
[12:32:25] <taplar> oh, lol
[12:32:26] <AdamPDotty> And you would have to think of reserved words, wenn naming elements.
[21:27:54] <jak2000> $('.clPrecioUnit .clPesoProm').on('keyup change', function () {                     why not     acces this method?  also i try     $('.clPrecioUnit, .clPesoProm').on('keyup change', function () {
