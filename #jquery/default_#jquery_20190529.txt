[05:11:19] <diverdude> hi, is there any way i can do somethign like myarray[2:5] = [2,3,4] ?
[05:11:32] <Cork> slice()
[05:11:57] <Cork> you can't set doing that tough
[05:12:13] <diverdude> :( no way to set?
[05:12:20] <diverdude> other than loop
[05:12:40] <Cork> https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice
[05:12:48] <Cork> you can, it is just a different function
[05:13:46] <Cork> and you will have to use splice.apply to give it an array
[05:14:08] <Cork> if 2,3,4 doesn't need to be an array then just use .splice directly
[09:06:33] <tolland> I have a dialog to create a new db record, which is a grid layout.... say 2x3, 3x3... 9x9 etc, and then selecting it causes a new form to be generated with a NxM grid of options... the result looks like this https://i.imgur.com/T5PcG6i.png
[09:06:49] <tolland> but that could be anything up to 9x9
[09:08:15] <tolland> tinyMCE has a ui component for creating new tables like this https://i.imgur.com/NUnbkFS.png
[09:09:49] <tolland> and google docs has something similar for creating tables https://i.imgur.com/jomrJrc.png
[09:09:59] <tolland> is there anything like that for jquery UI?
[09:10:26] <tolland> its kinda similar to the data picker dialog, so I could use that if I need to create something new. but just checking it didn't exist already
[09:10:49] <Cork> tolland: you would have to look at a plugin
[09:11:12] <Cork> cause wysiwyg isn't part of jquery ui
[09:17:29] <tolland> yeah, I don't mean the wysiwyg editor, I mean, just the grid picker component
[09:18:01] <Cork> ya, but i meant wysiwyg as in "document generation"
[09:18:12] <Cork> jquery ui is meant for application interface not editing
[09:18:20] <Cork> so it won't have editing features
[09:20:51] <tolland> haha. I found one.  http://jsfiddle.net/tnn3qgvj/9/
[09:26:37] <tolland> thats a bit basic... but I guess it will do the trick
[11:04:58] <vinxz> Hi guys, I have some troubles to develop recurring payment with v2 Paypal API. I'm able to charge user with createOrder function but I'm not able to do it recurring. Any people could help please?
[11:05:22] <robertmaxrees> vinxz wrong channel? :)
[11:05:38] * taplar googling to see if it is a jQuery plugin
[11:05:43] <robertmaxrees> lol
[11:09:26] <taplar> I see api documentation, but no plugin
[11:34:28] <taplar> mmm, this api should be arrested
[11:34:34] <robertmaxrees> oh?
[11:34:39] <taplar> it's clearly exposed
[11:34:44] <robertmaxrees> whatcha mean?
[11:34:47] <robertmaxrees> oh.
[11:34:49] <taplar> bad joke
[11:34:49] <robertmaxrees> jfc
[11:34:59] <robertmaxrees> yeah, just caught that haahahhaha
[14:54:39] <diverdude> hi, i have this fiddle: https://jsfiddle.net/fh87qauc/1/  I am getting error when I am trying to run it:"Failed to execute 'drawImage' on 'CanvasRenderingContext2D'" Why can I not do this?
[14:58:07] <taplar> You're missing your # on your selector
[14:58:26] <taplar> resizedContext.drawImage($('#mycanvas')[0], 0, 0, resizedCanvas.width, resizedCanvas.height);
[15:06:19] <diverdude> taplar: ah thx
[16:22:29] <dopie> https://gist.github.com/staycreativedesign/72a4185cc0ed9239de298fc788dbded9
[16:22:34] <dopie> https://gist.github.com/staycreativedesign/72a4185cc0ed9239de298fc788dbded9
[16:22:37] <dopie> can anyone help me here
[16:22:47] <dopie> why is it only logging on change
[16:22:49] <dopie> and not on load?
[16:22:58] <robertmaxrees> because most elements don't emit anything on load.
[16:23:05] <dopie> hmmmm...
[16:23:07] <robertmaxrees> the element doesn't load - the page does.
[16:23:11] <dopie> ahhhh ok
[16:23:17] <taplar> the page, iframes, images, those load
[16:23:23] <taplar> and the load event doesn't bubble
[16:23:35] <robertmaxrees> ^
[16:23:45] <dopie> ok.. so what am I looking for then?
[16:23:59] <robertmaxrees> you need to refactor your handler.
[16:24:08] <robertmaxrees> though i gotta ask.
[16:24:15] <robertmaxrees> why are you storing that in a globl var?
[16:25:01] <dopie> what v?
[16:25:06] <robertmaxrees> yeah
[16:25:16] <robertmaxrees> instead of just looking it up?
[16:25:33] <dopie> Because I am going to do other stuff with this element
[16:25:37] <robertmaxrees> also: is #post_of_type a dropdown?
[16:26:14] <robertmaxrees> dopie
[16:26:53] <dopie> yes
[16:26:55] <dopie> it is
[16:27:02] <robertmaxrees> then just get its .val()
[16:27:09] <robertmaxrees> no need to find the selected option.
[16:27:17] <robertmaxrees> $('#post_of_type').val(); works just fine :)
[16:27:29] <taplar> and use `on()` instead of `bind()`
[16:29:09] <dopie> yep
[16:35:31] <robertmaxrees> oontz oontz oontz
[16:36:34] <dopie> ok...
[16:36:47] <dopie> so now it does the samething it only logs it when I change it
[16:37:10] <robertmaxrees> new code?
[16:37:24] <robertmaxrees> alternatively, why not just read the .val() whenever you need it?
[16:37:29] <robertmaxrees> instead of trying to use this handler?
[16:40:07] <dopie> Because I need it on load and if the user changes it
[16:40:38] <taplar> That statement doesn't contradict what robert is suggesting
[16:40:49] <robertmaxrees> ^
[16:40:51] <robertmaxrees> :)
[16:41:03] <taplar> If you get it when you need it, you have it's latest value
[16:41:05] <robertmaxrees> you can just do $('#post_of_type').val() instead of reading a var.
[16:42:53] <dopie>  $(document).on("load", function(){                                                                            |     1   plugin :restore_cached_data
[16:42:57] <dopie> +    1     console.log("foo")
[16:42:58] <dopie> oops
[16:43:02] <robertmaxrees> heh
[16:43:02] <dopie> sorry wrong paste
[16:44:06] <dopie> how come this doesnt even work then
[16:44:06] <dopie> https://gist.github.com/staycreativedesign/72a4185cc0ed9239de298fc788dbded9
[16:44:22] <robertmaxrees> window
[16:44:33] <robertmaxrees> $(window).on('load'
[16:44:42] <robertmaxrees> and that assumes that you bind before the window emits the event.
[16:45:06] <robertmaxrees> still doesn't explain why you can't just directly look up the value whenever you need it.
[16:45:15] <taplar> and that you have considered that it is indeed necessary to wait for all the resources to load before your script runs, vs just a document ready
[16:48:33] <robertmaxrees> lol i love this whole game where we suggest things and some of those suggestions are just completely ignored.
[16:48:45] <taplar> just another day in paradise
[16:49:17] <robertmaxrees> it's just so subtly insulting haha
[16:49:49] <dopie> robertmaxrees: sorry my noobness with jquery is very high :)
[16:50:13] <robertmaxrees> it's ok.  just weird to ignore a suggestion repeatedly.
[16:51:02] <dopie> robertmaxrees: put it in a function?!
[16:51:08] <robertmaxrees> ...
[16:51:13] <dopie> ?!
[16:51:20] <robertmaxrees> why do you need the val instead of just looking it up when you need it?
[16:52:55] <dopie> Ok... you've repeated this 10 times
[16:53:04] <robertmaxrees> yes.
[16:53:10] <taplar> you haven't answered it yet
[16:53:13] <robertmaxrees> ^
[16:54:51] <dopie> I need the value as soon as the page is loaded so it can then hide or show specific elements on the page
[16:55:08] <taplar> ok, so you get it and then use it
[16:55:13] <dopie> Ye
[16:55:43] <robertmaxrees> $(document).ready(function() { if $('#whatever').val() === 'foo' { console.log('welp')l }});
[16:55:51] <robertmaxrees> err, no l but you get the idea.
[17:20:25] <dopie> ok
[17:20:37] <dopie> https://gist.github.com/staycreativedesign/72a4185cc0ed9239de298fc788dbded9
[17:21:24] <taplar> so a few things
[17:21:34] <dopie> Ok
[17:21:41] <taplar> first, you're declaring a v, but never using it
[17:21:51] <dopie> yes thats removed
[17:22:01] <taplar> $("#post_of_type").on('change', foo()); <= foo() is going to execute immediately, so it's not giving the binding a callback
[17:22:15] <taplar> and if you only have two cases, don't use a switch statement
[17:22:21] <dopie> i have mre
[17:22:42] <dopie> not giving the binding a callback
[17:24:09] <dopie> how can I give it a binding callback?
[17:24:31] <taplar> remove the `()` from the `foo()`
[17:25:16] <dopie> ok
[17:25:19] <dopie> now it doesnt fire
[17:25:37] <taplar> it will not fire until the event happens
[17:25:49] <dopie> so i put foo() underneath
[17:25:52] <dopie> and it worked
[17:26:22] <dopie> Why on earth did it work
[17:26:34] <taplar> https://jsfiddle.net/p0o9wzat/
[17:26:41] <dopie> updated it
[17:26:41] <dopie> https://gist.github.com/staycreativedesign/72a4185cc0ed9239de298fc788dbded9
[17:27:43] <dopie> So you did an anonymous function so it fires without needing to call it?
[17:28:03] <taplar> The only anonymous function is the document ready callback
[17:28:11] <taplar> the inner function is a named function
[17:28:27] <dopie> which fire when the document is ready
[17:28:38] <taplar> the anonymous one does, yes
[17:29:07] <dopie> so why did the removal of () do that?
[17:29:14] <taplar> which part?
[17:30:01] <dopie> 14
[17:30:13] <dopie>   $("#post_of_type").on('change', foo);
[17:30:17] <taplar> because event bindings need callbacks
[17:30:42] <taplar> do you understand the difference between a callback and an invocation?
[17:31:53] <dopie> when just the english of them yes :)
[17:31:59] <dopie> a callback is ran after something runs
[17:32:09] <dopie> and invocation is the 1st time its invoked?
[17:32:10] <dopie> hahah
[17:32:12] <taplar> but what is it?
[17:32:25] <dopie> fiik
[17:32:42] <taplar> thing() <=> thing <-- what's the difference?
[17:33:00] <dopie> Dont knowthe difference
[17:33:10] <taplar> ok, so take this for example
[17:33:24] <taplar> function myFunction() {};  myFunction();
[17:33:31] <taplar> What are those two statements?
[17:33:47] <dopie> what is declaring it
[17:33:52] <dopie> and the other is invoking it?
[17:33:54] <taplar> yes
[17:34:02] <taplar> but how does the invoking work?
[17:34:12] <taplar> how does myFunction() know what to do?
[17:34:34] <taplar> var myFunction = function(){};  myFunction();
[17:34:37] <taplar> what about that version?
[17:35:14] <dopie> you declared a variable myFunction that points to an anymouse function ?
[17:35:32] <taplar> but in both cases myFunction() works, yes?
[17:35:48] <dopie> anonymous
[17:35:49] <dopie> correct
[17:35:52] <dopie> well
[17:35:53] <dopie> wait
[17:36:24] <dopie> yes because the 2nd one youre just "invoking" myFunction which then in turns runs the anon function
[17:37:01] <taplar> so both cases work because "myFunction" is just a variable.  It just happens to point to a function definition
[17:37:58] <taplar> so when it is said that something needs a "callback", what it means is it needs a variable pointing to a function definition
[17:38:15] <taplar> because that function will take that variable, and then -it- will decide when to invoke it
[17:38:39] <taplar> right?  think about event bindings
[17:38:52] <taplar> you're telling the browser, when *this* event happens, run *this* function
[17:40:10] <taplar> So if you do: $(selector).on('click', foo());
[17:40:23] <taplar> What is actually being done?  What is being passed into the `on()` call?
[17:40:44] <dopie> the function
[17:40:49] <dopie> foo()
[17:40:50] <taplar> is it?
[17:41:02] <taplar> what about this
[17:41:21] <taplar> function sum (a, b) {};  sum(1, 2 + 3);
[17:41:31] <taplar> what's actually passed into the sum method?
[17:41:53] <dopie> 1,5
[17:41:56] <taplar> yep
[17:42:10] <taplar> so now go back to the binding example.  What is actually being passed into `on()`?
[17:42:32] <dopie> 'click', foo()
[17:42:38] <taplar> no
[17:43:05] <taplar> why didn't you say before that what was being passed into sum was 1 and 2 + 3?
[17:43:37] <dopie> because I know that its looking for 2 parameters...
[17:43:52] <taplar> so why did it not pass in 2 + 3?
[17:44:27] <dopie> because it needed to resolve the 2 + 3 to get to 1 parameter
[17:44:37] <dopie> that it needed
[17:44:39] <taplar> alright.  so what about 'click', foo() ?
[17:45:15] <dopie> **blank stare
[17:45:23] <taplar> what is 'click'?
[17:45:33] <dopie> its a String
[17:45:37] <taplar> what is foo() ?
[17:45:44] <dopie> its a method
[17:45:46] <taplar> no
[17:45:50] <dopie> function?!
[17:45:52] <dopie> wtf
[17:45:54] <taplar> foo is a method
[17:46:02] <taplar> foo() is an INVOCATION
[17:46:10] <dopie> FUCKBALLS
[17:46:26] <dopie> so whenever you have () after its invocation?
[17:46:27] <taplar> foo() and 2 + 3 are the exact same thing
[17:46:30] <taplar> yes
[17:46:45] <dopie> and with invocations I cant have callbacks?
[17:46:49] <taplar> both 2 + 3 and foo() are statements
[17:46:54] <taplar> they perform an operation
[17:46:58] <dopie> correct
[17:47:04] <taplar> one is performing an addition, the other is invoking a function
[17:47:04] <dopie> they perform the operation and its done
[17:47:31] <taplar> and in both cases, it has to resolve the statement to a single variable, to pass to the function
[17:48:21] <taplar> So what is this actually doing: So if you do: $(selector).on('click', foo());
[17:49:38] <dopie> So 'click' is returning a String with value 'click'
[17:50:01] <dopie> and foo() returns whatever foo ends up with as a variable
[17:50:07] <taplar> which is what?
[17:51:19] <dopie> another variable?
[17:51:29] <taplar> what does foo() return?
[17:51:35] <dopie> where in my code?
[17:51:38] <taplar> yep
[17:52:02] <taplar> for normal functions, it has to have a return statement for it to return a value
[17:52:34] <dopie> ok let me see here
[17:53:44] <taplar> and just to be clear, i'm not suggesting your foo needs a return statement.  i'm just explaining how it works
[17:53:45] <dopie> it would also return a String no?
[17:53:57] <dopie> taplar: ok I got confused there
[17:53:57] <taplar> where is foo doing a return?
[17:54:13] <dopie> on the break?
[17:54:19] <taplar> a break isn't a return
[17:54:23] <dopie> correct
[17:54:28] <dopie> so it aint returning shit
[17:54:34] <taplar> indeed
[17:54:45] <taplar> so if a function does not return anything, then what is returned is "undefined"
[17:54:55] <taplar> not as a string, but just undefined
[17:55:00] <dopie> ok
[17:55:17] <taplar> so, now go back to what `on()` is actually getting for values
[17:55:27] <dopie> but it still logs stuff no?
[17:55:39] <taplar> ignore that for now
[17:55:39] <dopie> string, undefined
[17:55:45] <taplar> boom
[17:56:02] <dopie> ok
[17:56:07] <dopie> Wow ok...
[17:56:09] <taplar> so what's the problem with that?
[17:56:19] <dopie> well there is no callback as you mentioned
[17:56:22] <taplar> :)
[17:56:47] <dopie> so
[17:56:54] <dopie>   $("#post_of_type").on('change', foo);
[17:57:14] <dopie> https://gist.github.com/staycreativedesign/72a4185cc0ed9239de298fc788dbded9
[17:57:16] <dopie> ive updated it
[17:58:12] <dopie> so foo isnt INVOCATION it's a method so its not going to return a variable correct?
[17:58:24] <taplar> it -is- a variable
[17:58:34] <taplar> that points to a function
[17:59:02] <taplar> it is not an expression
[17:59:12] <taplar> which would need to be evaluated, to get a value
[17:59:27] <dopie> k
[18:00:01] <taplar> 2 + 3 = mathematical expression.  foo() = functional expression
[18:01:39] <taplar> "functional expression" and "functional invocation" are pretty much interchangable.  they same thing
[18:03:31] <taplar> Is that a little more clear now though, why it wasn't working?
[18:07:16] <dopie> yes
[18:07:39] <taplar> awesome
[18:08:32] <dopie> ok so foo isnt going to return a value its just going to run that function
[18:08:46] <dopie> *heads explodes*
[18:08:57] <dopie> both heads
[18:08:57] <dopie> haha
[18:09:08] <taplar> "foo" is a value. the value is a function definition
[18:09:29] <taplar> err, "foo" points to a value, which is a function definition
[18:09:46] <taplar> but values are not expressions
[18:10:24] <taplar> so think of it like this
[18:10:37] <dopie> foo() value is undefined
[18:10:48] <taplar> when you make your function definition, and javascript compiles it, that makes the function exist, yes?
[18:10:56] <dopie> correct
[18:11:09] <taplar> so when it compiles it, it sticks it in your computer memory some where
[18:11:22] <taplar> "foo" is how your browser knows where to find it
[18:11:29] <taplar> that's all it is
[18:11:45] <taplar> when you want to actually -use-, you have to invoke it
[18:12:34] <taplar> foo();
[18:12:49] <taplar> that tells the browser, hey, "foo" points to a function, i want you to execute it
[18:13:07] <taplar> it takes foo, goes to the memory location that foo points to, gets the function definition, and executes it
[18:15:37] <dopie> Ok
[18:15:41] <dopie> I got it now sir
[18:15:43] <dopie> man
[18:15:44] <dopie> man
[18:15:47] <dopie> mam
[18:15:48] <dopie> rofl
[18:15:50] <dopie> :)
[18:15:52] <taplar> lol, "dude" is fine
[18:15:57] <dopie> :P
[18:16:03] <dopie> Ok awesome phew....
[18:16:08] <dopie> I never knew any of that
[18:16:10] <dopie> so good :)
[18:17:00] <taplar> something you don't really actively think about once you've been doing it a while.  but it's fairly important to understand.
[18:17:22] <taplar> when you're having issues with some code, it's very important that you understand exactly what each piece is
[18:18:05] <taplar> which is also why when you are having issues with code, you have to be very careful about trusting your assumptions
[18:18:33] <taplar> you have to verify everything you think is true.  because if all your assumptions were true, your code would work, eh? :)
[23:53:30] <sydbarret> do you also know css here?
