[00:24:21] <rocketmagnet> hi everyone
[00:25:37] <rocketmagnet> i've an json-rpc server running and i try to call a function with jquery, this is what i've so far: https://paste.debian.net/1110462/
[00:25:55] <rocketmagnet> but i'm getting the error: Cross-Origin Request Blocked: The Same Origin Policy disallows reading the remote resource at http://localhost:9999/. (Reason: CORS header ‘Access-Control-Allow-Origin’ missing).
[00:43:39] <rocketmagnet> how can i set setRequestHeader( name, value ) for a $.post() request ??
[00:59:27] <rocketmagnet> can someone translate r = requests.post('http://localhost:4000', data=json.dumps({"jsonrpc": "2.0", "method": "simple_add", "params": {"first": 10, "second": 20}, "id": 1})) into $.ajax ??
[01:18:24] <rocketmagnet> is somebody up already ?
[01:19:59] <rocketmagnet> https://paste.debian.net/1110465/
[02:07:21] <rocketmagnet> is someone awake already ?
[02:40:00] <rocketmagnet> does someone know how to make an json-rpc request with $.ajax ?
[02:51:56] <rocketmagnet> hmmm, when i set the headers: { "Accept": "application/json; charset=utf-8" } the json-rpc server doesn't get the right header, he still thinks it's text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
[02:52:28] <rocketmagnet> does someone know how to make an json-rpc request with $.ajax ?
[02:52:30] <rocketmagnet> hmmm, when i set the headers: { "Accept": "application/json; charset=utf-8" } the json-rpc server doesn't get the right header, he still thinks it's text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
[03:29:56] <Cork> rocketmagnet: the accept header is controlled by the dataType option to ajax
[03:30:08] <Cork> for what you are trying to do you want dataType: 'json'
[04:56:17] <Rockwood> hello any active?
[05:52:23] <rocketmagnet> Cork: i tried all kinds of variations but it's not working
[05:54:43] <rocketmagnet> Cork: https://paste.debian.net/1110521/
[05:55:16] <rocketmagnet> but when i look it through wireshark the output is completely different, he make no post request, he make an http option request ...
[05:56:00] <rocketmagnet> i have the python equivalent for the request: r = requests.post('http://localhost:4000', data=json.dumps({"jsonrpc": "2.0", "method": "simple_add", "params": {"first": 10, "second": 20}, "id": 1}))
[05:56:26] <rocketmagnet> i need that just with javascript
[05:58:51] <rocketmagnet> Cork: i think it doesn't work with xmlhttprequests
[05:59:02] <rocketmagnet> i think i'll need php
[05:59:54] <shoky> rocketmagnet: the server needs to respond with CORS headers to allow the request, because it's a cross-origin ajax request
[06:00:26] <shoky> https://enable-cors.org/server.html
[06:08:08] <rocketmagnet> shoky: i added the line Header set Access-Control-Allow-Origin "*" in my virtualhost.conf but i still get the error, mod headers is active
[06:09:00] <shoky> rocketmagnet: no idea what's virtualhost.conf  if you still get the error then the headers are not being sent in the response
[06:09:26] <rocketmagnet> shoky: do i need to change the $.ajax request ?
[06:09:31] <shoky> rocketmagnet no
[06:09:40] <shoky> you can remove the crossDomain: true
[06:09:44] <shoky> doesn't matter i think
[06:09:57] <shoky> and you can remove the headers too
[06:13:19] <rocketmagnet> and my json-rpc server is written using python json-rpc, so there i've to set the header to Access-Control-Allow-Origin "*" ?
[06:13:54] <shoky> rocketmagnet: in whatever is sending the response headers, i donno json-rpc
[06:14:23] <shoky> also check what type of request is being sent
[06:14:58] <shoky> e.g. it could be a CORS "preflight" request, which is an OPTIONS request, sent before the actual POST
[09:53:55] <rocketmagnet> shoky: it has something to do with CORS "preflight", what am i supposted to do ? i read https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS but there they set headers i'm not allowed to set with $.ajax =(
[09:54:25] <Cork> cores has to be set by the server
[09:54:46] <Cork> it is the browser asking the server if it allows the action
[09:54:49] <rocketmagnet> i set also the headers by the server but i always get an CORS error
[09:55:08] <Cork> what verb are you using in the network call?
[09:56:18] <rocketmagnet> but what headers does i have to send ? i tried Access-Control-Allow-Origin, Access-Control-Allow-Methods, Access-Control-Allow-Headers but always the CORS error
[09:56:31] <Cork> you don't have to send anything
[09:56:43] <Cork> the server has to set those headers
[09:56:56] <Cork> but when depends on what verb your using in your call
[09:57:02] <rocketmagnet> i mean by the server, the ajax request send an http option request and the server has to respont to it right ??
[09:57:22] <Cork> depends on what verb your using, like i've said three times now
[09:57:33] <rocketmagnet> what you mean by verb ?
[09:57:41] <Cork> http verb
[09:57:58] <rocketmagnet> i don't know anything about http verb
[09:58:01] <Cork> "get", "post", "patch", "head"...
[09:58:08] <rocketmagnet> post
[09:58:21] <Cork> ok, posts has a preflight with a OPTIONS verb
[09:59:03] <Cork> and it has to answer with permissing for the origin your from allowing it to do the action
[09:59:06] <rocketmagnet> how do i set it with $.ajax ? or does the server gets it as a response ?
[09:59:10] <Cork> you don't
[09:59:32] <Cork> you just do a normal $.ajax(url, { method: 'post' })
[09:59:41] <Cork> the browser and the server does the negotiation
[10:00:17] <rocketmagnet> so i've to set Access-Control-Allow-Origin:*, Access-Control-Allow-Methods: GET, POST, OPTIONS, anything else ??
[10:00:40] <Cork> are you sure you want to open it up that much?
[10:00:46] <Cork> it makes the server very exposed
[10:00:52] <rocketmagnet> it just running on localhost
[10:01:21] <Cork> your not running from file:// are you?
[10:01:33] <Cork> cause then browser block all posts with cors
[10:02:10] <rocketmagnet> no
[10:02:30] <Cork> then no it should work fine
[10:02:43] <rocketmagnet> but how do i get the json-rpc response then ??
[10:03:03] <Cork> as long as the cors doesn't block you you should get it as a normal ajax response
[10:03:22] <Cork> same as if you did the call to the same domain your page is loaded from
[10:03:25] <rocketmagnet> so a second call to $.ajax ??
[10:03:33] <Cork> uh...
[10:03:58] <Cork> sounds like you should read https://learn.jquery.com/ajax/
[10:04:33] <rocketmagnet> when the first call creates an http OPTIONS request and the server responses with the headers i showed above, how to get the data then
[10:04:45] <Cork> no that isn't what happens
[10:05:08] <Cork> when you make a post call, the browser preflights meansing before that call is made
[10:05:13] <Cork> makes an options call
[10:05:35] <Cork> if the browser likes the answer it gets from the server it makes the requested ajax call
[10:05:44] <Cork> if it doesn't it refuses and throws an error
[10:12:53] <rocketmagnet> i understand, so what's wrong with this ajax call ? https://paste.debian.net/1110585/
[10:14:09] <Cork> uh your giving the option jsonp a function...
[10:14:32] <Cork> i THINK you meant to have that process the response?
[10:14:45] <Cork> also json != jsonp
[10:15:10] <rocketmagnet> i thought i've to use jsonp because of the CORS thing
[10:15:25] <Cork> you can't just switch json to jsonp
[10:15:41] <Cork> jsonp is the server responding with javascript containing the data instead of json
[10:15:53] <rocketmagnet> ah ok
[10:15:55] <Cork> and it can only be get requests (as it is loaded through <script> tags)
[10:16:18] <Cork> also jsonp is a option for alternative function names in the call
[10:16:20] <Cork> not a callback
[10:16:59] <rocketmagnet> so how would the $.ajax request would look like ?
[10:17:26] <Cork> like a normal ajax call, nothing special about it
[10:17:55] <Cork> and if you don't know what that means you need to learn the basics
[10:18:06] <Cork> and i linked you that a little while ago
[10:21:50] <rocketmagnet> i've now: https://paste.debian.net/1110589/ but i still get the CORS error
[10:22:37] <rocketmagnet> but i return the OPTIONS http request with an http 200 ok with the headers i said earlier..
[10:35:24] <rocketmagnet> Cork: the server send back the right headers but i still get the CORS error message
[10:42:55] <rocketmagnet> Cork: xmlhttprequest does not send normal http requests, when i look at the output of wireshark of the example that works (written in python) and compare it to the ajax request it's completely different
[10:45:35] <rocketmagnet> can i send a normal http request with jquery ??
[10:46:03] <rocketmagnet> the python code that works look like this: r = requests.get('http://localhost:9999', data=json.dumps({"jsonrpc": "2.0", "method": "bin_getAccountInfo", "params": [], "id": 1}))
[10:59:40] <rocketmagnet> Cork: the difference is also how the data is passed, in the working example the json data is passed as a string but when i look at wireshark it's passed as request url
[11:00:10] <rocketmagnet> i mean for the ajax request it's send as request uri
[11:00:17] <rocketmagnet> not as data
[11:00:35] <rocketmagnet> Cork: ^
[11:13:35] <robertmaxrees> rocketmagnet so the issue is you're getting CORS errors?
[11:14:40] <rocketmagnet> not only, i also have the problem that the ajax requests are different from the requests i do with python so the data in not passed the right way with $.ajax
[11:14:48] <robertmaxrees> let's talk about 1 issue at a time :)
[11:14:56] <robertmaxrees> so the CORS errors - that's a server configuration problem.
[11:15:04] <robertmaxrees> you cannot resolve that through jquery
[11:15:12] <rocketmagnet> i've written a server with python
[11:15:25] <robertmaxrees> make sure you're setting the proper header
[11:15:27] <rocketmagnet> with jsonrpc from PyPI
[11:15:29] <robertmaxrees> on the server.
[11:16:30] <rocketmagnet> i'm not sure what the real headers are, i tried setting Access-Control-Allow-Origin to *
[11:16:46] <robertmaxrees> https://enable-cors.org/
[11:16:57] <robertmaxrees> please actually read what that does, though.
[11:17:00] <robertmaxrees> and be careful with it.
[11:17:14] <robertmaxrees> once you get the header properly set, we can move on to your second issue :)
[11:19:18] <rocketmagnet> ok, thank you
[11:35:46] <rocketmagnet> robertmaxrees: i need a break, i'm now sitting around 8 hours at this thing, do you have time tomorrow or so ? it's more complicated than just the CORS stuff, the $.ajax requests are also not working properly
[11:35:55] <robertmaxrees> lol
[11:36:15] <robertmaxrees> if you need more help tomorrow, just ask.  if somebody can help, they will :)
[11:36:42] <rocketmagnet> i've a python equivalent that works that i need in javascript: r = requests.get('http://localhost:9999', data=json.dumps({"jsonrpc": "2.0", "method": "bin_getAccountInfo", "params": [], "id": 1}))
[11:36:49] <robertmaxrees> huh?
[11:37:31] <robertmaxrees> that looks... strange.
[11:37:34] <rocketmagnet> that is the client request for the json-rpc server in python, i want it with $.ajax in javascript but i'm not sure if this is possible
[11:37:43] <robertmaxrees> get requests shouldn't have post bodies.
[11:37:58] <robertmaxrees> only post requests should have post bodeis.
[11:38:00] <robertmaxrees> *bodies
[11:38:06] <rocketmagnet> that's python
[11:38:23] <robertmaxrees> right, i'm telling you that you're using requests.get incorrectly.
[11:38:31] <robertmaxrees> that should be requests.post
[11:38:34] <rocketmagnet> it's an http get request
[11:38:39] <robertmaxrees> and again
[11:38:42] <robertmaxrees> please listen
[11:38:50] <robertmaxrees> get requests SHOULD NOT have post bodies.
[11:38:56] <robertmaxrees> only post requests should have post bodies.
[11:39:24] <robertmaxrees> your python is wrong and you will not be able to replicate it.  that needs to be a post request instead.
[11:39:30] <rocketmagnet> it does not change anything on the server side, it only passes the method and it's arguments to the json-rpc server
[11:39:42] <robertmaxrees> dude
[11:39:43] <robertmaxrees> lol
[11:39:53] <robertmaxrees> it needs to be a post request.
[11:40:06] <robertmaxrees> so whatever you're doing on the JS side needs to be a post, not a get.
[11:40:15] <robertmaxrees> i don't understand where i'm losing you.
[11:40:32] <rocketmagnet> in the example above it doesn't matter if post or get
[11:40:38] <rocketmagnet> both are working
[11:40:41] <robertmaxrees> last time i'm going to say it
[11:40:52] <robertmaxrees> in JS, you cannot set a post body on a get request
[11:40:56] <robertmaxrees> it needs to be a post request.
[11:41:10] <robertmaxrees> i'm not setting some kind of arbitrary limitation - it is a thing you cannot do.
[11:41:15] <rocketmagnet> yes - POST, i understand
[11:41:27] <robertmaxrees> so what's your JS now?
[11:42:51] <rocketmagnet> https://paste.debian.net/1110621/
[11:43:24] <robertmaxrees> remove the dataType
[11:43:58] <robertmaxrees> and data: JSON.stringify(d), should just be data: d,
[11:45:21] <rocketmagnet> ok
[11:45:33] <robertmaxrees> otherwise, your contentType makes no sense ;)
[11:46:16] <rocketmagnet> the json-rpc server i use is: https://pypi.org/project/json-rpc-3/
[11:46:38] <robertmaxrees> i like sandwiches
[11:47:04] <robertmaxrees> (what does that have to do with anything??)
[11:49:29] <rocketmagnet> i think it might not be compatible with $.ajax ...
[11:50:12] <robertmaxrees> some searching on the internet says it should work fine.
[11:50:19] <robertmaxrees> https://stackoverflow.com/a/8173342/923919
[11:51:29] <rocketmagnet> these are not the same modules
[11:52:28] <robertmaxrees> also, per https://json-rpc-3.readthedocs.io/en/latest/, your module doesn't handle the transport - you need to wire that up yourself.
[11:52:44] <robertmaxrees> do you not have some sort of HTTP handling setup?
[11:53:00] <rocketmagnet> here is my server: https://paste.debian.net/1110626/
[11:53:17] <robertmaxrees> ^ mind answering my question flat out?
[11:53:31] <rocketmagnet> werkzeug
[11:53:41] <robertmaxrees> i asked a yes/no question :)
[11:54:24] <robertmaxrees> if you have setup support for http requests, then $.ajax will work fine.
[11:55:42] <rocketmagnet> yes, the werkzeug module does that for me (using wsgi i think)
[11:55:54] <robertmaxrees> so then what's the issue now?
[11:57:46] <rocketmagnet> that it seems to be not compatible, when i look at the wireshark output of the requests (the python one and then the javascript one) the data is passed different for example, i'm really destroyed after the last few hours trying to get it working
[11:58:04] <robertmaxrees> what's the difference between the two?
[11:58:27] <robertmaxrees> jquery absolutely can handle the ajax request, so long as you have things setup properly on the client and server.
[11:59:31] <rocketmagnet> the ajax request passes the data as ?method=xy&parms=...&id=0 while the python one send it as a header and a pure json string
[12:00:20] <robertmaxrees> it's not type: 'POST' btw.
[12:00:27] <robertmaxrees> it's method: 'POST'
[12:00:43] <robertmaxrees> they technically point to the same thing, but just to make it easier on yourself.
[12:00:55] <robertmaxrees> unless you're using an old version of jquery.
[12:01:30] <robertmaxrees> i might just reduice your JS down to just have the URL, data, and method properties.  leave off dataType and contentType
[12:01:45] <rocketmagnet> ok
[12:02:03] <robertmaxrees> if the body is getting appended to the url, that means that the method isn't getting set properly.
[12:03:41] <rocketmagnet> that looks better now
[12:03:48] <robertmaxrees> that working correctly?
[12:05:11] <rocketmagnet> i still have troubles with the CORS stuff ... as i said i really got toooo much time now trying to get it working
[12:05:47] <robertmaxrees> sure.  do some research into properly allowing CORS.  it's pretty simple :)
[12:08:12] <rocketmagnet> i'll be on longer today and tomorrow and that day after, i hope you can help me as soon as i'm recovered
[12:08:30] <rocketmagnet> i just need some time off the screen
[12:08:43] <robertmaxrees> lol tomorrow's saturday.  probably won't be on again until monday.
[12:08:58] <robertmaxrees> still feel free to ask for help in there though.  if somebody is available, they'll assist :)
[12:09:09] <rocketmagnet> than it's monday, i'm on every day (mostly)
[12:09:18] <robertmaxrees> :shrug: don't wait for me.
[12:11:18] <rocketmagnet> i don't, i try to solve the CORS thing and then i just have to do the right ajax call i hope, but that's unclear if it will work
[12:11:36] <robertmaxrees> it will work.
[12:12:46] <rocketmagnet> i hope really really that it will but the $.ajax call is passing the data in a different manner than the python call
[12:13:07] <robertmaxrees> it's only passing what you give it.
[12:13:15] <robertmaxrees> sounds like you need to fix the foirmat you give it :)
[12:17:33] <rocketmagnet> this is how the working request looks like from python: https://postimg.cc/yWHSHmCj (left screen)
[12:17:49] <robertmaxrees> eh
[12:18:05] <robertmaxrees> screenshots are super unhelpful
[12:18:48] <robertmaxrees> and it sounds like youre conflating concepts.
[12:19:04] <robertmaxrees> the json-rpc stuff won't care about more than just actual post of the request.
[12:19:27] <rocketmagnet> request uri is / and the json data for the method to call is inside of a data header or something, with the ajax requests i have the json data in the request uri
[12:19:29] <robertmaxrees> that screenshot looks like you're sending a file.
[12:19:50] <robertmaxrees> you just need to modify how you're sending things to that module.
[12:21:28] <rocketmagnet> i hope that's possible with jquery
[12:21:41] <robertmaxrees> erm.
[12:21:46] <robertmaxrees> it's not a jquery issue at that point.
[12:21:51] <robertmaxrees> you need to fix your server.
[12:22:22] <robertmaxrees> all jquery is doing is sending the data to your server.  then you need to properly handle it and call that module.
[19:40:27] <berndj> i have some html of the form: <a class="thing">...</a> spacer text <a class="thing"> ...</a> spacer text <a ...; i want to delete one <a> node but then also eat adjacent spacer text (it's a chemical equation); what's a good way to kill the adjacent text?
[19:41:05] <robertmaxrees> berndj eh... any way you can render them with a surrounding <span>?
[19:41:48] <robertmaxrees> issue is doing what you want is going to be a big pain in the behind.
[19:41:51] <berndj> robertmaxrees, i suppose i could, i was just wondering if it's doable without moving mountains without a surrounding tag
[19:42:08] <robertmaxrees> it's one of those "big PITA" things.
[19:42:28] <berndj> so i can't just iterate through .contents() and zap stuff?
[19:42:35] <robertmaxrees> i wouldn't.
[19:42:58] <robertmaxrees> it's possible to, but it's going to be a big, unwieldy thing.
[19:43:09] <robertmaxrees> whereas with a surrounding element, it's, like, a line or two.
[19:43:28] <berndj> what makes it unwieldy? is it if other tags start showing up in the spacer text?
[19:43:36] <robertmaxrees> huh?
[19:44:26] <robertmaxrees> it's unwieldy because you'll basically have to take the parent, get its markup via .html(), modify the html as a string, then replace the original element.
[19:44:45] <robertmaxrees> you could potentially loop through with .contents(), but again - just adding a single wrapping span makes this 1000x easier.
[19:52:24] <berndj> ok, you've convinced me, since it looks like text nodes are a bit icky to work with
[19:52:45] <robertmaxrees> :) plus it's far more semantic.
[19:53:11] <robertmaxrees> now you have at least some semblance of an explicit relationship between an element and its related text
[19:54:40] <berndj> i just don't like how my initial html ends up looking, or alternately that my initial html won't match what the js code adds in dynamically
[19:54:51] <robertmaxrees> erm
[19:54:57] <robertmaxrees> they should match.
[19:55:00] <robertmaxrees> so update the js :)
[19:55:32] <berndj> i mean the difference is just in whitespace, but that's just me being perfectionist
[19:56:11] <robertmaxrees> lol
[19:56:26] <robertmaxrees> I wouldn't worry about it.  all looks the same in the inspector ;)
