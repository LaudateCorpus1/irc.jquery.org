[01:11:20] <Samian> this channel is pretty big for being nothing more than a javascript library
[01:12:08] <robertmaxrees> Used to be bigger, to boot.
[01:13:41] <Samian> to boot?
[01:13:52] <Samian> didn't this channel used to be bigger than ##javascript itself?
[01:14:07] <robertmaxrees> It's a phrase.
[01:14:12] <robertmaxrees> to add emphasis.
[01:14:23] <robertmaxrees> and if memory serves, yeah.  or at least rivaled it :)
[01:14:24] <Samian> got it
[01:14:37] <Samian> how did it shrink 10 fold?
[01:14:47] <robertmaxrees> i mean, it's pretty obvious.
[01:14:49] <Samian> I remember this channel had more than 1000 members
[01:15:07] <Samian> jquery is still around... https://en.wikipedia.org/wiki/JQuery
[01:15:13] <robertmaxrees> yeah.
[01:15:15] <robertmaxrees> highly influential library where most of the featureset got implemented natively by the browsers.
[01:15:18] <Samian> so what's the obvious reason?
[01:15:26] <robertmaxrees> lots of legacy code, but not really actively used for new development.
[01:15:28] <Samian> oh
[01:15:42] <robertmaxrees> plus there are a ton of other ways to smooth out inconsistencies between browser APIs these days.
[01:15:57] <Samian> so less people are using jquery?
[01:16:08] <robertmaxrees> for new development, probably.
[01:16:18] <Samian> I remember this channel saved my ass during my first programming job senior year of college about 10 years ago
[01:16:34] <robertmaxrees> react/angular/vue and the like supercede the need for jquery.
[01:23:15] <Samian> aha
[01:24:17] <Samian> then that makes react and angular our enemy
[01:25:37] <robertmaxrees> heh, I mean, no?
[04:29:31] <sabocat> When I make a call to my API via jQuery's $.ajax() method, I notice it makes over 20 calls to the API. Why is this, and how do I stop it?
[04:30:19] <robertmaxrees> sabocat literally dozens of factors that would play into that.
[04:30:43] <sabocat> Really? That's quite surprising.
[04:31:14] <sabocat> Could you give me a for-instance?
[04:31:35] <robertmaxrees> how else have you tested it?  what's the backend?  have you done any profiling to try to understand what's causing it to take so long?  have you tried it with postman or similar tools?
[04:32:24] <robertmaxrees> $.ajax is just doing an xmlhttprequest, so pinning blame on it seems... odd.
[04:32:54] <robertmaxrees> also: i see you've shotgunned this question out to multiple channels :)
[04:33:09] <robertmaxrees> let me guess, it's taking 20 seconds and then failing?
[04:33:32] <sabocat> I'm looking at the network tab in firefox, and seeing 20+ POST requests, as well as seeing on my backend.
[04:33:51] <robertmaxrees> uh...
[04:34:05] <robertmaxrees> how many times are you calling this binding?
[04:34:23] <sabocat> Once. Why do you think I'm on here asking?
[04:34:44] <robertmaxrees> how have you confirmed that?
[04:35:01] <sabocat> The "Submitting..." only appears once in the console log
[04:35:39] <sabocat> Oh, sorry, like you said, multiple channels
[04:35:41] <sabocat> https://pastebin.com/8ZgktF7Q
[04:35:51] <robertmaxrees> fwiw most debugging tools will stick repeating console logs into a single line with a counter.
[04:36:57] <robertmaxrees> set a breakpoint on line 4 and see what happens when you click the button.  if it breaks more than once, there's your first problem.
[04:40:41] <sabocat> Great thinking. Only broke once :(
[04:41:00] <robertmaxrees> so what's telling you it's calling more than once?>
[04:41:37] <robertmaxrees> also: you're trying to set Access-Control-Allow-Origin - that's not how that works.
[04:41:41] <robertmaxrees> you can't set that client side.
[04:41:43] <sabocat> Like I said: I can see it on my backend in the logs, & I can see it on the client side in firefox's network tab
[04:43:51] <robertmaxrees> also: which button are you clicking when you see this problem happen?
[04:43:59] <robertmaxrees> there are two bindings in the paste.
[04:44:05] <sabocat> This triggers a task which takes ~5-10 seconds to complete on the backend.
[04:44:29] <sabocat> Oops, sorry hasty select, the #refresh-button
[04:45:03] <robertmaxrees> so my thing about that header
[04:45:05] <robertmaxrees> what's that about?
[04:45:30] <sabocat> Was getting CORS errors, and trying to shotgun blast my way through it
[04:46:23] <robertmaxrees> you can't set that header client-side.
[04:46:35] <sabocat> Got it. Deleted, no change in problem
[04:47:03] <robertmaxrees> without seeing more, there's no way to help.
[04:47:22] <robertmaxrees> sounds like maybe a server-side bug to me.
[04:48:08] <sabocat> Hmph. Gotcha. Thanks for your assistance
[04:48:36] <robertmaxrees> fwiw - shotgunning your question out to multiple channels is generally considered a no-no ;)
[04:50:39] <sabocat> Sorry. Immediately went to #javascript, then thought "I wonder if jq has its own channel"
[04:51:06] <robertmaxrees> all good.
[06:47:25] <IamTrying> $(document).ready (function() {  document.getElementsByClassName('button-group-center').appendChild('<button>Help</button>'); $('.button-group-center').append('********'); } ); - Why none of append is working inside <div id=react></div>
[06:50:30] <IamTrying> https://paste.ubuntu.com/p/YwtCGr4tCq/ - Not appending anything.
[20:13:24] <_savage> Hey! I'm confused. $("#thing > p").each(function() { console.log($(this).data("foo")); }) correctly prints three data attributes and a bunch of undefined for an empty attribute. However, $("#thing > p[data-foo]:not([data-foo=''])") contains only one element. WHY?!
[20:14:04] <_savage> Should the second object contain the same three p elements?
[20:14:14] <_savage> Or what am I missing here?
[20:32:18] <Waldkauz> _savage: Is the data-foo attribute assigned from the HTML or via JS?
[20:32:57] <_savage> Waldkauz: via JS. If it comes from HTML it works.
[20:35:13] <Waldkauz> I guess that's the reason then
[20:45:16] <_savage> Waldkauz: How so? The JS manipulates the DOM and jQuery iterates over the DOM. Yet, one way of creating a selection yields a different result than the other.
[20:47:10] <Waldkauz> CSS attribute selectors query (static) attributes, not (dynamic) properties
[20:47:39] <Waldkauz> Try e.g. [val="foo"] for a text input. It won't match if you type the text "foo"
[20:51:23] <_savage> Waldkauz: Ohâ€¦ that's good to know!
[20:51:44] <_savage> Waldkauz: I assumed that selection _always_ works on the current DOM state.
[20:52:52] <Waldkauz> Only some special selectors do, like :checked or :disabled
[20:55:06] <_savage> Schnufte :)
[20:57:05] <Waldkauz> :D
[23:42:17] <robertparkerx> can I have a hidden input field that is disabled not to allow changes but set by server side? then be able to get the .val() for an ajax
[23:48:24] <Waldkauz> You can include a hidden input, but you cannot prevent the user from manipulating its content via the DOM inspector or such
