[06:35:05] <lilltiger> have there been changes to the browsers that made: $('my_element').click()/.trigger('click');  to no loger fire the click event on the element?
[06:36:16] <Robdgreat> that would be strange
[07:12:55] <Cork> no, there hasn't
[07:13:35] <Cork> though, .trigger() has never fired none jquery event handlers
[07:13:47] <Cork> but that isn't anything new
[07:27:34] <lilltiger> hmm, ok must be something else going on then
[07:27:58] <lilltiger> just stopt working last week without any changes to that code
[07:30:48] <Cork> lilltiger: might be your not waiting for the dom to stabilize and something takes a little longer and ther by doesn't exist when you select it now
[07:31:13] <Cork> or for that matter have a third party script that has changed
[07:31:38] <Cork> (or duplicate ids is a third option)
[13:16:50] <z1haze> is const $forms = $('#forma, #formb'); $forms.find('....').on('input', ....) the same as $form.each(function(i, $form) { $form.on('input', ...) ?
[13:17:28] <z1haze> or will $finds.on(... add a single event handler to both
[13:18:04] <robertmaxrees> they are not the same.
[13:18:28] <robertmaxrees> $forms.find('....').on() is adding an event listener to whatever you select with the .find()
[13:19:19] <robertmaxrees> the $forms.each() one is binding event listeners to just the elements with the #foirma and #formb IDs
[13:19:43] <robertmaxrees> z1haze
[13:20:11] <z1haze> yeah, sorry i didnt flesh out the demo. i more or less just meant the $forms.on('something') is the same as $forms.each(function() { $(this).on('something')
[13:20:47] <robertmaxrees> hate to be pedantic, but they're not the same, but they will net very simialr results :)
[13:20:49] <z1haze> i have 2 separate forms i want to initialize a debounce handler on all of the inputs, but i dont want them to interfere.. eg if form a changes, it shouldnt effect the debounce on form b
[13:21:05] <z1haze> and im wondering if changing to an each would make a difference
[13:21:25] <robertmaxrees> gotcha.  depends on how you implemented the debounce.
[13:21:46] <z1haze> currently, $formsToScrub.find(':input:not(:hidden)').on('change', debounce(async function () {
[13:21:54] <robertmaxrees> can you share in a fiddle?
[13:21:58] <z1haze> sure
[13:22:04] <robertmaxrees> i'm interested in how the debounce is implemented.
[13:28:51] <z1haze> robertmaxrees, https://jsfiddle.net/z1haze/ty3mxp6n/
[13:32:05] <z1haze> goal is to implement the debounce independently on the 2 forms, currently if i modify forma, then modify formb before the deounce period, it wont perform the handler on forma
[13:32:08] <z1haze> hope that makes sense
[13:32:08] <robertmaxrees> hum.
[13:32:31] <robertmaxrees> well first off - why the async?  you're not resulving anything within the callback.
[13:32:35] <robertmaxrees> *resolving
[13:32:40] <z1haze> not in this one..
[13:32:43] <z1haze> in my real one i am
[13:32:46] <robertmaxrees> okay.
[13:34:06] <z1haze> so i was hoping that if i went with the commented out approach it would actually apply differently, but i think because they are both calling the same function it doesnt work
[13:34:32] <z1haze> if i did an anonymous function that returns debounce, it might?
[13:34:55] <robertmaxrees> it does - change is a weird event to use to demonstrate what's going on here -
[13:34:56] <robertmaxrees> https://jsfiddle.net/robertmaxrees/prosj9md/5/
[13:35:28] <z1haze> i had started with input, but had some reall bad side effects
[13:35:39] <robertmaxrees> like what?
[13:36:09] <robertmaxrees> and in any case, this is just demonstrating the difference between the two.
[13:36:35] <z1haze> slow typers would cause requests to kick off prematurely beacuse the form was indeed "valid" but this particular forms runs an address validation, which was resulting with an invalid address result, which would show the customer an error, when they werent even finished typing
[13:36:54] <robertmaxrees> gotcha.
[13:37:08] <robertmaxrees> so either way, this should demonstrate that there is, indeed, a difference :)
[13:37:35] <robertmaxrees> it's even more pronounced if you extend that timeout a little.
[13:38:04] <robertmaxrees> the former is "sharing" the timeout, whereas the latter isn't.
[13:38:16] <z1haze> looking at your sample here, and i do not think we're tracking the same objective. i had put those 2 event handlers in the code as options. there will only ever be one of those
[13:38:25] <robertmaxrees> correct.
[13:38:37] <robertmaxrees> i am showing you the difference between the two :)
[13:38:39] <z1haze> i basically want forma and formb to operate debounce independently
[13:38:44] <robertmaxrees> correct.
[13:38:45] <z1haze> oh ok
[13:38:47] <z1haze> let me see
[13:38:52] <robertmaxrees> and my changes show you how to accomplish tat.
[13:38:54] <robertmaxrees> *that
[13:39:05] <robertmaxrees> you need the .each() in this case.
[13:39:17] <z1haze> ok thats exactly what i was hoping for
[13:39:21] <z1haze> but i was having a hard time proving it
[13:42:54] <z1haze> thanks
[13:43:18] <robertmaxrees> yup
[14:13:04] <plamb> im running a 3rd party module that attaches a 3rd party JS file every time a video is embedded in a page
[14:13:19] <plamb> so if 8 videos are embedded in a single page, the <script> is attached 8 times
[14:13:33] <plamb> does the browser actually run that script 8 times? Or does it recognize that its being repeated
[14:14:49] <robertmaxrees> lol
[14:15:48] <plamb> ill take that as yes it does run it 8 times
[14:16:08] <robertmaxrees> shotgunning questions out - for shame.
[14:16:16] <robertmaxrees> ;)
[14:16:38] <plamb> :(
[14:16:52] <plamb> information era, no one wants to wait for an answer
[14:16:59] <robertmaxrees> still rude my dude.
[14:17:02] <robertmaxrees> all good tho
[18:05:15] <pavelz> any jquery-ujs users here?
[18:05:29] <pavelz> im not getting 'ajax:*
[18:05:43] <robertmaxrees> maybe not - but if you share the code you're struggling with somebody can likely help.
[18:05:47] <pavelz> triggers working. triggering in console works
[18:10:20] <admin123> how might I build this? https://imgur.com/a/pZdqQsR
[18:14:28] <robertmaxrees> admin123 build what?
[18:16:29] <robertmaxrees> admin123 is that some kind of dropdown navigation or something?
[18:21:21] <admin123> dropdown select for a form
[18:21:36] <admin123> past responses, think like gmail suggested replies.
[18:21:56] <robertmaxrees> quick google search reveals some tutorials and guides on the subject.
[18:33:16] <admin123> got this https://jsfiddle.net/morenoh149/fhx6puq4/2/
[18:34:48] <robertmaxrees> ok
[18:48:08] <admin123> done https://jsfiddle.net/morenoh149/fhx6puq4/14/
[18:48:44] <robertmaxrees> cool
[19:16:58] <gone_missing> I think I found a bug in sizzle but I don't know where to look to go about fixing it
[19:17:38] <gone_missing> for the :target selector if you update window.location.hash through reassignment, :target will hit the updated hash
[19:18:09] <gone_missing> but if you use pushState(null, null, "#foo"), even though window.location.hash is updated :target will hit the old value
[19:18:49] <gone_missing> I updated a test to try that case in the sizzle unit tests and it fails, but I don't know, if this is a bug
[19:19:26] <gone_missing> I assume it's because on pushState the onHashChange event isn't fired so a cached value is used, but I don't know where I'd go about updating that
