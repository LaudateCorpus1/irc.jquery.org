[02:07:04] <Cork> ringzer0: you can write an object walker function walk(obj) { $.each(obj, function(i, o) { if(o.constructor == Object) { walk(o); } /* handle other values */ } }
[02:07:38] <Cork> it all depends on what you need to do with the nested objects
[02:10:30] <Cork> ringzer0: if you know the netsing names and just don't want to crash if it doesn't exist that is A LOT simpler
[02:10:47] <Cork> ((x||{}).y||{}).z
[11:00:12] <royalty> https://jsfiddle.net/85hdxvzq/
[11:00:25] <royalty> what's the most generic way i can differentiate between these data structures
[11:00:40] <royalty> the difference i care about is one has an object of objects
[11:00:51] <royalty> and the other one is an an object with a key value
[11:22:26] <Cork> royalty: you mean you just want to detect the difference?
[11:22:40] <royalty> I think I figured it out
[11:22:41] <Cork> check for the existance of _ids or empty on the first nested object
[11:23:04] <royalty> in a loop jQuery.each (errorObjects I did
[11:23:10] <royalty> if (typeof value[Object.keys(value)[0]] === 'object') {
[11:23:55] <Cork> i would prob base it on key name instead of if it contains a value with type object
[11:24:17] <Cork> cause everything in javascript is based on the object type
[11:24:27] <Cork> (well except a few base types)
[11:24:32] <royalty> i can't rely on those key names is the problem
[11:24:44] <royalty> but I think I've figured it out for now, thank you!
[11:25:03] <Cork> but you can relay on the number of nesting??
[11:25:16] <Cork> sounds weird
[11:27:23] <royalty> yeah, would be better if i actually built things out to be recursive
[11:27:25] <royalty> oh well
