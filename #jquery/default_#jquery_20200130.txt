[02:24:59] <anli> Can I find out which element that will receive mouse wheel events?
[02:25:40] <Cork> depends on the os so kinda
[02:26:06] <anli> You mean that you cannot set that element with javascript?
[02:26:39] <Cork> some oses does it based on what element the pointer is over
[02:26:45] <Cork> some does it based on what element has focus
[02:27:00] <anli> Is it the same as document.activeElement?
[02:27:15] <Cork> ya, for every except mac if i remember correctly
[02:27:25] <anli> oh
[02:27:37] <Cork> and ya, exept all touch devices
[02:27:54] <Cork> but, why do you need to know?
[02:28:43] <Cork> wheel events bubble, so if you want to catch it no matter where it comes from just bind it on document
[02:29:26] <anli> The thing is that I have a so called bootstrap modal upon another bootstrap modal and when that closes, the underlying one does not receive mouse wheel events any longer
[02:30:28] <Cork> ah, ya that should just be triggering a .focus() on the old modal
[02:31:14] <anli> .focus is maybe better... didnt know that focus works on divs
[02:32:06] <Cork> only if it has a tabindex
[02:33:58] <anli> ah, maybe I just need to add that
[02:34:06] <anli> its -1
[02:34:46] <Cork> -1 is fine
[02:35:00] <Cork> the attribute need to exist thought
[02:37:41] <thykka> what
[02:37:50] <thykka> why should the underlying modal receive mouse events?
[02:38:08] <thykka> the entire point of a modal is to force the user to act on that particular thing, before they can resume normal usage
[02:38:39] <Cork> thykka: when the top most one goes away
[02:39:27] <Cork> it is quite a common situation and just needs a .focus() call on the correct element
[02:40:32] <thykka> then it sounds like a bug in bootstrap
[02:40:38] <anli> Hm, out of ideas...
[02:40:46] <anli> Do they scroll dialogs manually?
[02:41:09] <anli> I have tried to focus inputs inside that modal as well
[02:41:23] <anli> Maybe I should update bootstrap to check that out
[02:42:47] <anli> its bs 3 however...
[02:42:48] <Cork> might also be better to ask that in there support channel instead of having us guess at it
[02:44:02] <Cork> cause what you get here is generic how focus and mouse events work in html, not how bootstrap does things
[02:44:17] <Cork> s/html/dom/
[02:50:13] <anli> I really wanted a generic answer on which element that you would expect is getting mouse events
[02:50:35] <anli> bs 3.3.7 did not help
[02:50:48] <anli> Maybe I should not do tall dialogs...
[02:51:24] <thykka> no generic answer exists, because browsers don't generally mess with scroll wheel like that, but apparently bootstrap does
[02:53:36] <anli> It cannot use the mouse wheel unless the browser lets it :)
[02:54:14] <anli> hm, yeah, bootstrap intercepts the event programmatically, must be it
[02:54:25] <anli> Is that actually what you mean?
[02:54:55] <Cork> scroll wheels goes according to the desktop standards
[02:55:06] <Cork> so normally to the focused element
[02:55:31] <anli> Seems that it did not care about either active or focused element
[02:55:42] <Cork> those are the same >_>
[02:55:45] <anli> lol
[02:55:46] <anli> you are right
[02:56:16] <Cork> if focusing the dialogs correct element doesn't work it means bootstrap does somethign
[02:56:22] <Cork> and you will have to ask them how to handle that
[02:56:25] <anli> I have a focus style so I can see that I focused a textbox inside the dialog, still mouse wheel events was going to body level
[02:56:52] <Cork> as events bubble it will go do body; always
[02:56:53] <anli> They will say upgrade to bs 4, which I am not ready to do
[02:57:01] <Cork> if is about if it goes somewhere else too
[02:57:28] <anli> I think I give up on it, it should be a bug...
[02:57:45] <Cork> and if you actaully expect it to NOT go to body, then you most likely have an event handler that was lost somewhere
[02:57:58] <anli> yeah
[02:58:02] <Cork> and again you need to ask bootstrap where this event listener is and what it expect
[02:58:20] <anli> true
[02:58:23] <Cork> doesn't sound like a bug, just that most frameworks don't expect two modals to exist at the same time
[02:58:52] <Cork> had the same problem with jquery-ui way back
[02:59:02] <Cork> (might have the same problem today, donno)
[02:59:57] <anli> yeah, two modals at the same time is a really bad thing...
[03:00:08] <anli> Maybe I should let the second not be a bs modal actually
[03:00:14] <anli> Then I circumvent the problem
[03:00:15] <Cork> wouldn't go as far as bad, just not normally handled
[03:01:13] <anli> Or I can have the bs dialog changing content so I will only have one dialog...
[03:02:17] <Cork> or you just talk with the ones that knows the framework your using so you know how you handle it...
[03:02:23] <anli> yeah
[03:14:56] <Lisa39> hello
[03:34:23] <anli> I remember that I once knew how to respond to that...
[03:34:32] <anli> Hi Lisa!
[03:36:28] <Lisa39> hi anli
[03:36:48] <Lisa39> do you code?
[03:36:51] <anli> yeah
[03:36:53] <anli> you?
[03:36:58] <Lisa39> yes
[03:37:49] <Lisa39> austnet seems to be mostly web developers now
[10:27:36] <z1haze> if you do preventDefault in a submit handler, and then at the end of the handler call form.submit().. will it cause an endless loop or will it actually post the form? I'm trying to figure out how i can still post normally but only after i perform an async operation
[10:32:27] <Cork> z1haze: depends on if form is a jquery object or the form element
[10:32:44] <Cork> if you call submit() on a jquery object you will get a loop
[10:32:53] <Cork> if you call it on the dom element it will just submit the form
[10:32:59] <z1haze> ahh right so i need to get the actual form object
[10:33:19] <Cork> form[0].submit() is the same as the dom element
[10:33:30] <z1haze> would .get() work?
[10:33:38] <z1haze> $form.get(0).submit?
[10:33:40] <Cork> .get(0) === [0]
[10:33:43] <z1haze> right on
[10:33:58] <Cork> except .get() is a function wrapper around the array format
[10:34:10] <z1haze> yeah i gotcha
[10:34:42] <z1haze> how to i return early from an async submit handler
[10:34:47] <z1haze> do i need to throw an exception?
[10:34:53] <z1haze> can you .catch the callback?
[10:36:23] <z1haze> it appears not.. well hmm if you can't return false.. how do you skip out early
[10:41:53] <z1haze> here's a example: https://jsfiddle.net/z1haze/x341apL6/9/ basically ive never come across needing to do this before.. but how would i break early?
[10:44:05] <Cork> z1haze: just return;
[10:44:20] <Cork> false/true is just what you don't want to do
[10:44:22] <z1haze> it doesnt appear to stop execution though
[10:44:26] <z1haze> oh
[10:44:33] <z1haze> oh?
[10:44:35] <Cork> it isn't meant to prevent the submit
[10:44:45] <Cork> e.preventDefault(); does that
[10:45:01] <z1haze> let's say i wasnt doing preventDefault() though
[10:45:12] <z1haze> and i actually wanted to return earlier from the async callback
[10:45:15] <z1haze> is that event possible
[10:45:22] <Cork> you can't return in async calls
[10:45:27] <Cork> as it by definition is async
[10:46:01] <z1haze> right, iget it
[10:46:16] <z1haze> so essentially. the only way to accomplish this is by doing preventDefault and then submitting the native form
[10:46:33] <Cork> ya, if you need to make it async
[10:47:00] <z1haze> cool, well thanks. my learn something for the day is complete and its before 9am
[10:48:36] <Cork> you can "return" in async calls to other async methods, but what you actually do in those cases is dasychain the calls
[10:48:55] <z1haze> yeah i totally get it
[10:48:56] <Cork> so it isn't the classic return you depend on in submit callbacks
[10:49:30] <z1haze> was having an issue because i was doing async, but not doing preventDefault.. therefore the return didnt do anything
[10:49:31] <z1haze> all good
[10:50:44] <Cork> z1haze: ya, you normally want to avoid return false in event handlers
[10:50:55] <Cork> as it makes extending the code with unrelated code impossible
[10:51:10] <Cork> while preventDefalt() doesn't stop other event handlers
[11:37:21] <V7> Why AngularJS jas more user in IRC than jQuery's?
[11:37:25] <V7> Strange thing ....
[11:37:29] <V7> Hey there btw
[11:37:34] <V7> users*
[15:26:24] <daedeloth> am I correct in asuming $.when() with a single promise that resolves to multiple return values is NOT an array?
[15:26:40] <daedeloth> wait that didn't come out right
[15:27:08] <robertmaxrees> :)
[15:27:34] <daedeloth> $.when(oneSinglePromise) { function(result1) { -> result1 is NOT an array, even if oneSinglePromise resolves to two parameters
[15:27:54] <robertmaxrees> what do you mean by "resolves to two parameters"?
[15:28:16] <daedeloth> var oneSinglePromise = $.Deferred(); oneSinglePromise.resolve('a', 'b');
[15:28:21] <daedeloth> like that :)
[15:28:45] <robertmaxrees> https://jsfiddle.net/robertmaxrees/pae2crf6/1/
[15:28:50] <robertmaxrees> here's the test case.
[15:29:27] <daedeloth> yea exactly
[15:29:29] <daedeloth> https://jsfiddle.net/5oa3nuqt/
[15:29:31] <daedeloth> i just made one myself
[15:29:37] <daedeloth> that is very confusing
[15:29:39] <robertmaxrees> looks like that answers the question.
[15:29:44] <robertmaxrees> :)
[15:29:50] <daedeloth> yea but also it's so fucked up :D
[15:30:00] <robertmaxrees> why?
[15:30:14] <daedeloth> well i use it like this:
[15:30:15] <daedeloth> jquery.when.apply(this, promises)
[15:30:34] <daedeloth> and then use the resulting arguments to process the results
[15:30:48] <daedeloth> but if promises is an array with 1 item, i get messed up results
[15:30:55] <daedeloth> if promise is an array with multiple items, everything is fine
[15:31:05] <robertmaxrees> then check the array length first.
[15:31:31] <daedeloth> well yea, but I didn't do that since it doesn't seem logical to me that one method can have multiple return signatures :D
[15:31:38] <robertmaxrees> https://api.jquery.com/jQuery.when/
[15:31:51] <robertmaxrees> "If a single Deferred is passed to jQuery.when(), its Promise object (a subset of the Deferred methods) is returned by the method."
[15:31:53] <robertmaxrees> :shrug:
[15:32:33] <daedeloth> okay, i don't like that design very much :D
[15:32:45] <robertmaxrees> then file a ticket :)
[15:34:40] <daedeloth> hm can i use promise() yet? ;p
[15:34:56] <robertmaxrees> depends on the browsers you need to support.
[15:35:05] <robertmaxrees> can also use babel to expand that.
[15:35:25] <daedeloth> yea i know, but the project is too old and too hugh to port it
[15:35:44] <daedeloth> i'll just write my own 'when' that always has the same return signature. nah.
[15:37:35] <robertmaxrees> i wouldn't do that, but OK.
[15:37:48] <daedeloth> why not?
[15:38:10] <robertmaxrees> reimplementing behavior like that is a great way to confused yourself and others down the line.
[15:38:55] <daedeloth> i'm not overriding jquery's when, i'm using a method that will clearly be differently named
[15:39:19] <robertmaxrees> still going to be confusing.
[15:40:10] <robertmaxrees> i didn't say anything about whether or not it's overriding jquery's when for what it's worth :) but it will make somebody scratch their head and wonder why you didn't just use the normal $.when()
[15:42:48] <daedeloth> well my implementation will be more close to Promise.all
[15:43:20] <robertmaxrees> lol
[15:43:22] <robertmaxrees> good luck :)
[15:44:09] <daedeloth> Promise.all doesn't seem to support multiple arguments in the callback :P
[15:44:25] <robertmaxrees> just use a polyfill for promises at that point
[15:44:30] <robertmaxrees> don't write your own.
[15:46:24] <daedeloth> too much rewriting in too much places, it's going to be easier to just write a method that checks if the amount of deferred promisses > 1 and resolves to an array, as would be expected :)
[15:46:39] <robertmaxrees> lol
[15:46:41] <robertmaxrees> good luck then.
[16:08:56] <daedeloth> https://pastebin.com/7ij1vCtn
[16:09:08] <robertmaxrees> good for you.
[16:09:08] <daedeloth> nothing complex about it, i even gave it a very different name so that it's not confusing :)
[16:09:26] <robertmaxrees> i think you're misunderstanding my point, but okie :)
[16:09:31] <robertmaxrees> enjoy!
[16:22:12] <daedeloth> i think i do get your point, but i feel like i'm misusing $.when by calling it with a variable amount of promises (using .apply), so i feel it's better to misuse it in a central place instead of multipole spaces? :)
