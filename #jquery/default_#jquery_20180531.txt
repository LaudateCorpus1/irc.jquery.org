[00:16:31] <Jonno_FTW> I have a form that is revealed after a .fadeIn(), is it possible to get chrome to autocomplete it?
[01:46:24] <Cork> Jonno_FTW: that you fade the form shouldn't affect autofll
[01:46:27] <Cork> *fill
[01:54:49] <Jonno_FTW> Cork: yeah it started working again somehow
[04:25:57] <linuxson> Quick question: Div's computed height (not sure if that's what you call it) is 200px, though div.outerHeight() returns a value of 34? Even the div.css("height") method returns 34...not sure where this is coming from
[04:26:18] <linuxson> Is there a way to actually get the full computed/final height of a div in jquery?
[04:33:33] <Cork> thx for the full 6 mins to answer...
[04:59:47] <Uhkis> well he did say "quick question" :D
[05:06:00] <Robdgreat> I still wonder what they hope to achieve prefacing the question with "quick question"- do they expect no one will read it if it isn't unjustly diminished?
[05:08:41] <Cork> it is to indicate "this is a simple small question"
[05:09:00] <Cork> but ya, it is kinda pointless as it would indicate you know what the problem is
[05:09:09] <Cork> cause if you didn't how can you know it is simple?
[05:46:33] <stennowork> good day, i have a problem with my jquery code. Whenever a user sets a value for a file upload, i want to append another row with a new file upload input. However, it seems that the event handler does not get executed when changing the value of the new row: https://jsfiddle.net/y3koxoab/
[05:47:15] <stennowork> i expected the .on handler to do what .live did in the distant future - bind the eventhandler for elements that will exist in the future
[05:47:21] <stennowork> distant past*
[05:47:32] <Cork> stennowork: make it a delegated event handler
[05:47:57] <Cork> https://jsfiddle.net/y3koxoab/1/
[05:48:08] <stennowork> alright, in this case that would mean something like $("#container").on("change", ".file-row input", callback)
[05:48:19] <stennowork> right, thanks
[05:48:28] <stennowork> do you have an idea why my initial approach didn't work?
[05:48:36] <stennowork> did i misunderstand what .on does ?
[05:48:56] <Cork> ya, cause the new input fields wasn't in the form when you bound the event handlers, so they didn't get any
[05:49:14] <Cork> hmm
[05:49:21] <Cork> btw your adding the same field over and over again
[05:49:25] <Cork> meaning moving it
[05:49:25] <stennowork> yes
[05:49:28] <Cork> you need to clone it
[05:49:32] <Cork> (or use html)
[05:49:47] <stennowork> noted
[05:49:59] <stennowork> but again, i thought that .on would also handle elements that get added later
[05:50:10] <stennowork> as long as they match the selector
[05:50:17] <Cork> https://jsfiddle.net/y3koxoab/2/,
[05:50:21] <Cork> bah... https://jsfiddle.net/y3koxoab/2/
[05:50:33] <Cork> no, on doesn't search
[05:50:42] <stennowork> ok
[05:50:43] <Cork> $() searchs the dom for elements matching the selector
[05:50:50] <Cork> and builds an array of those elements
[05:50:55] <stennowork> right
[05:50:58] <Cork> .on then loops them and binds event handlers on them
[05:51:03] <stennowork> right
[05:51:27] <Cork> and is why $('#container').on('change', 'selector') works
[05:51:36] <stennowork> Event handlers are bound only to the currently selected elements; they must exist at the time your code makes the call to .on().
[05:51:45] <stennowork> right, i didn't know that
[05:51:47] <Cork> as it loops #container and adds a change event handler on it checking for bubbling events matching the selector
[05:51:53] <stennowork> well or rather, i wasn't really aware of that
[05:51:54] <stennowork> gotcha
[05:52:03] <stennowork> well, thanks for the help and explanations!
[05:52:15] <Cork> the thought problem many do is $().on() isn't one command
[05:52:16] <Cork> it is two
[05:52:29] <Cork> they do two separate things, not a combined action
[05:52:56] <stennowork> first, fetch a list of elements matching the selector, then, bind the handler on all matched elements
[05:53:07] <Cork> * in the result set
[05:53:08] <Cork> ya
[05:53:28] <stennowork> instead of "bind the handler to all elements matching this selector, now and in the future"
[05:53:35] <stennowork> (what i thought it did)
[05:53:47] <Cork> well more like "listen for events matching the selector"
[05:53:49] <stennowork> and what the deprecation page of .live implies
[05:53:51] <Cork> that many think of it as
[05:54:00] <Cork> what .live did was a big nasty hack
[05:54:19] <Cork> it did $() searched the dom and built a result set, and included a ".selector" property
[05:54:53] <Cork> .live then throw away the result set and did $(document).on(event, selector)
[05:55:15] <Cork> so .live was removed cause it made ppl think wrong AND did a lot of useless work
[05:55:39] <stennowork> ouch
[05:56:02] <Cork> .on(event, selector, callback) on the contrary does the same as normal on, with the extra feature that it keeps the string "selector" with it
[05:56:17] <Cork> and before it calls the callback make sure the event.target matches the selector
[05:56:27] <stennowork> so `this` will not be container element, but-
[05:56:28] <Cork> so as little extra work as possible
[05:56:29] <stennowork> right
[05:56:32] <Cork> right
[05:56:38] <stennowork> neat
[05:56:47] <Cork> this in the callback will still be the input
[05:57:33] <Cork> oh, btw $(inputRow).clone().insertAfter() can be written as inputRow.clone().insertAfter()
[05:57:39] <Cork> as inputRow is already a jquery object
[05:58:06] <stennowork> yeah i get confused sometimes about if a variable is a jquery element or a normal dom node :P
[05:58:06] <Cork> https://jsfiddle.net/y3koxoab/3/
[05:58:46] <Cork> btw, you do have another problem you need to deal with
[05:59:01] <Cork> the id for the input field is duplicated for every time you add them
[05:59:19] <stennowork> the input field doesn't have an idea
[05:59:21] <stennowork> ID lol
[05:59:28] <Cork> but the label dose
[05:59:32] <Cork> *does
[05:59:45] <stennowork> there's a for
[05:59:53] <Cork> ya, but for the same id
[06:00:06] <stennowork> i thought 'for' related to 'name', not 'id'
[06:00:42] <stennowork> nope, its ID
[06:00:44] <stennowork> ok
[06:00:49] <stennowork> thats no problem though
[06:00:54] <stennowork> thanks for pointing it out, i will adjust it
[06:01:17] <stennowork> now i will give each input the ID "contextfile-" + $(".file-row").length
[06:01:35] <stennowork> and then i can adjust the for field accordingly
[06:02:24] * Cork nods
[06:02:29] * Cork afk
[06:02:31] <undefined_bob> tcv34
[06:02:35] <stennowork> thx
[10:05:13] <jak2000> hi all
[10:05:16] <jak2000> i have this String: wcade=012123,9810,12917   how to transform to: '012123','9810','12917' thanks
[10:05:46] <Cork> .split('=')[1].split(',')
[10:06:27] <preference> Cork: is there ever a valid reason to use <a> without a href?
[10:06:39] <Cork> no
[10:07:09] <Cork> and same goes for href="#", href="javascript:void(0)" and so on
[10:07:23] <Cork> if it isn't a link to a server side resource, it shouldn't be an <a>
[10:07:43] <Cork> (a <button> is much better suited in those cases)
[10:08:13] <preference> thanks
[10:08:53] <jak2000> Cork tahnks
[10:09:08] <jak2000> testing: wcade=wcade.split('=')[1].split(',')
[10:09:30] <Cork> uh
[10:09:52] <jak2000> *thanks
[10:09:53] <Cork> i hope it was wcade="012123,9810,12917" before in that case
[10:09:58] <jak2000> yes
[10:10:00] <Cork> k
[10:14:54] <jak2000> Cannot read property split, making a fiddle, better
[10:16:24] <Cork> jak2000: https://jsfiddle.net/72d3jg4d/
[10:16:55] <Cork> the extra split came from the way you expressed the original question
[10:19:25] <jak2000> http://jsfiddle.net/WQXXT/12789/   not work
[10:19:43] <jak2000> wcade.split(',');  this return an array right? need do an foreach ?
[10:20:24] <Cork> you can't add a jquery array as a value to a form field
[10:20:28] <Cork> opps
[10:20:38] <Cork> i meant a javascript array as a value to a form field
[10:20:51] <Cork> form field can contain strings, nothing else
[10:21:02] <dimi1947> can someone remind me how to cache a selector?7
[10:21:13] <Cork> dimi1947: put the result in a variable
[10:21:24] <AdamPDotty> that = $(this)
[10:21:39] <jak2000> yes i know
[10:21:46] <AdamPDotty> form = $(form)
[10:21:47] <jak2000> need do an foreach ?
[10:21:53] <Cork> to do what?
[10:22:08] <Cork> you can't add the values to the same input field...
[10:22:54] <AdamPDotty> well, if you join(',') them first
[10:22:56] * AdamPDotty ducks
[10:23:03] <preference> Cork: you can't do .append in a field?
[10:23:23] <Cork> preference: not to a value property of an input field no
[10:23:44] <preference> huh
[10:23:50] <Cork> or a textarea for that matter (even if it looks like that should work)
[10:24:02] <jak2000> in the array resultant...
[10:24:27] <Cork> preference: <input type="text" name="a" value="something"> <-- where would you append
[10:24:56] <Cork> jak2000: you can join the array to a string, that is the only option if you want it all in the input field
[10:25:15] <Cork> if you concat or join or json format it, is up to you
[10:25:19] <preference> you can initialize your form with a value based on other variables, though?
[10:25:31] <Cork> but you can't store a javascript array as value on an input field
[10:25:37] <preference> if you use jquery to make the input, you can pre-set the value
[10:25:37] <preference> ya
[10:26:06] <Cork> preference: this isn't about what you can use to set a form field, it is about what it can represent
[10:26:12] <preference> i get it :)
[10:49:48] <erebel55> lo
[10:51:34] <erebel55> does anyone know what could be causing my preloader not to hide sometimes? https://hastebin.com/ukocukatit.js
[10:52:32] <Cork> erebel55: you might select the element before it exists
[10:52:42] <Cork> (as you do it outside the load callback)
[10:52:44] <erebel55> that is within $(document).ready(function()
[10:52:53] <erebel55> sorry should have included that in the paste
[10:53:02] <Cork> ready can fire after load in some cases
[10:53:11] <Cork> so you might miss the load event
[10:53:15] <erebel55> ahh okay I see
[10:54:11] <preference> Cork: can you tell me what this does? pattern="^((0-9)+(0.[0-9{1,3})?)|(.[0-9]{1,3}))$"
[10:54:23] <preference> it's on an input which has the value 90 in it
[10:55:30] <Cork> starts with an unlimited number of digits, followed by a (0.and 1-3 numbers again, this part is optional)
[10:55:42] <Cork> alternatively starts with a dot followed by 1-3 digits
[10:56:26] <Cork> wait a min...
[10:56:36] <erebel55> Cork: like this? https://hastebin.com/itateleyiv.js
[10:56:38] <Cork> no thats (0-9) not [0-9]...
[10:57:21] <Cork> so it grabs 0-9 repeated unlimited number of times, followed by (0. and 1-3 digits, optional)
[10:57:28] <Cork> or . and 1-3 digits
[10:57:55] * Cork suspects the first part in that regex is a typo)
[10:58:15] <Cork> erebel55: no, that is even more sure to not work
[10:58:32] <Cork> as it will try to bind a load event after the one and only load event has fired
[10:58:36] <Cork> so it will NEVER fire
[10:58:46] <erebel55> ahhh that makes sense
[10:59:00] <erebel55> when should I bind then?
[10:59:33] <Cork> if you want to bind a .load event you have to do it early in the page (head) and never inside a .ready
[10:59:46] <Cork> *(head preferably)
[11:00:45] <erebel55> oh okay I see, so create a new js and reference in the head
[11:01:06] <Cork> well, what matters is that you bind the event handler before the event fires
[11:01:15] <erebel55> right, that makes sense
[11:10:38] <erebel55> hm I include jquery in my body tho. So I can't do this js in my head unless I load jquery there too
[11:13:30] <erebel55> Cork: isn't it best practice to load jquery in body?
[11:14:12] <Cork> erebel55: no, that is so optimizations, but it has the consequence that there are a few things you can't do
[11:14:55] <erebel55> right, I meant best practice because of the optimization
[11:17:17] <erebel55> is there any place in body that I can ensure gets bound?
[11:17:24] <erebel55> *bound before the event fires
[11:18:06] <Cork> erebel55: the only other option i know of is to not have those preload elements in the body on load
[11:18:23] <Cork> and inject them with js and bind .load events directly on them instead (i suspect they are img tags)
[11:20:06] <erebel55> this wouldn't work in body? (not in the ready callback)
[11:20:07] <erebel55> https://hastebin.com/cuwedamule.js
[11:20:36] <Cork> well as long as it is a bit up in body
[11:20:46] <Cork> if it is at the absolute end you have a race risk
[11:21:43] <erebel55> okay yeah my scripts are bound at the end. i have one other js being bound after mine but that's it
[11:22:48] <erebel55> load gets called right at the end of body?
[11:23:24] <Cork> it gets fired as soon ad the dom is ready and all the images used in it (and iframes) has loaded
[11:23:46] <Cork> but ya, depending on network speed, that can be right at the end of body
[11:24:30] <erebel55> okay blurrrg
[11:26:42] <stennowork> ah it seems that i can only set .data of a jquery element _after_ i inserted it into the DOM
[11:27:57] <stennowork> hm nope.
[11:29:35] <stennowork> my bad
[11:59:15] <BrianMiller> I have an issue related to moving an element up in the DOM. Considering this fiddle: http://jsfiddle.net/Pixic/8VrdE/ . It's all the same WITH the EXCEPTION that the element(s) I want to move is with display:none. If I try to move it with detach() and appendTo(), I also have to change its display to "block". However, doing so changes the display of the one with "none" and I get duplicates.
[12:08:02] <NoiseEee> BrianMiller: http://jsfiddle.net/8VrdE/526/
[12:08:24] <NoiseEee> BrianMiller: clicking the 'default' button moves the hidden button 'danger' from non-selected to selected
[12:08:44] <NoiseEee> BrianMiller: try to actually re-create your issue, not present a working issue and then explain what makes it not work
[12:09:24] <NoiseEee> maybe using inline JS was part of your issue
[12:10:09] <BrianMiller> NoiseEee: I'm starting to think I should just put all the elements in the <div> that I want them in and toggle display:none/block when I need to visualize them.
[12:10:26] <NoiseEee> sounds good
[12:10:45] <BrianMiller> Because I just realized that I don't really need to move them.
[12:11:12] <NoiseEee> sweet
[12:11:30] <BrianMiller> Okay, thanks for the help tho
[12:11:39] <NoiseEee> np good luck
[14:33:44] <robertmaxrees> it's quiet
[14:33:47] <robertmaxrees> too quiet
[14:40:05] * pavonia makes some ambient noise
[15:19:00] <taplar> iiiiinteresting
[15:19:24] <robertmaxrees> ?
[15:19:38] <taplar> i never thought about $(document).attr(key, value) basically just doing document[key] = value
[15:19:49] <taplar> since document doesn't have the setAttribute method
[15:19:52] <robertmaxrees> hah
[15:20:00] <robertmaxrees> aka .prop(key, value) :)
[15:22:49] <taplar> aaaah, wow
[15:28:00] <taplar> lol i was trying to track it down in the source and didn't realized what "fn" was, but then i realized it was passing in the non fn versions of the attr/prop methods
[15:28:24] <robertmaxrees> hah - why you digging around in the source?
[15:28:51] <taplar> before you told me what it was doing, just trying to see for myself
[15:28:58] <robertmaxrees> aaaaah
[15:29:15] <robertmaxrees> yeah.  i haven't dug around the source in a while.
[15:29:24] <taplar> and SO had a question about it and I was like, huh, i dunno
[15:45:51] <Darkenvy> Im used to vanilla js. What does this do? `$('#MainPart_pProgressbarBox_Holder_Larger span:first-child').appendTo('#numberInLineGroup');`?
[15:46:16] <Darkenvy> Does this MOVE, COPY or something else to element #numberInLineGroup?
[15:46:31] <Darkenvy> Or does it create an element on the spot?
[15:46:33] <robertmaxrees> http://api.jquery.com/appendto/ :)
[15:46:54] <robertmaxrees> to moves the element
[15:47:18] <Darkenvy> So it does move it then. Interesting. Okay. Thanks btw :)
[15:47:24] <robertmaxrees> yep
[15:47:27] <Darkenvy> and the. lik
[15:47:31] <Darkenvy> link
[15:47:44] <robertmaxrees> yeah - the api docs are SUPER helpful.  great resource.
[19:44:07] <BenderRodriguez> eyy
[19:44:13] <BenderRodriguez> is jquery still used
