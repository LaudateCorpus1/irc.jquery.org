[11:42:42] <robertparkerx> Can someone help me with this? https://jsfiddle.net/yfbjtaxq/
[11:56:18] <robertparkerx> I tried each too https://jsfiddle.net/yfbjtaxq/1/
[12:01:45] <robertparkerx> I see why
[12:01:45] <robertparkerx> I'm sorry
[14:45:07] <jqlearning> i have a simple 2-page JQM app based on the multi-page example in the 1.4.5 demos. Page 2 is a popup using "ui-dialog" (it's page 3 in the JQM demo). My issue is the dialog container has a "close" button in the upper left, which isn't represented in my code, and I want the button to be on the right only. How do I remove the button on the left?
[15:47:46] <jqlearning> i have a simple 2-page JQM app based on the multi-page example in the 1.4.5 demos. Page 2 is a popup using "ui-dialog" (it's page 3 in the JQM demo). My issue is the dialog container has a "close" button in the upper left, but that <a> tag isn't in my code. I'm trying to understand where that element comes from and how i can remove it.
[16:53:20] <jqlearning> i have a simple 2-page JQM app based on the multi-page example in the 1.4.5 demos. Page 2 is a popup using "ui-dialog" (it's page 3 in the JQM demo). My issue is the dialog container has a "close" button in the upper left, but that <a> tag isn't in my code. I'm trying to understand where that element comes from and how i can remove it.
[17:02:18] <diverdude> Why is this.canvas undefined in l. 7 ? https://jsfiddle.net/k7xbqsag/2/
[17:14:42] <robertmaxrees> diverdude what is "this" supposed to be?
[17:15:04] <diverdude> robertmaxrees: a reference to the class
[17:15:14] <robertmaxrees> it's not there :)
[17:15:28] <robertmaxrees> jquery's event listeners set 'this' to be the element.
[17:15:47] <robertmaxrees> if you want 'this' to point back to the class, you need to .bind(this)
[17:16:14] <robertmaxrees> diverdude https://jsfiddle.net/robertmaxrees/ur6cjypn/2/
[17:18:02] <robertmaxrees> or use an arrow function
[17:18:05] <diverdude> i see
[17:18:18] <diverdude> is it better to bind or use arrow fct?
[17:18:27] <robertmaxrees> i see your convo over in ##javascript.
[17:18:43] <robertmaxrees> i'd say in this case you want an arrow function.
[17:18:43] <diverdude> yes they suggested me the same a minute b4 you
[17:19:20] <diverdude> why is arrow fct better in this case?
[17:19:44] <robertmaxrees> i'll let ##javascript explain that one :)
[17:19:56] <diverdude> allright. thx
[17:22:40] <robertmaxrees> jqlearning you're gonna be more likely to get help if you actually show the code you're working with via something like jsfiddle
[17:23:59] <jqlearning> thx robertmaxrees will do
[17:27:29] <diverdude> robertmaxrees: in the docs for .off() it says: "The .off() method removes event handlers that were attached with .on()" If i bind using an arrow fct. like discussed before will off then be able to remove it properly?
[17:27:48] <robertmaxrees> you're convoluting a few things together diverdude
[17:28:05] <robertmaxrees> first off - why are you trying to bind more than once?
[17:28:26] <diverdude> robertmaxrees: yeah i know...its because i need to bind several handlers, but only one at the time
[17:28:34] <robertmaxrees> why?
[17:28:53] <robertmaxrees> like - what do the different handlers have to do with one another?
[17:29:37] <diverdude> robertmaxrees: because i have a canvas and i need to draw on this canvas in different ways. each way is different and i want to make it such that when user selects a draw method then the appropriate handlers are bound
[17:29:51] <robertmaxrees> that's not how you want to approach that.
[17:29:56] <robertmaxrees> juggling listeners is a bad idea.
[17:29:57] <diverdude> robertmaxrees: that way i will not have a lot of if(method) blabla inside my handler
[17:30:02] <robertmaxrees> you want that though.
[17:30:13] <robertmaxrees> you want to check that within the handler.
[17:30:14] <diverdude> aye thats not very nice code :/
[17:30:23] <robertmaxrees> it's far better than adding and removing handlers.
[17:30:27] <diverdude> huge functions with loads of if :(
[17:30:31] <robertmaxrees> eh
[17:30:48] <robertmaxrees> you can do it without a bunch of if statements.
[17:30:55] <diverdude> how so?
[17:31:40] <robertmaxrees> make an object of "brushTypes" whose properties are the different functions you want, and name each prop to correspond with the different brush tgypes.
[17:31:42] <robertmaxrees> *types
[17:32:06] <robertmaxrees> then your handler just does something like brushTypes[currentSelectedBrushType]
[17:34:59] <diverdude> robertmaxrees: why is it a really bad idea to change handlers?
[17:35:13] <robertmaxrees> a few reasons, not the least of which is that it's confusing.
[17:35:29] <diverdude> robertmaxrees: why is it confusing?
[17:36:01] <robertmaxrees> because you're adding an extra layer of complexity with your event handlers when you still want to respond to the same event.
[17:36:59] <robertmaxrees> let the handler, well, handle the event.  let it take care of that kind of logic
[17:40:22] <diverdude> robertmaxrees: but its not just one handler...its multiple handlers that need to work together. For example for freehand drawing i have code like this: https://paste.ubuntu.com/p/jgxS7WyWxf/   And if i want to draw squares instead the code is totally different, or if i want to flood fill its again totally different. Thats why i thought it would be better to just have a set of handlers for each functionality
[17:41:05] <robertmaxrees> it's not "different handlers" - you want to dispatch to different functions from within your single handler.
[17:41:22] <diverdude> hmm ok
[17:41:34] <robertmaxrees> you don't have to listen to my advice :) i'm just trying to save you from headaches i've experienced myself.
[17:41:53] <diverdude> thats why i am listening to you :)
[17:42:09] <diverdude> i am just convincing myself that your approach is better
[17:42:20] <robertmaxrees> trying to maintain state by swapping handlers in and out is infinitely more confusing, expecially when you run into those cases where you end up not removing the handlers on accident.
[17:42:43] <diverdude> right
[17:44:06] <diverdude> ok i will try use one handler only and see where i end up :) But it still makes sense to have all this encapsulated in a canvas object since i need to share variables btn handlers....right?
[17:44:56] <diverdude> btn=btwn
[17:44:58] <robertmaxrees> sure.  don't be afraid to abstract things out into methods.
[17:45:30] <diverdude> robertmaxrees: and would you bind the handlers inside the object or outside?
[17:45:54] <robertmaxrees> abstraction isn't just to keep things DRY - the bigger benefit is that you put a name to discrete pieces of logic.
[17:46:10] <robertmaxrees> i would make it all self-contained.  don't put half your logic in the class and then half out.
[17:46:10] <diverdude> robertmaxrees: yes i agree on that
[17:46:41] <diverdude> robertmaxrees: yeah i agree...ok. will try a bit on this path then :) thnks for your advice
[18:01:14] <diverdude> robertmaxrees: ok this is weird. You see these holes there are in the track: https://i.ibb.co/GHphrNz/Screen-Shot-2019-05-25-at-23-57-59.png    before i put the logic into an object there were no such holes. Can you see if i am somehow using the class in a wrong way which could cause this? https://paste.ubuntu.com/p/HvjzXdnyK7/
[18:05:55] <robertmaxrees> are you familiar with your dev tools profiler?
[18:16:19] <diverdude> no what is that
[18:22:19] <robertmaxrees> it's how you look at performance.
[18:40:56] <diverdude> robertparkerx: right. Do you see any problems with the code?
