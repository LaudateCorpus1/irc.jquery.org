[10:45:22] <StucKman_> if I do $(".foo"), how can I query sub elements of the thing(s) of class foo?
[10:45:58] <StucKman_> more precisely, if I do var foos = $(".foo"); can I subquery starting from foos?
[10:47:11] <StucKman_> ah, .filter
[11:09:11] <juro> Hi, I'm using jQuery packaged with Wordpress (unfortunately that is version 1.12.x). In order to use $ as opposed to having to type "jQuery" every time, I have wrapped my scripts in jQuery(function($) { ... }. This works fine on the staging site, but on the production site (with Cloudflare caching), I get the error "Uncaught TypeError: $ is not a function" ... this doesn't make sense. Any ideas how I can debug this?
[11:28:56] <taplar> juro on your production site, if you type `jQuery` in your browser console, what does it return?
[11:29:38] <juro> @taplar, an italic "f", i.e. function
[11:29:51] <taplar> alright so it does exist.
[11:30:15] <taplar> and you say you're doing: jQuery(function($){ ...all your jQuery logic here... })
[11:30:16] <taplar> ?
[11:30:30] <juro> Yes, all my custom things.
[11:30:47] <taplar> yeah, that should work.  so long as that is being done after the jQuery include to the page
[11:32:03] <juro> Hmm, good point.
[11:32:32] <juro> jQuery.fn.jquery results in 1.12.4, so that's good - now to check the loading sequence.
[11:32:50] <taplar> nice, a man who knows what he's doing, :D
[11:33:28] <juro> taplar, I'll attribute it to luck ;)
[11:50:48] <juro> taplar, seems like either WPEngine or Cloudflare's cache isn't refreshing :(
[11:51:02] <taplar> weird
[11:51:42] <juro> This is true - thanks for your help though ... the console is showing the new version, but the network tab is showing the old $(document).ready(... version ...
[11:52:16] <taplar> have you tried a hard refresh of the page or clearing your cache in the browser?
[14:43:20] <icognegro> hello?
[14:43:25] <taplar> aloha
[14:43:33] <icognegro> taplar: aloha
[14:46:01] <taplar> icognegro got a jquery question?
[14:46:23] <icognegro> taplar: yes
[15:08:14] <taplar> icognegro heh, you going to ask it?
[16:20:05] <icognegro> hello?
[16:20:12] <taplar> aloha
[16:20:19] <icognegro> taplar: aloha
[16:20:30] * taplar is experiencing deja vew
[16:23:09] <MassDebates> Yo is that firefox dev in here
[16:23:10] <MassDebates> right now
[16:23:15] <MassDebates> I think it was in here
[16:23:30] <taplar> o.O
[16:23:32] <MassDebates> He spoke with me about the tabs and dragging them from window to window
[16:23:36] <MassDebates> Where are you
[16:40:41] <z1haze> robertmaxrees, the other day you had showed me trick about having a callback function that I could also call independently and bind the correct `this` to it.. I've forgotten what that trick was
[16:40:58] <robertmaxrees> .bind
[16:41:03] <robertmaxrees> I think.
[16:41:04] <z1haze> after calling it?
[16:41:11] <z1haze> someFunc.bind(this)?
[16:41:23] <taplar> call() or apply()
[16:41:31] <taplar> depending on if the arguments are an array or not
[16:41:31] <z1haze> hmm
[16:41:40] <z1haze> no arguments to the function, just need `this`
[16:42:05] <z1haze> so i have like `$(e.currentTarget).find(':input').each(emptyCheckmarkFix);` but i want to also call this function out of the context of an event handler
[16:42:13] <taplar> yeah, bind will work too
[16:42:22] <taplar> i was confused by jQuery.fn.bind for a moment
[16:42:43] <z1haze> what would the syntax be?
[16:42:55] <taplar> https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind
[16:43:32] <z1haze> ah ok, cool.
[16:43:38] <z1haze> i was also confused then by the jquery bind
[16:43:45] <taplar> :)
[16:49:56] <taplar> z1haze also a small tip: $(':input', e.currentTarget)
[16:49:59] <taplar> save a method call
[16:50:51] <z1haze> ah cool, thanks
[16:51:06] <z1haze> not doing the same thing underneith?
[16:51:49] <taplar> $(selector).find(childSelector) <= perform global selector on document, turn all results into a jQuery object, then call find on it, creating another jQuery object
[16:52:08] <taplar> $(childSelector, context) <= perform selector on the context, turn all resutls into a jQuery object
[16:52:14] <z1haze> ah ok
[16:52:39] <z1haze> but if what i already has is a jquery object, does it still help?
[16:52:44] <taplar> nah
[16:52:52] <z1haze> alright, makes sense. well thanks i switched it
[16:54:31] <z1haze> emptyCheckmarkFix.bind(element); doesnt seem to make the call to the function
[16:54:49] <z1haze> its not emptyCheckmarkFix().bind(element) is it?
[16:54:56] <taplar> all that does is makes the method
[16:55:07] <taplar> var x = myFunction.bind(thing);  x();
[16:55:27] <z1haze> how do i just call my function passing the context of `this`?
[16:55:43] <taplar> call or apply
[16:56:00] <taplar> emptyCheckmarkFix.call(this)
[16:56:06] <taplar> emptyCheckmarkFix.call(element)
[16:56:13] <z1haze> ok i think thats what i remember
[16:56:19] <z1haze> what would the difference be for apply vs call though
[16:56:36] <taplar> emptyCheckmarkFix.call(element, 'a', 'b')
[16:56:46] <taplar> emptyCheckmarkFix.apply(element, ['a', 'b'])
[16:57:03] <z1haze> so how you pass arguments?
[16:57:07] <taplar> yep
[16:57:10] <z1haze> interesting
[16:57:16] <taplar> in some cases the number of variables is mutable
[16:57:18] <taplar> or unknown
[16:57:22] <taplar> thus the apply
[16:57:43] <z1haze> cool
[16:57:59] <taplar> This comes in handy a lot with $.when
[16:58:06] <z1haze> i do remember askking about this more now.. i remember mentioning that ive never touched those functions, and i consder myself somewhat of a veteran developer these days
[16:58:13] <taplar> $.when.apply(null, arrayOfPromises)
[16:58:21] <z1haze> thought it made me look worse not ever using them, but robertmaxrees concluded that its common actually
[16:58:47] <taplar> imho, it depends on what kinds of logic your writing
[16:59:05] <taplar> if you're writing end user applications, the chance you use these is probably less
[16:59:20] <taplar> if you're writing libraries or plugins or extentions, probably a greater chance
[16:59:28] <z1haze> but just to conclude here, you use apply when you have want to pass an array, and call when you know exactly what arguments
[16:59:41] <taplar> "how many elements"
[16:59:49] <z1haze> right, yeah. that's what i mean
[16:59:53] <taplar> in both cases the function definition is the same
[17:00:36] <taplar> k, just making sure you were not confusing apply with actually passing in the array to the method
[17:01:13] <z1haze> well maybe i am..
[17:01:32] <z1haze> what if an argument to the function is actually an array, and im passing the array.. i'd still use call right?
[17:02:03] <taplar> function sum(a, b) { return a + b; }  sum.call(null, 1, 2);  sum.apply(null, [1, 2]); <=== in both those cases, a and be would be 1 and two
[17:02:07] <taplar> *and 2
[17:02:25] <taplar> "and be" lol, good lord
[17:02:36] <z1haze> ok yeah
[17:03:22] <z1haze> so would the function definition have to be something like myFunc() {} and use apply and use the arguments keyword?
[17:03:32] <z1haze> im trying to see when apply would actually make sense
[17:03:50] <taplar> Did you see my $.when.apply example above?
[17:04:49] <z1haze> yeah, but your previous comment made me assume you still would have to have the function definition to accept each promise
[17:05:13] <taplar> but that's just the thing, $.when already accepts any number of arguments
[17:05:28] <taplar> $.when(promise1); $.when(promise1, promise2, .... promisen)
[17:05:36] <taplar> they all work.  It doesn't matter how many
[17:05:48] <z1haze> ohhhh
[17:05:57] <z1haze> i thought you could pass an array to $.when
[17:06:08] <z1haze> just like Promise.all([]
[17:06:13] <taplar> iirc, you can, so this may be a less than idea example
[17:06:16] <z1haze> haha
[17:06:21] <taplar> but you don't have to
[17:06:26] <z1haze> no, it makes sense
[17:06:30] <z1haze> i do get it
