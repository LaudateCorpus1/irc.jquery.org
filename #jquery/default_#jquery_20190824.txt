[17:22:35] <deitarion> How would I rework $(THING).find('.collapse.show').not('.collapse .collapse') so the constraint embodied by the .not is "Don't match `THING .collapse .collapse.show`" without also meaning "Don't match `.collapse THING .collapse.show`"?
[17:22:57] <robertmaxrees> can you show some markup and js in a fiddle or something?
[17:23:07] <robertmaxrees> so it's clearer what you're actually trying to do :)
[17:24:47] <deitarion> Here's the JavaScript. The HTML will take some cleanup before I can share it --> https://jsfiddle.net/h0jew1r3/
[17:26:11] <deitarion> Basically, without the .not, the parent accordion is broken. With the .not, the child accordions are broken because it matches to aggressively.
[17:26:18] <robertmaxrees> heh
[17:26:29] <deitarion> The intent is to not have cells of the child accordion leaking into the calculation for the parent accordion and vice-versa.
[17:26:30] <robertmaxrees> the issue is, without seeing the html, it's hard to visualize what you're trying to do.
[17:28:24] <deitarion> One sec. I'll scroll through the TODO list and see if there's anything sensitive. If not, I can just share it as-is.
[17:29:05] <deitarion> (It's a book-buying TODO list "app" in a single HTML file so I don't have to set up to write Android apps just to visualize CSV in a more useful way.)
[17:37:22] <deitarion> Yeah, I can share it. One sec.
[17:38:23] <deitarion> Try http://157.52.20.66:8080/
[17:38:28] <robertmaxrees> ...
[17:38:28] <robertmaxrees> lol
[17:38:46] <robertmaxrees> the entire point of jsfiddle is so i can see and edit just the relevant code.
[17:39:45] <deitarion> I didn't want to paste a 638K file into jsfiddle, so I thought I'd give it a shot first since it only took a few secs to forward the development server I was already using.
[17:39:53] <robertmaxrees> don't need the whole thing.
[17:39:55] <robertmaxrees> just a test case.
[17:40:12] <deitarion> *nod* It's just going to take me a few minutes to cut it down to one.
[17:40:31] <deitarion> The big problem is that it's scrolling-related, which means that generating a test case requires something long.
[17:40:32] <robertmaxrees> should be pretty easy to copy just 3 or 4 of these accordion entries...
[17:40:44] <deitarion> 3 or 4 accordion entries wouldn't do the trick.
[17:40:56] <robertmaxrees> then do like 10.  code folding in your editor should make that super quick.
[17:41:16] <deitarion> I don't use code folding and it's more about judging how many I need.
[17:41:24] <robertmaxrees> lol
[17:41:35] <robertmaxrees> just giving you advice on how to make the fiddle super easily.
[17:41:36] <robertmaxrees> but okie.
[17:41:52] <deitarion> I use a messed up gVim configuration that i've been meaning to rework for literally years.
[17:42:10] <robertmaxrees> 'kay.
[17:42:25] <deitarion> Anyway, give me a sec and I'll cut something together.
[17:43:27] <deitarion> Bah. Accidentally closed the wrong tab and now that JS-only version is up for good. Give me a sec to stop procrastinating creating a jsFiddle account.
[17:43:44] <deitarion> (I have one of those extensions which flushes cookies when the last tab for a domain closes)
[17:43:55] <robertmaxrees> if you saved, you can just go into your browser history and look there.
[17:44:09] <robertmaxrees> this is super simple lol.
[17:44:21] <deitarion> The complaint was that I accidentally deleted the cookie that tells jsFiddle that I'm the non-logged-in guy who posted that fiddle.
[17:44:39] <robertmaxrees> huh?
[17:44:47] <robertmaxrees> if you saved the fiddle, the cookie doesn't matter.
[17:45:11] <deitarion> It's the JS-only one. I was hoping to make an attempt to claim it to a newly-created account and modify it.
[17:45:26] <robertmaxrees> you can edit it and save again and it'll go from there.
[17:45:42] <deitarion> Not without forking first. The cookie that says I'm the uploader is now gone.
[17:45:47] <robertmaxrees> lol
[17:45:52] <robertmaxrees> so?
[17:46:00] <deitarion> Just an annoyance.
[17:46:02] <robertmaxrees> really confused about why that's such a problem, but okie.
[17:47:00] <deitarion> It's not, really. The initial comment was a one off "Bah!". Your reply, on the other hand, hooked my obsessive need to not to feel I've been misunderstood.
[17:54:49] <deitarion> Bah. I'm not used to using jsFiddle for this sort of thing. Give me a sec to figure out what I overlooked that's giving me "$(...).animate is not a function"
[17:55:27] <robertmaxrees> save it and share.
[17:55:34] <robertmaxrees> i can probably figure out pretty quickly.
[17:55:36] <deitarion> https://jsfiddle.net/ssokolow/jh47p5z1/4/
[17:55:49] <robertmaxrees> you're including jquery twice.
[17:56:07] <robertmaxrees> https://i.imgur.com/zNaQdpZ.png
[17:56:14] <robertmaxrees> kill the version out of the "resources"
[17:56:43] <deitarion> Ahh. Serves me right for using the bootstrap template.
[17:57:18] <deitarion> There. https://jsfiddle.net/ssokolow/jh47p5z1/5/
[17:57:32] <robertmaxrees> okay.  so what's the actual bug you're dealing with?
[17:57:40] <robertmaxrees> ignoring the code for a sec.
[17:58:32] <deitarion> The purpose of the block of code is to ensure that, if I open something long like "Anthony, Piers" and then open something below it, the something I just clicked won't get dragged out of the viewport.
[17:59:22] <deitarion> Before I added the `.not('.collapse .collapse');`, expanding an entry within an author will throw off the calculations for the outer accordion.
[17:59:24] <robertmaxrees> looks like it's working fine to me.
[17:59:36] <deitarion> That's how it looked to me too.
[17:59:52] <robertmaxrees> so what's the bug?
[17:59:53] <robertmaxrees> lol
[18:00:04] <deitarion> Try opening up an author, then clicking through the inner accordion.
[18:00:15] <robertmaxrees> done.
[18:00:27] <deitarion> Wait... use Anthony, Piers. I just noticed that it has to be a long one.
[18:00:38] <robertmaxrees> did.
[18:00:51] <robertmaxrees> do you mean you don't want to scoll on click of a "child" accordion?
[18:01:05] <deitarion> OK. Try clicking Harpy Thyme and then Isis Orb.
[18:01:14] <robertmaxrees> ah
[18:01:17] <deitarion> You should see that the second one overshoots.
[18:01:22] <robertmaxrees> heh.
[18:01:50] <robertmaxrees> so all of your logic is about trying to find the top of the thing you clicked?
[18:02:17] <robertmaxrees> so that the scroll doesn't overshoot on clicks of those sub-accordions?
[18:03:02] <deitarion> First, let me be clear that most of this isn't my logic... it's just the only way of doing this that I found which doesn't cause crazy glitching. My logic is the effort to adapt it for nested accordions.
[18:03:14] <robertmaxrees> so...
[18:03:20] <robertmaxrees> the answer to my question is "yes"?
[18:04:32] <deitarion> Unless I misunderstand the code, the purpose of the logic is to scroll the viewport to what *will* be the correct position when the Bootstrap-provided animation is finished.
[18:04:44] <robertmaxrees> can you just answer my question?
[18:04:46] <robertmaxrees> ignore the code.
[18:04:57] <robertmaxrees> the entire end goal is to scroll to the accordion that was clicked.  Yes?
[18:05:20] <deitarion> Yes, but not where it is now. Where it will be when the animation finishes changing its position.
[18:05:26] <robertmaxrees> lmao
[18:05:30] <robertmaxrees> Ignore the code.
[18:05:40] <robertmaxrees> the code you have isn't working for what you want, obviously.
[18:05:47] <robertmaxrees> I'm talking just about the desired end result.
[18:06:16] <deitarion> Ahh, sorry. I wasn't clear on why you were asking.
[18:06:57] <robertmaxrees> when talking through issues, it's normally useful to state what, exactly, you're trying to accomplish, and then explain what the issue is.  "I want x to happen, but instead y happens."
[18:07:15] <robertmaxrees> so that we work on solving the root issue, instead of playing guessing games about what where you're trying to end up :)
[18:07:46] <deitarion> The desired end result is to smoothly animate the scroll position to move the header for the accordion cell that's currently opening to the top of the viewport, regardless of whether the accordion is making that a moving target by closing a previous sibling.
[18:08:00] <robertmaxrees> so the answer to my question is "yes"
[18:08:50] <deitarion> At the time you asked it, I was uncertain of the relationship between those two formulations of the problem.
[18:08:55] <robertmaxrees> lmao
[18:09:59] <robertmaxrees> so it looks like you tried to use "additionalOffset" to try to solve this problem?
[18:11:40] <deitarion> Not technically me who wrote that part, but yes.
[18:11:52] <robertmaxrees> i don't really care who wrote it lmao
[18:12:28] <robertmaxrees> and why not just get the heigh of the clicked heading, figure out what index it is, then multiply that height by its index + 1?
[18:12:57] <deitarion> Because they word-wrap rather than truncating.
[18:13:02] <robertmaxrees> huh?
[18:13:08] <robertmaxrees> that doesn't make sense.
[18:13:36] <deitarion> Pop open "<Unknown>" and drag it down to the width of a portrait-oriented smartphone.
[18:13:53] <deitarion> The "Arabian Nights" entries will be unusually tall because the "The" pops onto the next line.
[18:14:08] <robertmaxrees> that doesn't really change my advice :)
[18:14:33] <deitarion> How would "then multiply that height by its index + 1" take variable-height entries into account?
[18:14:52] <robertmaxrees> ah, got it.
[18:15:51] <deitarion> Either way, if I weren't trying for general-purpose code, I could easily fix the problem just by hard-coding the relationship between the accordion container and the cell containers.
[18:20:50] <deitarion> The case-specific solution would be to replace the .find('.collapse.show').not('.collapse .collapse') with .children('.card').children('.collapse.show')
[18:26:15] <deitarion> ...which is why I characterized it as "How would I rework $(THING).find('.collapse.show').not('.collapse .collapse') so the constraint embodied by the .not is "Don't match `THING .collapse .collapse.show`" without also meaning "Don't match `.collapse THING .collapse.show`"?"
[18:31:30] <deitarion> I'm essentially looking for a way to say "Find me things which match $($(this).data('parent')).find('.collapse.show') but not $($(this).data('parent')).find('.collapse .collapse.show')"
[18:32:20] <deitarion> ...and the only way I know to do that at the moment is to run both of those, then manually filter out anything that's common to both lists of results.
[18:33:43] <deitarion> Or, to phrase it another way, I'm looking to express "Find descendants of this node which match `.collapse.show` but exclude any that have a `.collapse` along the way".
[18:35:15] <deitarion> ...or "THIS > [zero or more *:not(.collapse)] > .collapse.show"
[18:37:18] <shoky> deitarion: this?  $(THING).find('.collapse.show').not( $(THING).find('.collapse .collapse') );
[18:38:01] <deitarion> *facepalm* I forgot that .not() could be used like that.
[18:39:14] <deitarion> Yep. Looks like that does it.
[18:41:43] <deitarion> (It's always the little obvious things that are outside your tunnel vision.)
[21:32:33] <primitivMedia> https://pastebin.com/bHZprQEa for some reason everything loads fine except my account varaibles
[21:32:42] <primitivMedia> it outputs account and not the actual value of account
[21:47:24] <primitivMedia> https://pastebin.com/ed3dAE9E okay here is my code with no php
[21:47:51] <primitivMedia> when i move from select account it grabs the photo
[21:47:58] <primitivMedia> but when moving from ove account to another it doesnt change the pic
