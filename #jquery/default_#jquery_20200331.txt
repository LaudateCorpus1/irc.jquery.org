[00:49:07] <Rojola> hi
[00:49:20] <Rojola> What is the reason, why this does not work, please?
[00:49:21] <Rojola> https://dpaste.org/KhAC/raw
[00:49:29] <Rojola> I get no error - but it also does not work
[01:05:45] <Cork> Rojola: your using an array as an object
[01:06:04] <Cork> either test.push('aaa') or var test = {};
[01:06:37] <Cork> except for that; make sure you don't have another element with the same id
[01:08:04] <Rojola> Cork, I must manually set the ID
[01:08:15] <Rojola> Cork, just pushing it does not let me choose the id
[01:08:21] <Cork> then you should use an object
[01:08:25] <Cork> as it isn't an array
[01:08:41] <Rojola> makes sense
[01:08:43] <Rojola> thank you
[01:08:53] <Cork> and objects don't have forEach
[01:09:37] <Rojola> Cork, I must save rows from a MySQL DB to JS
[01:09:53] <Cork> ok?
[01:10:33] <Cork> that is normally mapped as [{id:, col1:, col2: col3...}, {id:, col1:, col2: col3...}]
[01:10:41] <Rojola> my best guess was to use the ID as key of the element
[01:10:41] <Rojola> and the data as its value
[01:10:41] <Rojola> but then I must be allowed to loop over it
[01:11:01] <Cork> you can't use id as array index, as it will have gaps in them
[01:11:17] <Cork> and you can't sort an object
[01:11:29] <Cork> and that is why you want an array of objects
[01:11:44] <Rojola> Cork, sorry, I have connectivity issues here
[01:11:50] <Rojola> Did you get my messages?
[01:12:01] <Cork> see the irc.jquery.com
[01:12:07] <Cork> (in the subject)
[01:12:25] <Rojola> https://dpaste.org/aSUH/raw
[01:12:37] <Rojola> opening
[01:13:46] <Rojola> okay, I checked the channel logs
[01:13:48] <Rojola> you missed this:
[01:13:50] <Rojola> my best guess was to use the ID as key of the element
[01:13:59] <Rojola> and the data as its value
[01:14:05] <Rojola> but then I must be allowed to loop over it
[01:14:09] <Cork> ya, but then you have an object, not an array
[01:14:18] <Cork> and objects can't be sorted
[01:14:35] <Rojola> what should I do?
[01:14:47] <Cork> like i said an array of objects
[01:15:07] * Rojola googles that
[01:15:16] <Cork> i told you 5 mins ago...
[01:16:29] <Rojola> Cork, what I don't understand:   Arrays have numbers as keys.
[01:16:39] <Rojola> So why can't I say:  foo[5] = 'bar'; ?
[01:16:41] <Cork> no, they don't have keys
[01:16:58] <Cork> an array is [a,b,c,d,e,f,g]
[01:17:25] <Cork> not {1:a, 3:b, 4:c, 5:d, 6:e, 7:f, 10:g}
[01:17:32] <Cork> the later is an object
[01:18:11] <Cork> if you don't need count and sort use an object
[01:18:13] <Rojola> how do you go over an array of objects ?
[01:18:19] <Cork> if you need sort don't use an array as you will lose the  index
[01:18:22] <Rojola> I googled it,  but my search results are non-conclusive
[01:18:46] <Cork> Rojola: arr.forEach(function(obj) {})
[01:19:02] <Cork> and then obj.id, obj.col1...
[01:19:10] <Cork> what ever column you need access to
[01:19:37] <Rojola> Cork, thank you!
[01:21:04] <Cork> Rojola: and for sorting you use arr.sort(function(a,b) { if(a.id < b.id) { return -1 } if(a.id > b.id) { return 1 } return 0; });
[01:21:10] <Cork> for the id column that is
[01:28:00] <Rojola> Cork, what do you think about this?
[01:28:00] <Rojola> https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries
[01:28:12] <Rojola> It looks like I could only use an Object
[01:28:28] <Rojola> Do I really need to combine an array with an object just to iterate over it?
[01:28:54] <Cork> no, never said you had to, i said you can't have gaps in an array, and objects can't be sorted
[01:29:05] <Cork> meaning you can't change the order of things in the original object
[01:29:23] <Rojola> it's messages that will be added in a chronological order
[01:29:28] <Cork> Object.entries creates an array and loops over that
[01:29:36] <Rojola> I don't want to sort them
[01:30:18] <Cork> well you can use an object with keys then, but note that you will just have a set of keys not any of the normal array features
[01:30:32] <Cork> like length
[01:31:21] <Cork> and you can do Object.keys(obj) or Object.entries(obj)
[01:31:35] <Cork> the later has quite a bit higher browser requrements as it is a lot newer
[01:32:49] <Rojola> thank you Cork
[01:32:57] <Rojola> so, you suggest I go with Object.keys ?
[01:33:10] <Cork> depends on what your browser requirements are
[01:33:31] <Rojola> it should support older browsers
[01:33:39] <Cork> https://caniuse.com/#feat=object-entries
[01:34:41] <Rojola> ah, that's good enough
[01:34:50] <Cork> and object.keys https://caniuse.com/#feat=es5
[01:34:58] <Cork> so if you need ie support you can't use Object.entries
[01:35:28] <Rojola> I like object.keys more, as it supports IE 11
[01:35:36] <Cork> *ie9
[01:35:42] <Cork> :)
[01:35:45] <Rojola> but, I am not sure if object.keys can output the key, too
[01:35:46] <Cork> it has been around for ages
[01:35:57] <Rojola> https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys
[01:35:59] <Cork> it only outputs the keys
[01:36:24] <Cork> Object.keys(obj).forEach(function(key) { obj[key] == /* the value */ })
[01:37:00] <Rojola> now, that's complicated.
[01:37:11] <Rojola> thank you again!
[01:37:25] <Cork> not really
[01:37:33] <Cork> it builds an array of all the keys in the object
[01:37:38] <Cork> then forEach loops the new array
[01:37:53] <Cork> and you take the value from each itteration and look up the value in the object
[01:38:20] <Cork> alternatively you can do $.each(obj, function(key, value) {})
[01:38:43] <Rojola> thank you!
[01:38:46] <Cork> https://api.jquery.com/jquery.each/#jQuery-each-object-callback
[02:02:15] <Rojola> Cork, I am sorry, I fail
[02:02:45] <Rojola> var test = { 40: 'foo', 41: 'bar' };  test.keys(obj).forEach(function(key) { console.log(obj[key]); })
[02:03:00] <Rojola> obj and key are never defined
[02:03:05] <Rojola> are you sure that's okay?
[02:03:20] <Cork> its Object.keys(test) :)
[02:03:45] <Cork> Object. is a javascript type
[02:04:13] <Rojola> god...
[02:04:16] <Rojola> sorry
[02:04:20] <Cork> np
[02:05:59] <Rojola> it works now.
[02:06:03] <Rojola> But it's pure (black) magic.
[02:06:15] <Rojola> the variable "key" is never defined.
[02:06:16] <Rojola> Object.keys(test).forEach(function(key) { console.log(key + ' - ' + test[key]); })
[02:06:26] <Cork> sure it is function(key)
[02:06:30] <Rojola> it works,  but why,  makes no sense.
[02:06:43] <Rojola> but when do you pass it into the function?
[02:06:54] <Cork> forEach
[02:07:26] <Rojola> why does it know it's named "key" ?
[02:07:28] <Cork> Object.keys(test) generate an array, you can do console.log(Object.keys(test)) if you want to see the result
[02:07:45] <Cork> Rojola: cause it is a key, you can name it what ever you like a1 if you prefer it
[02:07:45] <Rojola> yes, I definitely want to see that.
[02:08:39] <Rojola> I am missing an "as" part
[02:08:44] <Rojola> in PHP it would be:
[02:08:46] <Cork> itterator = function(key) { console.log(key + ' - ' + test[key]); }; itterator('something')
[02:08:54] <Cork> that is what forEach does
[02:08:59] <Cork> basically
[02:09:41] <Cork> and itterator = function(key) { console.log(key + ' - ' + test[key]); }; could be written as
[02:09:43] <Rojola> foreach ($obj as $key => $value) { ...}
[02:09:46] <Cork> function itterator(key) { console.log(key + ' - ' + test[key]); };
[02:09:46] <Rojola> this would make sense
[02:09:57] <Cork> but that would be a declaration instead of a statement
[02:10:12] <Cork> Rojola: but that isn't function calls it is a for loop
[02:11:12] <Rojola> one last problem:  How can I add more elements to the object?
[02:11:20] <Rojola> obviously, push won't work.
[02:11:30] <Cork> for a VERY much older javascript format you can do: var keys = Object.keys(test); for(var i = 0, length = keys.length; i < length; i++) { test[keys[i]]; }
[02:11:32] <Rojola> What I found online are arrays that get pushed inside.
[02:11:46] <Rojola> YES
[02:11:50] <Rojola> THIS code makes sense!
[02:11:54] <Rojola> I will definitely use that line!
[02:11:57] <Rojola> thank you
[02:11:58] <Cork> but that is js ~3 format
[02:12:07] <Rojola> but that's understandable!
[02:12:10] <Cork> so anchent
[02:12:25] <Cork> Rojola: you need to understand the conspect of inline functions
[02:12:35] <Cork> you _NEED_ to understand it
[02:12:59] <Cork> cause callbacks can't work with for loops
[02:13:15] <Cork> and javascript use callbacks heavily
[02:13:43] <Rojola> okay, I will look into it after lunch
[02:13:54] <Rojola> I think, after eating, my brain will function better
[02:14:23] <Cork> Rojola: compare the two function declarations i gave you a few mins ago
[02:14:32] <Cork> it should help you understand it
[02:14:43] <Rojola> thank you!
[02:14:48] <Cork> np
[15:47:53] <littlebit> hi people, I'm working on a online fastfood shop, wher you can order food. I develop with django and jquery. I have reached to a point where i want to send, via $.ajax(... , the request to django. At first nothing happens at all. but when I add a function to the success parameter, I see the response. It is in the result, and the status is a 'success'. But y doesn't my page load? This is the code that sends
[15:47:54] <littlebit> the request to django: http://dpaste.com/0JQMETH
[16:08:55] <shoky> littlebit: ajax doesn't do any page loads - it just makes an http request and gives your code access to the response - it's up to you what to do with the response
[16:09:41] <shoky> if you want a regular page load, easiest is to just submit a regular <form>
[17:22:45] <Sal> hi
[17:22:55] <littlebit> shoky: well the thing is that the 'form', as you would say is dynamic.
[17:23:20] <Sal> I need a function to be able to be recalled only when it finishes the precedent call
[17:23:45] <Sal> something like a call queue
[17:23:59] <Sal> is there a way to do with jquery?
[17:25:44] <littlebit> Sal: well use in the first function a flag, and an if clause would conditionally trigger that function
[17:25:57] <shoky> littlebit: you can dynamically modify the form's inputs, before it is submitted
[17:26:10] <shoky> e.g. in a submit handler
[17:27:13] <Sal> littlebit, in that way, successive calls will get lost
[17:27:32] <Sal> i need more like ma function call queue
[17:27:50] <Sal> ma/a
[17:28:37] <Sal> Its an API call, and I need that all web pages can call it only when the previous call finishes
[17:35:16] <Sal> I think i need to use an array of functions (funcs) and then in a loop (funcs.shift())();
[19:38:59] <jak2000> hi all
[19:41:11] <jak2000> i need some advice: https://jsfiddle.net/jamiguel77/qwcL45rg/1/    <----jquery section line 9: serialize += "&xAccion=nominaEliminardeLaListaTablet"; how to pass the editabel columns? in this case: editable: [        [1, 'name'], [2, 'fecha'] ]   ? when debug only see: serialize= "Id=1&action=delete"   need  too the other parameters... any advice?
[23:35:19] <jak2000> i need some advice: https://jsfiddle.net/jamiguel77/qwcL45rg/1/    <----jquery section line 9: serialize += "&xAccion=nominaEliminardeLaListaTablet"; how to pass the editabel columns? in this case: editable: [        [1, 'name'], [2, 'fecha'] ]   ? when debug only see: serialize= "Id=1&action=delete"   need  too the other parameters... any advice?
