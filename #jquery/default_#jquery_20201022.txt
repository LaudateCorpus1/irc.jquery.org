[03:44:50] <Peppi^> hello
[03:46:12] <Peppi^> I'm trying to parse some html using Cheerio. The html I'm trying to capture looks something like this: <table class = "Rtable table table-striped" style=""> how do I get the data?
[03:46:34] <Peppi^> would this: const rtable = $("<table[class='.Rtable table table-striped']"); work?
[04:16:48] <Cork> Peppi^: you want to select the element in the dom or parse fragments?
[04:17:57] <Cork> also note cheerio is not jquery so will behave differently
[17:12:10] <ringzer0> I'm trying to run .masonry() on a grid with a lot of <video> tags.  Using .ready() screwed the height up.  I changed from $(document).ready() to $(window).load() and it SEMMS to have fixed the initial load.  However, the DOM is updated via ajax, and I am having issues re-running .masonry() or its reload methods in a way that it works.  Here is a working example: https://mysocialmediagraphics.com/assets/
[17:13:45] <Gh0st_Preacher> ringzer0 so document ready doesn't wait for any assets, just for the initial document, which is why that worked.
[17:13:51] <robertmaxrees> woops.
[17:14:23] <robertmaxrees> as far as how to handle later assets, you'll have to hook into the load event for all those elements, which is a pain.
[17:17:00] <robertmaxrees> ah, nvm - see you're already asking in another channel.  nevermind :)
[17:17:42] <ringzer0> robertmaxrees: i wasn't sure if it was a jquery event, or a native js event.
[17:18:30] <robertmaxrees> the window load event is a native event that you can handle via jquery.  it's however you're handling the later ajax loads.
[17:19:14] <ringzer0> robertmaxrees: If I understand you; I'm going to have to maintain a register as "LoadedCount", and have the "LoadedCallback" check to see that LoadedCount == ElementCount
[17:19:29] <robertmaxrees> sort of.
[17:19:40] <robertmaxrees> how are you loading the later elements?
[17:19:56] <ringzer0> Yes; you can see it working here: https://mysocialmediagraphics.com/assets/
[17:20:09] <ringzer0> If you click under Season > Fall, you will see the items reload
[17:20:28] <robertmaxrees> can you please share the specific code handling the extra loading?
[17:20:35] <robertmaxrees> instead of making me dig through the page to find it? :)
[17:20:57] <ringzer0> Gotcha; it's like a god class; all in one, but lemme grab it
[17:21:15] <robertmaxrees> just the bit for loading new elements.
[17:22:32] <ringzer0> robertmaxrees: https://pastebin.com/xjLSah2H
[17:22:59] <ringzer0> robertmaxrees: lines 21-55
[17:24:45] <ringzer0> I'm not a horrible programmer, am I? lol ... I serously can't figure this out ... smh
[17:25:49] <robertmaxrees> nah, not horrible.  some dated conventions in here but nothing crazy.
[17:26:03] <robertmaxrees> so the issue is you need to wait to fire masonry until after the images/videos have loaded.
[17:26:35] <robertmaxrees> or you need height/width information for each assets up-front so you can set those when you render them into the page.
[17:27:03] <ringzer0> robertmaxrees: actually; width is set according to media queries
[17:27:27] <ringzer0> so, height will be pending the % width.
[17:27:38] <robertmaxrees> yeah, then you'll need to wait until those assets have all loaded.
[17:27:49] <ringzer0> right.
[17:27:56] <ringzer0> even the window.onload is wonky
[17:28:10] <ringzer0> you can tell, because if you resize the screen, the margins become perfect
[17:28:11] <robertmaxrees> window.onload only fires when the first round of in-page assets finish loading.
[17:28:20] <ringzer0> but on the initial load, the boxes are all squished a LITTLE to the right.
[17:28:34] <ringzer0> robertmaxrees: right, but even it isn't really right\
[17:28:37] <robertmaxrees> so if you're running any ajax on pageload, those assets will often not be part of that load.
[17:28:56] <ringzer0> I am not now, in the future; I'd like to instead of the server-side-rendering
[17:29:24] <robertmaxrees> so anyway
[17:29:31] <robertmaxrees> you need to hook into each video's load event.
[17:29:46] <ringzer0> ok... and increment the LoadCount++ ?
[17:29:55] <robertmaxrees> i don't know what you mean by that.
[17:30:06] <robertmaxrees> counting the number of assets won't do anything here.
[17:30:12] <ringzer0> well ... I don't want to run .masonry() until all videos are loaded.
[17:30:28] <robertmaxrees> so then step back and ask the basic question you have ;)
[17:31:35] <ringzer0> Do I realy need to listen to each individual video element for a load(), count them up and THEN decide to do something, or is there a $('video').on('all_loaded', function())?
[17:31:43] <robertmaxrees> neither.
[17:32:14] <robertmaxrees> well, sort of the first one, but nothing with "counting".
[17:32:56] <ringzer0> how can I tell when they've all been loaded?  since the load event handler is on each individual element?
[17:33:36] <robertmaxrees> i'd check so see if video elements support load callbacks.  if they do, then i'd maybe try to make an array of promises, each index for each video element, and then to a Promise.all() or something similar.
[17:35:16] <ringzer0> i imagine: $('#grid-wrap').on('load', 'video', e => { LoadedVideos++; if (LoadedVideos => $('#grid-wrap video').length){ /* sweet- all videos loaded */ }
[17:35:23] <robertmaxrees> nope.
[17:35:38] <robertmaxrees> last i checked the load event doesn't bubble, so you can't do that.
[17:36:32] <ringzer0> it seems like such a simple thing: "when all the asyncronous elements are loaded" = callback
[17:36:53] <ringzer0> But I can work with Promises... omg; i just thought it'd be easier.
[17:36:54] <robertmaxrees> conceptually yes, it is simple.
[17:37:41] <robertmaxrees> just takes a little boilerplate :)
[17:40:11] <Peppi^> Cork, parse fragements
[17:47:17] <robertmaxrees> Peppi^ yeah, cheerio and jquery aren't identical - i'd look for a cheerio support location instead :)
[17:56:26] <Peppi^> robertmaxrees, do you know of any?
[17:56:47] <robertmaxrees> hit their site and see :) SO is another good choice, too.
[17:57:44] <Peppi^> k
[18:45:19] <dborg89> Hello, I am configuring CSP on my server and have noticed that JQuery is trying to run inline styles. The error is: Refused to apply inline style because it violates the following Content Security Policy directive: "style-src ....
[18:45:39] <dborg89> Without having to run unsafe-inline is there a way I can secure this?
[18:45:59] <robertmaxrees> how are you loading jquery?
[18:46:17] <dborg89> It is loaded as a jscript file into the header of the site
[18:46:54] <robertmaxrees> *javascript - is it being loaded from a 3rd party domain?
[18:46:58] <robertmaxrees> or served from the same domain?
[18:47:03] <dborg89> Same domain
[18:47:32] <robertmaxrees> what version of kquery?
[18:47:36] <robertmaxrees> *jquery
[18:47:41] <dborg89> 3.5.1
[18:49:04] <robertmaxrees> it looks like the plan is to land a feature in 4.0 that would resolve this.
[18:49:22] <robertmaxrees> not sure if there's a workaround, however.
[18:49:48] <dborg89> Yea I thought I saw a similar bug post referencing it too without a current workaround
[18:50:06] <robertmaxrees> yep.
[19:08:24] <ringzer0> robertmaxrees: it appears as thought I can just wrap the function in a setTimeout and it will make sure everything is fully rendered :D
[19:08:45] <robertmaxrees> that's a bad approach
[19:08:54] <robertmaxrees> you have no guarantee that everything will have loaded in time :shrug:
