[06:19:38] <RockWood> hi any active?
[06:19:54] <RockWood> Uncaught TypeError: Cannot read property 'Editor' of undefined  in databale
[06:21:11] <thykka> databale?
[06:29:07] <thykka> Rockwood, is 'databale' a typo?
[07:08:36] <znf> Is there a reason why this returns the <h4> element instead of the <button>? https://jsfiddle.net/Znuff/z9bt6fr4/3/
[07:09:17] <Cork> znf: you do append on the h4
[07:09:27] <Cork> and append returns the same element you call it on
[07:09:56] <znf> Oh.
[07:10:34] <Cork> what you need to do is let button = $('<button>', { class: "", data: { copyto: "datafield["...} })
[07:10:45] <Cork> and then just append that object to the h4
[07:11:03] <znf> thank you
[07:11:04] <Cork> znf: btw also be very very careful with contacting strings into html like you do
[07:11:16] <Cork> it is the common source for xss injections
[07:11:17] <znf> contacting?
[07:11:28] <znf> oh, you mean concat
[07:11:33] <Cork> "something " + var + "something else"
[07:11:45] <Cork> it is better to not use html at all like i did here
[07:12:09] <znf> normally it's 'key' because it runs in a $.each() so the key is the index
[07:12:20] <znf> but yeah, noted
[07:12:25] <Cork> $('<button>', { class: "the-class", text: "content" })
[07:12:31] <Cork> it is even easier to read
[07:18:06] <znf> why can't I $('<button>', { ... }).prepend('<i>', { class: 'one two three' }); ?
[07:18:11] <znf> <i> gets appended, but no classes
[07:18:27] <znf> prepended*
[07:18:31] <Cork> cause that works on the parent
[07:18:54] <Cork> prepend takes button.parent.insertNode(i, before button)
[07:19:04] <Cork> and as button isn't in the dom you don't have a parrent
[07:19:40] <Cork> wait, that is before... prepend is inside...
[07:19:46] <znf> yeah
[07:19:51] <Cork> so that sould work just fine
[07:19:53] <znf> like I said, <i> gets created, just no classes
[07:20:00] <Cork> au
[07:20:26] <Cork> .prepemd)'<i>', { class: '' }))
[07:20:45] <Cork> prepend only takes what to add, it isn't a wrapper for $()
[07:21:01] <Cork> wow tone of typos...
[07:21:10] <Cork> *.prepemd($('<i>', { class: '' }))
[07:21:25] <znf> Oh.
[07:21:32] <znf> lots of nesting in there
[07:21:37] <Cork> just one
[07:21:40] <thykka> protip: jQuery is confusing, learn to use native DOM methods ;>
[07:22:05] <Cork> znf: you can just do var i = $(); .prepend(i) if you prefer
[07:22:10] <Cork> it is exactly the same thing
[07:23:04] <thykka> another protip: jQuery's conventions are questionable at best, and when beginners start with jQuery, they learn to do things the wrong way
[07:23:24] <znf> it's fine like that, I got what I needed
[07:23:59] <Cork> ya, suppricingly many "guides" point at throwing around html strings all over the place
[07:24:42] <znf> to be fair, for many people it's easier to work with strings rather than objects at first
[07:24:54] <znf> they're simpler to understand when you're just starting
[07:25:27] <Cork> ya, true, but it also sets you out for a way of thinking that will make it harder to understand how things work later
[07:25:40] <Cork> and many guides never correct that, and THAT is a big problem
[07:26:17] <znf> I fall in that trap often because I do javascript very rarely, so even if I get a good habbit now, in 6 months I'll start forgetting
[07:26:42] <thykka> also, jQuery relies heavily on passing `this` as a return value for chaining. It can be practical in terms of brevity, but it sure as hell isn't easy to reason about
[07:27:08] <znf> I do get confused by $(this) a lot of time, true :)
[07:27:20] <Cork> thykka: don't think it is actually, it is juse .call() arguments
[07:27:58] <Cork> it is mimiking how native event handlers has done it since for ever
[07:28:01] <thykka> yeah, but what's visible to the developer is that you can just append methods to the last one and expect things to work..
[07:28:38] <Cork> ah, you explicitly talk about the object chaining
[07:28:49] <thykka> yeah, I don't think that's a great pattern
[07:28:55] <Cork> well that is what makes jquery easy to use, without it it wouldn't have much over native js
[07:29:21] <thykka> easy in what terms?
[07:29:21] <Cork> i've loved it since the first time i used it in an OLD drupal for ages ago :)
[07:29:45] <Cork> what makes the biggest difference is you don't need to error catch every missing thing
[07:29:46] <thykka> definitely not easier to debug
[07:30:00] <Cork> prototype had the other solution and it makes it very compersum to do easy checks
[07:30:42] <thykka> you can avoid a lot of those missing things by using array methods extensively
[07:30:56] <thykka> a blank array simply won't get processed, so there's no error to be thrown
[07:31:06] <Cork> ya, but array methods has come from jquery as a base :)
[07:31:13] <Cork> it didn't exist before
[07:31:19] <thykka> true, true
[07:31:30] <thykka> i'm not saying jQuery never did anything right
[07:31:42] <znf> ok, so I need to do this now, for about ~10 fields (classes like .cnpField):
[07:31:43] <znf>   let $target = data.data('copyto');
[07:31:43] <znf>   $('.cnpField[name^="' + $target + '"]').val( $('.cnpField').first().val() );
[07:32:01] <thykka> it just has a lot of pitfalls, at the expense of apparent ease of use
[07:32:17] <Cork> znf: i would prob just grab all cnpField and loop them
[07:32:24] <Cork> instead of taqking them one at a time
[07:32:31] <Cork> *taking*
[07:33:01] <znf> yup, was thinking the same
[07:33:33] <znf> tough at one point, I will have an undefined field :-/ need to figure out how to handle that
[07:33:55] <Cork> znf: undefined?
[07:33:58] <znf> oh, actually, this is much simpler :)
[07:34:05] <znf> yeah, I realized I was thinking the wrong way
[07:34:34] <znf> I'm copying data from domainfield[0][X] to domainfield[A][X], I don't care about their classes
[07:34:40] <Cork> btw, a side note, javascript doesn't require $ at the beginning of variable names :)
[07:34:46] <znf> I know
[07:34:46] <Cork> i see you put it in all your variables
[07:34:58] <znf> actually I put it on a total of 4
[07:35:29] <thykka> it's common practise to prefix jQuery collection variables with a $, but definitely not for other types
[07:35:30] <Cork> ah, ya that is simple enough to do
[07:35:41] <Cork> well some do, many don't
[07:35:48] <Cork> it doesn't really add anything there either
[07:35:50] <znf> in my whole file, just a silly habbit from other languages, when I wrote the first part of this script there's no $var anywhere, now I wrote like 15 lines and they all have $
[07:36:21] <thykka> it's a signal that one should be able to use jQuery methods on that variable
[07:36:26] <thykka> a reminder of sorts
[07:36:35] <Cork> sure you can do var $this = $(this); or you can instead do var header = $(this); and have something that actually tells what it is
[07:36:50] <thykka> $header = $(this) ?
[07:37:03] <Cork> but in that situation the $ doesn't add anything
[07:37:20] <Cork> as it is already an uniquely named variable
[07:37:40] <thykka> with the $ it also communicates it's type, not only it's purpose
[07:38:00] <thykka> (provided it's not reassigned at some point, which should be remedied with const)
[07:38:02] <Cork> except you don't have types in javascript so you can't do that
[07:38:14] <thykka> right, you can't enforce, but you can hint
[07:38:39] <Cork> you can hint at what data type the variable points at, but that is sliglty silly
[07:38:54] <znf> so, $.each(array(10), function(index, element, $target) {} );
[07:39:00] <znf> but what if I don't have an element?
[07:39:01] <Cork> or more exactly you can hint at what data you think you point at
[07:39:22] <Cork> uh... what?
[07:39:31] <Cork> znf: you just want to loop 10 times?
[07:39:36] <znf> from 0 to 10, yes
[07:39:39] <thykka> properly JSDoc'ing is of course better
[07:39:51] <Cork> znf: for(var i = 0; i<=10;i++) {}
[07:40:40] <znf> would a let traverse in the loop?
[07:40:44] <thykka> Array.from({ length: 10 }).forEach((value, index, array) => { ... })
[07:40:46] <znf> I'm always confused about the scope of variables
[07:41:06] <Cork> znf: variables traverse into, but nit out of
[07:41:14] <Cork> let is {} <-- block scoped
[07:41:27] <Cork> var is function() {} <-- function scoped
[07:41:57] <Cork> is a var inside the for would leak, but let would not
[07:42:31] <znf> What's the difference between for... and Array.from() that thykka mentioned?
[07:42:57] <Cork> for creates less objects, and ther by less gc
[07:43:03] <Cork> but the difference is tiny
[07:43:09] <znf> ah
[07:43:39] <thykka> for is also imperative, in that you're describing the implementation details (the how) instead of what you're doing
[07:44:11] <Cork> znf: Array.from({ length: 10 }); is the same as new Array(10)
[07:44:20] <Cork> it creates a new array with that number of elements
[07:44:32] <Cork> and for a simple loop, that is pointless
[07:44:49] <thykka> it's not the same
[07:45:15] <thykka> Array(10) will produce an array that you cannot act upon with, say, .map(), without populating it first
[07:45:33] <Cork> true, but for this case it is meant to be just a loop
[07:45:36] <Cork> not a generator
[07:46:39] <thykka> code is supposed to be written for humans, not computers. So aside from cases where performance is a concern (= probably not in JS-land), one should strive for readable code, that has as little mental overhead as possible
[07:46:49] <znf> ok, think I got it
[07:47:01] <thykka> a for loop describes the implementation details, which for the most part are useless cruft one has to read through
[07:47:05] <znf> I do think that the for is more straight forward and easier to figure out at a glance what's going on
[07:47:13] <znf> (in this case, anyway)
[07:47:43] <thykka> disagreed. Array methods hide the implementation details, so that the code you write can focus on *what* you're doing, not *how* you're doing it
[07:48:21] <thykka> yes, loops are somewhat simple, but it's unnecessary to repeat the looping code every time you want to use a loop
[07:49:26] <thykka> one should only be using loops when they don't want a standard implementation. Say you want to exit early, or skip every Nth item, or such..
[07:49:47] <thykka> even then there is likely a more functional way of accomplishing the same result
[07:55:44] <thykka> functional programming also leads to better, more versatile code. It's generally easier to reason about, easier to test and easier to re-use
[07:58:54] <znf> there we go
[07:58:54] <znf> let name = function(i, target) { return $name = "[name^='" + target + "[" + i + "]']"; }
[07:59:00] <znf> for(var i = 0; i<=10;i++) { $( name(i, $target) ).val( $(name(i, 'domainfield[0]').val()) ); }
[07:59:49] <thykka> ^ where does the 10 come from?
[08:00:09] <Rockwood> thykka actually i am trying to add datatable in bs 4
[08:00:21] <znf> not sure what you mean by the question?
[08:00:59] <thykka> znf, i'm just wondering whether you're always looping through exactly 10 items.. Seems like something that shouldn't be hard-coded
[08:01:08] <znf> I am looping trough exactly 10, yes
[08:01:09] <Rockwood> https://stackoverflow.com/questions/30627026/jquery-datatables-how-to-add-an-edit-and-delete-option  smthing like this
[08:01:32] <znf> if that ever changes, I would have to change more than this anyway, so it's not that big of an issue right now
[08:01:42] <thykka> znf, what if tomorrow you need to loop through 11 items? And the day after you need to loop through 9 items on one page and 12 items on another?
[08:02:03] <thykka> this again is something functional programming can fix before it's even an issue
[08:02:04] <znf> thykka, then this would be the least of my problems :)
[08:02:22] <thykka> act on data, not hard-coded values
[08:02:55] <znf> now my issue is with select fields, hmmm, the data doesn't seem to copy
[08:05:28] <znf> actually it works, made a typo
[08:06:03] <znf> thykka, I get what you mean, but if I show you my markup, you'll go "wtf" and ask me why I'm working with such a mess, unfortunately I have no control over the actual markup, so I'm just piling on top of it
[08:06:33] <znf> is it stupid and very fragile? yeah; does it work? so far yeah
[08:09:13] <thykka> that approach works well when there's no existing code. It might work when there's some existing code, but the issues will compound, and at some point it'll be extremely slow to make even minor changes
[08:09:27] <thykka> let alone fix bugs
[08:10:01] <thykka> but yeah, sometimes we just cannot afford to do things right
[08:10:09] <thykka> mostly due to business constraints
[08:10:13] <znf> exactly
[08:10:29] <thykka> which is ironic, because introducing bugs is counterproductive for business constraints
[08:10:30] <thykka> but eh
[08:10:47] <znf> our billing CMS is basically closed-source (encrypted with ioncube), we have control over /some/ things (ie: it takes templates), but not even templates can change some of the stuff
[08:12:17] <znf> right now I'm working on a domain configuration form, for specific .TLDs, our registrar requires extra fields (something like a SSN, for example), we have those extra-fields defined, but the way the CMS outputs them (and expects them back) is in a sort of array, like I mentioned above domainfield[domain-index][field-index]
[08:12:28] <thykka> yeah, I work with an in-house CMS that is implemented in a way I cannot influence much. Still, I strive to write decent code on top of that, so that when things inevitably change and break, fixing them doesn't become a nightmare
[08:13:40] <thykka> in my previous workplace, most code was throwaway stuff.. Deploy a site and call it done and forgotten
[08:13:59] <znf> the way you mentioned would have also been my prefered way, but there are fringe cases, for example, a client can have 3 domain names in their cart/configuration form, but only 2 of them are of the type that require that data, so if I had to count the fields, I'd have to do more wizardry, like I am already doing in my initial setup function
[08:14:07] <znf> ie: configForm.find('select').find('option[value="p"]').parent().each(function() { roForms.push( ($(this).attr('name').match(/domainfield\[\d\]/g)) ) });
[08:14:28] <thykka> if you put your data in an array, it should be easy to filter out unwanted items
[08:15:06] <znf> anyway, I got that working, now I'm having an issue with a select field not updating, or, rather, not triggering the event
[08:15:28] <thykka> how are you attaching the listener?
[08:15:36] <thykka> and is the select present when your code runs?
[08:15:57] <znf> I have a: $('select.selectField').change(function() { doOtherStuff() })
[08:16:04] <znf> yes it is present
[08:16:37] <znf> mind you, I wrote the selector right now another form, but I'm 99.99% sure it is correct
[08:18:43] <znf> If you're brave enough: https://jsfiddle.net/Znuff/p20g7bom/1/
[08:20:53] <thykka> um.. are you actually calling either of those functions?
[08:21:04] <znf> yeah, I added now the rest, or, well, I'm trying to
[08:21:09] <znf> but jsfiddle refuses :D
[08:22:08] <znf> This should be it, yet something fails
[08:22:09] <znf> https://jsfiddle.net/Znuff/p20g7bom/7/
[08:25:33] <znf> ah, ok, I changed the function
[08:26:10] <znf> There, this should work: https://jsfiddle.net/Znuff/p20g7bom/16/
[08:27:22] <znf> As you can see, data copying works, except the selectField.change() doesn't trigger when you select "Tip Persoana" => "Companie Comerciala" in the first form
[08:27:31] <znf> form section, that is
[08:28:14] <znf> The select value is updated, but it doesn't trigger swapCnpField(); which makes another field show up
[08:31:05] <JohnDoe2> hey guys, any particular reason the dynamic set of buttons aren't covered by the listener too? https://jsfiddle.net/v4kq5dxg/
[08:32:02] <Cork> JohnDoe2: https://learn.jquery.com/events/event-delegation/
[08:32:36] <znf> It seems that $.change() doesn't trigger when the field is not changed by the user, if I'm reading the docs right
[08:32:42] <Cork> $() makes a search for the elements, and .on then loops that result
[08:32:53] <Cork> so if it isn't there when the code runs, it gets nothing
[08:32:56] <Cork> you want delegation
[08:33:02] <JohnDoe2> right
[08:33:19] <Cork> znf: yes, no standard event fires from code changes
[08:33:29] <znf> oh, what to do then? :)
[08:33:46] <Cork> well you can fake the event with .trigger() when you change the value
[08:34:05] <Cork> $().val().trigger('change') would do it
[08:34:29] <JohnDoe2> $( "#list" ).on( "click", "a", function( event ) { vs my own $('.card').on('click','.sex button', function() { // I don't see a difference, I'm expecting it to work
[08:35:01] <Cork> JohnDoe2: the first bind a click handler on #list listning for children of type a
[08:35:18] <Cork> the second searches for element with the class card, and binds a click handler on them
[08:35:29] <Cork> the difference is what happens when you add a new element
[08:35:38] <Cork> the list, is still the parent
[08:35:51] <JohnDoe2> oh I get it, it *HAS* to be the parent container
[08:35:53] <Cork> while .card is a new element so doesn't have a handler
[08:36:08] <Cork> JohnDoe2: in the parent chain
[08:36:14] <Cork> doesn't have to be the direct parent
[08:36:29] <JohnDoe2> aka something that exists from the beginning, and whatever is dynamically added should be under it
[08:36:30] <Cork> you could ex do $(document).on('click', '.card', func)
[08:36:33] <JohnDoe2> got it, thank you ;)
[08:36:37] <znf> Cork, thanks, that's awesome
[08:36:37] <Cork> to catch all .card clicks in the page
[08:36:43] <Cork> JohnDoe2: np
[08:36:45] <JohnDoe2> perfect thanks so much
[08:53:52] <Rockwood> https://editor.datatables.net/examples/styling/bootstrap4  i just changed the version of jquery min
[08:54:45] <Rockwood> jquery-1.12.4.min.js <---to---> https://code.jquery.com/jquery-3.3.1.js
[08:54:55] <Rockwood> i am facing errors
[08:55:22] <Cork> Rockwood: 3 is a major version change
[08:55:34] <Cork> unless bootstrap is writtet to work with it, you will get errors
[08:55:44] <Cork> 1 and 2 is compatible (only browser support changes)
[08:55:49] <Cork> 3 has major changes
[08:55:52] <Rockwood> https://paste.ubuntu.com/p/cfFCJWY4yq/
[08:56:25] <Rockwood> so now what should i do now?
[08:56:44] <Cork> unless you know bootstrap supports it, use jquery 1.x or 2.x
[08:56:58] <Cork> they are just as supported as 3, just with different requirements
[09:00:14] <Rockwood> Cork so now?
[09:00:52] <Cork> uh, see above?
[09:01:00] <Cork> what do you want me to say...
[09:01:04] <Rockwood> yes i am notcing
[09:35:47] <Jasein> This is probably a stupid mistake on my part, but could someone just look at this codepen and tell me why my ball is not moving? https://codepen.io/jaseinatl/pen/jOOvobJ?editors=1111
[09:44:51] <thykka> Jasein, I don't think .position() is what you want there..
[09:47:35] <Jasein> I tried .css
[09:47:37] <Jasein> didn't work
[09:49:47] <Jasein> ugg. my coefficient was too small it works now. Now I can convert to animation frames
[09:52:49] <Jasein> thanks for looking at it thykka. I'm about to put my foot through my pc, so I'm gonna take a break.
[16:46:55] <guideX> how do I detect keypress when focus isn't on anything in particular
[16:47:05] <guideX> like when someone clicked on a div, and focus is on nothing
[16:47:17] <robertmaxrees> bind to the document
[16:47:41] <guideX> well, I can bind to html, but that fires every time something is pressed, even when focus is on a textbox
[16:47:50] <robertmaxrees> lol
[16:47:59] <robertmaxrees> so then what are you really looking for?
[16:48:16] <guideX> well I made these fake checkbox divs, and I want to be able to detect enter
[16:48:29] <guideX> so people are clicking on them, but I can't use the keys that way
[16:49:37] <robertmaxrees> not following
[16:50:03] <robertmaxrees> what does the enter key have to do with these "fake checkbox divs"?
[16:50:35] <guideX> well focus is sometimes on nothing, because the fake checkboxes were clicked, so when they go to hit enter to get to the next page, nothing is triggered
[16:50:51] <robertmaxrees> are you trying to focus on these divs?
[16:51:03] <guideX> only if I have to
[16:51:09] <robertmaxrees> lol
[16:51:17] <guideX> I don't really care if they have focus, as long as youi can hit enter on the page
[16:51:22] <guideX> and it'll trigger something
[16:51:31] <robertmaxrees> then do what I mentioned earlier.
[16:51:51] <robertmaxrees> $(document).on('keydown', function() { console.log('foo') });
[16:52:16] <robertmaxrees> https://jsfiddle.net/robertmaxrees/s56nx7rt/
[16:52:30] <guideX> but, that triggers everytime, even  if focus is on a textbox
[16:52:56] <robertmaxrees> then check to see if there's an ancestor that meets certain criteria first.
[16:53:04] <guideX> ah ok
[16:56:32] <robertmaxrees> https://jsfiddle.net/robertmaxrees/s56nx7rt/1/
[16:57:19] <guideX> cool thanks
[16:58:06] <robertmaxrees> you don't technically need the e.stopPropagation() in there but meh.
[17:17:24] <guideX> also why is this considered bad, var blah = $(".txtBlah")[0];
[17:17:45] <guideX> I feel like I might lose idk, a few minutes of sleep per night per time doing that, is it worth itg?
[17:17:48] <robertmaxrees> depends - what are you doing next?
[17:18:29] <guideX> maybe I want to find the firsrt textbox and use it, and if there's none, then I will do something else
[17:18:42] <robertmaxrees> but are you doing $(blah) at any point after that?
[17:18:48] <guideX> nope
[17:18:51] <robertmaxrees> why do you need the "first" textbox in the first place?
[17:19:25] <robertmaxrees> it's strange to use [0] in general on jquery objects, but without any context into what you're doing, it's hard to know what to suggest.
[17:19:41] <guideX> well maybe they're dynamic textboxes, so maybe there's none
[17:19:51] <guideX> idk, there's different situations to want the first one
[17:19:53] <robertmaxrees> huh?
[17:20:04] <robertmaxrees> so you're trying to see if there aren't any textboxes?
[17:20:12] <robertmaxrees> then check $('.txtBlah').length
[17:20:23] <guideX> yeah, but then later i'll still need the first one
[17:20:30] <robertmaxrees> why?
[17:20:33] <guideX> pretty easy to just pull the first, and see if it's undefined
[17:20:45] <robertmaxrees> that's not idiomatic tho.
[17:21:16] <robertmaxrees> also: why ask if it's the "right way" if you're then gonna argue with the advice you're given?
[17:21:35] <guideX> w ell not arguing, just wondering if it's one of those code smells
[17:21:53] <guideX> I have seen  people belittlle that
[17:21:56] <guideX> so just wondering
[17:21:59] <robertmaxrees> it is a code smell.
[17:23:01] <guideX> well say there's more than one, and I just do $(".txtBlah").val(), what does that mean?\
[17:23:08] <guideX> I'm pulling what, the first?
[17:23:21] <robertmaxrees> that's literally what the docs tell you.
[17:23:41] <guideX> ah ok, well thanks
[17:23:51] <robertmaxrees> https://api.jquery.com/val/ -> "Description: Get the current value of the first element in the set of matched elements."
[17:23:59] <guideX> I've always wondered, and like tippy toed around trying to ensxure I pull the one I think I'm pulling
[17:24:20] <robertmaxrees> but also: you shouldn't be doing global selectors on the page like that very often.
[17:24:32] <robertmaxrees> gotta componentize things as best you can.
[17:25:14] <guideX> well, I'm also paranoid that if I use things more specific, and assume things are more specific, I'll get an unexpected thing
[17:25:25] <guideX> so I keep keeping things more general, and flexible
[17:25:32] <robertmaxrees> that's an antipattern.
[17:26:43] <robertmaxrees> keep your implementation generic, sure.  but you shouldn't generally be selecting against the entire page.
[20:09:44] <znf> so I'm doing sessionStorage.setItem('my_field', $('.cifField').first().val() ); but there is no .cifField in my dom (it's only sometimes present), and I'm getting an "undefined" stored
[20:09:55] <znf> How do I NOT store this info if it's not defined?
[20:10:44] <robertmaxrees> a few different ways.
[20:10:57] <robertmaxrees> could do var foo = $('.cifField').val(); and then if (foo) {
[20:11:23] <robertmaxrees> or var $myElements = $('.cifField'); and then if ($myElements.length) {
[20:13:50] <robertmaxrees> also you don't need .first() there - .val() does that for you.
[20:15:38] <znf> what about if ( typeof value !== 'undefined' )
[20:15:39] <znf> ?
[20:15:58] <robertmaxrees> you need to be bailing earlier in code.
[20:16:06] <robertmaxrees> also null and undefined are both falsy.
[20:16:14] <robertmaxrees> so you could just do if (value)
[20:16:41] <znf> I'm grabbing the values earlier tough, in an array:
[20:16:41] <znf> https://pastie.dev/fd9leq.js
[20:16:53] <robertmaxrees> then you need to be fixing the problem much earlier.
[20:17:33] <robertmaxrees> first, that's not an array.
[20:17:39] <robertmaxrees> that's an object.
[20:17:40] <znf> object, sorry
[20:18:17] <robertmaxrees> second, i'd either validate that the array is g2g, or build a function that validates that you should even move forward
[20:19:00] <robertmaxrees> though there's something kinda fishy here...
[20:19:21] <robertmaxrees> is undefined even a legitimate value for you?  sounds like maybe not.
[20:19:47] <znf> it's not, like I said, sometimes .cifField does not exist
[20:19:56] <robertmaxrees> is that the old one that might not exist?
[20:20:02] <robertmaxrees> *only one
[20:20:17] <robertmaxrees> and if it doesn't exist, does that mean the form is even valid?
[20:20:31] <znf> yup, regCom might be empty in half the cases, but that works fine for me
[20:21:01] <robertmaxrees> would an empty string be OK to store in this case then?
[20:21:36] <znf> the form is valid, yes, a specific field in my form can have 2 different types of values (because my registrar expects a different value based on person_type -> ie, company or private person)
[20:21:44] <znf> I guess so, yeah
[20:22:04] <robertmaxrees> then just do 'cif': $('.cifField').first().val() || '',
[20:22:42] <robertmaxrees> oh and ditch the .first().
[20:23:28] <znf> the specific field contains either a SSN-like field, when it's a private person, or a company VAT id if it's a company (the value of .selectField fluctuates between 'c' and 'p', and well, others, but those are the important ones). The VAT ID I still need later during the sign-up process if it's a company registration, otherwise I discard the SSN-like value (because I have no need for it after the domain is registered)
[20:23:43] <robertmaxrees> k.
[20:23:50] <robertmaxrees> doesn't really change my advice :)
[20:24:06] <znf> nope, I was just in the middle of typing it when you said it, so I didn't want to stop
[20:24:07] <znf> :)
[20:24:12] <robertmaxrees> heh
[20:25:04] <znf> great, works fine!
[20:25:14] <znf> also, if you remember from yesterday, I figured out the copy form stuff
[20:25:28] <robertmaxrees> cool
[20:25:36] <znf> like: https://jsfiddle.net/Znuff/p20g7bom/19/
[20:26:00] <robertmaxrees> i'ma be honest and say i'm prolly not gonna look at it ;)
[20:26:03] <znf> tough that's an older version, I added more stuff like .trigger('change') bla bla
[20:26:08] <robertmaxrees> but i'm glad you found a solution.
[20:26:09] <znf> that's ok, I'm happy that I figured it out :D
[20:26:18] <robertmaxrees> also: why are you using .trigger('change')?
[20:26:32] <robertmaxrees> tbh you wanna avoid trigger as much as possible.
[20:26:48] <znf> that was the suggestion of someone earlier in here
[20:26:55] <robertmaxrees> :/
[20:27:17] <robertmaxrees> is it to trigger a change event handler you wrote?
[20:27:23] <znf> without it, I was updating the second part of the form, but it didn't trigger a <select> event that I had, like $('select').change( function() {} );
[20:27:24] <znf> yeah
[20:27:39] <robertmaxrees> so instead, you want to abstract the handler and call it directly.
[20:27:45] <robertmaxrees> instead of proxying logic through the DOM
[20:27:55] <robertmaxrees> *select event handler.
[20:27:56] <robertmaxrees> ;)
[20:30:59] <znf> sounds like an advanced tactic
[20:31:34] <znf> But if you have a code sample/docs I could look up, at least to satify my curiosity, I'll gladly try to figure it out :)
[20:36:57] <robertmaxrees> not really all that advances, and it's not really something you document.  just standard good practice :|
[20:37:37] <robertmaxrees> *advanced
[20:37:52] <robertmaxrees> https://jsfiddle.net/robertmaxrees/c7no28Lh/
[20:38:20] <robertmaxrees> you were talking about trying to generally implement things yesterday ^ this is how you properly do that.
[20:40:22] <znf> I'll check it out, thanks, tough I don't promise I actually get it and implement it the proper way
[20:40:37] <robertmaxrees> still a good thing to learn :shrug:
[20:40:45] <znf> yup
[20:40:53] <robertmaxrees> would you accept a shoddy server config on your backend?
[20:41:10] <znf> no :) I would fix it because I know how
[20:41:26] <robertmaxrees> heh
[20:41:47] <znf> I get the idea tough, I think :)
[22:32:11] <Jasein> I have created a ball physics simulation that is *almost* working the way I want it. The problem is that when you click on a ball or on the empty canvas, the ball (existing or new) disappears visually.
[22:32:33] <Jasein> If you drag it out of bounds, it appears.
[22:33:03] <Jasein> and it's not changing colors like I had expected.
[22:33:15] <Jasein> https://codepen.io/jaseinatl/pen/oNNPdob?editors=0011
[22:38:03] <Jasein> sorry after all that, wrong channel.
