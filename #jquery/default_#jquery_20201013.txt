[16:36:40] <errorous> Hello. I'm calling my ajax request recursively. async is off, of course. Now, I also have $('#foo').append('bar<br>); before it's being called recursively
[16:36:53] <errorous> but it doesn't get done until AJAX eventually stops
[16:36:58] <errorous> is there any way around
[16:36:58] <errorous> ?
[16:37:46] <errorous> full code
[16:37:47] <errorous> https://hastebin.com/navawocope.js
[17:09:26] <robertmaxrees> errorous that's a blank page, but why is async off?
[17:09:44] <errorous> robertmaxrees let me repost
[17:10:28] <errorous> https://dpaste.com/CNFTGY3S4
[17:10:52] <robertmaxrees> right, so why is async off?  that's what's causing your issue.
[17:11:13] <robertmaxrees> at least, i assume so.  not sure where the append is in relation to this.
[17:11:28] <errorous> robertmaxrees well, I don't want all requests to fire at once. I want first ajax call to finish before the next one is made
[17:11:38] <robertmaxrees> erm.
[17:11:41] <robertmaxrees> then chain them.
[17:11:48] <errorous> how so?
[17:11:56] <robertmaxrees> and/or call them in each one's success callback.
[17:12:07] <robertmaxrees> locking the browser for that it a bad experience for the end user.
[17:12:29] <errorous> robertmaxrees no end user here. only me trying to run my php script lots of times
[17:13:03] <robertmaxrees> still.  async: false is an extremely inefficient way to do that.  just run the next ajax call in the success/then of the last.
[17:13:05] <errorous> robertmaxrees https://dpaste.com/EKRUN3NEL
[17:13:24] <errorous> oh, so no need for async if I use success?
[17:13:44] <robertmaxrees> are you trying to just call this repeatedly?
[17:14:29] <errorous> robertmaxrees trying to call once, when I get response one more time and so on
[17:14:34] <errorous> until count is 1800
[17:16:39] <robertmaxrees> then yeah.  just .then(recajax) on the end of the ajax caall and kill the async: false.
[17:16:56] <errorous> robertmaxrees but I need this only on success
[17:17:04] <errorous> would just removing async: false do?
[17:17:04] <robertmaxrees> .then() is the new success.
[17:17:07] <robertmaxrees> so use then.
[17:17:23] <robertmaxrees> https://bpa.st/7VGA
[17:17:25] <errorous> oh, `then` won't be ran on error?
[17:17:29] <robertmaxrees> no.
[17:17:39] <robertmaxrees> only on success.  .catch() is what you use for errors.
[17:17:48] <errorous> thanks so much
[17:18:20] <robertmaxrees> though if this is just to generate requests to the server, depending on what you're doing server-side there are other ways to do this.
[17:18:22] <robertmaxrees> but :shrug:
[17:18:39] <errorous> robertmaxrees wait. last line in your code is to start the loop?
[17:18:50] <robertmaxrees> it's not a loop.
[17:19:01] <robertmaxrees> it's a recursive function call.  but yes, that last line runs the function.
[17:19:13] <errorous> ok, because then I don't need it
[17:19:33] <robertmaxrees> because you're using the click handler?
[17:20:40] <robertmaxrees> fwiw the click handler from your original paste can be reduced down to $( 'button' ).click(recajax); :)
[22:30:53] <green-> is there a likely reason why trying to add a click event listener via both on('click', ...) or click() will not work when supplying a class selector, but works perfectly fine using the same element's ID?
[22:31:09] <robertmaxrees> would need to see the html and js.
[22:33:13] <robertmaxrees> (also fwiw .click() uses .on('click' under the hood)
[22:35:10] <green-> robertmaxrees: okay, will try to get demo with the code thrown up ... slideToggle animation is a bit jerky at the end, too, hmmm.
[22:35:32] <robertmaxrees> let's start with just the event bindings throwing a console log.
[22:39:55] <green-> robertmaxrees: well, perfect. cut up the relevant pieces of code into a jsFiddle and it works there
[22:40:35] <robertmaxrees> :) try adding more and more until it stops working again.
[22:40:50] <green-> robertmaxrees: in the full code here, I do have a console.log() in the function I'm trying to bind. Throws the message when using ID, but not when using class selector.
[22:41:08] <robertmaxrees> just throw up the full js then I guess.
[22:43:01] <green-> must be something in the DOM, because all the JS is in the fiddle
[22:43:21] <robertmaxrees> mind just tossign the link out and i'll see if there are any obvious gotchas?
[22:43:53] <green-> i have it locally, will try to throw it up though. thanks for offering to help. let me see if i can get this in condition to put up somewhere :)
[22:44:05] <robertmaxrees> ok...
[22:44:17] <green-> feel like this should be obvious. ;)
[22:44:27] <green-> but obvously i'm not seeing something
[22:44:37] <robertmaxrees> :shrug: without having any code in front of me i dunno what to say :)
[22:47:29] <green-> and now it just randomly started working. :)
