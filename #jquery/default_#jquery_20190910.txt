[06:24:38] <anli> Can I run two ajax requests at the same time?
[07:08:24] <Cork> anli: depends on what limitations on server connections the browser sets
[07:08:43] <Cork> but browsers normally allow at least 5 simultanious connection to the same server
[07:08:51] <anli> But two isnt exactly a lot of connections...
[07:09:02] <Cork> didn't say it was
[07:09:11] <anli> google chrome did not want to have more than one ajax request when I tried
[07:09:19] <Cork> uh...
[07:09:23] <Cork> that is just not true
[07:09:25] <anli> So I cannot even have a progressbar
[07:09:27] <anli> ok
[07:09:45] <anli> It is true that I did not manage to have two connections
[07:09:46] <Cork> might be your server can't handle simultanious connections
[07:10:03] <Cork> well it isn't chrome causing the problem
[07:10:10] <anli> There were not two requests according to the devtools panel
[07:10:25] <Cork> then make sure your code is written correctly
[07:10:44] <anli> So two ajax requests at the same time should be supported then
[07:10:49] <Cork> for example 1 sync call will be all you can have at the same time
[07:11:15] <anli> Maybe I only needed to set a flag to have a call async
[07:11:20] <Cork> no
[07:11:25] <Cork> you have to NOT set to not have it
[07:11:27] <Cork> it is on by default
[07:12:56] <anli> I am using $http.post (angularjs) at the same time as $.post (jQuery)
[07:13:03] <anli> Or at least am trying to
[07:13:12] <Cork> you would have to check what $http does
[07:13:34] <anli> Maybe angularjs is locking the whole browser under the hood...
[07:13:42] <anli> Is that even possible?
[07:13:55] <Cork> yes, that is what sync ajax calls does
[07:14:17] <anli> Can I see if a call is sync or async in the devtools panel?
[07:14:26] <Cork> not really
[07:14:54] <anli> I think thats why, jQuery on the other hand does not care, I assume
[07:15:09] <Cork> it has nothing to do with jqeury or not
[07:15:17] <Cork> it is how XMLHttpRequest is called
[07:15:17] <anli> Exactly what I was writing
[07:15:34] <Cork> no it isn't
[07:15:46] <anli> jQuery does not care is the same as not having with jQuery to do
[07:15:55] <Cork> ... it isn't jquery or not
[07:16:04] <anli> If jQuery was using sync requests, then it would be different
[07:16:06] <Cork> it is how the network call is done on the low level
[07:16:13] <anli> yes?
[07:16:38] <Cork> https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Synchronous_and_Asynchronous_Requests
[07:17:00] <Cork> that is the low down difference that matters
[07:17:07] <anli> Are you sure you understand me?
[07:17:22] <Cork> yes, you take what framework you use to matter, it doesn't
[07:17:32] <anli> What I am writing is that angularjs probably uses sync and jQuery is probably using async
[07:17:32] <Cork> how they call xmlhttprequest does
[07:17:45] <Cork> jquery uses what you ask it to use
[07:17:51] <Cork> it does both
[07:18:01] <anli> I was not specific about that
[07:18:16] <anli> I already said I used $.post
[07:18:27] <Cork> it isn't what matters
[07:18:43] <anli> But if I am using $.post, I cannot specify if it should be sync or async?
[07:18:49] <Cork> $.ajaxSetup({ async: false }); $.post == syncronous
[07:18:50] <anli> That would be $.ajax
[07:18:52] <anli> ah
[07:18:57] <anli> true
[07:26:14] <anli> I am using a script from https://stackoverflow.com/questions/30644220/to-check-if-ajax-call-is-synchronous-or-asynchronous-in-browser-dev-tools to check if the calls are sync or not, all calls are async
[07:26:33] <anli> Still they seem to block each other
[07:30:10] <Cork> anli: well i would start by verifying that the code actually runs directly after eachother
[07:30:14] <Cork> or close to
[07:30:37] <anli> ok
[07:31:32] <Cork> one example to do that simplest is to replace the ajax call with a setTimeout(func)
[07:32:16] <Cork> as the browser and javascript is perfectly capable it is either you js or your server causing the problem
[16:33:49] <audioburn> can someone help me figure out why my site, apollius.com does not load in IE? and also, why the canvas doesn't load in some chrome versions?
[16:34:07] <robertmaxrees> lol
[16:34:30] <robertmaxrees> shotgunning your question out to a bunch of channels unrelated to your question is frowned upon
[17:59:19] <Stoot> He guys, what is the replacement, or best replacement, for the slider in jqueryUI ?
[18:07:20] <robertmaxrees> the native browser control.
[18:08:05] <robertmaxrees> https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/range
[18:08:15] <robertmaxrees> polyfill for browsers that don't have it.
[18:08:48] <Stoot> robertmaxrees great! IOsn't it better to use polyfill as default now then ?
[18:08:59] <robertmaxrees> huh?
[18:14:40] <Stoot> yes instead of native browser
[18:14:45] <robertmaxrees> uh
[18:14:58] <robertmaxrees> the point of a polyfill is to fill in the behavior if the browser doesn't offer it.
[18:15:30] <Stoot> true but why have 2 ways and not only one that covers all ? so polyfill
[18:15:36] <robertmaxrees> uh
[18:15:47] <robertmaxrees> you don't do anything different when you use a polyfill.
[18:16:07] <robertmaxrees> you just use the feature.
[18:16:19] <robertmaxrees> and the polyfill kicks in if the browser doesn't support the feature.
[18:17:34] <Stoot35> oops
[18:17:36] <Stoot35> My AGPU said... too hot
[18:17:54] <Stoot35> robertmaxrees you got my idea ?
[18:18:04] <robertmaxrees> you're misunderstanding what polyfills do.
[18:18:27] <robertmaxrees> you just use the feature like normal.  the polyfill kicks in if the browser doesn't support the feature natively.
[18:18:44] <robertmaxrees> so you only write the code once.
[18:18:51] <Stoot35> ok great, and that is a 1:1 fix ?
[18:19:33] <robertmaxrees> what do you mean?
[18:19:53] <Stoot35> as polyfill fills the gap
[18:20:09] <Stoot35> soi it's the same in behaviour as native ?
[18:21:55] <robertmaxrees> yes.
[18:22:04] <Stoot> robertmaxrees I will read some more about it first, check with you tomorrow :)
[18:22:14] <Stoot> ok, great, thanks for that :)
