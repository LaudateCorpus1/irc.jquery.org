[10:35:33] <grapheti> morNaN
[13:06:37] <snatcher> $.when(p1, p2).done((r1, r2) => { ... }); where p1 and p2 promises, does done() assign only p1, p2 resolve() arguments into (r1, r2) or also reject() arguments?
[13:12:35] <robertmaxrees> snatcher https://jsfiddle.net/robertmaxrees/kns9ahfc/
[13:24:52] <robertmaxrees> snatcher with even more: https://jsfiddle.net/robertmaxrees/kns9ahfc/1/
[13:25:24] <robertmaxrees> actually this is make it a little clearer: https://jsfiddle.net/robertmaxrees/kns9ahfc/2/
[13:30:55] <snatcher> robertmaxrees: if understand correctly, done() doesn't handle if any rejected, is there a way to catch if  any rejected?
[13:31:10] <robertmaxrees> snatcher what version of jquery are you using?
[13:31:49] <snatcher> robertmaxrees: 3.3.1
[13:32:10] <robertmaxrees> don't use .done() - use .then() instead.  and use .catch() for rejections
[13:33:22] <snatcher> robertmaxrees: but how can do then() on multiple promises and if all of them resolved then ... or any of them reject then ...
[13:33:32] <robertmaxrees> huh?
[13:33:50] <robertmaxrees> i think you're confused about how promises work.
[13:34:41] <robertmaxrees> $.when(foo, bar).then() <- in this case, .then() only gets called if ALL promises passed to $.when() resolve successfully.  if ANY are rejected, .then() is not called, but .catch() is.
[13:45:09] * robertmaxrees plays jeopardy think music
[13:50:38] <beshoo> i have page full with canavas , after loading all ajax , i do $(document).find('canvas').length
[13:50:48] <beshoo> it only return first 16
[13:50:56] <beshoo> while the page has more than 100
[13:51:04] <beshoo> why ?
[13:51:25] <robertmaxrees> beshoo not enough details - share the JS.
[13:52:28] <robertmaxrees> brb 1 sec.
[13:53:12] <robertmaxrees> back
[13:54:48] <beshoo> O.K. , open Instagram , to your feed , scrall down like 5 pages , then open console and run Array.prototype.find.call(document.getElementsByTagName('canvas'), cnv => ( console.log(cnv) ))
[13:54:51] <beshoo> Array.prototype.find.call(document.getElementsByTagName('canvas'), cnv => ( console.log(cnv) ))
[13:55:28] <beshoo> it will preint only the first 16 one
[13:56:43] <beshoo> what do you think ?
[13:56:58] <beshoo> why we can not read all canvas
[13:57:17] <robertmaxrees> erm
[13:57:27] <robertmaxrees> back up.
[13:57:45] <robertmaxrees> you're conflating concepts
[13:58:00] <robertmaxrees> you're aware that some pages will "unload" elements from the DOM, right?
[13:58:12] <beshoo> why ?
[13:58:17] <robertmaxrees> memory
[13:58:26] <beshoo> hmmmmmmmmmmmmmmmmmmmm
[13:58:31] <robertmaxrees> if the user isn't looking at them, there's not reason to keep them around.
[13:58:42] <robertmaxrees> what are you actually trying to accomplish?  why do you want to do that?
[13:59:00] <beshoo> i am learning the virtual dom
[13:59:13] <robertmaxrees> that had... nothing to do with this
[13:59:16] <robertmaxrees> *has
[13:59:53] <beshoo> btw even when i scall down
[14:00:01] <beshoo> and run that command
[14:00:09] <beshoo> it get the first 16 element
[14:00:19] <robertmaxrees> "scall down"?
[14:01:34] <beshoo> scroll down
[14:01:39] <beshoo> sorry
[14:01:54] <robertmaxrees> and that still doesnt explain what you're trying to do.  virtual dom is a distinct technology.
[14:03:45] <beshoo> i want to load canavs into aray - that is all !
[14:04:09] <robertmaxrees> what does that have to do with virtual DOM?
[14:04:25] <robertmaxrees> and why do you want to do that in the first place?
[14:05:12] <beshoo> i am learining how VD is hiding and can i catch the elemint befor hiding it
[14:05:48] <robertmaxrees> why?
[14:08:57] <beshoo> Whay do you care abou why i am doing this !
[14:09:02] <beshoo> about*
[14:09:11] <robertmaxrees> because there's likely a better way to accomplish it.
[14:09:20] <robertmaxrees> what you're asking to do is strange.
[14:10:09] <beshoo> The Why is (I need to get All Canvas from my Instagram feed to find who of my friend has a story to watch it ASAP)
[14:10:19] <robertmaxrees> they have an api.
[14:10:21] <robertmaxrees> use that.
[14:10:32] <beshoo> There is no API
[14:10:36] <beshoo> show me please
[14:10:45] <robertmaxrees> really?
[14:11:01] <beshoo> Yes no api to use it in JavaScript
[14:11:05] <robertmaxrees> lmao
[14:11:21] <robertmaxrees> https://lmgtfy.com/?q=intagram+api
[14:12:29] <beshoo> that is so funny
[15:20:06] <dopie> In jquery how can I see if a select box value is equal to '10' or '7' or '12' ?
[15:20:29] <dopie> $('#foo').val() == '10
[15:20:43] <dopie> $('#foo').val() == '10' || '7' || '12' failed
[15:22:25] <robertmaxrees> because you need to do .val() == for each of those.
[15:22:36] <robertmaxrees> alternatively, make an array and see if the string is in the array.
[15:24:32] <robertmaxrees> const validValues = ['10', '7', '12'], theValue = $('#foo').val();  if (validValues.indexOf(theValue) > -1)
[15:24:32] <robertmaxrees> etc.
[15:24:50] <robertmaxrees> dopie
[15:25:01] <dopie> robertmaxrees: thank you sir
[15:25:10] <robertmaxrees> js101 :)
[15:26:05] <robertmaxrees> do you understand why $('#foo').val() == '10' || '7' || '12' didn't work?
[15:26:32] <robertmaxrees> (it's actually kind of important to understand, which is why i asked)
[15:27:10] <dopie> yep
[15:27:27] <robertmaxrees> heh, so why do you think that is? :)
[15:27:33] <dopie> I was washing
[15:27:35] <dopie> wishing
[15:27:36] <dopie> haha
[15:28:07] <robertmaxrees> heh.
[15:28:21] <robertmaxrees> gotta remember how those expressions work ;)
[15:28:32] <dopie> I can also use includes
[15:28:40] <robertmaxrees> sure.
[15:28:43] <robertmaxrees> lots of choices.
[15:28:56] <robertmaxrees> depends on what all you're planning on doing.
[15:29:04] <dopie> just hiding some stuff
[15:29:18] <robertmaxrees> not planning on using the value later?
[15:30:06] <dopie> yes
[15:30:10] <robertmaxrees> rad.
[15:36:23] <dopie> BOMB
[15:36:43] <robertmaxrees> ?
[15:37:28] <dopie> it blew up
[15:37:29] <dopie> argh
[15:37:57] <dopie> https://gist.github.com/staycreativedesign/658b85aa2ca54d5164fa6413c7cce238
[15:38:14] <robertmaxrees> "blew up" how?
[15:38:34] <dopie> invalid or unexpected token
[15:38:47] <robertmaxrees> erm.
[15:39:09] <dopie> whut?
[15:39:12] <robertmaxrees> ["10", "9"].includes($("#entry_type_id")).val()hi
[15:39:16] <robertmaxrees> ** ["10", "9"].includes($("#entry_type_id")).val()
[15:39:33] <robertmaxrees> gotta move that closing paren befor .val() to after.
[15:39:39] <robertmaxrees> ["10", "9"].includes($("#entry_type_id").val())
[15:39:51] <robertmaxrees> also: $("select#entry_type_id") - don't do this.  just use the ID.
[15:41:06] <dopie> k
[15:41:13] <dopie> yay
[15:41:15] <dopie> shazam!
[15:41:34] <robertmaxrees> understand what you did wrong? :)
[15:42:01] <dopie> looking at the highlights
[15:42:32] <robertmaxrees> basically, originall you had this: ["10", "9"].includes($("#entry_type_id")).val() - this is trying to run .val() on the return of .includes()
[15:42:38] <dopie> yeah
[17:55:28] <snatcher> what kind of object passed as obj $.post(...).fail((obj) => ...) ?
[17:59:11] <robertmaxrees> snatcher you want to use .catch(), not .fail()
[18:00:07] <robertmaxrees> and it's (jqXHR, textStatus, errorThrown
[18:00:08] <robertmaxrees> )
[18:03:40] <snatcher> robertmaxrees: what's the difference between catch() and fail() in this case?
[18:04:16] <robertmaxrees> functionally?  none.  but .catch() is more consistent with promises.
[18:04:28] <robertmaxrees> so your code will make more sense overall.
[18:15:26] <snatcher> is there a some sort of name convention for unused variables? .catch((_, __, error) => reject(error))
[18:16:09] <robertmaxrees> just use the names i noted before.
[18:16:14] <robertmaxrees> and then don't use them :)
[18:22:32] <snatcher> errorThrown is a string not an error, is there a way to get error?
[18:23:05] <robertmaxrees> not really?
[18:23:19] <robertmaxrees> because you're not getting a code error.  you're properly handling it.
[18:25:23] <snatcher> trying to unify some sort of pormise sandwich and using error.message in latest catch
[18:25:34] <robertmaxrees> huh?
[18:32:36] <snatcher> nevermind, will use something like this ".catch((jqXHR, textStatus, errorThrown) => { reject(new Error(errorThrown)); })"
[18:33:16] <robertmaxrees> why do you need an error object though?
[18:42:22] <snatcher> robertmaxrees: because using some try/catch for other promises in promise sandwich and they pass caught errors to reject() or with ".onerror = (e) => reject(e.target.error)" for example, instead handle error in every promise just handle it in last catch: .then('promise try/catch').then('promise with $.post'.then('promise with try/catch').catch((error) => handle(error))
[18:42:44] <robertmaxrees> you keep saying "
[18:42:53] <robertmaxrees> "promise sandwich" but i have no clue what you mean by that.
[18:43:19] <robertmaxrees> and you're conflating a promise .catch() with a try/catch.,
[18:46:36] <snatcher> robertmaxrees: by promise sandwich i mean function_return_promise(...).then((...) => function_return_promise(...)).then((...) => function_return_promise(...)).catch("handle error from any promise here")
[18:47:13] <robertmaxrees> that's just called "chaining"...
[18:49:22] <snatcher> so what's the point to handle errors separately if error can be handled with last catch in such a case?
[18:49:23] <robertmaxrees> also: you're doing too much.
[18:49:40] <robertmaxrees> function_return_promise(...).then(function_return_promise) <- instead of declaring new functions
[18:49:48] <robertmaxrees> and you can do that...
[18:50:00] <robertmaxrees> you just have to properly handle rejections all the way upo the chains.
[18:50:06] <robertmaxrees> what version of jquery are you using?
[18:50:28] <snatcher> 3.3.1
[18:50:43] <robertmaxrees> then yeah, rejections should bubble up properly.
[20:05:47] <snatcher> how can i $.post with "Content-Type: application/json" ?
[20:09:23] <robertmaxrees> check out the docs for https://api.jquery.com/jQuery.post/
[20:09:35] <robertmaxrees> notice how it says "This is a shorthand Ajax function, which is equivalent to:"?
[20:09:58] <robertmaxrees> that means you can set any options you could normally set for $.ajax()
[20:10:13] <robertmaxrees> so check out https://api.jquery.com/jQuery.ajax/ for more details.
[20:10:34] <snatcher> omg
[20:10:46] <robertmaxrees> ?
[20:11:25] <snatcher> i think stay with XMLHttpRequest(); instead reading that giant page
[20:11:34] <robertmaxrees> lmao
[20:11:35] <robertmaxrees> dude
[20:11:39] <robertmaxrees> really?>
[20:12:09] <robertmaxrees> search for contentType on that page.
[20:13:17] <snatcher> i got it, shorthand part
