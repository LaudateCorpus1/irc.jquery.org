[04:53:20] <alex_a> Hello
[04:53:36] <alex_a> Can someone here give support on DataTable?
[04:54:07] <Cork> i know there are quite a few using it in here (at least asking questions about it)
[04:54:23] <Cork> donno if they hang around though and look for questions though
[04:55:43] <alex_a> I've implemented a "delete row" feature on my datatable. I have a "delete" button on each row and clicking on it works but only for the first 20 rows in the table
[04:55:46] <Cork> alex_a: better option might be to ask in there forums
[04:57:03] <alex_a> However, t.data().length tell me i have 118 rows in my table
[04:57:53] <alex_a> Why i can't delete rows beyond 20?
[04:58:41] <Cork> alex_a: if you made a working implementation of the problem in a jsfiddle i could have a look, no guarantees though
[05:26:50] <alex_a> Cork: thx. But, unfortunately, i can't reproduce on the jsfiddle >_<
[05:27:22] <alex_a> I use a wrapper over DataTable. It may come from that...
[05:27:49] <alex_a> i'll try ti use Datatable directly
[05:28:01] <Cork> i would guess at it comming from some form of memory optimization (doesn't render everything cause it would be too slow/memory heavy)
[05:28:27] <Cork> but ya, without seeing what it actually does i can only guess
[07:05:02] <vish93> Heyy taplar
[07:12:55] <vish93> Hey guys is there a good way to convert a string like 100,000.50 to number?
[07:21:47] <FilipNortic> parseFloat?
[07:22:21] <FilipNortic> or you want it to remove all the extra ',' and stuff
[07:25:43] <AdamPDotty> ümm
[07:25:46] <AdamPDotty> parseFloat('100,000.50'.replace(',', ''))
[07:25:51] <AdamPDotty> …
[07:26:33] <Cork> hmm you want /,/g
[07:26:48] <Cork> else things like 100,000,000.50 won't work
[08:12:49] <vish93> Thanks guy, I made a helper function to remove commas, thus the number would become 100000.50
[08:29:42] <karstenk> How can I register the event when leaving fullscreen with hitting ESC Key ? $(document).keyup(function(e) { is not working as expected.
[08:31:53] <Cork> karstenk: https://developer.mozilla.org/en-US/docs/Web/Events/fullscreenchange
[08:32:19] <Cork> the fullscreen ui isn't in page so you can't catch the key events
[08:40:12] <vish93> Would anyone know a good tool to calcualte a 1260 grid with 5px gutter ?
[08:50:24] <MikeD_> vish93: what does that even mean?
[08:51:05] <vish93> MikeD_: instead of https://960.gs/ I would like to alter it to a 1260 wide version
[08:55:01] <MikeD_> wouldn't that just be to increase the 80px references to 105px?  (assuming the original 80px was 60px + 10px borders, the columns would be 85px instead of 60px)
[08:59:53] <vish93> MikeD_: using the 24 coloumn layout
[09:00:04] <MikeD_> 12
[09:00:39] <vish93> Yeah thinking of using the 24 col layout: https://pastebin.com/VV1fHPG6
[10:05:43] <mikov> hey guys, why does this: $("#test-div").append("<input>test</input>");.......generates this html: <input>test.....without the closing tag?
[10:06:47] <Cork> mikov: input is a self closing element, it doesn't have </input>
[10:07:04] <Cork> you want <input value="test">
[10:07:30] <mikov> i see, thank you
[10:08:17] <Cork> so what happens is the browsers error correction will ignore the </input> part when it generates the dom (and as the dom isn't html when it then generates new html it isn't there
[10:08:20] <Cork> )
[11:52:40] <jomofcw> Hello !
[11:52:49] <jomofcw> Is jquery-ui still maintained, please ?
[11:53:31] <jomofcw> (this is not an agression ;) I'm just curious)
[11:54:00] <jomofcw> *aggression
[12:13:53] <shoky_> no commits in almost a year, huh
[12:26:18] <jomofcw> shoky_ yup :'(.
[12:42:44] <creature__> Hello! I'm working on an HTML parser object, and I wanted to use jQuery as my 'engine'. My top-level goal is to create a thing that I can unit test, and use in my Chrome extension. You initialise it via `new MyParser(jqueryInstance, domNodesOrHtmlString)`. MyParser's constructor sets `this.document = jqueryInstance(domNodesOrHtmlString)`.
[12:43:50] <creature__> I thought this was going to let me write stuff like `this.document.find(selector)`, but... this isn't working. At least, not in my test suite. I'm having real trouble figuring out how to debug this/get insight to where things are going awry, as if I drop in a "debugger" statement then running my tests just ignores it.
[12:44:16] <taplar> ignored debugger statements would signify the logic is not being invoked
[12:44:23] <creature__> I'd appreciate any input into whether this overall approach sounds sensible, and some suggestions for debugging strategies.
[12:44:46] <creature__> taplar: I think it's more a case of "Jasmine run via Yarn doesn't break on debugger statements", as console.log() does produce output at the same place.
[12:44:51] <taplar> you could do it with jquery, sure, but you could also do it with a simple span too
[12:45:39] <taplar> var container = document.createElement('span');  container.innerHTML = htmlString;
[12:45:58] <taplar> then container.querySelector or any of the normal lookups would work
[12:47:00] <creature__> Mmm. TBH I was hoping to write this in such a way that I wouldn't have to rely on having a `document` global available. But I am somewhat out of my depth here.
[12:47:41] <taplar> do you not have a document object?
[12:48:41] <robertmaxrees> creature__ heh
[12:48:42] <robertmaxrees> https://github.com/jquery/jquery/blob/2d4f53416e5f74fa98e0c1d66b6f3c285a12f0ce/src/var/document.js
[12:49:16] <creature__> I think I do. But I didn't want to have to use it. Like, in this test environment, I'm running under node and it's using jQuery and jsdom-global to satisfy jQuery's requirement for a window/document (I forget which).
[12:49:51] <creature__> But in my "production" environment, this'll be used in a Chrome extension, and I'm not totally clear on exactly what the document will be.
[12:50:03] <taplar> well if you do it with jQuery or document, either way it could be done.  It's just less overhead with the vanilla methods
[12:50:11] <robertmaxrees> ^
[12:50:18] <robertmaxrees> jquery isn't really serving any purpose there.
[12:50:34] <creature__> So I was kinda hoping to just... skip all of that, and have this little object that doesn't care about what world's it in, it just gets an instance of jQuery and either HTML-as-a-string or a bunch of DOM nodes, and it just does its thing in a self-contained universe.
[12:50:50] <taplar> but you have to create the dom nodes
[12:50:52] <creature__> Only it's not doing its thing correctly, and I don't know how to poke at it correctly and figure out just *what* it's doing.
[12:50:59] <robertmaxrees> can you show us a fiddle?
[12:51:33] <creature__> I can try. Give me a few minutes.
[12:51:39] <robertmaxrees> i'm also confused about why you're hiding a constructor behind another constructor.
[12:55:14] <creature__> I could well be confused about that myself.
[12:57:45] <creature__> https://gist.github.com/creature/2f94b45697c3b812a094003ddb1e0cab Here's a gist of my problematic test cases, and my parser.
[12:58:39] <robertmaxrees> brb
[12:59:46] <taplar> i think there is a disconnect
[12:59:59] <taplar> you have IGParser up top, but InstagramParser down below
[13:00:19] <creature__> Oh, that's just me failing to entirely anonymise my real use case. :|
[13:00:58] <creature__> The gist has been updated! It's now... closer to reality.
[13:01:25] <taplar> now it's parser vs MyParser, :)
[13:01:50] <taplar> whatever you name the require variable should match where you try to use it, afaik
[13:01:58] <robertmaxrees> so yeah, your constructor is a little weird.  why not just make normal helper functions?
[13:02:16] <creature__> Sure, but I think that's OK. Like, that `require()` is going to load the myParser.js file, and *that* is going to define a global MyParser, I think?
[13:02:40] <creature__> That part seems to be working fine. My parser is definitely getting created, and I'm invoking it OK.
[13:02:59] <robertmaxrees> so then what's the error?
[13:03:05] <taplar> if you console.log(MyParser) before you try to use it, is it logged?
[13:04:19] <creature__> robertmaxrees: Well, one of them is for my logged out test case. "Expected true to be falsy" for subject.isLoggedIn(). Which seems weird, and is the root of my initial question. I'm having trouble figuring out *why* that's returning true.
[13:05:25] <creature__> taplar: I added `console.log(MyParser)` on line 9.5 of jasminetest.js, and it logs [Function: MyParser].
[13:05:35] <taplar> alright
[13:05:45] <creature__> robertmaxrees: I'm not sure what you mean by "Why not just make normal helper functions?".
[13:06:30] <taplar> so isLoggedIn() should be false
[13:07:27] <taplar> which would suggest this.document.find('#react-root nav a[href="/users/login/"]') is not finding an element
[13:09:17] <creature__> Yep. But alas, pup seems to suggest that element's present. "pup '#react-root nav a[href="/users/login"]' < test_data/20180412\ -\ page\ logged\ out.htm" prints the expected element; doing the same selector with the logged-in test data shows no output.
[13:09:51] <creature__> Two of them, to be precise.
[13:10:15] <taplar> So you could try to log the this.document.find('#react-root nav').prop('outerHTML') and visually see what it is returning
[13:11:07] <creature__> It returns "undefined".
[13:11:58] <taplar> console.log(this.document.find('#react-root nav a[href="/users/login/"]').prop('outerHTML')) does?
[13:12:37] <taplar> sorry, without the a[href] part in it
[13:12:42] <creature__> `console.log(this.document.find('#react-root nav').prop('outerHTML'))` does.
[13:12:55] <taplar> what about if you change the find to just find the id?
[13:13:17] <creature__> (`console.log(this.document)` returns a jQuery object with 383 elements in it, FWIW.)
[13:13:53] <taplar> that seems odd
[13:14:01] <creature__> Changing it to just the ID also returns undefined.
[13:14:24] <taplar> what does 'test_data/20180412 - page logged out.htm' look like?
[13:15:01] <taplar> a document should really have one element in it with a nested children
[13:15:46] <creature__> I haven't run it through a validator, but it certainly seems to be. It opens with an <html> element and ends with a </html>. As far as I can see, it's a normal HTML document.
[13:16:12] <taplar> that may be part of your issue.  jQuery isn't really intended to hold an entire document
[13:16:35] <taplar> it would probably be better to just give it the <body>
[13:16:49] <creature__> It was made by navigating to the target page, opening the web inspector in Safari, right-clicking the <html> node in the "elements" view, choosing "expand all", then right-clicking again and selecting "Copy as HTML", and then FINALLY outputting to a file via pbpaste.
[13:17:20] <creature__> This is apparently the best way to get a snapshot of the DOM, after React's done its rendering, into an HTML file. 🙄
[13:19:58] <taplar> i don't disagree with that, but I still stand by that jQuery is not intended to hold an entire dom
[13:20:02] <creature__> taplar: Hmm. I figured that what I was doing in my test (load data from file, pass it into the parser, get jQuery to do its thing) was essentially equivalent to what it'd be doing in a "normal" browser context. I guess jQuery doesn't need to actually parse the DOM in that environment though.
[13:20:21] <taplar> i've seen cases where putting a whole <html> structure in a jQuery object, jQuery will eat some of the top level elements
[13:20:43] <taplar> the fact that you said it contains 383 elements suggests to me that something like that is happening
[13:21:00] <taplar> otherwise it would contain one element, html, and all the other elements would be nested under that one element
[13:22:22] <creature__> That's fair. I'm not really sure what I should replace it with, though. I guess I might need to look into jsdom more. I only added that from a StackOverflow answer about "Why can't I use jQuery in my Node environment".
[13:24:08] <creature__> TBH I'm kind of grasping for solutions here. So if you have a better suggestion for how exactly to go about it, I'm all ears. Like I say, I was hoping my parser could get all its dependencies passed to it on construction ("Here's an instance of jQuery, here's a document") and then it'd just answer queries about it.
[13:24:36] <robertMeeting> creature__ so backing WAY up - you're just trying to find a way to unit test this all, right?
[13:25:55] <robertMeeting> like, that's the ultimate issue w/r/t to needing an "environment" in node, yeah?
[13:26:26] <creature__> Kind of! Being able to test it is definitely a key requirement.
[13:26:41] <robertMeeting> so as far as testing is concerned, you should be mocking the jquery methods themselves.
[13:26:54] <robertMeeting> you don't need to test jquery's internals - so mock out what it's doing.
[13:28:07] <creature__> Mmmmmmmm. Really, my test cases are things like "Given this logged-out page, is it correctly detected as logged out?", "Given this logged-in page, is it correctly detected as logged in? What's the username? How many items are on the page?".
[13:28:53] <robertMeeting> except that your tests are relying on jquery's internals to do stuff.
[13:28:56] <creature__> So it's not so much about testing jQuery's internals, and more about testing that my selectors are valid. So whatever ends up as the parsing engine - I went with jQuery, because it's kind of a Swiss Army knife for this stuff - I'll want to test it,.
[13:28:59] <robertMeeting> which means they're not really unit tests.
[13:29:19] <taplar> this is more integration testing
[13:29:22] <robertMeeting> ^
[13:29:30] <creature__> Okay. Let's call it an integration test from now on.
[13:29:37] <robertMeeting> lol
[13:29:49] <robertMeeting> but now you're wasting your time heh.
[13:29:58] <robertMeeting> why test jquery if it's already got a full test suite attached to it?
[13:31:49] <taplar> did you say you are using jasmine?
[13:32:15] <robertMeeting> that's what it says in the gist.
[13:32:22] <robertMeeting> :)
[13:32:24] <creature__> I am using Jasmine.
[13:32:37] <robertMeeting> (didn't mean to come off snarky)
[13:32:49] <taplar> alright i need to look at their docs, because i have a suggestion for this to be a true unit test
[13:33:13] <taplar> what version?
[13:33:16] <creature__> My goal here is not "test jQuery", my goal here is "test my parser". This parser is going to have to deal with a bunch of React-generated tag soup, without much semantic meaning. And I want to have some confidence it'll work on a variety of pages under a variety of different conditions.
[13:33:47] <taplar> there are easier ways to test a parser though...
[13:34:00] <robertMeeting> ^^^^^^^^^^^^
[13:34:08] <robertMeeting> you want to get jquery out of the equation.
[13:34:15] <robertMeeting> and mock out its methods.
[13:34:30] <creature__> So I'm going to end up a library of those pages in my test_data directory, and a Jasmine test that says "If the parser has this document, it should return true from isLoggedIn() and "myUsername" from getUsername() and 3 from getNumItems()." This does not seem like a weird requirement to me.
[13:34:47] <robertMeeting> it isn't.
[13:34:50] <taplar> but the isLoggedIn is reliant on jquery
[13:34:51] <robertMeeting> at all.
[13:34:56] <robertMeeting> right ^^^
[13:34:59] <taplar> it's not testing the parser
[13:35:11] <taplar> it's testing jquery lookup on the parser results
[13:35:22] <creature__> Okay, but you can think of my "parser" object as a thin, pleasant interface over the top of jQuery.
[13:35:53] <robertMeeting> right, so mock out jquery and test just your "parser" :)
[13:36:04] <creature__> So I can ask things like "isLoggedIn()" instead of !$("#react-root nav a[href='/accounts/login/']").length.
[13:36:25] <creature__> Okay, but if I mock jQuery... I'm not really testing anything useful.
[13:36:43] <taplar> var parser = new MyParser(htmlString);  var child = parser.find('#idInResults);  if (child instanceof HTMLElement) assert(true);  or something of that nature
[13:37:08] <robertMeeting> brb
[13:38:30] <creature__> Maybe "parser" is the wrong word to use here, and that's where the disconnect is.
[13:38:38] <robertmaxrees> aaaand back.
[13:38:53] <taplar> but personally here's what i would do to make it a true unit test
[13:39:01] <taplar> https://jasmine.github.io/api/3.0/global.html#spyOn
[13:39:17] <taplar> you can spy on the jquery lookup method which will let you do two things
[13:39:25] <robertmaxrees> ^^^^
[13:39:31] <taplar> 1) expect that the selector is what it should be for that method
[13:39:50] <taplar> 2) return an expected result
[13:40:38] <taplar> because for a unit test, you are making the assumption that jquery will work
[13:40:44] <robertmaxrees> ^^^^^^^^^^^
[13:40:46] <robertmaxrees> this
[13:40:53] <taplar> the logic you would actually be testing is the logic inside your isLoggedIn
[13:41:15] <taplar> for what happens if it finds the element, and for what if it does not find the element
[13:41:32] <robertmaxrees> "what happens if jquery returns x vs y?"
[13:41:49] <robertmaxrees> instead of trying to come up with a whole environment for that, just mock out the jquery response object for those two cases.
[13:41:57] <taplar> and then later when you get into your real integration tests, you don't have any dummy pages.  you go against the live applicaiton
[13:43:23] <taplar> because if you want true integration tests, you don't want fake data.  you want real live interactions, just like if the user was doing it
[13:43:38] <creature__> That is an approach, but it's really not tackling the problem that I'm trying to solve. Mocking out jQuery isn't going to help me.
[13:43:40] <robertmaxrees> ^ you could even just use selenium at that point and do automated functional testing.
[13:43:48] <taplar> ^^^^^^^
[13:43:51] <robertmaxrees> creature__ so what is the problem you're trying to solve?
[13:45:57] <creature__> Like, the fundamental problem I have is "I have to write some code that extracts meaning from nonsemantic HTML I don't control." To help me do that, I'm going to create a wrapper that lets me ask questions like `foo.isLoggedIn()`, and the internals of the `foo` object get to worry about how whether it's logged in or not are detected.
[13:46:15] <robertmaxrees> right.
[13:46:45] <robertmaxrees> so your first step in your unit tests is to validate all of your logic - including negative cases.
[13:46:52] <creature__> And to help me do *that*, I want to write a test that lets me say "Here's an example of a page where I, the human being, know what the right answers are. I captured this example page from the wild, and dumped it out to a file, and I wrote a test case for it where I asserted what the right answers are."
[13:47:18] <robertmaxrees> that's where you're getting lost :)
[13:47:22] <taplar> But you don't need a whole page for that
[13:47:25] <robertmaxrees> ^^^
[13:47:36] <creature__> It's not where I'm getting lost, it's what I need to do.
[13:47:55] <robertmaxrees> that's the overarching theme here.  you get there by first validating your own logic.
[13:48:13] <robertmaxrees> like, you can have what your looking for, but you don't need an entire page.
[13:48:54] <taplar> this.document.find('#react-root nav a[href="/users/login/"]')
[13:48:59] <taplar> all that needs is something like
[13:49:37] <taplar> <div><div id="react-root"><nav><a href="/users/login2/"></a></nav></div></div>
[13:50:24] <taplar> if the parser works like it should, which your true "parser" is the jquery parsing, then it will either find it or will not find it
[13:51:50] <creature__> Okay, but a big part of what I'm trying to test is "are my selectors accurate?". Like, I can inspect the element and make a guess on how to find it. But maybe the real page is doing something I don't expect.
[13:52:05] <taplar> then that's an integration test
[13:52:08] <robertmaxrees> ^
[13:52:09] <taplar> -not- a test of your method
[13:52:22] <taplar> you unit test first to make sure your method does what it should
[13:52:32] <taplar> then you integration test to make sure other stuff is behaving like it should
[13:52:33] <creature__> I would consider that to be a test of my method with real-world conditions.
[13:52:40] <robertmaxrees> right, an integration test.
[13:52:42] <taplar> but it's not
[13:52:46] <robertmaxrees> unit tests are specifically around logic.
[13:52:55] <taplar> is the html page you are pulling in a real live page?
[13:52:57] <robertmaxrees> well actually, those are functional tests.
[13:53:02] <creature__> But regardless of what you want to call it - I'm happy to consider it an integration test - that's what I'm trying to accomplish, and that's what I'd really appreciate some help to get working.
[13:53:27] <taplar> we are trying to convey to you that you are trying to do too much with this test
[13:53:39] <robertmaxrees> ^^^
[13:53:53] <robertmaxrees> each test should test one thing instead of many.
[13:54:06] <creature__> I am trying to convey to you both that what you'd like me to do instead isn't going to help me. :)
[13:54:18] <robertmaxrees> erm.
[13:54:22] <robertmaxrees> lol
[13:54:28] <taplar> then i'll have to recommend ##javascript then
[13:54:40] <taplar> this is already OT for jQuery
[13:54:52] <robertmaxrees> ^ and apparently you don't wanna hear our advice.
[13:54:53] <creature__> And yes, the page is as close to a real live page as I can make it.
[13:54:59] <taplar> but it's not real
[13:55:03] <taplar> it's close to real
[13:55:17] <taplar> the real page could change and your test page would not
[13:55:22] <taplar> it's not reflective of live data
[13:55:28] <creature__> I'm very appreciative of the advice, and the debugging help, and I'm closer to getting something working than I was before. So thank you both for that.
[13:56:22] <creature__> Sure, that could happen, and that's kind of a "feature". In that scenario I can grab a new snapshot of the page, drop it into my test suite, and find out exactly where my logic's now broken.
[13:56:33] <taplar> buy why?
[13:56:38] <taplar> r/buy/but
[13:56:46] <taplar> you're making mor work for yourself
[13:56:50] <robertmaxrees> heh
[13:57:04] <robertmaxrees> and you're making flawed tests at that point.
[13:57:17] <taplar> the live data would change, but your tests would pass still
[13:57:57] <taplar> if a developer went out there and said, hey, fk <nav>, i'm going to use a <div>
[13:58:01] <taplar> your test would still pass
[13:58:11] <taplar> while the actual app might have a bug
[13:58:32] <taplar> and the only way you find that out, is running into the bug
[13:58:44] <taplar> but the purpose of tests is to pre-emptively find bugs
[13:59:09] <creature__> Yep! That's fine. That's what I need. My parser's going to get used by a Chrome extension, that runs on sites I don't control. They will probably change things, and I'll have to update my code to deal with those changes.
[13:59:14] <taplar> that's not fine, lol
[13:59:23] <creature__> It's the reality I'm dealing with.
[13:59:46] <creature__> The particular class of bugs I'm interested in catching is "Are these selectors etc accurate?"
[13:59:57] <robertmaxrees> but you're not testing that.
[14:00:24] <taplar> if you were testing that, you would do that lookup in the it()
[14:00:30] <taplar> not call a method that calls it
[14:00:42] <robertmaxrees> and/or you'd test against a live page.
[14:01:02] <robertmaxrees> anyway, gotta jet for a bit.  bbl.
[14:01:06] <taplar> which as robert said earlier, you'd be testing jQuery at that point, which already has tests
[14:02:09] <taplar> https://github.com/jquery/jquery/tree/master/test
[14:02:21] <uranium[oc]70> I want to know if my user has a webcam or not, then show an image to use the camera to take a picture, if no camera is avail offer to upload a file.   I also dont want my page to immediatly promt for cam permissions until they click take picture now.
[14:03:12] <taplar> uranium[oc]70: i'm not sure how javascript knows if there is a camera or not.  probably a ##javascript question
[14:03:30] <uranium[oc]70> ##   ftw, tried joing #javascript
[14:03:35] <uranium[oc]70> ty taplar <3
[14:03:44] <creature__> Well, let's back up a bit. I think we've established pretty firmly that you think I'm not writing a useful test, and I think I am, so let's put all that aside. Before we got down into that philosophical rabbithole, our current hypothesis is that "jQuery goes a bit funky when you try to give it an entire document".
[14:03:58] <taplar> yes
[14:04:30] <creature__> So, what could I use instead? Presumably in the live environment I can just initialise it as `new MyParser($, document)`. In a node environment, how would I parse a string containing HTML into a bunch of structured DOM nodes?
[14:05:11] <uranium[oc]70> first pray that you have valid html markup ;)
[14:05:21] <uranium[oc]70> 2nd fix the non valid html
[14:05:25] <taplar> what are you referring to as 'document'?  a text string of html?
[14:06:33] <taplar> https://stackoverflow.com/questions/7372972/how-do-i-parse-a-html-page-with-node-js#7373003  you might could use one of these.  i think you mentioned jsdom earlier
[14:06:46] <creature__> I think I'm pretty flexible on that. My original plan was to make `MyParser` flexible enough to take either a string of HTML, or a tree of DOM nodes. If I had to pick only one, I'd prefer the latter.
[14:07:16] <taplar> i, too, would encourage giving jquery an actual HTMLDocument
[14:07:43] <taplar> rather that a whole html document as a string to parse
[14:08:50] <taplar> https://www.npmjs.com/package/jsdom
[14:08:59] <taplar> hell yeah, then you just give jQuery the dom.window.document
[14:10:06] <creature__> Okay. So presuming that works OK, and in my testcase I can initialise this as `new MyParser(jqueryInstance, new JSDOM(contents).window.document)`, in my parser do I want `this.jqueryInstance(selector, this.document)`?
[14:10:24] <creature__> Is that the correct syntax for "Please find this selector in this set of nodes"?
[14:10:35] <taplar> looks like it
[14:11:04] <creature__> Okay. Thank you (and robertmaxrees too) for the help with this. Genuinely.
[14:11:15] <creature__> I need to eat something, then I'll try that and report back.
[14:11:24] <taplar> awesome
[15:15:28] <creature__> I updated my test to use JSDom to parse my document before passing it into my object, and now my tests pass. Thanks for helping me nail that down.
[15:15:41] <taplar> sweet
[15:40:39] <taplar> hell yeah, just got one of my routes returning data, :D
[16:04:20] <vish93> Hey taplar :)
[16:04:27] <taplar> sup
[21:11:34] <dodobrain> hi all
[21:11:56] <dodobrain> how do i get an array of values from an array of matched elements?
[21:12:14] <dodobrain> $(...).val() gets me the value of only the first element
[21:15:21] <dodobrain> ah bleh, i can map over the matched elements
