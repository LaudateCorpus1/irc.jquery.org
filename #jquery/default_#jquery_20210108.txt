[05:51:54] <locsmif_work> Hi all. Apparently in older versions of jQuery, you could hook an event handler to an element even if it got refreshed or reloaded somehow, for example by XHR
[05:52:14] <locsmif_work> Can $('#element').on  do the same in any way?
[05:52:46] <locsmif_work> I'm not entirely clear on what the documentation means regarding this
[05:53:59] <locsmif_work> It says:  "Event handlers are bound only to the currently selected elements; they must exist at the time your code makes the call to .on()." .. This leans towards that it wouldn't work, but technically it only says it should be there when you first set the handler, not that it goes away if the DOM changes, e.g. temporarily
[07:04:54] <Cork> locsmif_work: your thinking of $().live()
[07:05:28] <Cork> locsmif_work: that was a bad api design and has been replaced with delegate() that later was merged into the delegate form of on
[07:06:04] <Cork> locsmif_work: https://learn.jquery.com/events/event-delegation/
[07:23:35] <locsmif_work> Cork: that still requires a parent element which is never DOM modified, or?
[07:23:58] <Cork> sure, and unless you unload the page you will always have
[07:24:27] <Cork> and if you unload the entire page js is unloaded anyway so...
[07:25:52] <Cork> what $('selector').live('event', func) did was $(document).on('event'. 'selector', func)
[07:26:02] <Cork> so .on just gives you more control
[07:26:03] <locsmif_work> So some functionality is lost compared to .live(), because  when you want to attach an event listener to some DOM element which is later modified, you have to reattach it, right?
[07:26:09] <Cork> no
[07:26:11] <locsmif_work> Or deleted and replaced
[07:26:43] <Cork> you can't get events without getting a event bubble parent
[07:26:47] <Cork> live just hid that
[07:27:53] <locsmif_work> So what you're saying is .live(), under the hood, actually placed its event handling routines in a parent element of the actual element targeted?
[07:28:13] <Cork> give me a min
[07:31:12] <locsmif_work> So that events could be catched as they bubbled up? The reason is we have a complicated feature which uses XHR to replaces a <div>  with HTML retrieved serverside, and that <div> and its descendants have events hooked to it. Why that <div> specifically and not its parent or grandparent, which aren't replaced? Because we need to specific, and don't want the code, which due to webpack distribution
[07:31:18] <locsmif_work> always runs, to run anywhere other than in its own context/on its own page on the website
[07:31:34] <Cork> wow live was older then i remembered...
[07:31:36] <Cork> https://github.com/jquery/jquery/blob/1.3.0/src/event.js#L550
[07:31:40] <Cork> THAT is what live did
[07:32:42] <Cork> locsmif_work: you can't replace an element with handlers bound to it
[07:32:45] <Cork> it is not possible
[07:32:58] <Cork> and live gave that impression and THAT is why it was a bad api
[07:33:09] <Cork> cause it made ppl think it did something it didn't
[07:33:58] <Cork> so $('#target').live('click', func) is identical if functionality to $(document).on('click', '#target', func)
[07:34:14] <Cork> and yes that means the event handler will be around even if you remove that element
[07:34:28] <Cork> and your dom risk getting slow as document will be full of click handlers
[07:34:52] <locsmif_work> Why? They are only set once?
[07:35:10] <locsmif_work> The XHR request doesn't set handlers
[07:35:26] <Cork> it isn't the setting that is slow
[07:35:45] <Cork> it is that the browser has to process each of them for every click on the page
[07:36:14] <locsmif_work> There are like 5 or so
[07:37:57] <locsmif_work> Whether or not the event handler sticks around after an element is replaced from an XHR, the event handler in question does not handle the newly replaced <div> with the same id, correcT?
[07:38:21] <locsmif_work> It just hangs around, bound to a non-existing previous incarnation of the same DOM element?
[07:38:23] <Cork> it does if you delegate the event hander
[07:38:48] <locsmif_work> I can't. I can't bind anything to a static parent elelent
[07:38:49] <Cork> event handlers bound directly on the old element is automatically gc:ed, but not delegated ones
[07:38:51] <locsmif_work> element*
[07:39:01] <Cork> read the learn page again...
[07:39:08] <Cork> you've apparently skipped it...
[07:39:19] <locsmif_work> No I haven t
[07:39:40] <locsmif_work> You're not listening to what I'm trying explain, repeatedly for that matter
[07:39:45] <locsmif_work> We've tested this exhaustively
[07:39:58] <Cork> you can't bind persistent event handler on an elemnt you replace; ever
[07:40:43] <locsmif_work> Hmmm, let me phrase it this way
[07:42:16] <locsmif_work> If you say $('#something').on( ... ) and <div id="something"> gets replaced by <div id="something">.. would the event handler still catch clicks bceause it is actually, under the hood, bound to the coument and delegated to that element?
[07:42:42] <locsmif_work> coument = document*
[07:42:48] <Cork> no, cause the event handler would be removed when the element is removed
[07:42:53] <locsmif_work> Okay
[07:43:37] <Cork> that is the point i've made three times now, the new api you target the element you want to hold the delegated event handler and that is what holds it
[07:43:54] <Cork> the selector is just a string the delegation checks to see if it should fire from the bubbling event
[07:44:15] <locsmif_work> Then looking at the source code you linked, what does liveConvert on line 550 do what .on() doesn't?
[07:44:48] <Cork> it converts things like mouseenter hover and so on to browser compatibile event handlers
[07:44:54] <locsmif_work> Because no matter how wrong you say it was, which I'm prepared to accept as a matter of design philosophy, it *worked*
[07:44:54] <Cork> so isn't really relevant
[07:45:13] <Cork> your missing the point that it still does, just a little different syntax
[07:45:40] <locsmif_work> What?? You just said it didn't!
[07:45:48] <Cork> 15 mins ago...
[07:45:50] <locsmif_work> < Cork> no, cause the event handler would be removed when the element is removed
[07:45:50] <Cork> "<Cork> so $('#target').live('click', func) is identical if functionality to $(document).on('click', '#target', func)"
[07:46:17] <locsmif_work> How many times have I now said I can't bind to a parent element of any kind?
[07:46:28] <Cork> yes cause you haven't bothered to read the documentation i've given you
[07:46:37] <locsmif_work> What? I've read it several times
[07:46:41] <Cork> $('').on('event', func) is NOT a delegated syntax
[07:47:28] <Cork> and the very first link i gave you explains this
[07:49:22] <locsmif_work> Okay, first of all, you need to stop saying I didn't read it, because you're both lying and being rude when you do so. Second, you need to clarify, if you're going to be rude in any case, the contradiction of one function being able to hook a dom-replaced element and the other not.
[07:49:50] <locsmif_work> I'll read it a third time to see what I've missed, if I missed something
[07:50:45] <Cork> sigh, fine solve your own problems then, you don't listen and get fended that the code doesn't accept the syntax you want and refuse to listen to how it is doen instead, and find the problem to be not yours
[07:50:49] <Cork> have luck your ignored
[07:51:39] <locsmif_work> Alright. So far you've been talknig around the point and focused on infantile personal attacks anyway.
[16:27:17] <linux_daemon> hello all, i have this https://jsfiddle.net/h7r4aonv/2/
[16:27:56] <linux_daemon> i want, when the document loads, whichever element has the class btn-toolbar, to be top element, to be scrolled to the top of the div
[16:28:12] <linux_daemon> tried with scrollTop, but it is not working
[16:29:17] <linux_daemon> any ideas?
[17:12:24] <robertmaxrees> "to be top element"
[17:12:44] <robertmaxrees> ?
[17:14:36] <robertmaxrees> linux_daemon do you mean you want the div to be scrolled to the element with that class?
