[05:00:46] <arschmitz> gabriel_schulhof: Ping!
[05:04:37] <rxaviers> gnarf, Hello Corey
[05:04:55] <rxaviers> I'm moving Globalize discussions on IRC to its own #globalize channel
[05:05:15] <rxaviers> Although, it's already registered to freenode-staff.
[05:05:53] <rxaviers> Do you know how I should proceed in order to claim its rights? I mean register it to ourselves?
[05:06:28] <arschmitz> rxaviers: killing me thats 2 new channels i need to join in under 24 hours ( we made a pointer events polyfill one yesterday )
[05:06:40] <arschmitz> :-)
[05:06:51] <rxaviers> hehe
[05:07:49] <rxaviers> gnarf, wrong channel. Asking on #jquery-meeting
[05:07:58] <rxaviers> gnarf, wrong channel. Asking on #jquery-infrastructure
[05:08:04] <arschmitz> lol
[05:08:37] <rxaviers> ops :)
[05:08:55] <arschmitz> rxaviers: gnarf is in every channel anyway lol
[05:09:06] <arschmitz> rxaviers: you might just jump on #freenode and ask though
[05:32:23] <jqcommit> [13PEP] 15scottgonzalez pushed 1 new commit to 06master: 02http://git.io/cPzlTw
[05:32:23] <jqcommit> 13PEP/06master 1442ea653 15Scott Gonz√°lez: Build: Rename project to PEP...
[06:01:28] <jqcommit> [13PEP] 15scottgonzalez pushed 1 new commit to 06master: 02http://git.io/ESNVmQ
[06:01:28] <jqcommit> 13PEP/06master 14c8b49cc 15Scott Gonz√°lez: Docs: Add CONTRIBUTING.md
[06:07:30] <jquicommit> [13jquery-ui] 15jzaefferer pushed 1 new commit to 06master: 02http://git.io/0L15EA
[06:07:30] <jquicommit> 13jquery-ui/06master 149d0f44f 15JoÃàrn Zaefferer: All: Drop support for jQuery 1.6.x...
[06:13:48] <doesallmagic2> Project jQuery UI build #1514: SUCCESS in 6 min 30 sec: http://jenkins.jquery.com/job/jQuery%20UI/1514/
[06:13:48] <doesallmagic2> joern.zaefferer: All: Drop support for jQuery 1.6.x
[06:14:37] <jquicommit> [13jqueryui.com] 15jzaefferer created 06about-update (+1 new commit): 02http://git.io/MHjOgQ
[06:14:38] <jquicommit> 13jqueryui.com/06about-update 146be3a5a 15JoÃàrn Zaefferer: About: Integrate "Vision and Goals" from wiki, update team
[06:18:33] <jquicommit> [13globalize] 15scottgonzalez pushed 1 new commit to 06master: 02http://git.io/rEX-wg
[06:18:33] <jquicommit> 13globalize/06master 14841e521 15Scott Gonz√°lez: CONTRIBUTING: Update IRC channel
[06:20:30] <jquicommit> [13jqueryui.com] 15jzaefferer opened pull request #104: About: Integrate "Vision and Goals" from wiki, update team (06master...06about-update) 02http://git.io/MN3U4Q
[07:01:37] <jquicommit> [13globalize] 15rxaviers pushed 1 new commit to 06master: 02http://git.io/AChKOg
[07:01:37] <jquicommit> 13globalize/06master 14eb5eb5a 15Rafael Xavier de Souza: 1.0.0-alpha.15
[07:03:45] <jquicommit> [13globalize] 15rxaviers tagged 061.0.0-alpha.15 at 14d8f69c2: 02http://git.io/yX2tsw
[07:03:45] <jquicommit> 13globalize/061.0.0-alpha.15 1457a265c 15Rafael Xavier de Souza: Build
[07:27:10] <jqcommit> [13PEP] 15scottgonzalez opened issue #156: Remove gh-pages and recreate after getting a new build? 02http://git.io/pKODUA
[07:37:28] <arschmitz> jzaefferer: Ping!
[08:11:24] <gabriel_schulhof> arschmitz: What's up?
[08:11:59] <arschmitz> gabriel_schulhof: https://github.com/arschmitz/jquery-mobile/tree/cgi-node
[08:12:13] <arschmitz> version of mobile that uses no php and does not require apache
[08:12:17] <arschmitz> pure js
[08:12:40] <arschmitz> you can clone npm install and grunt connect and you have fully functioning demos
[08:13:53] <arschmitz> gabriel_schulhof: to be clear im not suggesting we really do this
[08:14:09] <arschmitz> gabriel_schulhof: i just did it for a talk i did on using cgi with node last night
[08:14:12] <gabriel_schulhof> arschmitz: Can you demo the optimized Ajax for the shared widgets?
[08:14:18] <arschmitz> up
[08:14:22] <arschmitz> yup
[08:14:36] <gabriel_schulhof> OK, so you just replace <?php with <? and call it a day?
[08:14:41] <arschmitz> no
[08:14:50] <arschmitz> ou have to convert it to node still
[08:14:59] <gabriel_schulhof> Yeah, I just realized that.
[08:15:07] <gabriel_schulhof> I mean, the PHP syntax is still the PHP syntax.
[08:15:13] <gabriel_schulhof> ... and that has to go too.
[08:15:14] <arschmitz> pretty much
[08:15:40] <gabriel_schulhof> Funny ... I just read an article about how JS in encroaching on the server side more and more, displacing PHP.
[08:15:56] <arschmitz> gabriel_schulhof: http://www.cgi-node.org/
[08:16:03] <arschmitz> you can use it on shared hosting like godaddy
[08:16:09] <arschmitz> where you cant normally use node
[08:17:10] <arschmitz> gabriel_schulhof: to be clear that branch can run on apache or with node-cgi and connect 
[08:18:11] <gabriel_schulhof> arschmitz: It's interesting that cgi-node does not rely on require like the rest of node. That page touts "include(path)", like PHP.
[08:18:23] <arschmitz> yes thats the idea
[08:18:31] <arschmitz> make it as close to php as possible basicly
[08:18:53] <gabriel_schulhof> arschmitz: Well, that's not necessarily a good idea, because everywhere else that node runs it uses require, rather than include.
[08:19:05] <arschmitz> gabriel_schulhof: they are different
[08:19:30] <gabriel_schulhof> arschmitz: I guess include doesn't do dependency resolution. It just flat-out includes.
[08:19:44] <arschmitz> gabriel_schulhof: it also does parsing and does not return a module
[08:21:22] <gabriel_schulhof> arschmitz: "You can even use the require() method the same way."
[08:21:41] <arschmitz> right require does a traditional require
[08:21:49] <arschmitz> include is more like a php include 
[08:22:15] <arschmitz> i use both in that branch
[08:24:33] <gabriel_schulhof> OK, I think I'm starting to wrap my head around it now ... I see where the parsing comes in ... The server passes the HTML file to cgi-node.js, which is a cgi-bin that uses node as the interpreter.
[08:25:00] <arschmitz> not quite
[08:25:31] <arschmitz> gabriel_schulhof: it passes enviroment variables to the cgi-script
[08:25:39] <arschmitz> and then it does what ever with those
[08:26:08] <gabriel_schulhof> OKOK, but it ends up spitting out an HTML file, just like PHP, which the server then delivers, right?
[08:26:10] <arschmitz> in the case of cgi-node it pulls in the page specificed in the request and parses it 
[08:26:14] <arschmitz> yes
[08:26:16] <gabriel_schulhof> Right.
[08:26:54] <arschmitz> gabriel_schulhof: big problem is because its a cgi its a whole new v8 instance for every request
[08:27:03] <arschmitz> and v8 has really slow startup time
[08:27:22] <gabriel_schulhof> Time to make it a DSO :) ... just like PHP :)
[08:27:55] <arschmitz> in addition it creates 2 new v8 contexts for each request to isolate node from cgi-node and the things it adds and then that from the page
[08:28:14] <arschmitz> gabriel_schulhof: yeah or fast cgi
[08:28:47] <gabriel_schulhof> arschmitz: Well, wait a sec ... we're talking node.js here, right? I mean, it could start a daemon, and pass requests to it.
[08:29:08] <arschmitz> gabriel_schulhof: thats basicly what fast cgi is
[08:29:17] <gabriel_schulhof> arschmitz: It would then have to do the heavy lifting of isolation though.
[08:29:29] <arschmitz> thats what v8 contexts are
[08:29:35] <arschmitz> so thats not an issue
[08:29:51] <gabriel_schulhof> OK, so V8 itself solves that.
[08:30:06] <arschmitz> gabriel_schulhof: yeah in chrome there is one v8 engine running
[08:30:12] <arschmitz> but it makes a new context for each tab
[08:30:18] <arschmitz> thats basicly its own vm
[08:30:37] <arschmitz> there a method you can call in v8 that returns a new context
[08:31:25] <arschmitz> contexts are still kinda slow though
[08:31:45] <gabriel_schulhof> Well, it's as good as it's gonna get though, right?
[08:31:57] <arschmitz> well the first one is really slow if you were to build the v8 in node properly there are options to make it use a snapshot after the first one though
[08:32:57] <gabriel_schulhof> arschmitz: Oh, I thought that was the norm ... after all, you wanna basically fork() after the bootstrap ... 
[08:33:19] <gabriel_schulhof> arschmitz: I bet PHP has to do the same, even if it's an apache DSO ...
[08:33:22] <arschmitz> gabriel_schulhof: i dont know what the node build of v8 looks like
[08:33:51] <arschmitz> the inherant slowness though is due to browser issues
[08:33:58] <arschmitz> basicly its due to security between tabs
[08:34:02] <arschmitz> that in node does not matter
[08:34:27] <arschmitz> but since v8 is written for the browser not node they will not make an option to disable that
[08:35:08] <gabriel_schulhof> arschmitz: I was thinking more about node doing that via a custom build of v8.
[08:35:28] <arschmitz> right they wont make a build option for it at all
[08:35:31] <gabriel_schulhof> arschmitz: I mean, v8 may not make it easy, but in the worst case you could maintain a fork of v8.
[08:35:51] <gabriel_schulhof> arschmitz: ... though I wouldn't necessarily want to be in those shoes.
[08:36:12] <arschmitz> gabriel_schulhof: want to think about something crazy
[08:36:32] <arschmitz> think about how many seperate js enviroments are created when you run grunt crawl on that branch
[08:37:00] <gabriel_schulhof> *foot = bullet;
[08:38:23] <gabriel_schulhof> arschmitz: Wait, does grunt crawl parallelize? I mean, if it loads one page at a time, it's not so bad, but it'd thrash a lot.
[08:39:02] <arschmitz> grunt( node ) - > casper ( qtwebkit ) - > phantom ( qtwebkit ) -> phantom-browser( qtwebkit) ->(request)->node-cgi server->cgi-node->node-context->process-context->eachpage chunk context
[08:39:20] <arschmitz> and part of that is per request
[08:39:33] <arschmitz> everything after request is
[08:39:51] <arschmitz> and no it does not i disabled that
[08:40:44] <arschmitz> sorry no the server is shared os everything after server is per request
[08:40:44] <gabriel_schulhof> Right, but one request finishes before another starts, so it's kinda bad, but at least the loading into memory of node is only done once, even if it needs to be re-initialized at each load :/
[08:41:03] <gabriel_schulhof> Oh, OK.
[08:41:16] <gabriel_schulhof> Well, then, that's fast CGI already, right?
[08:41:21] <arschmitz> no
[08:41:52] <arschmitz> each request starts a whole new v8
[08:42:36] <gabriel_schulhof> Wait a sec - it launches the node binary upon every request?
[08:42:38] <arschmitz> and that v8 creates several contexts
[08:42:41] <arschmitz> yes
[08:42:46] <arschmitz> thats how cgi works
[08:45:30] <arschmitz> and thats why it can work on shared hosting
[08:45:43] <gabriel_schulhof> Right, I know that, but that's usually the case on a normal HTTP server. I guess I was expecting that, since the server is in node.js, it wouldn't launch itself.
[08:46:30] <arschmitz> gabriel_schulhof: to be very clear this is not a good idea 
[08:46:40] <arschmitz> gabriel_schulhof: i did this because i was talking about using cgi with node
[08:46:52] <arschmitz> at a meetup last night
[08:49:55] <gabriel_schulhof> It'd be good to have JS on the server such that it can be interweaved with HTML like PHP, but it needs to be better integrated with the server.
[08:50:13] <arschmitz> gabriel_schulhof: right you need the equivilent of mod_php
[08:50:22] <arschmitz> if we are talking about apache
[08:50:36] <arschmitz> and if we are talking about full node well you would just not use cgi at all
[08:50:54] <gabriel_schulhof> But that's not necessarily enough, because you also need full cooperation with v8.
[08:51:00] <arschmitz> you would just use a connect middleware that does the same parseing and templating 
[08:51:13] <arschmitz> gabriel_schulhof: you have it if you had that
[08:51:23] <arschmitz> gabriel_schulhof: because there would be a single long running v8
[08:51:32] <arschmitz> that spawned a new context per request
[08:51:45] <arschmitz> which would be fast because they would be snapshots
[08:51:48] <gabriel_schulhof> arschmitz: Right, but you still have the unnecessary security isolation thing.
[08:52:05] <arschmitz> it likely would not be an issue
[08:54:17] <gabriel_schulhof> This would definitely encourage the use of <script> tags, because otherwise pages would be completely unreadable as to what code runs server-side, and what code runs client side :)
[08:54:55] <arschmitz> yeah
[08:57:30] <arschmitz> gabriel_schulhof: i bet there is a middleware that does this already without needing to go through cgi ( if your not on shared hosting / apache )
[08:58:31] <arschmitz> you could probably even use the parser from cgi-node
[08:59:37] <arschmitz> https://github.com/UeiRicho/cgi-node/tree/master/src
[09:05:43] <arschmitz> gabriel_schulhof: you could probably just use most of that directly if you set the proper environment variables 
[09:11:11] <gabriel_schulhof> OK, so there are two projects doing exactly the same thing and that have the same name? Gotta love it :)
[09:11:48] <arschmitz> huh?
[09:12:08] <gabriel_schulhof> Wait, NM ... the previous was not a github URL. Confused.
[09:12:25] <arschmitz> there are two "node-cgi"'s
[09:12:29] <arschmitz> but they are different
[09:12:42] <arschmitz> one is a cgi-server written in node "cgi" on npm
[09:13:08] <arschmitz> then there is node-cgi on npm  which is the same as cgi-node its a cgi implementation of node
[09:13:36] <gabriel_schulhof> Now, my head is truly spinning :)
[09:14:34] <gabriel_schulhof> Anyhoo ... I have to go for a while ... I'll BBL.
[09:14:41] <arschmitz> later
[12:25:05] <gabriel_schulhof> arschmitz: Ping!
[12:25:28] <arschmitz> gabriel_schulhof: Pong!
[12:26:02] <gabriel_schulhof> arschmitz: Hey! So, re https://github.com/jquery/jquery-mobile/issues/7856, is it not sufficient to document that, if you want to be able to highlight text, you should just add tabindex=0 to your popup?
[12:26:15] <arschmitz> absolutly not
[12:26:22] <gabriel_schulhof> I mean, it's only a problem on desktop, and only on Chrome.
[12:26:30] <arschmitz> you should be able to highlight text no matter what 
[12:26:56] <arschmitz> there is no sane reason why you should not be able to highlight text
[12:27:00] <gabriel_schulhof> Well, that's just it. There's a specific style you can apply to disallow text highlighting. We are not applying that style.
[12:27:15] <gabriel_schulhof> Exactly. There isn't. It's a(nother) Chrome bug.
[12:27:35] <arschmitz> gabriel_schulhof: execpt that its perfectly possible for us to fix
[12:27:52] <arschmitz> a blue flash on a specific platform is much less serious then a functional issue
[12:28:20] <gabriel_schulhof> arschmitz: The functional issue is also on a specific platform: Chrome.
[12:28:32] <gabriel_schulhof> I can test IE.
[12:28:46] <arschmitz> right but functional way trumps minor style
[12:29:07] <gabriel_schulhof> OK. I'll try to accommodate both.
[12:30:16] <gabriel_schulhof> After all, we have not only removed tabindex=0, but we have also removed the code that focuses the popup container on show.
[12:30:27] <gabriel_schulhof> So, it might be OK to use tabindex=0.
[12:30:46] <arschmitz> both would of course be best but we may have to revert that
[12:31:13] <gabriel_schulhof> arschmitz: Nono. Fixing View Source in the demos has proven that simply adding tabindex=0 is sufficient to restore highlighting.
[12:32:23] <arschmitz> ok
[13:36:42] <gabriel_schulhof> arschmitz: I think I have found a solution that both avoids the flash, and leaves the popup highlightable: Simply add the tabindex after showing the popup and remove it after hiding it.
[13:37:27] <gabriel_schulhof> arschmitz: Earlier we were adding the attribute and focusing the container in the next step. Now, we just add the attribute and that's it.
[20:12:17] <edutilos666> ...
[22:18:55] <jqmobilecommit> [13jquery-mobile] 15yonasstephen opened issue #7913: Panel Widget Stuck On Closing 02http://git.io/4DbEwg
[23:05:38] <doesallmagic2> Project jQuery UI - git core build #809: STILL UNSTABLE in 4 min 37 sec: http://jenkins.jquery.com/job/jQuery%20UI%20-%20git%20core/809/
[23:13:39] <doesallmagic2> Project jQuery UI - 1.7.x core build #681: STILL UNSTABLE in 7 min 38 sec: http://jenkins.jquery.com/job/jQuery%20UI%20-%201.7.x%20core/681/
[23:37:22] <jquicommit> [13jquery-ui] 15masterofsync opened pull request #1425: 1 9 stable (06master...061-9-stable) 02http://git.io/KtmYRg
