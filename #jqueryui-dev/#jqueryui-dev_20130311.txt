[02:36:03] <doesallmagic> Project jQuery UI - git core build #339: STILL FAILING in 15 min: http://swarm.jquery.org:8080/job/jQuery%20UI%20-%20git%20core/339/
[03:21:26] <doesallmagic> Project jQuery UI 1-9-stable - git core build #126: STILL FAILING in 45 min: http://swarm.jquery.org:8080/job/jQuery%20UI%201-9-stable%20-%20git%20core/126/
[03:37:20] <doesallmagic> Project jQuery UI - 1.6.x core build #234: STILL FAILING in 15 min: http://swarm.jquery.org:8080/job/jQuery%20UI%20-%201.6.x%20core/234/
[03:52:37] <doesallmagic> Project jQuery UI - 1.7.x core build #236: STILL FAILING in 15 min: http://swarm.jquery.org:8080/job/jQuery%20UI%20-%201.7.x%20core/236/
[04:07:54] <doesallmagic> Project jQuery UI - 1.8.x core build #211: STILL FAILING in 15 min: http://swarm.jquery.org:8080/job/jQuery%20UI%20-%201.8.x%20core/211/
[05:19:53] <mikesherov> .
[06:23:09] <scott_gonzalez> _zoggy_: That UUID is someone's Trac username.
[06:36:22] <scott_gonzalez> mikesherov: Looks like you investigated http://bugs.jqueryui.com/ticket/4703 can you reply to tj_vantoll's last comment?
[06:38:32] <scott_gonzalez> Actually, this ticket sounds related to the ticket that just got closed about $.contains().
[07:13:17] <scott_gonzalez> The day will come when # of emails in my inbox > # of open bugs in jQuery UI.
[07:13:31] <scott_gonzalez> I just hope that when it happens I only have one page of emails.
[07:13:43] <scott_gonzalez> Lately, I'm not sure that will be the case.
[07:29:31] <jquicommit> 01[13jquery-ui01] 15jzaefferer pushed 1 new commit to 06grunt-0-4: 02http://git.io/TxV5Ug
[07:29:31] <jquicommit> 13jquery-ui/06grunt-0-4 14700a0f6 15J√∂rn Zaefferer: Build: Switch from grunt-css to the equivalent grunt-contrib tasks
[07:32:07] <mikesherov> scott_gonzalez: sure
[07:32:16] <scott_gonzalez> thanks
[08:37:34] <scott_gonzalez> jzaefferer: ben_alman had previously suggested trying something like this:
[08:37:51] <scott_gonzalez> var uiFiles = [ "core_dep1", "core_dep2", "core_dep2", "*.js" ]
[08:38:10] <scott_gonzalez> and grunt is supposed to keep order and avoid duplication
[08:38:20] <scott_gonzalez> I haven't tested that yet.
[08:45:04] <scott_gonzalez> I kind of want to revert this: http://bugs.jqueryui.com/ticket/5659
[08:45:24] <scott_gonzalez> That last comment (http://bugs.jqueryui.com/ticket/5659#comment:9) makes a good case for why the new behavior is worse.
[08:47:51] <tj_vantoll> scott_gonzalez I actually kind of like the approach in the closed pull request given that comment https://github.com/jquery/jquery-ui/pull/516/files.
[08:47:51] <b-ot> tj_vantoll: Pull request #516 by MGaetan89 (16mon 4d ago): CSS Framework: Implement #5659 - Add blank icon to css
[08:48:46] <scott_gonzalez> Yeah, though it should use 16px 16px for the positioning.
[08:49:53] <tj_vantoll> Ah yeah.  I like the idea of a new class that just points at nothing though.
[08:52:52] <scott_gonzalez> I'm going to re-open this ticket and change the title.
[08:53:12] <scott_gonzalez> Actually, I'm going to create a new ticket.
[08:58:51] <doesallmagic> Project jQuery UI build #1003: STILL FAILING in 3.4 sec: http://swarm.jquery.org:8080/job/jQuery%20UI/1003/
[08:59:17] <jquicommit> 01[13jquery-ui01] 15scottgonzalez pushed 1 new commit to 06master: 02http://git.io/wA3bww
[08:59:17] <jquicommit> 13jquery-ui/06master 144f95a0f 15Scott Gonz√°lez: CSS Framework: Add ui-icon-blank class for an icon with no image. Fixes #9150 - CSS Framework: Add ui-icon-blank....
[10:00:04] <_zoggy_> sup scott_gonzalez
[10:00:11] <scott_gonzalez> hey _zoggy_
[10:00:23] <_zoggy_> so that wasnt a mistake then ?
[10:00:30] <scott_gonzalez> nope
[10:00:46] <_zoggy_> ok, just looks quite funny :)
[10:00:49] <scott_gonzalez> The guy claimed that he couldn't register any other name.
[10:00:53] <scott_gonzalez> I think he was smoking crack.
[10:01:34] <scott_gonzalez> I thought about deleting it from the list, but decided people with stupid usernames deserve credit too.
[10:06:58] <jquicommit> [13jquery-ui] 15dcarrith opened pull request #933: Fixed #9121 - Auto scrolling (i.e. scroll:true) with Sortable/Draggable hasn't worked since jquery-ui 1.8.24 powered by jQuery 1.8.2 (06master...06master)  02http://git.io/WQEw-g
[12:08:09] <mikesherov> scott_gonzalez: if I call super on a widget B that inherits from widget A, then in the _super function in widget, I call a different function that is overridden by B, is B's function called, or is A's function called?
[12:08:32] <mikesherov>  if I call super on a widget B that inherits from widget A, then in the _super function in widget A, I call a different function that is overridden by B, is B's function called, or is A's function called?
[12:08:50] <scott_gonzalez> B's function is called.
[12:08:52] <mikesherov> btw, I'm looking into setOptionDisabled, btw
[12:09:05] <mikesherov> OK, great, works like normal inheritance
[12:09:22] <scott_gonzalez> yup
[12:10:02] <mikesherov> I've extracted out setOptionDisabled so I can fix: http://bugs.jqueryui.com/ticket/5973 http://bugs.jqueryui.com/ticket/5974 http://bugs.jqueryui.com/ticket/6039
[12:10:23] <mikesherov> one other question, is there any reason that droppable doesn't extend $.ui.mouse?
[12:10:32] <mikesherov> all the other interactions do
[12:11:31] <mikesherov> scott_gonzalez: oh, and lastly, considering droppable doesn't have a cancel option, is there a way to disable an option in a child that inherits from a parent?
[12:11:34] <scott_gonzalez> Because it doesn't need any of the information, it's all inside draggable.
[12:12:06] <scott_gonzalez> What do you mean by disable?
[12:12:13] <mikesherov> OK, my only thought there was that all the interactions would extend from $.ui.mouse so I could define the interactions setOptionDisabled once
[12:12:28] <mikesherov> other, now I'll have to set it twice. No big deal
[12:12:34] <scott_gonzalez> Mouse isn't limited to interactions though.
[12:12:48] <scott_gonzalez> Slider uses mouse.
[12:12:52] <mikesherov> right
[12:13:59] <scott_gonzalez> We should really rip the ARIA stuff out of the base widget.
[12:14:22] <mikesherov> Sure, I'm trying to just refactor setOptionDisabled out first
[12:14:41] <mikesherov> well, that and the interactions shouldn't have .ui-state-disabled
[12:15:01] <mikesherov> just this.widgetFullName + "-disabled"
[12:15:52] <mikesherov> I was going to override setOptionDisabled for ui.slider to use the widget setOptionDisabled
[12:16:00] <mikesherov> as that's the only other widget that uses mouse
[12:16:07] <mikesherov> although, I suppose that's brittle
[12:16:23] <scott_gonzalez> We should remove ui-state-disabled and aria-disabled from the base widget.
[12:16:33] <scott_gonzalez> And add them to the appropriate widgets.
[12:16:42] <scott_gonzalez> But doing that should wait for 1.11.0
[12:17:12] <mikesherov> well, then the default behavior would be just setting the option?
[12:18:11] <scott_gonzalez> It'd set the option, add the widget-specific class, handle hover/focus.
[12:18:13] <mikesherov> The ui-state-disabled and aria-disabled seems like a reasonable default behavior, though
[12:18:36] <mikesherov> so you're saying the default would be what I want to have happen for all interactions?
[12:18:39] <scott_gonzalez> Not all widgets should have a visually disabled representation.
[12:18:46] <scott_gonzalez> And not all widgets will use ARIA.
[12:18:51] <scott_gonzalez> yup
[12:18:53] <mikesherov> scott_gonzalez: sure, not all do, but most do
[12:19:31] <scott_gonzalez> Not most.
[12:19:33] <scott_gonzalez> About half.
[12:20:01] <mikesherov> OK, so here's my action plan then
[12:20:16] <scott_gonzalez> Even tabs, which has ARIA, doesn't apply aria-disabled at the top level.
[12:20:20] <mikesherov> 1. implement setOptionDisabled the way I was going to already
[12:21:18] <mikesherov> 2. then change default setOptionDisabled to do "set the option, add the widget-specific class, handle hover/focus."
[12:22:02] <mikesherov> 3. implement the visually disabling code to each of the widget's that need it, extracting out common functionality to a function on the main widget but that isn't in the inheritance chain
[12:22:23] <mikesherov> scott_gonzalez: sounds good?
[12:22:26] <scott_gonzalez> The common functionality with be one line of code though.
[12:22:54] <scott_gonzalez> Unless you're talking about replacing the entire method, as opposed to just doing the one add class call and then ._super()
[12:22:55] <mikesherov> sure, even if it's one line of code, don't you think that's worthy of an encapsulation, in accordance with DRY?
[12:23:01] <mikesherov> not super
[12:23:10] <mikesherov> calling a specific helper
[12:23:24] <mikesherov> $.widget.prototype._disableVisually
[12:23:25] <scott_gonzalez> Right, but is that helper just doing one line or is it calling super?
[12:23:29] <mikesherov> or something like that
[12:23:44] <mikesherov> it's doing ui-state-disabled and aria-disabled
[12:23:49] <mikesherov> toggling
[12:23:59] <scott_gonzalez> We shouldn't do anything with aria-disabled in the base widget.
[12:24:19] <mikesherov> right, it won't be in the call chain for the base widget
[12:24:26] <mikesherov> just there to be called for visual widgets
[12:24:41] <mikesherov> unless you're saying don't put it there either
[12:24:49] <scott_gonzalez> I'm saying I don't think ARIA is generic enough to put in a helper method.
[12:24:54] <mikesherov> and copy paste that line into all the visual widgets
[12:25:13] <mikesherov> I see what you're saying
[12:25:22] <scott_gonzalez> And with ARIA removed, the helper method would just be adding a single, static class name.
[12:25:35] <scott_gonzalez> Which doesn't seem worth encapsulating.
[12:25:42] <mikesherov> OK
[12:25:54] <mikesherov> I think that makes sense then
[12:27:06] <mikesherov> so, just so you know, right now, enabling a widget almost always adds aria-disabled, unless I'm reading it wrong
[12:27:14] <mikesherov> so that's where I got the idea from
[12:27:31] <scott_gonzalez> Yes, and that's incorrect.
[12:27:40] <scott_gonzalez> Which is why we have many bug reports for it :-P
[12:27:56] <mikesherov> Not only on interactions‚Ä¶. on visual widgets as well.
[12:28:26] <mikesherov> OK, so I'd be fixing this bug then not just on interactions, but on visual widgets that shouldn't have it
[12:28:28] <mikesherov> GOT IT
[12:29:11] <mikesherov> scott_gonzalez: can you give me a list of widgets that SHOULD have the aria applied?
[12:29:29] <mikesherov> because right now, I only know of interactions, which I know shouldn't
[12:29:53] <scott_gonzalez> accordion - yes
[12:30:11] <scott_gonzalez> autocomplete - no
[12:30:27] <scott_gonzalez> button - ARIA is totally busted, so for now no
[12:30:53] <scott_gonzalez> datepicker - maybe for inline datepickers, but they don't use ARIA, so for now no
[12:31:07] <scott_gonzalez> dialog - yes
[12:31:22] <scott_gonzalez> menu - yes
[12:31:58] <scott_gonzalez> progressbar - hmm...need to check if disabled progressbars make sense
[12:32:40] <scott_gonzalez> slider - not right now, we need to add ARIA, but once we do, it'll be applies per handle, not on the wrapper.
[12:33:33] <scott_gonzalez> spinner - probably not, AT should pick up the disabled state from the input's disabled property
[12:33:52] <scott_gonzalez> tabs - already handled properly (applied at the tab level, not the wrapper)
[12:34:06] <scott_gonzalez> tooltip - no
[12:34:23] <scott_gonzalez> So, based on that, it looks like it's even less than half.
[12:34:54] <mikesherov> ok, and same goes for ui-state-disabled ?
[12:35:11] <mikesherov> because that's the other thing the base widget setOptionDisabled does
[12:35:29] <mikesherov> scott_gonzalez: ^
[12:35:32] <scott_gonzalez> I believe ui-state-disabled should be handled correctly in all widgets today.
[12:35:41] <scott_gonzalez> It's only handled incorrectly in interactions.
[12:35:58] <scott_gonzalez> There are very few places where ui-state-disabled isn't applied at the top level for a widget.
[12:36:15] <scott_gonzalez> For example, tabs will apply it on individual tabs.
[12:36:19] <mikesherov> so, then the base setOptionDisabled‚Ä¶ that should do ui-state-disabled and this.fullWidgetName + "-disabled"
[12:36:21] <scott_gonzalez> dialog doesn't have a disabled state.
[12:36:22] <mikesherov> right?
[12:36:25] <scott_gonzalez> tooltip doesn't have a disabled state.
[12:36:44] <scott_gonzalez> The base should only do the widget-specific class.
[12:36:50] <mikesherov> OK, fine :-)
[12:37:20] <scott_gonzalez> BTW, I think you'll find that setOptionDisabled() doesn't offer too much benefit with all the exceptions.
[12:37:27] <mikesherov> so then basically, the only widgets that won't need to override the base setOptionDisabled is interactions
[12:37:38] <scott_gonzalez> Were you planning on doing a generic solution or a disabled-specific solution?
[12:37:48] <mikesherov> disabled - specific solution
[12:38:04] <mikesherov> right now, _setOption needs to be overridden
[12:38:15] <scott_gonzalez> _setOption() almost always needs to be overridden.
[12:38:23] <scott_gonzalez> It's purpose for existence is to be overridden :-P
[12:38:46] <mikesherov> yes, absolutely, but in more than a few places, it's just disabled that needs to be overridden
[12:39:34] <mikesherov> I can keep it only overwriting _setOption. I just thought the end result would be "cleaner" for setOptionDisabled.
[12:39:55] <mikesherov> there's a comment in the code for button that says "hey, one day implement setOptionDisabled"
[12:40:08] <mikesherov> I was going off of that, but I can stop
[12:40:13] <mikesherov> your call scott_gonzalez 
[12:40:45] <scott_gonzalez> Looking through all the interactions and widgets, I'm seeing almost everything either handling multiple options or none.
[12:41:10] <scott_gonzalez> I think sortable was the only one I saw that was only handling disabled.
[12:41:25] <scott_gonzalez> And even that would go away with this change.
[12:41:35] <mikesherov> well, yeah, now that we're taking aria and ui-state-disabled out of the base, yes
[12:41:37] <scott_gonzalez> Because it's just trying to avoid the ui-state-disabled class.
[12:41:45] <mikesherov> no, that's right
[12:41:49] <mikesherov> you're right
[12:42:09] <mikesherov> I'll ditch setOptionDisabled.
[12:42:14] <mikesherov> new plan:
[12:42:46] <mikesherov> 1. remove aria-disabled and .ui_state_disabled from base widget
[12:43:07] <mikesherov> 2. make base widget only set this.fullWidgetName + "-disabled"
[12:43:20] <scott_gonzalez> (and hover/focus)
[12:43:25] <mikesherov> 3. implement .ui-state-disabled and aria-disabled only on the widgets that need it
[12:43:34] <scott_gonzalez> That plan sounds good :-)
[12:44:25] <mikesherov> OK, and interactions should call hoverable and focusable too
[12:44:29] <mikesherov> as they already are
[12:44:38] <mikesherov> because of the base implementation
[12:45:39] <scott_gonzalez> The hover/focus handling in the base disabled option is always safe.
[12:46:05] <scott_gonzalez> Because it's only tracking elements that have classes added from that widget instance.
[12:46:33] <mikesherov> oh, that makes sense
[12:46:46] <mikesherov> widget factory is cool
[12:46:48] <mikesherov> good work
[12:49:47] <scott_gonzalez> thanks :-)
[12:50:21] <scott_gonzalez> jzaefferer and I started it when we got sick of the massive duplication across all widgets in the first version of UI.
[13:01:47] <mikesherov> scott_gonzalez: shouldn't: .attr( "aria-disabled", !!value ); be .prop( "aria-disabled", !!value );
[13:02:07] <scott_gonzalez> No, it's a string attribute.
[13:02:10] <scott_gonzalez> "false" and "true"
[13:02:13] <mikesherov> Oh
[13:02:15] <mikesherov> K
[13:02:20] <scott_gonzalez> ARIA is strange
[13:02:54] <scott_gonzalez> You'd think it'd behave like other boolean IDL attributes.
[13:04:00] <mikesherov> yeah
[13:07:40] <mikesherov> scott_gonzalez: looks like dialog isn't setting aria or ui-state-disabled right now
[13:07:57] <scott_gonzalez> Dialogs can't be disabled.
[13:08:28] <mikesherov> ok, and no aria
[13:08:52] <scott_gonzalez> They use ARIA
[13:08:58] <scott_gonzalez> But they just never get disabled.
[13:09:07] <mikesherov> $.Widget.prototype._setOption.apply(this, arguments); can alwys be replaced with this._super( key, value ) as well.
[13:09:38] <scott_gonzalez> There are places that we still use $.Widget.prototype?
[13:10:17] <mikesherov> in droppable
[13:12:14] <mikesherov> and slider
[13:20:19] <mikesherov> scott_gonzalez: for now, I'm going to leave the ARIA on progressbar because it was already there unless you tell me otherwise
[13:25:10] <scott_gonzalez> Yeah, leave it.
[13:25:20] <scott_gonzalez> We can come back and figure out if it ever makes sense to disable.
[17:04:15] <mikesherov> scott_gonzalez: do you think it makes sense to add tests to all the widgets checking for this.widgetFullname + "-disabled" and "ui-state-disabled" and "aria-disabled"
[17:04:39] <mikesherov> Right now, I've only added to all interactions: yes on full name, no on aria, no on ui-state
[17:04:55] <mikesherov> I'm about to go through all widgets adding the 3 checks, but do you think that's overkill?
[18:09:03] <scott_gonzalez> mikesherov: Well, if we're going to do all three checks on interactions, then it makes sense to do it on all widgets.
[18:09:21] <mikesherov> yeah, I figured
[18:09:24] <mikesherov> I'm almost done
[18:09:32] <mikesherov> will you have a chance to check my PR?
[18:10:11] <scott_gonzalez> yeah
[18:11:25] <mikesherov> OK, just finishing tests for tabs and tooltip
[18:11:28] <mikesherov> should be 5 minutes
[18:11:43] <mikesherov> I found a bug in autocomplete
[18:12:02] <scott_gonzalez> oh?
[18:12:19] <mikesherov> .autocomplete({disabled: true}) behaves differently than .autocomplete().autocomplete("disable")
[18:12:27] <mikesherov> only the second thing adds the classes properly
[18:12:32] <mikesherov> I'm not sure why that'd be
[18:12:45] <scott_gonzalez> Because we don't do explicit handling in the constructor.
[18:13:19] <scott_gonzalez> _setOption() isn't called automatically on create.
[18:14:40] <mikesherov> so isn't that a problem?
[18:14:51] <scott_gonzalez> Yup.
[18:15:19] <mikesherov> OK, I assume that's documented somewhere to fix
[18:15:27] <scott_gonzalez> Well, I mean the problem only exists for the widget-specific class, right?
[18:15:48] <scott_gonzalez> Because the ui-state-disabled and ARIA handling don't really matter.
[18:17:32] <mikesherov> well, the problem is that the init option acts different from the method
[18:18:06] <mikesherov> but yes
[18:18:22] <scott_gonzalez> Yeah, so that should be fixed.
[18:18:30] <scott_gonzalez> I'm sure there's not a ticket for this.
[18:18:44] <scott_gonzalez> If there was, it would've been fixed :-P
[18:19:11] <scott_gonzalez> People generally only notice when .widget({ disabled: true }) does something obviously wrong (like nothing at all).
[18:19:27] <scott_gonzalez> It's the most commonly missed option on create.
[18:19:30] <mikesherov> Right except I'm noticing because I'm actually testing the functionality :-P
[18:22:06] <scott_gonzalez> WHAT JUST HAPPENED?!? https://twitter.com/RickeyEarl/status/311266085531951104
[18:22:06] <b-ot> scott_gonzalez: @RickeyEarl: jqueryUI what are you doing. >:-|
[18:22:43] <scott_gonzalez> He re-installed jQuery UI? Does it now have a half life like Windows?
[18:29:15] <mikesherov> scott_gonzalez: can you check this out: https://github.com/jquery/jquery-ui/pull/934
[18:29:19] <b-ot> mikesherov: Pull request #934 by mikesherov (17s ago): Widget: Stop setting ui-state-disabled and aria by default on setting disabled option. Fixes #5973 - Resizable: disabled should not have the ui-state-disabled class or aria attribute aria-disabled Fixes #5974 - Draggable: disabled should not have the ui-s
[18:29:38] <jquicommit> [13jquery-ui] 15mikesherov opened pull request #934: Widget: Stop setting ui-state-disabled and aria by default on setting disabled option. Fixes #5973 - Resizable: disabled should not have the ui-state-disabled class or aria attribute aria-disabled Fixes #5974 - Draggable: disabled should not have the ui-s (06master...06setOptionDisabled)  02http://git.io/7fLScA
[18:30:38] <scott_gonzalez> For things like https://github.com/jquery/jquery-ui/pull/934/files#L0R22 we generally don't call the widget method, since we know the structure.
[18:30:38] <b-ot> scott_gonzalez: Pull request #934 by mikesherov (1m 40s ago): Widget: Stop setting ui-state-disabled and aria by default on setting disabled option. Fixes #5973 - Resizable: disabled should not have the ui-state-disabled class or aria attribute aria-disabled Fixes #5974 - Draggable: disabled should not have the ui-s
[18:30:56] <scott_gonzalez> So just element.hasClass(...)
[18:31:20] <mikesherov> ok, just leave them inline scott_gonzalez so I can make all the changes
[18:31:40] <scott_gonzalez> Sure, I just wanted to make sure that made sense before putting a bunch of comments for it.
[18:33:05] <scott_gonzalez> I'll also have comments about behavior that should change.
[18:33:13] <scott_gonzalez> You're just exposing that the existing behavior is bad :-P
[18:36:48] <mikesherov> Sure, I'll remove whatever tests are validating that we're doing it wrong
[18:36:53] <mikesherov> just let me know what they are
[18:36:55] <mikesherov> btw: http://bugs.jqueryui.com/ticket/9151
[18:38:00] <scott_gonzalez> Well, the generic case is like that for a reason.
[18:40:29] <mikesherov> OK, you can change the ticket if you'd like so it's correct. I'm not versed yet in the reasons why it doesn't do it always
[18:43:49] <mikesherov> scott_gonzalez: before I go any further
[18:44:12] <mikesherov> you don't want me to check that ui-state-disabled is NOT present when it's NOT supposed to be?
[18:44:14] <_zoggy_> so side question. jquery 1.9 dropped just ie6? and jquery ui 1.10 dropped ie6-8 ?
[18:44:54] <scott_gonzalez> _zoggy_: Neither of those are correct.
[18:45:17] <scott_gonzalez> jQuery 2.0 dropped IE6/7/8 and jQuery UI 1.10 dropped IE6
[18:45:42] <_zoggy_> ok ty
[18:45:44] <scott_gonzalez> mikesherov: Sure, for enabled tests.
[18:46:01] <scott_gonzalez> We sometimes just mash the enabled/disabled tests together.
[18:46:26] <mikesherov> right, but you said for Autocomplete to not test for existence or non-existence of ui-state-disabled
[18:52:27] <scott_gonzalez> Oh, well, you could test for the non-existence on the element.
[18:52:46] <scott_gonzalez> But testing for the existince on the menu (.autocompete( "widget" )) seems unnecessary.
[18:52:54] <scott_gonzalez> Just because it's irrelevant whether it gets set or not.
[18:53:25] <scott_gonzalez> The menu will never be visible while disabled, and AT won't even notice the menu.
[18:54:14] <scott_gonzalez> Autocomplete is just a strange case.
[18:54:25] <scott_gonzalez> Because the "widget" is completely disconnected from the "element"
[18:55:48] <mikesherov> I see
[19:02:16] <mikesherov> scott_gonzalez: made all the changes except the tabs tests
[19:02:20] <mikesherov> which I'm doing now
[19:02:25] <mikesherov> can you recheck?
[19:02:28] <scott_gonzalez> sure
[19:02:44] <scott_gonzalez> BTW, tabs should have existing tests for the disabled option.
[19:03:07] <mikesherov> it did
[19:03:09] <mikesherov> I added to it
[19:03:10] <scott_gonzalez> hmm...it does not.
[19:03:48] <scott_gonzalez> Ah, it has some tests in tabs_core.js under accessibility.
[19:04:08] <scott_gonzalez> I knew there was at least one test for aria-disabled :-P
[19:05:00] <mikesherov> OK, so for my test, I'm really just testing the top level element
[19:05:04] <mikesherov> for sanity
[19:05:16] <mikesherov> I don't think I should be checking the individual tabs
[19:05:31] <scott_gonzalez> ok
[19:07:31] <scott_gonzalez> Looks good.
[19:07:36] <mikesherov> scott_gonzalez: ok, all tests updated and feedback incorporated
[19:07:50] <mikesherov> I'm going to land this then unless you have any other thoughts?
[19:09:36] <scott_gonzalez> My only other thought is: We're so close to 350 tickets!!!
[19:09:40] <mikesherov> HAHA
[19:09:41] <mikesherov> awesome
[19:09:45] <mikesherov> landing now
[19:09:48] <scott_gonzalez> :-)
[19:10:20] <mikesherov> `git breakit`
[19:10:31] <scott_gonzalez> heh
[19:10:38] <jquicommit> 01[13jquery-ui01] 15mikesherov pushed 1 new commit to 06master: 02http://git.io/x2m8EA
[19:10:38] <jquicommit> 13jquery-ui/06master 144d67f4f 15Mike Sherov: Widget: Stop setting ui-state-disabled and aria by default on setting disabled option. ...
[19:10:42] <mikesherov> there it is
[19:10:47] <doesallmagic> Project jQuery UI build #1004: STILL FAILING in 45 sec: http://swarm.jquery.org:8080/job/jQuery%20UI/1004/
[19:10:48] <doesallmagic> * Scott Gonz√°lez: CSS Framework: Add ui-icon-blank class for an icon with no image. Fixes #9150 - CSS Framework: Add ui-icon-blank.
[19:10:48] <doesallmagic> * Mike Sherov: Widget: Stop setting ui-state-disabled and aria by default on setting disabled option.
[19:19:53] <mikesherov> scott_gonzalez: phantomJS still crashing...
[19:19:58] <mikesherov> git is not getting updated
[19:20:57] <mikesherov> >> PhantomJS has crashed. Please read the crash reporting guide at https://github.com/ariya/phantomjs/wiki/Crash-Reporting and file a bug report at https://code.google.com/p/phantomjs/issues/entry with the crash dump file attached: /tmp/003e2331-7d99-97f5-7553e54f-541c8e5d.dmp
[19:21:58] <mikesherov> OK, I gotta go to bed
[19:22:01] <mikesherov> gnight
[20:36:43] <kborchers> scott_gonzalez: make pointer events supported everywhere already ‚Ä¶ touch events SUCK!
