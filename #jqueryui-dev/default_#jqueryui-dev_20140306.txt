[01:20:54] <jqmobilecommit> [13jquery-mobile] 15gabrielschulhof closed issue #7210: Troubles with swipe panels on single page templates 02http://git.io/iw7t9Q
[02:57:42] <jqmobilecommit> [13jquery-mobile] 15gabrielschulhof created 06init-free-example (+3 new commits): 02http://git.io/YHOLFw
[02:57:42] <jqmobilecommit> 13jquery-mobile/06init-free-example 14939268f 15Gabriel Schulhof: Widget factory: Lazily instantiate
[02:57:42] <jqmobilecommit> 13jquery-mobile/06init-free-example 14ebd6a55 15Gabriel Schulhof: Collapsible: Lazily instantiate
[02:57:42] <jqmobilecommit> 13jquery-mobile/06init-free-example 1439aaf83 15Gabriel Schulhof: Functional tests: Example of uninstantiated collapsible
[03:00:46] <rxaviers> hello everyone! :)
[03:01:01] <rxaviers> hi jzaefferer, thanks for reviewing number. replying...
[03:05:17] <jqmobilecommit> [13jquery-mobile] 15gabrielschulhof pushed 1 new commit to 06init-free-example: 02http://git.io/JAHbkA
[03:05:17] <jqmobilecommit> 13jquery-mobile/06init-free-example 14f1dea89 15Gabriel Schulhof: Test: adding jQuery
[03:06:16] <_|Nix|_> arschmitz: Check this out: no-init collapsible: http://view.jquerymobile.com/init-free-example/tests/functional/no-init.html
[03:07:00] <_|Nix|_> arschmitz: The only things missing are :mobile-collapsible and :data('mobile-collapsible') - obviously, since they're not associated with the element until the collapsible is instantiated on it.
[03:14:44] <jzaefferer> rxaviers: will reply later, though nothing there that should block you on anything, right?
[03:15:12] <rxaviers> No worries. It doesn't. Im just being over verbose.. :p
[03:30:38] <jquicommit> [13download.jqueryui.com] 15rxaviers opened issue #197: Handle jquery-*.js -> jquery.js rename 02http://git.io/PNjxKw
[03:40:09] <jquicommit> [13download.jqueryui.com] 15rxaviers created 06fix-197 (+3 new commits): 02http://git.io/PVhWGQ
[03:40:09] <jquicommit> 13download.jqueryui.com/06fix-197 1468e4560 15Rafael Xavier de Souza: Packer: Verbose error when missing docFiles
[03:40:09] <jquicommit> 13download.jqueryui.com/06fix-197 14fae1ac7 15Rafael Xavier de Souza: Builder: Fix make docsCategories optional
[03:40:09] <jquicommit> 13download.jqueryui.com/06fix-197 14a521d22 15Rafael Xavier de Souza: jQuery UI Files 1.11: jquery-*.js -> jquery.js...
[03:40:39] <jquicommit> [13download.jqueryui.com] 15rxaviers opened pull request #198: Fix 197: Handle jquery-*.js -> jquery.js rename (06master...06fix-197) 02http://git.io/ZXH8hQ
[03:41:55] <jquicommit> [13download.jqueryui.com] 15rxaviers fast-forwarded 06master from 142133726 to 14fae1ac7: 02http://git.io/tXo3dw
[04:18:19] <jquicommit> [13globalize] 15rxaviers closed issue #210: No dist folder! 02http://git.io/w6VMGA
[04:18:32] <jquicommit> [13globalize] 15rxaviers closed issue #212: No dist folder via bower install. 02http://git.io/W7rSvw
[04:39:09] <jquicommit> [13jquery-ui] 15scottgonzalez closed pull request #1206: Remove offsetFractions test (06master...06fix-position) 02http://git.io/Qb32Og
[04:52:22] <jquicommit> [13download.jqueryui.com] 15rxaviers merged 06fix-197 into 06master: 02http://git.io/RhwcMQ
[05:05:02] <scottgonzalez> tj_vantoll1 jzaefferer: Got this from Jacob Rossi:
[05:05:04] <scottgonzalez> I was wondering if I could pick your brain a bit about how you and the rest of the jQuery UI team think about the web components spec. Do you see a future for jQuery UI that uses web components? Why or why not?
[05:05:25] <scottgonzalez> Do we have an answer already written somewhere that we can point to?
[05:05:34] <scottgonzalez> I feel like we should since this keeps coming up.
[05:06:10] <tj_vantoll1> I don't think we have anything written up currently.
[05:07:22] <tj_vantoll1> I haven't played enough with web components to give a thorough answer to that question. Ideally we'd try to convert a few widgets and see how it goes.
[05:10:20] <tj_vantoll1> It's something I've been meaning to play with. 
[05:10:54] <tj_vantoll1> For now though I think we like the direction web components is heading but we can't really say more than that.
[05:20:33] <scottgonzalez> Ok, I'll try to put together a response.
[05:38:16] <jquicommit> [13globalize] 15rxaviers pushed 2 new commits to 06master: 02http://git.io/MTSW6w
[05:38:16] <jquicommit> 13globalize/06master 14e152a55 15Rafael Xavier de Souza: Bower: cldr.js is a dependency, not a devDependency...
[05:38:16] <jquicommit> 13globalize/06master 1401a1a01 15Rafael Xavier de Souza: Gruntfile: remove unused build code...
[06:15:47] <jqcommit> [13api.jquerymobile.com] 15agcolom closed issue #91: API homepage - add a link to the issue tracker and contributing guidelines in the intro 02http://git.io/pB2CCA
[07:48:22] <gseguin> mornin'
[07:57:13] <gseguin> _|Nix|_: ping
[07:57:19] <_|Nix|_> gseguin: What's up?
[07:57:53] <gseguin> _|Nix|_: Did you end up changing the regexp into cheerio or domino code ?
[07:58:55] <_|Nix|_> gseguin: Yes, but I don't yet have a PR up.
[08:00:12] <gseguin> _|Nix|_: in the Gruntfile.js that is
[08:00:13] <gseguin> _|Nix|_: ok, I'll watch for it
[08:00:26] <_|Nix|_> gseguin: I need someone to give https://github.com/jquery/jquery-mobile/pull/7212/ the :+1: so I can meaningfully compare the result of running grunt on master with the result of running grunt using cheerio.
[08:00:49] <gseguin> _|Nix|_: looking
[08:00:51] <_|Nix|_> gseguin: Basically, I need https://github.com/jquery/jquery-mobile/issues/7212 to be in place before I can submit such a PR.
[08:01:04] <_|Nix|_> gseguin: You should actually be able to review it, because it's all demo html files.
[08:01:49] <_|Nix|_> gseguin: Aside from some indentation changes, those are all missing closing tags/extra opening tags that were identified by cheerio.
[08:02:02] <_|Nix|_> gseguin: In fact, there are places where the body opening tag was missing :)
[08:03:06] <gseguin> _|Nix|_: browsers are way too tolerant
[08:03:16] <_|Nix|_> gseguin: Yeah.
[08:10:43] <gseguin> _|Nix|_: +1'd that PR
[08:11:15] <_|Nix|_> gseguin: Awesome! Thanks!
[08:14:01] <jqmobilecommit> [13jquery-mobile] 15gabrielschulhof pushed 1 new commit to 06master: 02http://git.io/Ik04QA
[08:14:01] <jqmobilecommit> 13jquery-mobile/06master 1477b5304 15Gabriel Schulhof: All: Fix demos markup inconsistencies discovered by cheerio...
[08:14:21] <jqmobilecommit> [13jquery-mobile] 15gabrielschulhof pushed 1 new commit to 061.4-stable: 02http://git.io/DKF2-g
[08:14:21] <jqmobilecommit> 13jquery-mobile/061.4-stable 146b3af36 15Gabriel Schulhof: All: Fix demos markup inconsistencies discovered by cheerio...
[08:14:36] <jqmobilecommit> [13jquery-mobile] 15gabrielschulhof 04deleted 067211-fix-inconsistencies at 143188492: 02http://git.io/fDY6cQ
[08:15:40] <jquicommit> [13jquery-ui] 15jzaefferer closed pull request #1201: Build: Use bower to manage client-side dependencies (06master...06dev-dependencies) 02http://git.io/XQMNaQ
[08:15:55] <jqmobilecommit> [13jquery-mobile] 15gabrielschulhof 04force-pushed 066941-fix-grunticon-demo from 145169e71 to 1406dc30c: 02http://git.io/queSsw
[08:15:55] <jqmobilecommit> 13jquery-mobile/066941-fix-grunticon-demo 1405bdc8e 15Gabriel Schulhof: Build: Refine code that fixes the path for the combined CSS...
[08:15:55] <jqmobilecommit> 13jquery-mobile/066941-fix-grunticon-demo 1419326be 15Gabriel Schulhof: Build: Update references to grunticon paths...
[08:15:55] <jqmobilecommit> 13jquery-mobile/066941-fix-grunticon-demo 1406dc30c 15Gabriel Schulhof: Build: Process HTML files with cheerio
[08:16:10] <jquicommit> [13jquery-ui] 15jzaefferer 04deleted 06dev-dependencies at 14385821e: 02http://git.io/jAJMMw
[08:16:45] <_|Nix|_> gseguin: Check out https://github.com/jquery/jquery-mobile/pull/7202
[08:16:55] <_|Nix|_> gseguin: The last commit converts the processing to cheerio.
[08:34:19] <_|Nix|_> gseguin|away: These are the difference in the contents of the dist/ directory resulting from switching to cheerio: https://gist.github.com/gabrielschulhof/9393344 ... I've annotated the diff.
[08:42:45] <travis-ci> [travis-ci] jquery/jquery-mobile#1483 (master - 77b5304 : Gabriel Schulhof): The build passed.
[08:42:45] <travis-ci> [travis-ci] Change view : https://github.com/jquery/jquery-mobile/compare/00e80c9900f0...77b5304ec051
[08:42:45] <travis-ci> [travis-ci] Build details : http://travis-ci.org/jquery/jquery-mobile/builds/20218478
[08:43:04] <arschmitz> _|Nix|_: Pong!
[08:44:22] <_|Nix|_> arschmitz: !gnoP
[08:44:32] <arschmitz> ??
[08:44:42] <_|Nix|_> arschmitz: I reflected your "Pong!" :)
[08:44:46] <arschmitz> lol
[08:45:06] <_|Nix|_> What's up?
[08:45:20] <arschmitz> sorry i havent had wifi consistently since yesterday 
[08:45:35] <arschmitz> i dont know you pinged me :)
[08:45:39] <_|Nix|_> arschmitz: NP.
[08:46:04] <_|Nix|_> arschmitz: I got it done with gseguin.
[08:46:10] <arschmitz> oh ok
[08:46:14] <_|Nix|_> arschmitz: It was about reviewing the demo HTML inconsistencies PR.
[08:46:49] <arschmitz> ok
[08:46:52] <_|Nix|_> arschmitz: I also sent you a link to an experiment earlier today.
[08:47:02] <_|Nix|_> arschmitz: No-init widgets with only minor modifications.
[08:47:05] <arschmitz> i saw it
[08:47:20] <arschmitz> but you would need to get ui to support enhanced option which they dont
[08:47:30] <_|Nix|_> arschmitz: What do you mean?
[08:47:36] <arschmitz> other wise the change to the widget factory would only cause potential breakage
[08:47:58] <arschmitz> because the markup and classes would not be added until it was initalized
[08:48:00] <_|Nix|_> arschmitz: Well, we can always do it outside the widget factory.
[08:48:26] <arschmitz> _|Nix|_: i honestly dont think init is a bottle neck right now
[08:48:44] <arschmitz> because if you use the enhanced option all it is doing is setting bindings and varibles
[08:48:52] <arschmitz> generally very fast
[08:48:55] <_|Nix|_> arschmitz: I know, I was just thinking along the lines of no-init widget - the "far future".
[08:49:11] <arschmitz> ahh well did you look at the article i quote for that
[08:49:11] <arschmitz> ?
[08:49:17] <_|Nix|_> Yes.
[08:49:19] <arschmitz> its a dramaticly different approach
[08:49:40] <_|Nix|_> arschmitz: ... which is why there's hardly gonna be any backcompat if ever introduced.
[08:49:48] <arschmitz> yup
[08:49:51] <_|Nix|_> arschmitz: I was wondering if a bridge might be possible.
[08:50:04] <arschmitz> but the widgets are basicly never initalized
[08:50:11] <arschmitz> its an idea
[08:50:31] <arschmitz> scott_gonzalez: would be the one to talk to about that though
[08:50:42] <_|Nix|_> arschmitz: I was thinking that this might be the first step, and eventually the need to _createWidget would go away entirely.
[08:51:21] <arschmitz> i mean this would work well for mobile but i have a feeling it does not work this way already for a reason
[08:52:03] <arschmitz> so i would show it to scott_gonzalez and see what he says he knows all the background on the widget factory
[08:53:51] <_|Nix|_> arschmitz: Of course. One thing that strikes me in that article is that if you use delegation to catch widget-internal events, you cannot really do event juggling like preventDefault() and stuff like that, because you can't really prevent default on a delegated event.
[08:54:16] <_|Nix|_> arschmitz: So, like, one widget cannot influence another by preventing default on its events.
[08:55:04] <arschmitz> yeah
[08:58:58] <_|Nix|_> arschmitz: OTOH, if the only objective of no-init is to save on startup time, then the approach I outline is still good, because you still attach all the events you normally attach during _create(), because _create() is retained, and you only use the delegated events when the widget instance is not yet present.
[09:01:28] <_|Nix|_> arschmitz: ... and the only reason the modification to the widget factory is necessary, is because one's first interaction with the widget may not be an interaction of the user with the mouse or the keyboard (handled via the delegated event handlers) but the dev's programmatic interaction via .widgetname( "methodName" );
[09:26:31] <jqmobilecommit> [13jquery-mobile] 15gabrielschulhof 04force-pushed 06init-free-example from 14f1dea89 to 14e7149ed: 02http://git.io/3k86IA
[09:26:31] <jqmobilecommit> 13jquery-mobile/06init-free-example 1497b87ad 15Gabriel Schulhof: Collapsible: Clean up dependencies and flatten code
[09:26:31] <jqmobilecommit> 13jquery-mobile/06init-free-example 14e60f866 15Gabriel Schulhof: Collapsible: Lazily instantiate
[09:26:31] <jqmobilecommit> 13jquery-mobile/06init-free-example 14dc3d178 15Gabriel Schulhof: Functional tests: Example of uninstantiated collapsible
[09:35:18] <_|Nix|_> scottgonzalez: Ping! What do you think about this approach as a first step away from the way we do widgets now, and towards init-free widgets? http://view.jquerymobile.com/init-free-example/tests/functional/no-init.html and https://github.com/jquery/jquery-mobile/blob/init-free-example/js/widgets/collapsible.js#L371
[09:36:14] <scottgonzalez> I think init-free is a lie: https://github.com/jquery/jquery-mobile/blob/init-free-example/js/widgets/collapsible.js#L383-L384
[09:36:27] <scottgonzalez> Did you read my article?
[09:37:00] <_|Nix|_> scottgonzalez: Yes, I did, and I understand what you mean. That's why I said it's a first step.
[09:37:16] <_|Nix|_> scottgonzalez: You only need to run that because of the way the code is currently organized.
[09:37:32] <scottgonzalez> I think it's a confusing and likely very error-prone approach.
[09:38:22] <scottgonzalez> It's also a heavier approach than what we're currently doing. The only savings are on initial page load.
[09:39:28] <scottgonzalez> I don't think init-free is something that should be done in steps. It's an all or nothing change.
[09:40:04] <_|Nix|_> scottgonzalez: Exactly. That's what I've gathered from your article.
[09:40:24] <_|Nix|_> scottgonzalez: ... which is what got me thinking about whether it truly needs to be all-or-nothing.
[09:40:24] <scottgonzalez> Lazy init is already possible and has been done for years. We've even had multiple presentations on it at jQuery conferences.
[09:41:47] <_|Nix|_> Yeah, I guess this is basically lazy init.
[09:43:29] <_|Nix|_> scottgonzalez: Thing is, if you $( someElement ).widgetname( "methodName" ) and you're init-free, you can never catch the fact that the user has called the method on an element that's not supposed to be a widget of the given type, unless you've previously identified someElement to be a widget of that type by some other means.
[09:43:47] <scottgonzalez> Who cares?
[09:44:16] <scottgonzalez> You don't catch that case today.
[09:45:38] <_|Nix|_> scottgonzalez: How do you mean? Does this not catch that? https://github.com/jquery/jquery-ui/blob/master/ui/widget.js#L200
[09:46:05] <scottgonzalez> You mean an unitialized widget?
[09:46:16] <scottgonzalez> That's different than "an element that's not supposed to be a widget of the given type"
[09:46:21] <scottgonzalez> As in $( "<ul>" ).autocomplete()
[09:46:59] <scottgonzalez> Or $( "<p>" ).checkbox()
[09:47:24] <_|Nix|_> scottgonzalez: Well, this is a whole other ball of wax. You're right. Currently, any widget can be instantiated on any element. That's true, and, in fact, somewhat disquieting.
[09:47:38] <_|Nix|_> scottgonzalez: But I meant https://github.com/jquery/jquery-ui/blob/master/ui/widget.js#L200.
[09:47:52] <scottgonzalez> That check is irrelevant for init-free.
[09:49:26] <_|Nix|_> scottgonzalez: Conceptually speaking, if you run a widget method on an element that has not had any widget method run against it before, that element has now been turned into a widget of the type whose method you've run on it - no?
[09:49:40] <scottgonzalez> no
[09:49:49] <scottgonzalez> init-free means there is no "turned into a widget"
[09:50:21] <scottgonzalez> Optional init allows you to do so, but that's a different matter.
[09:51:19] <_|Nix|_> scottgonzalez: Then how is init-free different from a simple collection of convenience functions?
[09:51:41] <scottgonzalez> event handlers
[09:51:57] <scottgonzalez> I don't really understand the question. Init-free is just a collection of related functions.
[09:54:15] <_|Nix|_> scottgonzalez: Right. I guess that's the realization I'm coming to. In this case, I guess these related functions could be made to add $.data() to an element, so, if you call them in the same pattern as you now do (that is, you call them on the same element), then, eventually, the same state would build up on the given element that builds up now, when you instantiate a widget. The difference is, it would build up on-demand, rather than a prior
[09:54:41] <scottgonzalez> That's not at all init-free. That's lazy init.
[09:56:38] * _|Nix|_ is thinking ... I haven't gone away :)
[09:59:35] <_|Nix|_> scottgonzalez: Take collapsible's expand/collapse functions. If you were to implement collapsible init-free, then the first thing you'd have to establish at the top of each of those two functions is that this function /can/ be performed on the element passed in, and that the element is indeed in the opposite state. I guess the latter one is only for efficiency, and it assumes that making the determination is cheaper than blindly performing the
[10:00:26] <scottgonzalez> You never need to determine that the function can be performed. You already know that it can.
[10:00:29] <scottgonzalez> Read the article again.
[10:01:50] <scottgonzalez> The "manager" always invokes methods on the correct element.
[10:02:12] <scottgonzalez> Search for "function Dialog" on http://tech.pro/tutorial/1660/initialization-free-widgets
[10:06:07] <_|Nix|_> scottgonzalez: Out of context, this looks exactly like what the widget factory does now, except that it first needs to find what this.element should be.
[10:06:25] <scottgonzalez> correct
[10:06:28] <scottgonzalez> And there are no instances.
[10:06:30] <_|Nix|_> scottgonzalez: Which is bad, because currently we always know what this.element is.
[10:06:37] <scottgonzalez> There is no `this`.
[10:07:05] <_|Nix|_> scottgonzalez: Right, but then the cost of each method call is at least the execution of one .closest() call.
[10:07:17] <scottgonzalez> and?
[10:07:32] <_|Nix|_> scottgonzalez: That's bad. What if I just want to update an option value which has no immediate effect upon the DOM.
[10:07:35] <_|Nix|_> ?
[10:07:55] <_|Nix|_> scottgonzalez: Currently that's pure logic, whereas in the new approach, it's actually DOM traversal.
[10:08:01] <scottgonzalez> and?
[10:08:20] <_|Nix|_> scottgonzalez: I don't want to run a selector every time I assign a variable.
[10:11:04] <scottgonzalez> I don't understand your concern.
[10:12:26] <_|Nix|_> scottgonzalez: Take collapsible's expandCueText and collapseCueText options. If the collapsible is open, and I update the expandCueText option, it doesn't actually do anything, other than store the value of the option so that eventually, if ever the user collapses the collapsible, it then takes that string and puts it in the DOM.
[10:13:21] <scottgonzalez> You do realize this would be a completely different behavior with init free, right?
[10:13:27] <scottgonzalez> Because you don't have an instance with options set.
[10:15:44] <_|Nix|_> scottgonzalez: Right, but then how would you influence the behaviour of the click handler?  Right now, you can tell it to grab the value of this.options.expandCueText and stick it in a span.
[10:16:44] <_|Nix|_> scottgonzalez: So, with the new approach, if you wanted to provide the same kind of functionality, you would have to tell it to take the value of <????> and stick it in a span. That value would have to be assigned via the public API at some point.
[10:17:03] <scottgonzalez> The user would already have the value in a span.
[10:17:11] <scottgonzalez> The user has a ton of responsibility with init free.
[10:17:24] <scottgonzalez> That responsibility is removed with optional init.
[10:17:39] <_|Nix|_> scottgonzalez: No, I'm talking about dynamic behaviour. The collapsible has one string in the span when it's open, and another string in the span when it's closed.
[10:17:54] <_|Nix|_> scottgonzalez: I suppose you could have two spans, one of which is hidden.
[10:19:45] <_|Nix|_> scottgonzalez: ... but that's two DOM elements, only one of which will ever be shown, and one of which is being used for the sole reason that there's no other place to store a string.
[10:20:07] <scottgonzalez> Again, I don't understand your concern.
[10:20:27] <scottgonzalez> "There are two DOM elements" sounds like the smallest complaint I've ever heard.
[10:20:42] <scottgonzalez> I also didn't say that's how it has to be handled.
[10:20:53] <scottgonzalez> What I said is there are a lot of changes with init-free.
[10:21:09] <scottgonzalez> If your goal is to find a way to avoid changing code, then we have very different goals.
[10:21:31] <_|Nix|_> scottgonzalez: It's not. It'd be nice to have a bridge, but I don't insist on it.
[10:22:16] <_|Nix|_> scottgonzalez: My goal is to 1. determine whether any of the future related functions will ever need to perform pure-logic, and if so, then 2. to avoid running a selector if that's the case.
[10:23:16] <scottgonzalez> Because you're worried that the most performant functions will become too slow by adding .closest(), but the least performant ones won't?
[10:27:29] <_|Nix|_> scottgonzalez: I guess in the end, the verdict will be based on total performance. If including .closest() in every call still results in a net gain, then so be it.
[10:27:46] <scottgonzalez> It's not about net gains or losses.
[10:27:53] <scottgonzalez> It's about changes in places where it actually matters.
[10:28:15] <scottgonzalez> It doesn't matter if calling .dialog( "open" ) is faster or slower.
[10:28:23] <scottgonzalez> Because it will never be slow enough to matter.
[10:29:04] <gseguin> uGoMobi: I'm going to miss the meeting once again. Sorry.
[10:29:15] <_|Nix|_> scottgonzalez: Then what does matter?
[10:29:35] <uGoMobi> gseguin: ok np, thanks for letting me know
[10:29:51] <scottgonzalez> The places where perf actually matters, like initial page load, ajax requests with lots of new widgets, etc.
[10:31:27] <_|Nix|_> scottgonzalez: Wow ... OK ... I've come full circle. All of these use cases are covered just fine by lazy init, for exactly the same reason that you said that .dialog( "open" ) being slower or faster doesn't matter.
[10:32:10] <_|Nix|_> scottgonzalez: ... because in these cases, the inital look of the widgets is completely determined by the initial DOM structure. No JS is necessary to initially display these widgets.
[10:32:29] <_|Nix|_> scottgonzalez: If, however, any event happens on one widget, it results in not only the event handler, but in a call to init.
[10:32:40] <_|Nix|_> scottgonzalez: But that's a call to init for only one widget.
[10:32:51] <_|Nix|_> scottgonzalez: ... the one you're currently manipulating.
[10:32:59] <scottgonzalez> Except that you're expecting init to be just state gathering.
[10:33:08] <scottgonzalez> Which is exceedingly far from the truth for most widgets.
[10:33:29] <_|Nix|_> scottgonzalez: ... it's not far from the truth with what we've done in jQM with the enhanced option.
[10:33:38] <_|Nix|_> scottgonzalez: All the DOM is already there.
[10:34:04] <scottgonzalez> Yes, but Mobile is detached from reality ;-)
[10:34:20] <scottgonzalez> Most widgets don't work that way.
[10:34:42] <_|Nix|_> scottgonzalez: Both lazy init and init-free assume that the widget will look correctly without having any JS run.
[10:34:55] <scottgonzalez> If you want to talk about general solutions, you need to take yourself out of the framework mindset.
[10:35:49] <scottgonzalez> Except that lazy init as described will fail for the majority of widgets.
[10:35:57] <scottgonzalez> As used today.
[10:36:32] <_|Nix|_> scottgonzalez: Yes, absolutely. The DOM to make the widget look as if it is already initialized has to be part of the original DOM - both for lazy init, and for init free.
[10:37:19] <scottgonzalez> People tend to use lazy init in cases where that either requires either very little or no work at all.
[10:37:29] <scottgonzalez> Such as datepickers, draggables, etc.
[10:39:06] <scottgonzalez> Anyway, the approach you showed me earlier doesn't look interesting. You shouldn't be writing one-off detections like that.
[10:41:51] <_|Nix|_> scottgonzalez: No, of course not. What I meant to show was that, if the widget looks like it's initialized when the page is loaded, then you're already a step of the way towards init-free, because that which makes it lazy init rather than init-free is that you call the function that instantiates the widget. However, if you've modifed the widget enough, eventually that function (_createWidget) can be gutted entirely. In a step beyond that, you 
[10:43:08] <_|Nix|_> scottgonzalez: But anyway. The devil is always in the details, and, if I were to devote my time to trying to move all our widgets to lazy init, I would undoubtedly run into insurmountable snags.
[10:43:24] <scottgonzalez> I would not recommend it.
[10:44:00] <_|Nix|_> scottgonzalez: Though I would love to see a real app that requires absolutely no DOM manip during page load in order to appear fully initialized.
[10:44:20] <_|Nix|_> scottgonzalez: ... and still have full widget functionality.
[10:45:28] <scottgonzalez> It's probably not hard to do. What is hard to do is to not say FU to the millions of existing users while making that switch.
[10:46:16] <_|Nix|_> scottgonzalez: Yeah, I mean, lazy init or init-free, you're going to break anyone's code who uses $( ":mobile-collapsible" ) or any of these widget-based selectors.
[10:47:15] <_|Nix|_> scottgonzalez: OTOH, IINM such selectors will become irrelevant if all the DOM is provided a priory, because, for each such selector there will be a .ui-widgetname selector.
[10:47:46] <_|Nix|_> scottgonzalez: ... but it's still an FU if you don't provide a deprecation period.
[10:49:03] <_|Nix|_> Hmmmm ... We really need a benchmark app against which to test any such changes ... to see if they make a palpable difference ...
[10:49:23] <_|Nix|_> I guess our demos are kind of like that.
[10:50:35] <_|Nix|_> *whew* ... my eyes are suffering from phosphor burn from looking at the screen for so long ... and it's almost meeting time ..
[11:42:23] <jqmobilecommit> [13jquery-mobile] 15nsbasic opened issue #7215: borderBottomColor on data-role="footer" should respect theme. 02http://git.io/mSMZ7A
[11:58:05] <_|Nix|_> Let's keep the ideal in mind. You set style options by adding or not adding CSS classes to your initial markup. That should be the goal.
[11:58:46] <arschmitz> _|Nix|_: the ideal is you make your theme how you want it in the first place
[11:59:08] <arschmitz> generally if you have corners in your theme you dont want to randomly remove them
[11:59:11] <arschmitz> same with shadow
[11:59:22] <uGoMobi> _|Nix|_ arschmitz : we are still in a meeting
[11:59:36] <uGoMobi> by moving the discussion to -dev I meant *after* the meeting
[12:07:41] <arschmitz> _|Nix|_: if your not managing multiple containers you will always know body
[12:08:21] <_|Nix|_> arschmitz: Will we ever completely get rid of the framework-created pagecontainer?
[12:08:40] <_|Nix|_> arschmitz: That is, will your assumption that a pagecontainer widget has been instantiated on $( "body" ) be wrong?
[12:18:21] <markedro> Hoping someone here can help with this: The HTML source for jqm 1.4 slider tooltips exists here http://view.jquerymobile.com/1.4.2/demos/slider-tooltip/ but the separate js and css aren't present as they are here:http://view.jquerymobile.com/1.3.0/docs/examples/slider/tooltip.php#&ui-state=dialog , does anyone know if those can/will be posted separately on the 1.4 version of the page as well?
[12:21:25] <arschmitz> markedro: its part of framework in 1.4
[12:21:30] <arschmitz> so no extra css is needed
[12:21:59] <arschmitz> it was just a demo in 1.3 so you needed to add that to make it work
[12:22:23] <_|Nix|_> markedro: If you want to separately download the JS/CSS, go to http://jquerymobile.com/download/
[12:22:26] <arschmitz> _|Nix|_: that assumption will only be wrong if you start using multiple pagecontainrs yourself
[12:22:44] <_|Nix|_> arschmitz: Yeah, if you turn off init, right?
[12:22:57] <arschmitz> so by default unless you provide markup or flag otherwise in a way we have not yet determined
[12:23:02] <arschmitz> it will create one on body
[12:23:13] <_|Nix|_> arschmitz: BTW - init ... woah ... that's a tangled mess.
[12:23:26] <arschmitz> _|Nix|_: what do you mean?
[12:23:39] <_|Nix|_> arschmitz: For example, I tried to separate the click handler from the rest of nav.
[12:23:47] <arschmitz> oh THAT init
[12:23:50] <_|Nix|_> arschmitz: It's, like, impossible.
[12:23:52] <_|Nix|_> arschmitz: Yeah.
[12:24:06] <_|Nix|_> arschmitz: Would it be a worthy goal to get pagecontainer to work on its own?
[12:24:15] <_|Nix|_> arschmitz: As a step towards fixing init?
[12:24:32] <arschmitz> yeah well scott_gonzalez and i started to lookinto cleaning that up but we stoped as it has to wait for 1.5
[12:24:53] <arschmitz> _|Nix|_: not really because i dont ever see a use for pagecontainer alone
[12:25:04] <_|Nix|_> arschmitz: I think that's equivalent to separating out the click handler, because if you can programmatically change pages, then adding a click handler is just icing.
[12:25:25] <arschmitz> _|Nix|_: yeah i wouldnt worry about nav stuff
[12:25:37] <arschmitz> we are going to look at the whole api of how it works very soon
[12:25:56] <arschmitz> it was already started but had to be put on hold 
[12:26:10] <arschmitz> there are two many options that make no sense
[12:26:23] <_|Nix|_> arschmitz: Yeah, and they're all over the place.
[12:26:30] <markedro> arschmitz: do you (or does anyone else) know if there is any ability to modify the popup content. I need to replace the numbers shown in the popup with a word & image combo (I don't need the numbers to show)?
[12:26:34] <arschmitz> we need to simplify the whole interaction with nav in general
[12:26:55] <_|Nix|_> arschmitz: Yeah.
[12:27:13] <markedro> That is the main thing that has kept me from upgrading to 1.4 so far
[12:27:16] <arschmitz> markedro: this is not the right channel for questions of that nature please use #jquery for usage help
[12:27:27] <_|Nix|_> markedro: Yeah, let's go to #juery
[12:27:31] <_|Nix|_> #jquery
[12:28:02] <arschmitz> markedro: so to give you the run around but your first question was something for this channel :) 
[12:29:55] <arschmitz> _|Nix|_: so anyway im with scott_gonzalez help holpefully going to start bringing some sanity to nav and init
[12:30:06] <markedro> that's why I was directed here I guess, but naturally a question like that has a follow up reason/need for asking
[12:30:08] <_|Nix|_> arschmitz: OK.
[12:30:23] <_|Nix|_> markedro: I'm PM-ing you a solution.
[12:30:45] <arschmitz> _|Nix|_: i realized some thing interesting though working on a presentation app
[12:30:56] <arschmitz> _|Nix|_: we make it too hard to not use autoinit
[12:31:17] <arschmitz> there should be an autoinit option on page
[12:31:38] <arschmitz> that you can set to false an it wont call enhancewithin
[12:31:54] <_|Nix|_> arschmitz: Not bad.
[12:32:09] <arschmitz> AND the autoinit stuff should be moved out of both page and helpers
[12:32:15] <arschmitz> so you can exclude it completelu
[12:32:38] <arschmitz> and page can just make sure it exists and that the option is not set to false before calling
[12:33:18] <arschmitz> _|Nix|_: because my presentation app use no autoinitalizeation
[12:33:25] <arschmitz> i call all widgets directly
[12:33:56] <arschmitz> and i dont even include the button buttonmarkup toolbar or listview widgets
[12:34:14] <_|Nix|_> arschmitz: Absolutely. Agreed 100%.
[12:34:17] <arschmitz> i just took the css and deleted with widgets and constructed everything in the markup
[12:34:21] <_|Nix|_> autoinit has to be another module.
[12:34:41] <arschmitz> it would be nice if in the builder you could pick css only for somethings
[12:34:42] <_|Nix|_> arschmitz: the problem is that there's no way to list what widgets have been defined after the fact.
[12:34:55] <_|Nix|_> arschmitz: That's why we have to shim $.widget.
[12:35:15] <arschmitz> i had to modify the unminified download and reminify
[12:35:38] <arschmitz> _|Nix|_: im not following the issue
[12:35:50] <arschmitz> either you include autoinit or you dont?
[12:35:56] <arschmitz> you cant include it after
[12:36:33] <_|Nix|_> arschmitz: No. If you include autoinit, but nobody depends on autoinit (which they shouldn't), then you won't know what widgets are available for autoinit.
[12:37:06] <_|Nix|_> arschmitz: If you include autoinit, it must be in place before any call to $.widget has been made.
[12:37:10] <arschmitz> oh your only talking about if someone uses amd?
[12:37:21] <_|Nix|_> arschmitz: Well, the build uses AMD.
[12:37:35] <arschmitz> yeah but in modules you just make it part of the core module
[12:37:54] <arschmitz> and its always before  widgets
[12:39:05] <jquicommit> [13jquery-ui] 15epowers opened pull request #1208: Selectable: fix mousedown on hierarchical selectable items. (06master...06master) 02http://git.io/j7oXew
[12:39:42] <_|Nix|_> arschmitz: Well, OK, if we have a way of making sure that autoinit always ends up before any call to $.widget, then we're good.
[12:39:51] <arschmitz> we do
[12:40:19] <arschmitz> _|Nix|_: go to http://jquerymobile.com/download-builder/
[12:40:29] <arschmitz> see there are modules and components
[12:40:36] <arschmitz> the modules are build in that order
[12:41:09] <arschmitz> and in alphabetical order within each module
[12:41:31] <arschmitz> so we would need to make sure it was part of core and after thw widget factory
[12:41:41] <_|Nix|_> Yep.
[12:41:55] <_|Nix|_> That should be easy. Just AMD depend on the widget factory.
[12:42:05] <arschmitz> which is simple because it would depend on the widget factory
[12:42:07] <arschmitz> yeah that lol
[12:42:47] <_|Nix|_> OK. Our work here is done :)
[12:43:51] <_|Nix|_> Alright. I'm taking a break. L8R!
