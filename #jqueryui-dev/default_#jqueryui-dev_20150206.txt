[00:04:59] <doesallmagic2> Project jQuery UI - 1.8.x core build #668: STILL UNSTABLE in 8 min 58 sec: http://jenkins.jquery.com/job/jQuery%20UI%20-%201.8.x%20core/668/
[06:17:47] <jquicommit> [13jquery-ui] 15tjvantoll closed pull request #1444: Ticket#8932 (06master...06ticket8392) 02http://git.io/bZei
[06:37:49] <mikesherov> scott_gonzalez: jzaefferer: arschmitz  new jscs is out with updated jQuery preset: https://twitter.com/jscs_dev/status/563705008575619072
[06:37:50] <b-ot> mikesherov: @jscs_dev: JSCS 1.11.0 is out! https://t.co/FDWyN0DzO9 â€¦ Autoconfiguration so setup is easy, 6 new rules, and tons of bug fixes for ES6!
[06:38:00] <mikesherov> please retweet if you feel so inclined
[06:46:25] <mikesherov> jzaefferer: we should theoretically be able to use validateindentation now because I added an exception for module loader pattern
[06:46:59] <mikesherov> also, bracket spacing is in too
[06:52:57] <jquicommit> [13jquery-ui] 15tjvantoll opened pull request #1445: Resizable: Modified to allow jquery objects as handles (06master...06resize-handles) 02http://git.io/boKp
[06:53:57] <jquicommit> [13jquery-ui] 15tjvantoll closed pull request #1377: Resizable: Modified to allow jquery objects as handles. Fixed #9658:  (06master...06bug#9658) 02http://git.io/QV8dow
[06:58:03] <gabriel_schulhof> arthurvr: Ping!
[06:59:13] <gabriel_schulhof> arthurvr: Sorry! I meant
[06:59:17] <gabriel_schulhof> arschmitz: Ping!
[07:15:16] <gabriel_schulhof> arschmitz: I'll BBIAB ... I have to fix my laptop's power plug. It keeps falling out :/
[09:45:59] <jqmobilecommit> [13jquery-mobile] 15gnarf closed issue #5477: Add mobile widgets to the new plugin site 02http://git.io/b6Yo
[09:46:00] <gnarf> hey guys, i'm helping :)
[09:55:39] <gabriel_schulhof> Awesome!
[09:58:08] <gabriel_schulhof> arschmitz, scott_gonzalez: Could you please include me in the RTL meeting?
[09:59:51] <scott_gonzalez> yeah
[14:09:14] <gabriel_schulhof> arschmitz: Ping!
[14:16:17] <arschmitz> gabriel_schulhof: Pong!
[14:21:14] <jqmobilecommit> [13jquery-mobile] 15starnutoditopo opened issue #7961: Configurable options: original behaviors get lost 02http://git.io/bPoQ
[14:52:10] <gabriel_schulhof> arschmitz: Hey!
[14:52:38] <arschmitz> gabriel_schulhof: hi
[14:52:58] <gabriel_schulhof> arschmitz: Can we move wrapperClass handling into widget.backcompat?
[14:53:07] <arschmitz> its already there
[14:53:11] <gabriel_schulhof> It is?
[14:53:15] <arschmitz> pretty sure
[14:53:47] <gabriel_schulhof> Yeah, it is, but it doesn't update the classes option.
[14:54:05] <gabriel_schulhof> Doesn't the appropriate classes key need to be kept in sync with the classes?
[14:54:09] <gabriel_schulhof> ... from wrapperClass?
[14:54:13] <arschmitz> no
[14:54:33] <arschmitz> gabriel_schulhof: and yes its there already
[14:54:56] <gabriel_schulhof> Oh, OK. That makes my job a bit easier.
[14:56:09] <gabriel_schulhof> arschmitz: Also, widget.theme.js ... are we really going to use ui-theme-[a-z]?
[14:56:17] <gabriel_schulhof> ... instead of ui-body-[a-z]?
[14:56:29] <arschmitz> gabriel_schulhof: that i dont know yet
[14:56:34] <gabriel_schulhof> OK.
[14:56:34] <arschmitz> i wanted to talk to jasper about it
[14:57:08] <gabriel_schulhof> OK, so I'll stick to ui-body-* for now, until we have clarity on that.
[14:59:44] <gabriel_schulhof> arschmitz: We have to keep the class key in sync for the theme option though for sure, at least if we're gonna be using classes like ui-body-inherit (which IIRC we're gonna drop).
[15:00:08] <arschmitz> no we dont
[15:00:21] <arschmitz> because the swatches are not going through classes
[15:02:36] <gabriel_schulhof> OK, so we can keep all the original processing for the theme-related options. Great!
[15:02:40] <scott_gonzalez> https://github.com/jquery/jquery-ui/pull/1445#partial-pull-merging :-)
[15:02:58] <scott_gonzalez> Click "Show all checks"
[15:03:00] <arschmitz> scott_gonzalez: nice
[15:03:04] <arschmitz> yeah i saw it
[15:03:16] <scott_gonzalez> It's even got the details page :-)
[15:03:22] <scott_gonzalez> Making good progress with this.
[15:03:28] <arschmitz> i saw that too
[15:03:30] <arschmitz> looking good
[15:04:01] <arschmitz> and its got the label
[15:04:49] <gabriel_schulhof> Very cool!
[15:27:07] <gabriel_schulhof> arschmitz: If you're still there: Why doesn't the widget.backcompat actually do the work of applying the new classes when it updates the classes key in _setOptions()?
[15:27:38] <gabriel_schulhof> I mean, it updates the value of the class key, but it could then call this._super( "classes", this.options.classes );
[15:28:18] <gabriel_schulhof> Then all the code of juggling the style classes could be removed, not just moved to backcompat.
[15:28:40] <gabriel_schulhof> ... or is that too heavy-handed performance-whise?
[15:31:59] <arschmitz> gabriel_schulhof: what do you mean?
[15:34:02] <arschmitz> gabriel_schulhof: setOptions calls optionsToClasses which calls this.option( "classes." + prop, newValue );
[15:35:09] <gabriel_schulhof> Hmmm ... OK, then I need to check why that's not working for the textinput ... 
[15:35:40] <arschmitz> gabriel_schulhof: it should not make a difference i can think of but i have not actually tried that with new classes implementation
[15:36:11] <arschmitz> gabriel_schulhof: and there is a whole lot of magic in that extension
[15:36:25] <gabriel_schulhof> arschmitz: Don't worry ... I'll trace through it and I'll make the appropriate modifications.
[15:36:35] <gabriel_schulhof> ... if any are necessary.
[15:36:51] <gabriel_schulhof> Maybe I've set up the parameters wrong or something ... 
[15:36:56] <gabriel_schulhof> I'll check where it misfires.
[15:37:00] <arschmitz> ok
[15:41:31] <arschmitz> gabriel_schulhof: you saw my comments on your textinput pr right?
[15:41:37] <gabriel_schulhof> arschmitz: Found the problem: https://github.com/jquery/jquery-mobile/blob/ui-1-12-tests/js/widgets/widget.backcompat.js#L64
[15:41:45] <gabriel_schulhof> Yes, I saw them, and I'm heeding them as we speak.
[15:42:07] <arschmitz> ok just wanted to make sure before you went to far since there were some big things
[15:42:25] <gabriel_schulhof> arschmitz: There's no reason to check the existing value of the option. You wanna update the value of the class key based on the new value of the option.
[15:42:59] <gabriel_schulhof> You must assume that the existing value of the class key reflects the old value of the option.
[15:43:36] <gabriel_schulhof> I mean, I guess that code is OK, if you first chain up, because then you will find the new value of the option stored in this.options.
[15:43:58] <gabriel_schulhof> So, you must chain up before calling _optionsToClasses
[15:44:16] <arschmitz> you mean that shoudl go after the super call?
[15:44:27] <gabriel_schulhof> Yeah.
[15:44:32] <arschmitz> thats easy enough
[15:44:47] <arschmitz> the tests branch is good right?
[15:44:53] <gabriel_schulhof> Yep.
[15:45:00] <arschmitz> want to push that change there
[15:45:15] <arschmitz> then im going to do a bunch of clean up because theres a lot of commits 
[15:45:18] <gabriel_schulhof> Will you push the change?
[15:45:23] <arschmitz> and ill push to ui-1-12
[15:45:32] <gabriel_schulhof> OK. I'll wait for that.
[15:46:06] <gabriel_schulhof> OK, so, just to be clear. You will place ui-1-12-tests on top of ui-1-12, do a bunch of cleanups and call the result ui-1-12, right?
[15:46:13] <arschmitz> yes
[15:46:18] <gabriel_schulhof> ... making sure that tests continue to be green, right?
[15:46:24] <arschmitz> exactly
[15:46:39] <arschmitz> and ill add qunit-asser-classes at same time
[15:46:42] <gabriel_schulhof> OK. Gotcha. Then, after all is said and done, I can rebase the textinput classes stuff onto ui-1-12.
[15:46:45] <arschmitz> so you can fix all your tests
[15:46:50] <arschmitz> yup
[15:46:51] <gabriel_schulhof> Gotcha!
[15:48:58] <arschmitz> as long as you base off that branch
[15:49:12] <arschmitz> and not master you should avoid conflicts for the most parts
[15:49:20] <arschmitz> no matter how much i rebase and force push it
[15:49:47] <arschmitz> because your commits will always just sit on top
[15:49:56] <arschmitz> gabriel_schulhof: ^^
[15:50:05] <gabriel_schulhof> OKOK, wait a sec ... will you rebase the whole shebang onto master?
[15:50:13] <arschmitz> yes
[15:50:27] <arschmitz> you shoudl not worry about master
[15:50:32] <arschmitz> thats ui-1-12 concern
[15:50:35] <arschmitz> which i take care of
[15:50:53] <arschmitz> you just always base of ui-1-12 and rebase on that and you should avoid most conflicts
[15:51:17] <gabriel_schulhof> I know, I know ... 
[15:52:33] <arschmitz> gabriel_schulhof: it will all be over soon enough...
[15:52:46] <gabriel_schulhof> That sounds ominous :)
[15:52:48] <arschmitz> and we will have some awesomely flexible widgets
[15:53:20] <gabriel_schulhof> We-he-he-hell! Not so fast, we still have table review and navbar review and all that funky jazz ...
[15:53:42] <arschmitz> yeah so?
[15:53:53] <arschmitz> whats that have to do with landing classes?
[15:54:14] <arschmitz> and if those are not ready in time they may have to wait
[15:54:19] <arschmitz> we cant hold up 1.5
[15:54:22] <gabriel_schulhof> Well, ummm, the fact that those widgets need a classes option before all the rest of the reviewing takes place.
[15:54:32] <arschmitz> right
[15:55:24] <gabriel_schulhof> OK. I'm good with postponing the review, especially for table, because that's quite a refactor, what with making the columntoggle column selection UI optional and drop-in replaceable and all that.
[15:55:37] <arschmitz> right now my #1 concern is getting the new ui widgets and classes landed
[15:56:06] <arschmitz> also you still have not addressed one of my main requirements in table
[15:56:25] <gabriel_schulhof> The idle looping thing?
[15:56:25] <arschmitz> which is debouncing the generation to prevent blocking the ui thread
[15:56:28] <arschmitz> yup
[15:56:39] <arschmitz> i dont want to land table with out that
[15:57:11] <arschmitz> by their natue tables tend to be very big
[15:57:37] <gabriel_schulhof> OK. I understand. I didn't get that it was such a high priority. I'll do that instead of the whole review thing, after I've done classes for table.
[15:57:38] <arschmitz> so its important we optimize them as much as possible to not block when being create i think
[15:57:56] <arschmitz> gabriel_schulhof: well it should be part of the review
[15:58:17] <arschmitz> gabriel_schulhof: i also had refrenced an issue from frequent about style
[15:58:23] <gabriel_schulhof> This again borders on something that might be generically useful, namely a version of either $.each() or $.fn.each() that runs idly.
[15:58:35] <arschmitz> and improving reflow which i want you to look at
[15:58:56] <arschmitz> gabriel_schulhof: i dont think we really have another place we would use it right now though
[15:59:18] <gabriel_schulhof> arschmitz: Any time your loops take longer than they should is a good place for it.
[15:59:28] <arschmitz> maybe listview but all we do is class manip there not full on dom thrashing in a loop 
[15:59:47] <arschmitz> reflow table is pretty harsh
[16:00:08] <gabriel_schulhof> I'm thinking wider than that. There are many cases where you're dealing with incoming JSON and setting up DOM corresponding to it.
[16:00:16] <arschmitz> WE dont
[16:00:23] <arschmitz> people may
[16:00:35] <gabriel_schulhof> No, but I'm surprised core doesn't have something for this.
[16:00:36] <arschmitz> so write a plugin if you want but in the library we dont really have a generic use
[16:00:53] <arschmitz> gabriel_schulhof: because there is no one way to do it
[16:01:03] <arschmitz> how you want to debounce is very application specific
[16:02:21] <gabriel_schulhof> I dunno ... I can think of two very generically useful ones: "stay busy for at most x ms", and "do at most n interations".
[16:02:37] <gabriel_schulhof> Both require keeping context so the loop may continue as if it had been busy.
[16:02:50] <gabriel_schulhof> That kind of infrastructure is generically useful.
[16:02:56] <gabriel_schulhof> Like, where do you put the counter?
[16:03:31] <arschmitz> gabriel_schulhof: then write a plugin
[16:03:58] <gabriel_schulhof> Oh, and when the callback returns, well, not false, but something, then unwind the stack.
[16:04:16] <gabriel_schulhof> Yeah, I think this is plugin material.
