[00:03:47] <doesallmagic2> Yippee, build fixed!
[00:03:48] <doesallmagic2> Project jQuery UI - 1.11.x core build #50: FIXED in 14 min: http://jenkins.jquery.com/job/jQuery%20UI%20-%201.11.x%20core/50/
[00:07:58] <doesallmagic2> Project jQuery UI - compat-git core build #924: STILL UNSTABLE in 4 min 10 sec: http://jenkins.jquery.com/job/jQuery%20UI%20-%20compat-git%20core/924/
[00:21:25] <doesallmagic2> Project jQuery UI - 1.8.x core build #731: STILL UNSTABLE in 13 min: http://jenkins.jquery.com/job/jQuery%20UI%20-%201.8.x%20core/731/
[05:03:56] <gabrielschulhof> arschmitz: Ping!
[05:04:06] <arschmitz> gabrielschulhof: Pong!
[05:04:24] <gabrielschulhof> arschmitz: Hey! I need to do page and listview before I can do selectmenu, because they both touch selectmenu.
[05:04:32] <gabrielschulhof> So, actually, they do part of the work.
[05:04:36] <arschmitz> right
[05:04:50] <arschmitz> makes sense
[05:06:35] <gabrielschulhof> So, to that end, I've resubmitted page for review.
[05:06:43] <arschmitz> awesome
[05:07:05] <gabrielschulhof> arschmitz: There are also two generic, principle things I wanted to run by you and scott_gonzalez ... 
[05:07:22] <arschmitz> i saw your message about enhance
[05:07:33] <arschmitz> but i think that wont really work in many cases
[05:08:13] <arschmitz> like accordion where the only dom that is add is icons and it done in a loop
[05:08:52] <gabrielschulhof> I guess my main objective was to make it easy to coordinate things between extensions.
[05:09:35] <gabrielschulhof> I found in the dialog extension that it's hard to add classes so that the wrapper is still detached from the DOM.
[05:09:57] <gabrielschulhof> ... and I think in the case of table, it's even more complicated, because you have, like, three extensions.
[05:10:06] <gabrielschulhof> ... with the popup being separate from the column toggle.
[05:10:35] <arschmitz> yeah i think this is something that specific to the widget though
[05:10:36] <gabrielschulhof> I think I can work it back to not using just _create() and _enhance() though, if you don't wanna see those extension points in the page PR.
[05:10:58] <arschmitz> i dont think you can make it applicable in general 
[05:11:03] <gabrielschulhof> OK, then can I leave page like that. You'll see what it looks like in the PR.
[05:11:06] <gabrielschulhof> ?
[05:11:24] <gabrielschulhof> Yeah, I guess it's more of a design principle than anything.
[05:11:43] <arschmitz> and thats fine i can see it there and we can figure it out
[05:14:30] <gabrielschulhof> I found that that approach has helped me figure out how to break up the work between extensions, while making it easy to set attributes while stuff is not yet attached.
[05:15:42] <gabrielschulhof> Cuz, like, if the superclass both creates/sets/attaches in one function, there's no point at which the subclass can intervene to create some stuff of its own. Either it creates it before calling the super, meaning there's no place to put it, or it creates it after calling the super, meaning there's a place to put it, but that place is already attached to the DOM.
[05:16:51] <gabrielschulhof> So, a create-but-don't-attach extension point followed (after setting attributes) by an attach-but-don't-create extension point is perfect in this sense, because you can create arbitrarily complex floatin DOM, before attaching it.
[05:17:12] <gabrielschulhof> ... but anyhoo ... lesse how this approach holds up with table.
[05:17:29] <arschmitz> yeah it sounds fine in like dialog but in general i dont think it would apply to most widgets
[05:27:11] <gabrielschulhof> Yeah, definitely not something I recommend jumping headlong into. I'll try the concept on a few widgets with lots of extensions first.
[05:27:20] <gabrielschulhof> Oh, and another place where it helps.
[05:28:06] <gabrielschulhof> The order in which extensions load is far from certain, considering async loading and simply adding a single file in a script tag on its own in any given order (except that dependencies are satisfied).
[05:28:45] <gabrielschulhof> So, you cannot assume that, just because you declared that you depend on X, you will be an immediate subclass of X.
[05:29:02] <gabrielschulhof> So, when you're calling _super(), that may be X, or it may be some other extension of X.
[05:29:37] <gabrielschulhof> So, it's good to know that nobody goin' attach nuttin' as you chain up.
[05:29:50] <gabrielschulhof> ... to nowhere.
[05:30:02] <gabrielschulhof> ... in the DOM :)
[05:31:44] <gabrielschulhof> arschmitz: The other thing: When chaining up, unless there's a compelling reason for modifying the arguments to the chain-up or modifying the return value from the chain-up, I'd prefer to always either return this._superApply( arguments ) or var returnValue = this._superApply( arguments ); /* local code */ return returnValue
[05:32:18] <gabrielschulhof> ... because that represents total ignorance as to the function signature, which means that the code for a given extension will not need to be touched even if we change the function signature.
[05:32:19] <arschmitz> gabrielschulhof: most widget methods dont take arguments and dont return anything
[05:33:02] <gabrielschulhof> Yes, but if we simply call _super(), they can't either.
[05:33:17] <arschmitz> we should use what ever is approriate
[05:33:31] <arschmitz> we should know if the method we are in take arguments and or returns anything
[05:35:39] <gabrielschulhof> Right, but doing it with return this._superApply( arguments ) expresses not that we don't know, but that we don't care. OTOH, if we just use _super(), the code looks like it very much enforces that the superclass take no arguments and return nothing, where, in reality, it doesn't care.
[07:09:49] <jqmobilecommit> [13jquery-mobile] 15carsonip opened issue #8184: Filterable: Add a data-no-filter attribute 02http://git.io/vqcQk
[07:30:49] <jqmobilecommit> [13jquery-mobile] 15carsonip opened pull request #8185: Filterable: Add a data-no-filter attribute (06master...068184-add-no-filter-attr) 02http://git.io/vqcx3
[10:38:45] <gabrielschulhof> arschmitz: Ping!
[10:39:16] <arschmitz> gabrielschulhof: Pong!
[10:40:53] <gabrielschulhof> arschmitz: Hey!
[10:41:02] <gabrielschulhof> I don't think I can use the theme extension with listview.
[10:41:17] <gabrielschulhof> It's because assembling the return value for themeElements is too expensive.
[10:41:35] <gabrielschulhof> I need to know which theme option is being set so as to avoid running the other selectors.
[10:41:44] <arschmitz> ok
[10:41:51] <gabrielschulhof> For example, if only dividerTheme is being set, there's no reason to look for split buttons.
[10:41:59] <arschmitz> right
[10:42:06] <arschmitz> i would say dont use it then
[10:42:10] <gabrielschulhof> OK.
[10:42:17] <arschmitz> unless you have an idea for improving the extension
[10:42:32] <arschmitz> maybe you should still make it an extension though so that when we rip out swatches its nice and clean?
[10:42:43] <gabrielschulhof> Hmmm ...
[10:43:30] <gabrielschulhof> Well, this._themeElements() could accept key from _setOption() and only assemble that key.
[10:43:43] <gabrielschulhof> key could be undefined, in which case it would assemble the whole thing.
[10:43:51] <arschmitz> sounds good to me
[10:44:11] <gabrielschulhof> The problem is that the theme extension also overrides _create() which would cause _themeElements() to be called with undefined.
[10:44:35] <gabrielschulhof> Maybe listview should not run refresh() upon _create() ...
[10:44:42] <gabrielschulhof> I dunno ... 
[10:44:47] <gabrielschulhof> This is barking up the wrong tree.
[10:44:56] <gabrielschulhof> The listview is highly optimized as it is.
[10:45:01] <gabrielschulhof> I don't wanna break that.
[10:45:28] <gabrielschulhof> I think I'll just forego the theme extension.
[10:45:33] <arschmitz> thats fine just make the theming an extension we can can tear it out later
[10:46:00] <gabrielschulhof> Well, not sure that's possible, actually. It's pretty deeply tied into refresh(). I'll try though.
[10:46:03] <arschmitz> since the other base widgets wont be handling their own theming any more either it will keep the theme concenrs seperate
[10:46:20] <arschmitz> ok if its not possible cleanly im ok with leaving it for now
[10:47:01] <gabrielschulhof> Actually, there's a nice way we might do this. In refresh, we turn things on their ear: We create a hash keyed upon the classes we're going to add to each element. The value is an array of elements that are to receive those classes.
[10:47:25] <gabrielschulhof> Then, you can add classes with a single _addClass() call for each hash entry.
[10:47:57] <gabrielschulhof> So, the decision to create hash entries could be factored out such that extensions affect the contents of this hash.
[10:47:59] <arschmitz> i think thats probably a fast / cleaner way to do it anyway
[10:48:31] <gabrielschulhof> Oh, it is, which is why it's done that way now. I'm saying the decision as to which element gets added to which key(s) can be turned into an extensible mechanism.
[10:48:46] <arschmitz> ok gotcha
[10:48:53] <gabrielschulhof> ... and the theme-related decisions could then be an extension.
[10:49:13] <gabrielschulhof> I'll try this.
[10:52:32] <gabrielschulhof> I suppose the theme extension could be used for the simple case of the listview theme itself.
[11:48:53] <jquicommit> [13jquery-ui] 15scottgonzalez pushed 1 new commit to 06master: 02http://git.io/vqW7k
[11:48:53] <jquicommit> 13jquery-ui/06master 14bec722a 15Eric Lee Carraway: README: Fix typo...
[11:51:28] <jquicommit> [13jqueryui.com] 15scottgonzalez closed pull request #120: Changelog: typo fixes (06master...06changelog-typo-fixes) 02http://git.io/vqm3S
[11:53:42] <doesallmagic2> Project jQuery UI build #1608: SUCCESS in 5 min 2 sec: http://jenkins.jquery.com/job/jQuery%20UI/1608/
[11:53:43] <doesallmagic2> Scott Gonz√°lez: README: Fix typo
