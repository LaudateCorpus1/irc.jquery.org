[05:30:16] <gabriel_schulhof> arschmitz: Ping!
[05:30:26] <arschmitz> gabriel_schulhof: Pong!
[05:30:39] <gabriel_schulhof> Hey!
[05:30:57] <gabriel_schulhof> Do I rename option clearBtn to clearButton for textinput and provide a fallback?
[05:31:09] <arschmitz> gabriel_schulhof: no
[05:31:13] <gabriel_schulhof> OK.
[05:31:27] <arschmitz> i already started re-writing textinput for ui
[05:31:41] <arschmitz> so no point until we switch to that
[05:31:49] <gabriel_schulhof> OK.
[05:32:06] <arschmitz> gabriel_schulhof: https://www.npmjs.com/package/qunit-assert-classes
[05:32:13] <arschmitz> for classes tests
[05:33:02] <gabriel_schulhof> arschmitz: I have found so far that existing .hasClass() works, because we only ever look for one class. If the class key is present, we can assume that the value is also present, because that's asserted in the widget factory tests, right?
[05:33:18] <arschmitz> does not matter how many we are looking for
[05:33:39] <gabriel_schulhof> Oh, right, for the div legibility.
[05:33:42] <gabriel_schulhof> s/div/diff/
[05:33:59] <arschmitz> gabriel_schulhof: also there must be places we are checking multiple classes on an element to verify its strucutre
[05:34:21] <arschmitz> since we add multiple classes all over the place if not i would dare say we are not properly testing the structure of widgets
[05:35:13] <arschmitz> gabriel_schulhof: tests similar to https://github.com/jquery/jquery-ui/pull/1411/files#diff-cb4892dc1347556abbb5383a3d743a44R10
[05:36:04] <arschmitz> gabriel_schulhof: you don't need to verify theme class addition however you should be verifying the full structure
[05:37:28] <gabriel_schulhof> OK, but for textinput, if you're re-writing it, does it make sense to go whole-hog on testing? I mean, it's gonna be entirely deprecated as of 1.5.0, right?
[05:37:42] <arschmitz> no
[05:37:53] <arschmitz> nothing of it will be deprecated until likely 1.7
[05:38:00] <gabriel_schulhof> Oh, OK.
[05:38:09] <arschmitz> its on ui 1.14 roadmap
[05:38:12] <gabriel_schulhof> So, then, I guess we should get it in ship-shape.
[05:38:36] <arschmitz> yeah clean it up but dont like change options or anything
[05:38:48] <arschmitz> no api changes just clean up for classes
[05:38:49] <gabriel_schulhof> OK.
[05:39:02] <arschmitz> other then things like wrapperClass
[05:39:16] <arschmitz> obviously that should go since its replaced by classes
[05:39:26] <gabriel_schulhof> I'm just thinking: Why don't you do the re-write in mobile, and then just hand over the widget cleanly to UI?
[05:40:02] <arschmitz> gabriel_schulhof: it needs to go through the whole process of wiki and api and all that
[05:40:08] <arschmitz> we cant just be like here you go
[05:40:23] <arschmitz> when a widget is added to ui it has a whole process it needs to go through
[05:40:55] <arschmitz> gabriel_schulhof: for reference though http://wiki.jqueryui.com/w/page/84505936/Textinput
[05:40:58] <gabriel_schulhof> arschmitz: Yeah, I guess it then makes sense to do it in UI, because we shouldn't develop an equivalent process if we're gonna be getting our widgets from UI anyway.
[05:41:19] <arschmitz> gabriel_schulhof: well we do follow a similar process
[05:41:25] <arschmitz> but us doing it does not mean anything to ui
[05:41:41] <arschmitz> they are still going to want to go through their own process on ui to evaluate it and the api
[05:42:24] <arschmitz> gabriel_schulhof: and i mean obviously that includes input from mobile to make sure it works for both
[05:42:50] <gabriel_schulhof> It sounds like this is another thing we'll have to unify at some point.
[05:43:01] <arschmitz> gabriel_schulhof: in what way?
[05:44:45] <gabriel_schulhof> We should never again write widgets for mobile. We should write them for UI, go through the UI process, even if they never end up in the UI repo. We can keep them in ours, but if ever they should end up in UI, we will already have all the pieces in place for the UI team to look at. Then, it should only be a matter of a review by people who haven't so far reviewed the widget.
[05:45:25] <arschmitz> gabriel_schulhof: well its like anyone else that want to contribute a widget to ui
[05:45:53] <arschmitz> we as mobile will only make widgets for mobile
[05:46:25] <arschmitz> if we want to try to get someing new into ui we will follow the same process any other contributor follows to suggest a new widget to ui and try to get it onto the roadmap
[05:47:23] <gabriel_schulhof> We should follow that same process when we want to try to get something new into mobile as well.
[05:47:58] <arschmitz> gabriel_schulhof: what do you mean ?
[05:48:19] <arschmitz> we already follow that process we have a nearly identical template for working on the api of new widgets
[05:48:38] <arschmitz> and we do an issue first to discuss its merit
[05:48:40] <gabriel_schulhof> ... but we don't have the wiki page.
[05:48:47] <arschmitz> yes we do
[05:48:59] <arschmitz> its just not in a wiki
[05:49:41] <gabriel_schulhof> Well, OK then, goes to show how many new widgets I've tried to submit recently to either project :)
[05:50:24] <arschmitz> gabriel_schulhof: you were supposed to have done this for table i have not checked if you have though :-)
[05:50:32] <arschmitz> gabriel_schulhof: cgack did for navbar :-) https://github.com/jquery/jquery-mobile/issues/7359
[05:50:38] <gabriel_schulhof> I did.
[05:50:47] <gabriel_schulhof>  https://github.com/jquery/jquery-mobile/issues/7360
[05:50:50] <arschmitz> gabriel_schulhof: ok so why do you think we dont have it then ?
[05:51:37] <gabriel_schulhof> It wasn't clear to me that the issue is the equivalent of the wiki page. It now is.
[05:52:14] <arschmitz> gabriel_schulhof: and the template is in the wiki https://github.com/jquery/jquery-mobile/wiki/Widget---Feature-issue-template
[05:52:36] <gabriel_schulhof> Now I need to get back to immediate issues and figure out how come the clear button is completely transparent. Also, it seems the SVGs contain gibberish ...
[05:52:51] <arschmitz> gabriel_schulhof: ?
[05:53:46] <gabriel_schulhof> Yeah ... it's messed up ... hold on ... lemme push, and let view update itself.
[05:55:00] <jqmobilecommit> [13jquery-mobile] 15gabrielschulhof 04force-pushed 067730-textinput-classes-option from 14ac6e22a to 1468ec167: 02http://git.io/OxZF_g
[05:55:00] <jqmobilecommit> 13jquery-mobile/067730-textinput-classes-option 141104547 15Gabriel Schulhof: Textinput: Implement classes option...
[05:55:00] <jqmobilecommit> 13jquery-mobile/067730-textinput-classes-option 1468ec167 15Gabriel Schulhof: Textinput: Restoring options clearBtn
[05:55:22] <gabriel_schulhof> The search input has magnifying classes all over the wrapper, and the clear button, although present, has no visible style.
[05:56:51] <arschmitz> gabriel_schulhof: sounds like the icon needs to be updated
[05:57:03] <arschmitz> the makrup changed its not a :pseudo anymore it needs to be a span
[05:57:25] <gabriel_schulhof> Oh, OK. So I need to add a span into the wrapper.
[06:05:06] <gabriel_schulhof> arschmitz: Actually, I don't think it needs a span. It just needs additional specifications for the background, like no repeat, and offsets.
[06:05:24] <arschmitz> gabriel_schulhof: no ALL icons must be spans now
[06:05:34] <arschmitz> its part of how the theme now works
[06:06:51] <gabriel_schulhof> OK, but then we must remove .ui-textinput-search { background-image: url("data:image/svg+xml;charset=US-ASCII,..."); }
[06:06:59] <gabriel_schulhof> from jquery.mobile.icons.css
[06:07:27] <arschmitz> gabriel_schulhof: yes thats part of what needs to be updated that Jasper i think is working on
[06:08:09] <gabriel_schulhof> OK, but I can't submit a PR that's all broken style-wise.
[06:08:26] <gabriel_schulhof> Can I just hand the PR to Jasper to fix the style?
[06:08:43] <gabriel_schulhof> I don't want to step on his toes.
[06:08:45] <arschmitz> gabriel_schulhof: nope i would ping jasper i think he thought he fixed all the styles already and thought it was just makrkup now
[06:08:59] <arschmitz> nope was to submitting broken pr
[06:09:22] <arschmitz> yes i would do what you can and try to talk to jasper to see what needs to be done there and how he wants to handle that when hes on
[06:10:24] <arschmitz> gabriel_schulhof: going back to hasClass
[06:10:41] <arschmitz> gabriel_schulhof: that also is just asking for problems in tests when your not careful
[06:11:04] <arschmitz> gabriel_schulhof: hasClass returns to if ANY element in the collection has the class
[06:11:26] <arschmitz> gabriel_schulhof: in reality we should only ever be passing a single element but its an easy mistake to make
[06:12:32] <gabriel_schulhof> arschmitz: You know what? I'll mark the PR as needing discussion and give it to him, and address a question to him in a comment. That should be equivalent to pinging him.
[06:12:40] <arschmitz> gabriel_schulhof: hasClasses is also cleaner because in general you dont need to pass a message 
[06:13:21] <arschmitz> gabriel_schulhof: all checks for classes should use this instead of .hasClas, .is, or .attr( "class" ) 
[06:13:55] <arschmitz> gabriel_schulhof: attr is ok if you want to verify the entire class string for some reason and make sure of its order but this would not be a common case at all
[06:26:54] <jqmobilecommit> [13jquery-mobile] 15gabrielschulhof pushed 1 new commit to 067730-textinput-classes-option: 02http://git.io/bfqN
[06:26:54] <jqmobilecommit> 13jquery-mobile/067730-textinput-classes-option 14d4fc1fa 15Gabriel Schulhof: Textinput: Add span for search icon
[06:28:14] <gabriel_schulhof> arschmitz: Another thing about textinput: I'm changing all the classes from ui-input to ui-textinput. Is that cool?
[06:28:29] <gabriel_schulhof> ... otherwise it's not ui-<widgetname> ...
[06:28:55] <arschmitz> gabriel_schulhof: yes
[06:29:10] <gabriel_schulhof> OK. Good.
[06:29:41] <gabriel_schulhof> Well, I've done all I can for the style, I think. I don't understand why neither the clear button nor the new span I added are showing up.
[06:30:25] <gabriel_schulhof> Jasper did indeed add rules for a .ui-textinput-search .ui-icon {} providing proper placement.
[06:31:21] <jqmobilecommit> [13jquery-mobile] 15gabrielschulhof opened pull request #7953: Textinput: Implement classes option (06ui-1-12-tests...067730-textinput-classes-option) 02http://git.io/bfYa
[06:44:13] <jqmobilecommit> [13jquery-mobile] 15gabrielschulhof pushed 1 new commit to 067730-textinput-classes-option: 02http://git.io/bfZM
[06:44:13] <jqmobilecommit> 13jquery-mobile/067730-textinput-classes-option 142ccb682 15Gabriel Schulhof: Textinput: Add icon span to clear button
[07:19:54] <jzaefferer> arschmitz: How's progress on classes? Can we merge the PR this week?
[07:51:04] <jzaefferer> scott_gonzalez: could you confirm this list as well? https://github.com/jquery/jquery-ui/pull/1440#issuecomment-72333462
[07:53:17] <scott_gonzalez> jzaefferer: done
[11:53:53] <gabriel_schulhof> arschmitz: Ping!
[11:54:08] <arschmitz> gabriel_schulhof: Pong!
[11:54:58] <gabriel_schulhof> arschmitz: Hey! Are we deprecating swatch-valued options?
[11:55:17] <arschmitz> no
[11:55:43] <gabriel_schulhof> Why not? You can just specify the various classes as part of the classes option ...
[11:56:13] <gabriel_schulhof> Oh, and that reminds me: I think enhancer might need to handle things like data-classes.ui-widgetname-blah="my-custom-class"
[11:56:24] <gabriel_schulhof> . is OK in an attribute name.
[11:56:53] <gabriel_schulhof> Otherwise there's no easy way of saying, like, data-corners="false"
[11:57:31] <arschmitz> gabriel_schulhof: im not following at all with that last part
[11:57:52] <gabriel_schulhof> arschmitz: What becomes the equivalent of data-corners="false" after the style options are gone?
[11:58:14] <arschmitz> "ui-button": null
[11:58:24] <arschmitz> in the case of button
[11:58:38] <gabriel_schulhof> How will you make exceptions for individual widget instances?
[11:58:46] <arschmitz> like i just said
[11:58:50] <gabriel_schulhof> Will you have to use JS?
[11:58:55] <arschmitz> no
[11:59:12] <gabriel_schulhof> Well, then how? "ui-button": null is JS, isn't it?
[11:59:21] <arschmitz> data-classes="{'ui-button':''}"
[11:59:41] <arschmitz> i wouldn't really recommend it but it works just fine 
[12:00:10] <gabriel_schulhof> arschmitz: OK, but doesn't that replace all keys?
[12:00:19] <arschmitz> no on init
[12:00:37] <gabriel_schulhof> arschmitz: OK, so is it merged with $.extend()?
[12:00:47] <arschmitz> yes but only on init
[12:00:51] <arschmitz> not on setoption
[12:00:57] <gabriel_schulhof> OK.
[12:01:16] <arschmitz> gabriel_schulhof: scott_gonzalezand i have talked about a better way to do this before
[12:01:21] <gabriel_schulhof> How about if you want to remove a class from the value of a key, but you wanna leave everything else intact? Such as, for example, removing ui-corner-all?
[12:01:47] <arschmitz> i dont follow
[12:01:49] <gabriel_schulhof> Like a subtraction mask.
[12:02:07] <gabriel_schulhof> Well, you have, for example, "ui-textinput": "ui-corner-all ui-shadow-inset"
[12:02:13] <arschmitz> ok
[12:02:38] <arschmitz> what about it?
[12:02:49] <gabriel_schulhof> How do you then data-classes="{'ui-textinput': ????}" so that you keep ui-shadow-inset but you remove ui-corner-all
[12:03:12] <arschmitz> data-classes="{'ui-textinput': 'ui-shadow-inset'}"
[12:03:44] <gabriel_schulhof> arschmitz: Yes, but that means you need to know the initial value of the "ui-textinput" key.
[12:03:49] <arschmitz> yup
[12:03:55] <arschmitz> whats the problem
[12:04:11] <arschmitz> it will be in the api
[12:04:14] <arschmitz> and in the prototype
[12:04:16] <gabriel_schulhof> What if we later change the value of the key? You need to go into the source, copy the new value again.
[12:04:35] <gabriel_schulhof> So $.extend() is nice, but only for addition.
[12:04:54] <arschmitz> well since it will be part of the api it would be no different then any other change?
[12:05:43] <gabriel_schulhof> I don't get this last part.
[12:05:51] <arschmitz> gabriel_schulhof: if you want to change an option value to something non default you need to know what you want to change it to
[12:06:07] <arschmitz> the defaults will all be documented as part of the api
[12:06:09] <gabriel_schulhof> arschmitz: Yes, but with classes, you also need to know what it is by default.
[12:06:23] <arschmitz> so?
[12:06:31] <gabriel_schulhof> arschmitz: Well, so far you didn't need to care.
[12:06:34] <arschmitz> and you dont need to
[12:06:47] <arschmitz> so far what?
[12:06:50] <arschmitz> this is new
[12:07:22] <gabriel_schulhof> What I'm saying is that with existing options you could just say data-theme="b" without having to know what the value of theme is by default.
[12:07:37] <arschmitz> and you still can
[12:07:41] <gabriel_schulhof> But with classes, you need to know what the value of a key is by default so you just remove the one class you don't want.
[12:07:47] <arschmitz> "ui-button": "foo"
[12:07:51] <arschmitz> no you dont
[12:08:24] <arschmitz> gabriel_schulhof: thes like saying with icons
[12:08:38] <gabriel_schulhof> Take the example of "ui-shadow-inset ui-corner-all". You need to know that ui-shadow-inset is part of the value, whereas before you didn't need to care about ui-shadow-inset just to turn off corners.
[12:08:38] <arschmitz> there should be a way to change ui-arrow-l
[12:08:46] <arschmitz> to ui-arrow-r with just knowing l
[12:08:49] <arschmitz> and not knowing arrow
[12:09:08] <arschmitz> your changing part of an option
[12:09:22] <arschmitz> we have never supported that
[12:10:11] <gabriel_schulhof> What we need is data-classes="{'ui-textinput':'~ui-corner-all'}"
[12:10:19] <arschmitz> no we dont
[12:10:35] <gabriel_schulhof> Meaning "take whatever the value is of 'ui-textinput', and remove ui-corner-all
[12:10:38] <gabriel_schulhof> Meaning "take whatever the value is of 'ui-textinput', and remove ui-corner-all'
[12:10:41] <gabriel_schulhof> Gah, sorry!
[12:10:42] <arschmitz> we should not support that
[12:11:19] <arschmitz> gabriel_schulhof: shadows and corners are deprecated
[12:11:24] <arschmitz> the backcompat works
[12:11:34] <arschmitz> there is no need to change classes to work that way
[12:11:53] <arschmitz> people can either just look at the default and set appropriately
[12:11:59] <gabriel_schulhof> Not classes. classes is fine. init.
[12:12:01] <arschmitz> or use js and get all complicated
[12:12:07] <arschmitz> gabriel_schulhof: no
[12:12:11] <arschmitz> this should not be supported
[12:13:04] <gabriel_schulhof> Well, I suppose by the nature of CSS you can just add a class that undoes the changes introduced by a class we add by default. Is that why it need not be supported?
[12:13:30] <arschmitz> gabriel_schulhof: no because they can set it to whatever they want
[12:13:34] <arschmitz> they dont need special handling
[12:13:40] <arschmitz> if they want just ui-shadow-inset
[12:13:47] <arschmitz> set the option to ui-shadow-inset
[12:14:17] <arschmitz> you want to add a ton of complication to allow someone to do data-classes="{'ui-textinput':'~ui-corner-all'}" vs data-classes="{'ui-textinput':'ui-shadow-inset'}"
[12:16:42] <gabriel_schulhof> arschmitz: Wait! Didn't you just say that, upon init, the value will be extended rather than overwritten?
[12:17:05] <gabriel_schulhof> Oh, no, NM. The object will be extended, not the value.
[12:17:10] <arschmitz> correct
[12:17:57] <arschmitz> the object not the value
[12:18:59] <gabriel_schulhof> This will increase the maintenance burden when moving from version to version, because if you add even a single class to the default, if the default changes in the next version, you have to re-copy the default and re-add that single class of yours.
[12:20:02] <gabriel_schulhof> I suppose it /strongly/ encourages people not to use the classes option at all, except at runtime.
[12:20:43] <arschmitz> gabriel_schulhof: no it wont
[12:20:49] <arschmitz> because the values are part of the api
[12:20:57] <arschmitz> so its no different then updating any api change
[12:24:48] <gabriel_schulhof> Since the beginning of mobile, data-option="value", which resulted in classes being added/removed, remained as data-option="value" in the markup, even though the actual list of classes on the widget may have changed from version to version. So, people didn't need to change their markup at all in response to changes in the structure of their widgets. People will now have to perform this additional step.
[12:26:47] <gabriel_schulhof> Well, maybe not if we set up the keys properly. This is only a problem if, by default, the value of a key is non-empty.
[12:27:21] <gabriel_schulhof> ... and it shouldn't be a problem if the value of a key contains solely style classes.
[12:27:37] <arschmitz> gabriel_schulhof: which it will thats the whole point
[12:28:27] <gabriel_schulhof> Yeah, but then we need to do something about ui-shadow-inset. That class is intrinsic to the textinput widget. It's always added. So, maybe it should not be part of the value of a key.
[12:28:49] <gabriel_schulhof> There's never been an option to turn that on or off.
[12:29:00] <gabriel_schulhof> Maybe we don't need the class at all.
[12:29:06] <arschmitz> gabriel_schulhof: that should 100% be a value
[12:29:20] <arschmitz> its 100% style
[12:30:14] <gabriel_schulhof> I guess one of the side-effects of deprecating style options is that all style-related classes become optional.
[12:30:26] <arschmitz> as they should be
[12:30:34] <arschmitz> they are just style
[12:34:16] <gabriel_schulhof> Hopefully we don't end up with a lot of .widgetname( "option", "classes.abc", ( function( array ) { var result = []; $.each( array, function( index, value ){ if ( value !== "something" ){ result.push( value ); }});return result.join( " " );} )( .widgetname( "option", "classes.abc" ).split( " " ) ) );
[12:34:40] <gabriel_schulhof> IOW, poke one class out of the existing value.
[12:35:31] <gabriel_schulhof> Or just replace with regex, but same idea.
[12:36:38] <gabriel_schulhof> Not in our libraries, I mean, in application code.
[13:59:04] <jquicommit> [13download.jqueryui.com] 15rxaviers opened issue #255: Super simplify UI 1.12.0 Builder 02http://git.io/bkvc
