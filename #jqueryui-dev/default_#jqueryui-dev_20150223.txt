[00:04:58] <doesallmagic2> Project jQuery UI - 1.8.x core build #675: STILL UNSTABLE in 8 min 57 sec: http://jenkins.jquery.com/job/jQuery%20UI%20-%201.8.x%20core/675/
[00:40:48] <jqcommit> [13api.jquerymobile.com] 15snowch opened issue #363: use of $( ".selector" ) in the documentation is confusing 02http://git.io/AwKz
[03:17:24] <jqmobilecommit> [13jquery-mobile] 15gabrielschulhof opened pull request #7975: Widget: Add tests for backcompat (06ui-1-12...067972-widget.backcompat-tests) 02http://git.io/ArWC
[05:27:15] <Omar-> !ping gabriel_schulhof
[05:29:43] <Omar-> when binding pagecontainer events inside ready, these events don't fire on first run
[05:29:54] <Omar-> however, if you wrap them in pagecreate, they do.
[05:29:55] <Omar-> http://jsfiddle.net/Palestinian/bssphw8b/
[07:12:23] <gabriel_schulhof> arschmitz: Ping!
[07:12:37] <arschmitz> gabriel_schulhof: pong
[07:13:07] <gabriel_schulhof> Hey! Regarding your comment: If both the classes option is modified and the style options, we must pick an order of precedence.
[07:13:27] <arschmitz> yes new always wins
[07:13:37] <gabriel_schulhof> That's what I'm saying in that comment.
[07:13:57] <gabriel_schulhof> If the classes option is modified, we disregard the fact that the style options may be different from defaults.
[07:14:21] <arschmitz> well we still need to update th style option to match what was in classes
[07:14:24] <gabriel_schulhof> We only update the classes option based on the style options if the classes option itself is the same as the prototype.
[07:14:52] <arschmitz> thats correct
[07:14:54] <gabriel_schulhof> Well, if the classes option has changed, the style options will be made to match whatever is in the classes option.
[07:15:06] <arschmitz> correct
[07:15:21] <gabriel_schulhof> So, at the end of _setInitialOptions(), the classes option and the style options will always be in sync.
[07:15:49] <gabriel_schulhof> This was not the case with your original implementation of _setInitialOptions().
[07:15:53] <gabriel_schulhof> No, sorry.
[07:15:56] <gabriel_schulhof> It was the case.
[07:16:02] <gabriel_schulhof> But the result was unexpected.
[07:16:08] <gabriel_schulhof> New didn't always win.
[07:16:20] <arschmitz> ok
[07:16:51] <gabriel_schulhof> With my code, new is guaranteed to always win, because we don't even consult style options if we find that the classes option has changed.
[07:17:08] <gabriel_schulhof> We overwrite them with extreme prejudice to reflect the value of the classes option.
[07:17:43] <gabriel_schulhof> So, that's what I was trying to say there.
[07:18:03] <arschmitz> if new didnt always win that was a bug
[07:18:12] <gabriel_schulhof> Exactly.
[07:18:14] <arschmitz> so if that was what you were saying thats correct
[07:18:24] <gabriel_schulhof> Yeah, and I fixed that bug.
[07:18:27] <arschmitz> i didnt look at the code i was only commenting on what you said in the message
[07:18:51] <gabriel_schulhof> Yeah, no problem. It's hard to get these subtelties across on the first try.
[07:20:07] <gabriel_schulhof> arschmitz: So, could you please review this so I can land it onto ui-1-12, and rebase my PRs?
[07:20:16] <arschmitz> yes
[07:20:22] <gabriel_schulhof> Awesome! Thanks!
[07:23:14] <Omar-> hi
[07:24:01] <Omar-> when pagecontainer events are wrapped in ready, they dont fire on first run
[07:24:09] <gabriel_schulhof> Omar-: I saw your comment.
[07:24:12] <Omar-> if wrapped in pagecreate they fire
[07:24:17] <Omar-> hi gabriel_schulhof
[07:24:27] <Omar-> its weird, isn't?
[07:24:29] <Omar-> http://jsfiddle.net/425pjuhy/
[07:28:53] <gabriel_schulhof> Omar-: I don't get it though, it's pretty easy to get page container events. Just attach to the document: http://jsbin.com/kebuco/1/
[07:37:19] <arschmitz> Omar-: your problem if yous binding after the events already happened
[07:37:20] <Omar-> gabriel_schulhof yea. if you use $.mobile.pageContainer.pagecontainer({ show: function () {} }); inside "ready" it doesn't fire the first time "home page" is shown
[07:37:38] <Omar-> it fires on first time you navigate from home page
[07:37:39] <arschmitz> Omar-: http://jsfiddle.net/425pjuhy/2/
[07:37:54] <arschmitz> document ready take place after those happen
[07:38:08] <Omar-> ready fires after pagecreate?
[07:38:18] <Omar-> uh oh
[07:38:48] <gabriel_schulhof> arschmitz: Your pointing out about not checking this.options.enhanced has made me realize that we need a test where the test widget is pre-rendered. And sure enough, you /do/ need to check enhanced in destroy so as not to remove wrapperClass. I had forgotten about that.
[07:38:52] <gabriel_schulhof> arschmitz: I'll update.
[07:39:55] <arschmitz> Omar-: itz not that it fires before
[07:40:05] <arschmitz> its that js is single threaded and sync 
[07:40:13] <arschmitz> both jqm and you are binding to ready
[07:40:22] <arschmitz> but you are doing it after jqm
[07:40:32] <arschmitz> so all jqm stuff that it does on ready happens first
[07:42:13] <gabriel_schulhof> arschmitz: If _enhance() is called in both the pre-rendered and non-pre-rendered case, then what's the point of _enhanced()? You might as well do it in _create().
[07:42:26] <gabriel_schulhof> Gah, I mean what's the point of _enhance()
[07:42:36] <gabriel_schulhof> My hands just wanna type "enhanced" all the time.
[07:42:38] <arschmitz> gabriel_schulhof: ui does not support enhanced
[07:42:52] <arschmitz> gabriel_schulhof: so there is no option there we add it
[07:43:00] <arschmitz> but there is still stuff in create of course
[07:43:16] <arschmitz> so the ui widgets have _enhance that is always called as a favor to us
[07:43:17] <gabriel_schulhof> Right, so in UI _enhance() gets called all the time because the widget is never enhanced.
[07:43:49] <arschmitz> so we in the extensions override _enhance check the option and handle the logic there
[07:43:51] <gabriel_schulhof> Yes, but we will override that to not always get called as we implement the enhanced option.
[07:43:57] <arschmitz> exactly
[07:44:35] <gabriel_schulhof> Wait a sec, so UI will call _enhance() unconditionally and we must short-circuit if the enhanced option is true?
[07:45:02] <gabriel_schulhof> So, all our implementations of _enhance() will start with if ( this.options.enhanced ) { return; }
[07:45:05] <gabriel_schulhof> ?
[07:46:04] <gabriel_schulhof> No, wait, that can't be right. They must start with if ( this.options.enhanced ) { this.slider = this.element.parent(); this.something = this.element.children( ".ui-widget-something" ); /* etc */ return; }
[07:46:12] <arschmitz> yes
[07:46:49] <gabriel_schulhof> OK, so essentially, the whole DOM-related code, whether it's lookup of existing elements or generation of new children, goes into _enhance()?
[07:46:59] <arschmitz> yes
[07:47:04] <gabriel_schulhof> OK. Gotcha.
[07:47:10] <arschmitz> and we wil leither call super
[07:47:16] <arschmitz> or do logic to set what needs to be
[07:47:54] <gabriel_schulhof> OK, so if it's enhanced, we assign the variables that hold the various DOM elements, and we /don't/ call super(), right?
[07:50:07] <gabriel_schulhof> This is actually nice, because all the startup DOM manip should now be confined to _enhance().
[07:51:53] <gabriel_schulhof> Wait a sec ... we have a problem. You do need to always call super, unless you derive directly from the UI widget, in which case you want to avoid calling _super(), because if you do, it will behave as if it's not enhanced.
[07:52:22] <gabriel_schulhof> That's bad though, because theoretically extensions can be loaded in any order.
[07:53:27] <gabriel_schulhof> ... so any one of them can end up deriving directly from the UI widget.
[07:55:41] <gabriel_schulhof> ... so this tells me that _enhance() must behave such that it strictly constructs a widget that is not pre-rendered, and we must always have exactly if ( this.options.enhanced ) { return; } at the top of _enhance(), and we must set the appropriate variables from _create() ... before we chain up.
[07:58:16] <gabriel_schulhof> Yeah, so, if we have an enhanced option, we must not chain up from _enhance(), but we must establish all that the UI widget establishes inside _enhance() by other means - namely by looking up the existing DOM elements.
[08:00:37] <gabriel_schulhof> ... but we cannot do this establishing inside _enhance(), because then we would need to chain up for the sake of other enhanced-aware extensions, and each extension would need to check its super() as to whether it's enhanced-aware or not - which it cannot do.
[08:00:45] <gabriel_schulhof> ... so we must do it inside _create().
[08:06:48] <arschmitz> gabriel_schulhof: they cannot be loaded in any order
[08:07:05] <arschmitz> we establish the order they can be loaded in 
[08:09:38] <gabriel_schulhof> arschmitz: Nono. You can have extensions that are independent of each other. For example, if you have reflow and columntoggle, and you use both, requirejs will load them independently, so you can end up with reflow first and then columntoggle, or you can end up with columntoggle first and then reflow.
[08:09:59] <arschmitz> right but we established that
[08:10:33] <gabriel_schulhof> You mean they are all enhanced-aware?
[08:10:35] <arschmitz> extensions are far from order independant
[08:10:49] <gabriel_schulhof> The point is they can be.
[08:10:58] <arschmitz> if we say they are they can be
[08:11:09] <gabriel_schulhof> Like, clear button and autogrow are order independent.
[08:11:13] <arschmitz> yes
[08:11:27] <gabriel_schulhof> hidedividers and autodividers are order independent.
[08:11:30] <arschmitz> but they dont need to be they just are
[08:11:41] <gabriel_schulhof> They need to be.
[08:11:48] <gabriel_schulhof> Why should autogrow require clear button?
[08:11:55] <gabriel_schulhof> Why should clear button require autogrow?
[08:12:06] <arschmitz> there is a difference between requireing and being order dependant
[08:12:21] <arschmitz> and those should not
[08:12:34] <arschmitz> however that does not mean that others cant be dependant
[08:12:46] <gabriel_schulhof> Order dependence is achieved via itroducing a requirement.
[08:13:03] <gabriel_schulhof> This must be there for that to work.
[08:13:37] <gabriel_schulhof> Our support for the enhanced option should not introduce a requirement.
[08:14:47] <arschmitz> yes it should
[08:15:02] <arschmitz> in the past if you required button
[08:15:05] <arschmitz> you got enhanced
[08:15:09] <arschmitz> and so you still should
[08:16:03] <gabriel_schulhof> Actually, now you won't, because you can simply check off external/jquery-ui/button.js without checking of js/widgets/forms/button.js
[08:16:23] <arschmitz> the builder and what you require are two different hting
[08:17:03] <gabriel_schulhof> Right, and we're actually backwards compatible that way, because people have been requireing widgets/forms/button, and not the external button.
[08:17:07] <arschmitz> and even in the build if you check the same options as you did in 1.4 in 1.5 you should get the same things
[08:18:02] <gabriel_schulhof> ... and you will.
[08:18:12] <gabriel_schulhof> ... but this has nothing to do with what I'm talking about.
[08:18:19] <gabriel_schulhof> I'm not talking about things that require one another.
[08:18:34] <gabriel_schulhof> I'm talking about things that don't require one another, but end up extending the same thing.
[08:18:54] <gabriel_schulhof> The bottom line is this: UI calls _enhance() unconditionally, but we don't.
[08:19:06] <arschmitz> yes we will
[08:19:12] <arschmitz> just what it does may change
[08:19:39] <gabriel_schulhof> It cannot be done that way, because if you then chain up, you end up in UI, which will create elements for stuff you have already found via selectors.
[08:19:41] <arschmitz> _enhance should always be called it just may do dom manip or may just set some varibles etcs
[08:20:30] <arschmitz> no it wont you should not do anything in enhance if its false other then call _super
[08:21:03] <gabriel_schulhof> If what is false?
[08:21:15] <arschmitz> this.options.enhanced
[08:21:38] <gabriel_schulhof> OK, then how do you do any extending which involves adding an element that the super doesn't add?
[08:22:37] <arschmitz> in create you call this._super() then do if( this.options.enhanced ) { //call your own method or do it there or whatever }
[08:23:19] <gabriel_schulhof> OK, that's bad, because this._super() goes into UI, which ends up creating a lot of DOM elements, so your pre-rendered widget ends up double-enhanced.
[08:23:30] <arschmitz> no you dont
[08:23:52] <gabriel_schulhof> Yes, because UI's implementation of _create() calls _enhance() unconditionally.
[08:23:57] <arschmitz> becuase the base mobile extension will handle the enhanced option in the _enhance mehtod
[08:24:01] <arschmitz> right
[08:24:10] <arschmitz> thats why there is the conditional in _enahce
[08:24:18] <arschmitz> in our extension
[08:24:25] <gabriel_schulhof> Yes, but that precludes chaining up!
[08:24:31] <arschmitz> so?
[08:25:12] <arschmitz> nothing execpt the base mobile widget should effect _enhance
[08:25:12] <gabriel_schulhof> That's bad, because if you have two different jQM extensions extending the same thing, they need to chain up so both work, but they must avoid chaining up to UI so that UI doesn't clobber things with its enhanced-unawareness.
[08:25:34] <arschmitz> extensions should should do their onw thing and be enhance aware
[08:25:47] <arschmitz> if they want to handle enhanced
[08:26:10] <arschmitz> so using textinput
[08:26:20] <arschmitz> the ui textinput call _enhance unconditionally 
[08:26:23] <gabriel_schulhof> Yes, but UI is not enhanced-aware, so if you chain up to it, it will ignore the fact that you have already found every element it needs via selectors, and it will create those elements anyway.
[08:26:40] <arschmitz> mobile extension overrides _enhance
[08:26:46] <arschmitz> and checks the enhanced option
[08:26:54] <arschmitz> if its false it calls _super
[08:26:59] <Omar-> thanks arschmitz i got the idea
[08:26:59] <gabriel_schulhof> arschmitz: Don't get me wrong.
[08:27:01] <arschmitz> other wise it sets its vars etc
[08:27:07] <arschmitz> then extensions
[08:27:08] <gabriel_schulhof> Your way works, but only for one extension.
[08:27:18] <arschmitz> should never touch _enhance
[08:27:29] <arschmitz> clear button and textarea
[08:27:41] <arschmitz> shoudl hande the enhanced option in _create after calling super
[08:28:04] <arschmitz> autogrow and clear button MUST DEPEND ON MOBILE BUTTON
[08:28:31] <arschmitz> not the ui button
[08:29:19] <gabriel_schulhof> OK. Suppose I take UI textinput, extend it with mobile textinput so it has the enhanced option, and I extend that with mobile clear button, and then I write an extension that add's an, I dunno, browse... button.
[08:29:35] <arschmitz> ok
[08:30:48] <arschmitz> and?
[08:30:50] <gabriel_schulhof> OK, what does enhance look like for browse and clear button, knowing that they are independent of each other?
[08:31:00] <gabriel_schulhof> ... and may be loaded in either order.
[08:31:06] <arschmitz> they both just do their own thing
[08:31:12] <arschmitz> why do they care about each other at all?
[08:31:21] <gabriel_schulhof> They don't.
[08:31:27] <arschmitz> so what the problem?
[08:32:34] <gabriel_schulhof> Well, UI wraps the native input, right?
[08:32:51] <arschmitz> well there is no textinout in ui but it likely will yes
[08:32:52] <gabriel_schulhof> It adds the wrapper that will house these buttons along with the native input.
[08:32:57] <gabriel_schulhof> OK.
[08:33:08] <arschmitz> ok so what the problem
[08:33:32] <gabriel_schulhof> Still trying to picture how we're gonna get the wrapper via a selector and make it available to all extensions in both the enhanced and non-enhanced case.
[08:33:53] <arschmitz> extensions to mobile widget will just check this.widget()
[08:34:00] <arschmitz> or this,parent or something
[08:34:07] <arschmitz> because the mobile widget will have already set it
[08:35:38] <gabriel_schulhof> OK. This works, but only if all code related to running the selectors involved in the enhanced case is outside _enhance()
[08:35:57] <arschmitz> why?
[08:36:49] <gabriel_schulhof> Because if it's inside enhance, then the browse extension needs to run this.browseButton = this.element.children( ".ui-textinput-browse-button" ); and it needs to chain up so the clear button extension can run this.clearButton = this.element.children( ".ui-textinput-clear-button" );
[08:37:04] <arschmitz> no it does not
[08:37:23] <gabriel_schulhof> Yes it does, otherwise the clear button extension breaks for enhanced textinput widgets whenever the browse button extension is present.
[08:37:35] <arschmitz> no it does not
[08:38:15] <gabriel_schulhof> So, how do you end up running both selectors, if one _enhance() overwrites the other?
[08:38:32] <arschmitz> they dont
[08:38:36] <arschmitz> thats my whole point
[08:39:42] <gabriel_schulhof> OK, how does one implementation of _enhance() not overwrite the other if both widgets are declared as $.widget( "mobile.textinput", $.mobile.textinput, { ... })?
[08:39:50] <gabriel_schulhof> Or rather both extensions.
[08:41:10] <arschmitz> gabriel_schulhof: https://gist.github.com/arschmitz/dc43b47026dabbdc0ee2
[08:42:53] <arschmitz> gabriel_schulhof: thats not 100% right but you get the idea
[08:43:18] <gabriel_schulhof> Oh, that's what I was saying. You do not run the selectors inside _enhance()
[08:43:41] <gabriel_schulhof> You run the selectors inside _create(), knowing that _enhance() is useless in the pre-rendered case.
[08:43:44] <arschmitz> gabriel_schulhof: i said extensions should not ever override enhanced 
[08:44:00] <arschmitz> _enahnce i mean
[08:44:34] <gabriel_schulhof> They can, but only to create new DOM elements, just as UI's implementation of _enhance() does nothing other than create new DOM elements.
[08:44:36] <arschmitz> gabriel_schulhof: more like this https://gist.github.com/arschmitz/dc43b47026dabbdc0ee2
[08:44:59] <arschmitz> i dont think they should
[08:45:09] <arschmitz> they should have their own enhance methods
[08:45:15] <arschmitz> like _enhanceClear
[08:45:22] <arschmitz> or _enhanceBrowse
[08:45:32] <gabriel_schulhof> It's fine to override, as long as you don't do anything enhanced-aware inside _enhance()
[08:45:48] <arschmitz> fine or not i dont think we shoudl
[08:46:14] <gabriel_schulhof> In fact, it cleans up the code nicely if you override, because all your DOM node creation is always going to be inside _enhance().
[09:12:06] <gabriel_schulhof> arschmitz: What do you think about this: http://jsbin.com/xahegu/1/
[09:13:57] <gabriel_schulhof> arschmitz: ... and with the extensions loaded in the opposite order: http://jsbin.com/xahegu/2/
[09:18:11] <arschmitz> gabriel_schulhof: i still prefer to see seperate enhance methods
[09:18:40] <arschmitz> otherwise you cant then extend just the clearbuttons enhance separate from everything else. 
[09:19:59] <gabriel_schulhof> Yeah. We could do something like _findElements() for the enhanced case.
[09:20:30] <arschmitz> gabriel_schulhof: i more meant i would like to see _clearEnahnce and _browseEnahnce
[09:21:23] <gabriel_schulhof> ... which create the DOM elements in the non-enhanced case?
[09:21:29] <arschmitz> yes
[09:21:39] <gabriel_schulhof> ... and they're called from _enhance?
[09:21:44] <arschmitz> no
[09:21:46] <jquicommit> [13jquery-ui] 15scottgonzalez pushed 1 new commit to 06master: 02http://git.io/AKd1
[09:21:46] <jquicommit> 13jquery-ui/06master 14fac8e51 15Scott González: Datepicker: Fix date range demo when entering values manually...
[09:21:53] <gabriel_schulhof> So, where are they called from?
[09:22:08] <arschmitz> _create where we check the enhanced option in the extension
[09:23:10] <arschmitz> if ( !this.options.enahnce ) { this._enhanceClearbutton(); } else { this._setClearElements(); }
[09:25:14] <arschmitz> so as to keep the actuall extension logic out of the parent methods
[09:25:19] <gabriel_schulhof> OK, so how do we stop UI's enhance from creating a wrapper when we've already found it? _enhance: function() { if ( this.options.enhanced ) { return; } this._super(); }?
[09:25:43] <arschmitz> that return would never exist
[09:26:24] <arschmitz> gabriel_schulhof: your jsbin is still not what i said
[09:26:39] <doesallmagic2> Yippee, build fixed!
[09:26:40] <doesallmagic2> Project jQuery UI build #1529: FIXED in 5 min 8 sec: http://jenkins.jquery.com/job/jQuery%20UI/1529/
[09:26:40] <doesallmagic2> Scott González: Datepicker: Fix date range demo when entering values manually
[09:27:09] <gabriel_schulhof> I know. The only thing I wanted to illustrate with that bin is that we can put all our DOM node creation code into _enhance(), and our DOM node retrieval code into _create()
[09:27:25] <gabriel_schulhof> So that's in keeping with UI.
[09:27:25] <arschmitz> right im saying we should not do that
[09:28:09] <gabriel_schulhof> OK. So IIUC we should introduce extension points that bear the name of the extension.
[09:28:34] <gabriel_schulhof> ... one each for the enhanced case, and one for the non-enhanced case.
[09:29:59] <arschmitz> yes
[09:30:09] <arschmitz> but the intention is not documented extension points
[09:30:28] <gabriel_schulhof> Right, not documented.
[09:30:33] <arschmitz> its clarity of code and separation of logic in the extensions. 
[09:31:13] <gabriel_schulhof> Yeah, this is more or less what I had in mind. Put the DOM creation in one place, and the DOM retrieval in another.
[09:31:30] <arschmitz> but i dont want those in create or enhance
[09:31:36] <gabriel_schulhof> OK.
[09:31:38] <arschmitz> they should be their own methods and just be conditionally called
[09:31:47] <arschmitz> from create and enhance
[09:32:36] <gabriel_schulhof> arschmitz: OK, now I see why you wanted UI to introduce _enhance(). You wanted to introduce _enhance() so we can turn it off, thus ensuring that UI potentially operates with the DOM nodes we're feeding it, rather than the DOM nodes it creates.
[09:32:57] <arschmitz> gabriel_schulhof: well in general if its something thats a single line like this.parent = this.element.parent(); thats overkil
[09:33:02] <arschmitz> yes
[09:33:48] <gabriel_schulhof> arschmitz: Actually, it may not be overkill, because an extension might want to assign something different to this.parent. ... but we can make that call then and there.
[09:34:09] <arschmitz> this.parent is just a refrence
[09:34:14] <arschmitz> so they can set it whenever they want
[09:34:19] <arschmitz> to whatever they want
[09:34:31] <gabriel_schulhof> Yes, but you're running the selector unnecessarily - although .parent() is a super-cheap selector.
[09:34:33] <arschmitz> mght break things but would in the extension scenerio too
[09:34:50] <arschmitz> im not wrried about that for the most part 
[09:35:01] <arschmitz> if its a single selector not like a set of 5
[09:35:04] <gabriel_schulhof> So yes. Simple and cheap === no need for an undocumented extension point.
[09:35:36] <arschmitz> gabriel_schulhof: and most extensions are likely to be just that case i feel like
[09:35:43] <arschmitz> where its a single selector 
[09:36:12] <gabriel_schulhof> We'll see. OK. I'll re-write the textinput to fit this pattern.
[09:36:45] <gabriel_schulhof> ... and before I do that, I'll re-write the widget backcompat to fit this pattern :)
[09:36:55] <gabriel_schulhof> But right now I need to babysit :)
[09:37:03] <arschmitz> gabriel_schulhof: ok sounds good
[10:16:22] <scott_gonzalez> arschmitz: Is the classes PR ready for another round of review?
[11:01:48] <jquicommit> [13jquery-ui] 15scottgonzalez pushed 1 new commit to 06master: 02http://git.io/A6ys
[11:01:48] <jquicommit> 13jquery-ui/06master 148fdfea5 15Scott González: Build: Upgrade to jQuery 1.11.2...
[11:06:25] <doesallmagic2> Project jQuery UI build #1530: SUCCESS in 4 min 51 sec: http://jenkins.jquery.com/job/jQuery%20UI/1530/
[11:06:26] <doesallmagic2> Scott González: Build: Upgrade to jQuery 1.11.2
[12:02:50] <jquicommit> [13jquery-ui] 15scottgonzalez opened pull request #1455: Tabs: Use standard promise methods for jqXHR (06master...06ajax-promise) 02http://git.io/AiGn
[12:24:50] <jquicommit> [13jquery-ui] 15scottgonzalez created 06ajax-promise (+2 new commits): 02http://git.io/Ai0Z
[12:24:50] <jquicommit> 13jquery-ui/06ajax-promise 14e3f94a8 15Scott González: Tabs: Use standard promise methods for jqXHR...
[12:24:50] <jquicommit> 13jquery-ui/06ajax-promise 144d0ceaf 15Scott González: [fixup]: Handle different signatures
[12:25:05] <jquicommit> [13jquery-ui] 15scottgonzalez 04deleted 06ajax-promise at 144d0ceaf: 02http://git.io/Ai0W
[12:32:06] <gabriel_schulhof> I updated https://github.com/jquery/jquery-mobile/pull/7975 to reflect our discussion. Basically, I moved the addition of the wrapperClass into create, because it would be, like, _enhanceWidgetBackcompat: function(), but it would be a oneliner.
[12:32:25] <gabriel_schulhof> ... and there's nothing to be done for the enhanced case.
[12:32:30] <gabriel_schulhof> arschmitz: ^
[12:33:19] <scott_gonzalez> I really really really hate the format of Travis emails.
[12:33:19] <scott_gonzalez> Without failure, I *always* click the changset link and not the build link.
[12:45:04] <gabriel_schulhof> arschmitz: BTW: https://github.com/arschmitz/qunit-assert-classes/pull/4
[12:48:37] <scott_gonzalez> mikesherov: Can I assign http://bugs.jqueryui.com/ticket/11099 to you?
[13:01:34] <gabriel_schulhof> arschmitz: Actually, there's not much about textinput that needs to be changed, because in the case of autogrow, the enhancement consists of adding a single class, so it does not pay to make that enhanced-aware - so what if we add a class that is already there? ... and in the case of clearButton(), since the presence of the extra markup is predicated upon the value of the option, the code cannot be structure as an _enhanceClear(), bec
[13:33:51] <jquicommit> [13jquery-ui] 15scottgonzalez pushed 1 new commit to 06master: 02http://git.io/Aixb
[13:33:51] <jquicommit> 13jquery-ui/06master 14d95c23a 15Scott González: Dialog: Fix typo...
[13:38:16] <doesallmagic2> Project jQuery UI build #1531: SUCCESS in 4 min 41 sec: http://jenkins.jquery.com/job/jQuery%20UI/1531/
[13:38:16] <doesallmagic2> Scott González: Dialog: Fix typo
[13:44:19] <jquicommit> [13jquery-ui] 15scottgonzalez closed pull request #1214: Dialog: Fix resizing with iframes (06master...06bug-9919) 02http://git.io/NWhP9g
[14:10:52] <mikesherov> scott_gonzalez: sure
[14:40:59] <jquicommit> [13jquery-ui] 15scottgonzalez closed pull request #1103: slider: fix to restrict handle values when set programmatically.Fixed #3762-Slider: handles not restricted properly when set programmatically (06master...06ticket_3762_v2) 02http://git.io/NO8PjQ
[15:09:21] <scott_gonzalez> Bah. Travis really wants to fetch the branch for this PR https://github.com/jquery/jquery-ui/pull/1455 from the upstream repo for some reason.
[16:35:51] <jquicommit> [13jquery-ui] 15scottgonzalez opened pull request #1456: Tooltip: Register event handlers before content is loaded (06master...06tooltip-close-early) 02http://git.io/AXUX
[17:07:53] <jquicommit> [13api.jqueryui.com] 15scottgonzalez opened pull request #249: Effects: Clean up queue wording since we don't support jQuery <1.7 (061-12...06queue-1-6) 02http://git.io/AXOF
[17:20:39] <jquicommit> [13api.jqueryui.com] 15scottgonzalez 04force-pushed 061-12 from 14dd2629f to 140f2aa03: 02http://git.io/AXG9
[17:20:40] <jquicommit> 13api.jqueryui.com/061-12 143e2ab47 15Felix Nagel: Selectmenu: Add documentation for _renderButtonItem() extension point...
[17:20:40] <jquicommit> 13api.jqueryui.com/061-12 14a35bba8 15Jörn Zaefferer: Tooltip: Document extended content option
[17:20:41] <jquicommit> 13api.jqueryui.com/061-12 140f2aa03 15TJ VanToll: Menu: Document the new wrapper requirement...
[17:27:19] <jquicommit> [13api.jqueryui.com] 15scottgonzalez opened pull request #250: Interactions: distance and delay options are deprecated (061-12...06interactions-1-12) 02http://git.io/AXn6
