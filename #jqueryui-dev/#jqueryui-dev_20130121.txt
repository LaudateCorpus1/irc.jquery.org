[03:08:10] <doesallmagic> Project jQuery UI - git core build #291: STILL FAILING in 47 min: http://swarm.jquery.org:8080/job/jQuery%20UI%20-%20git%20core/291/
[03:39:47] <doesallmagic> Project jQuery UI 1-9-stable - git core build #78: STILL FAILING in 31 min: http://swarm.jquery.org:8080/job/jQuery%20UI%201-9-stable%20-%20git%20core/78/
[04:14:40] <rxaviers> Have anyone profiled on node.js? 
[04:20:02] <rxaviers> using node-inspector + v8-profiler, Im hitting this issue https://github.com/dannycoates/node-inspector/issues/126
[04:20:03] <b-ot> rxaviers, issue #126 by helloliuchen (5mon 1w ago): I can't see profile tab
[04:20:23] <rxaviers> wondering if anyone has made it work or used something else
[04:25:17] <doesallmagic> Project jQuery UI - 1.6.x core build #186: STILL FAILING in 45 min: http://swarm.jquery.org:8080/job/jQuery%20UI%20-%201.6.x%20core/186/
[05:11:24] <doesallmagic> Project jQuery UI - 1.7.x core build #187: STILL FAILING in 46 min: http://swarm.jquery.org:8080/job/jQuery%20UI%20-%201.7.x%20core/187/
[05:23:27] <scott_gonzalez> rxaviers: I have not.
[05:23:37] <rxaviers> thanks scott_gonzalez ;)
[05:23:48] <rxaviers> I surrendered to nodetime.com right now
[05:24:14] <rxaviers> node-inspector is really cool. But, the profiling stuff is broken
[05:24:34] <rxaviers> I notice we can node --prof, it creates a v8.log with profiling info
[05:24:58] <rxaviers> which needs v8tools to 'render' that , it's ok.
[05:25:06] <rxaviers> nodetime.com does a nice job
[05:25:14] <rxaviers> and it's really quick
[05:25:15] <rxaviers> well
[05:28:10] <rxaviers> Images are taking long to be generated, ~700ms locally here. Although, profiling showed no useful thing to me yet.
[05:29:48] <rxaviers> what supposes image magick itself
[05:30:43] <rxaviers> Right now my plan is generate the same image several times via shell script and node, using the same arguments and see the result
[05:30:47] <rxaviers> is to*
[05:31:15] <rxaviers> I wanna know if the wrap on node is the issue or image magick is really taking that long
[05:56:38] <doesallmagic> Project jQuery UI - 1.8.x core build #162: STILL FAILING in 45 min: http://swarm.jquery.org:8080/job/jQuery%20UI%20-%201.8.x%20core/162/
[06:00:25] <jzaefferer> rxaviers: good to see you're getting familiar with profiling node. Later I'd like us to profile the zip generator and see if there's an obvious bottleneck somewhere. It should be possible to have that download be a lot faster. Might be the zip implementation in node/JS, but that really needs profiling
[06:00:53] <rxaviers> sure ;)
[06:40:31] <scott_gonzalez> tj_vantoll: If that buttonset issue doesn't have a clean fix, just ping me again.
[06:43:27] <tj_vantoll> scott_gonzalez Ok.  I
[06:43:27] <b-ot> tj_vantoll, you have one new message, use `read when you wish to read it.
[06:43:30] <tj_vantoll> whoops
[06:44:07] <tj_vantoll> I'm going to play with it a bit tonight.  I think that big chain here https://github.com/tjvantoll/jquery-ui/blob/ab440f688b13e5a177ad01c4059a07310a41af12/ui/jquery.ui.button.js#L389 needs to be reworked a bit.
[06:44:48] <scott_gonzalez> yeah
[06:45:00] <scott_gonzalez> That *should* be the only place that needs to change.
[06:45:13] <scott_gonzalez> If not, then there's probably a bug in some other code block too.
[06:45:56] <tj_vantoll> But basically it needs some clean way of working around the fact that when you call button's refresh on a radio button, all the radio buttons in the group need to already be button widgets.
[06:46:30] <tj_vantoll> I'll mess with it and get back with you.
[06:52:20] <scott_gonzalez> rxaviers: https://gist.github.com/4586450#file-gistfile1-js-L27
[06:52:31] <scott_gonzalez> If you change that to a decrementing loop does it go slightly faster?
[06:53:00] <rxaviers> will check
[06:53:02] <rxaviers> brb in 1h
[06:53:37] <scott_gonzalez> rxaviers: Oh, umm...you should probably be timing inside script.
[06:53:45] <scott_gonzalez> To avoid including the setup time.
[06:54:03] <scott_gonzalez> But we can work from these numbers.
[06:54:12] <scott_gonzalez> Do you know how many images a theme generates?
[07:30:28] <jzaefferer> rxaviers: seems like the node overhead doesn't matter, so what you've tested so far leaves out too much?
[07:32:01] <jzaefferer> rxaviers: can you point me to code that you know contains the slow path? In the repo or even just inside DB/TR on the site...
[08:08:14] <johnwards> Hey folks getting a 502/504 error when downloading custom jQuery UI build.
[08:08:54] <johnwards> For 1.9 only it seems
[08:09:06] <johnwards> 1.10 works fine
[08:09:55] <johnwards> Actually 1.10 is failing now too
[08:18:05] <scott_gonzalez> rxaviers: ^
[08:34:04] <rxaviers> :(
[08:34:04] <rxaviers> af
[08:37:53] <rxaviers> scott_gonzalez, I didnt care about the setup time here, because Im looping the important part a bunch and it tend to get irrelevant, and it's only a sniff of course :)
[08:38:53] <rxaviers> jzaefferer, exactly, that only shows node and binary are close. And more importantly, running node by hand (or binary) doesnt give us bad times. So, it's not an imagemagick vs. graphicsmagick issue.
[08:39:55] <rxaviers> scott_gonzalez, did you have a change to point that issue to someone? Do we know any nginx expert one?
[08:40:10] <rxaviers> (to help us debug that)
[08:41:11] <scott_gonzalez> I don't know any.
[08:44:26] <rxaviers> ok
[08:44:55] <rxaviers> what do you think we should do?
[08:51:53] <rxaviers> scott_gonzalez, about dozen images.
[08:51:56] <rxaviers> per theme
[08:52:14] <scott_gonzalez> rxaviers: So we're looking at <1s for generation times?
[08:52:29] <rxaviers> ideally ~200ms
[08:52:41] <rxaviers> that's what I got from old.jqueryui.com
[08:53:02] <scott_gonzalez> Not sure what we should do about nginx.
[08:58:14] <rxaviers> jzaefferer, knowing where in the code is slow it's the tricky part (yet). Was soon as I do will let you know.
[08:58:22] <rxaviers> As* soon
[09:09:53] <rxaviers> trying to leverage help from people I know
[09:10:52] <rxaviers> (for nginx thing)
[10:13:40] <Danwe_WMDE> what is the point of $.widget() doing a deep extend() on the base prototype? Widget prototypes probably shouldn't use objects, otherwise each level of inheritance just adds to the original base prototype. With the exception of 'options' of course. Or did I miss any useful use case here?
[10:17:38] <Danwe_WMDE> I actually just noticed this when I wanted to introduce something similar to 'options' into one of my base widgets. I managed to do so by manually defining the constructor, adding something like this.foo = $.extend( true, {}, this.foo )  there, though, this only works for one layer of inerhitance which is just too bad.
[10:21:00] <scott_gonzalez> Danwe_WMDE: How about you pose your use case with specific details?
[10:21:30] <scott_gonzalez> There are multiple places where we use objects in our prototypes.
[10:21:45] <scott_gonzalez> Event handlers is the most common case.
[10:27:04] <Danwe_WMDE> scott_gonzalez: perhaps this will get you an idea: http://pastebin.com/icgh5a76 Look at the constructor. And here an example, of how this is actually used in a non-abstract widget definition: http://pastebin.com/trtTdLaR
[10:28:42] <Danwe_WMDE> works pretty fine, 'widgetTemplateShortCuts' behaves like options. But when using the 'wikibase.snakview' as base for another widget, it will fail of course because the magic constructor won't be called
[10:28:44] <rxaviers> it seems I found the issue with slow images generation on themeRoller. It seems not to be with image generation, but with lzma code themeRoller is using to generate the zipped params! affff It's not even being used in server, because Im now caching those results to avoid calculating it on runtime.
[10:29:41] <rxaviers> almost there
[10:30:00] <scott_gonzalez> Danwe_WMDE: Why aren't those just options?
[10:32:09] <Danwe_WMDE> scott_gonzalez: didn't want them public. especially the widgetTemplateShortCuts. Of course, if there is not other way, this will be my last alternative
[10:32:49] <Danwe_WMDE> they also seem quite substential to the widget, not really options
[10:33:32] <Danwe_WMDE> its a little like asking why aren't widgetName or widgetBaseClass options
[10:38:04] <scott_gonzalez> Oh, right, sorry, glanced that that second pastebin too quickly.
[10:38:49] <scott_gonzalez> So you have properties that you don't want to inherit?
[10:39:51] <Danwe_WMDE> no, I want to inherit them but not extend them on the original prototype. Basically what you are doing with $.Widget's 'options'
[10:40:32] <Danwe_WMDE> look at $.widget, this line does the trick there:
[10:40:32] <Danwe_WMDE> basePrototype.options = $.extend( true, {}, basePrototype.options );
[10:40:33] <scott_gonzalez> I don't think we're going to provide a way to do that, other than just define them on creation.
[10:41:06] <scott_gonzalez> BTW, you must be using an old version of UI if it's using $.extend( true ) on options.
[10:41:34] <scott_gonzalez> $.extend( true, ... ) is never used inside widget anymore. Only $.widget.extend().
[10:41:42] <Danwe_WMDE> 1.8ish
[10:42:34] <scott_gonzalez> Heh, no longer supported.
[10:43:07] <scott_gonzalez> That's unrealted to this issue though.
[10:43:44] <Danwe_WMDE> any alternative suggestion how to make this nice (not abusing options for this)
[10:44:26] <scott_gonzalez> Put it in _create().
[10:55:16] <Danwe_WMDE> scott_gonzalez: That would do. also thinking about doing my own factory, calling $.widget, where I can savely copy my additional fields.
[11:10:03] <jquicommit> 01[13download.jqueryui.com01] 15rxaviers created 06test-images (+1 new commit): 02http://git.io/RH-2-g
[11:10:03] <jquicommit> 13download.jqueryui.com/06test-images 149446883 15Rafael Xavier de Souza: Add test js and sh scripts
[11:12:58] <Danwe_WMDE> uh, quite some stuff that went into $.widget recently... is there some more information on redefining widgets and where this is used?
[11:18:52] <rxaviers> and another issue is running convert on our server. Something isnt right
[11:21:27] <scott_gonzalez> Danwe_WMDE: Check the 1.9 upgrade guide. That's pretty much all the docs.
[11:21:37] <scott_gonzalez> We don't have tutorials about it yet.
[11:22:07] <scott_gonzalez> But you can see lots of examples in the 1.9 code: https://github.com/jquery/jquery-ui/blob/1-9-stable/ui/jquery.ui.tabs.js#L865
[11:40:32] <rxaviers> $ time ./generateIcon.sh 
[11:40:32] <rxaviers> real	26m21.534s
[11:40:32] <rxaviers> user	273m6.177s
[11:40:32] <rxaviers> sys	1m43.438s
[11:41:04] <scott_gonzalez> 273m?!?
[11:46:02] <rxaviers> in the stage server
[11:46:33] <rxaviers> 273m is the sum time of all children spent on this task, real time26m
[11:46:46] <rxaviers> but, yes 273m
[11:47:36] <rxaviers> (and sh, not node)
[11:52:23] <rxaviers> Im compiling a recent image magick there to check
[11:52:40] <rxaviers> or it can be I/O
[11:59:43] <rxaviers> although from time stats cpu time is high. There is no much left for io presumably.
[12:18:15] <rxaviers> sharam
[12:18:16] <rxaviers> $ time ./generateIcon.sh 
[12:18:16] <rxaviers> Version: ImageMagick 6.8.1-10 2013-01-21 Q16 http://www.imagemagick.org
[12:18:16] <rxaviers> Copyright: Copyright (C) 1999-2013 ImageMagick Studio LLC
[12:18:16] <rxaviers> Features: DPC OpenMP
[12:18:16] <rxaviers> Delegates: png ps zlib
[12:18:18] <rxaviers> real	5m2.031s
[12:18:20] <rxaviers> user	8m9.802s
[12:18:23] <rxaviers> sys	0m53.356s
[12:18:25] <rxaviers> using new IM
[12:24:54] <scott_gonzalez> Whoa.
[13:00:16] <rxaviers> there we go
[13:00:27] <rxaviers> http://stage.jqueryui.com/themeroller
[13:00:37] <rxaviers> using generated images just fine now \o/
[13:00:55] <rxaviers> biggest hit was image magick installed on the server
[13:01:26] <rxaviers> gnarf, I've removed the repo IM (apt-get remove imagemagick) and I've installed a compiled one in /usr/local
[13:01:43] <rxaviers> using CXXFLAGS=-O5
[13:03:19] <rxaviers> that's the config params I used
[13:03:19] <rxaviers> ./configure CFLAGS=-O5 CXXFLAGS=-O5 --enable-static --with-png --disable-shared 
[13:03:51] <rxaviers> That's enough for TR usage. But, if anyone else needs IM to handle jpgs or other formats, we'll need to rebuild it
[13:08:10] <rxaviers> gnarf, we'll probably need to replicate the ^ in production. I wont touch there unless asked
[13:12:56] <rxaviers> yeap, now it seems faster than old.jquery 
[13:15:00] <scott_gonzalez> awesome work rxaviers
[13:15:05] <rxaviers> :D
[13:16:04] <rxaviers> and I've tested parallel vs. queue in themeRoller. Now, it's much more stable and the processes doesnt get crazy as before it did.
[13:16:18] <rxaviers> So, we're able to simply generate all images in parallel per theme
[13:16:26] <rxaviers> not needing to worry about cores
[13:16:33] <rxaviers> just tested on stage and it worked
[13:16:38] <rxaviers> very smoothly
[13:16:52] <scott_gonzalez> great
[13:16:57] <rxaviers> I think the other version of IM had mem leak
[13:17:12] <rxaviers> it's not common to break things the way it was happening
[13:24:05] <rxaviers> scott_gonzalez, for curiosity about decrementing loop I found this http://jsperf.com/loops-increment-vs-decrement/5
[13:25:03] <rxaviers> I think incrementing is a common thing and might have some sort of cpu acceleration I guess
[13:25:19] <scott_gonzalez> wow, I'm surprised that they've optimized that faster than decrementing.
[13:25:47] <rxaviers> (or look ahead optimization)
[13:25:48] <rxaviers> yeap
[13:55:22] <jzaefferer> hey rxaviers, just looked at stage and I'm not seeing any background images
[13:56:36] <jzaefferer> also, nice work on figuring out where the memory leak happened
[17:54:25] <scott_gonzalez> Wow, this guy is fucking nuts: http://blaipratdesaba.com/jqueryui-has-lost-the-war/
[17:54:58] <scott_gonzalez> I love the part where he concludes that if you don't need every single piece of UI, then we're a failure.
[17:55:17] <scott_gonzalez> Also, since some things we do deal with UX, we're clearly retards for naming the project jQuery UI.
[18:54:14] <tj_vantoll> scott_gonzalez http://blaipratdesaba.com/jqueryui-has-lost-the-war/ is all kinds of special.  My favorite "If you need a widget factory, please search and use a jQuery plugin instead."
[18:54:15] <bot-t> (100 hours ago) <scott_gonzalez> tell tj_vantoll I gave you commit access on pretty much all things UI. Should make it easier for content updates.
[18:54:33] <scott_gonzalez> tj_vantoll: Yeah, WTF is that about?
[18:54:40] <scott_gonzalez> Then he goes on to say that he uses jQuery Mobile.
[18:54:54] <scott_gonzalez> As if that isn't full of widgets that use the widget factory.
[18:55:18] <scott_gonzalez> I also like how he says if you need .position(), then you're doing it wrong.
[18:55:39] <tj_vantoll> Heh, was just about to quote that one as well.
[18:55:39] <scott_gonzalez> And if your browser doesn't support CSS animations, you don't deserve it.
[18:58:58] <tj_vantoll> The jQuery UI is monolithic argument is ridiculous, but it seems to come up a lot.
[18:59:39] <scott_gonzalez> Yeah, it's pretty annoying.
[19:00:05] <scott_gonzalez> I had this argument on Twitter the other day.
[19:01:26] <scott_gonzalez> http://twitter.com/bradleypriest/status/290713233503973376
[19:01:42] <b-ot> scott_gonzalez, @bradleypriest: Can anyone recommend a good JS autocomplete plugin (jQuery is fine)? My final step to removing jQueryUI
[19:02:49] <scott_gonzalez> "It's just a 450KB autocomplete library for me at this point of time "
[19:03:40] <scott_gonzalez> At some point it will become kind of crazy to load jQuery UI from a CDN.
[19:04:07] <scott_gonzalez> Unless everyone is doing it and the cache hits become useful.
[19:04:27] <scott_gonzalez> But most people should be using custom builds anyway.
[19:05:13] <tj_vantoll> Yeah I was just thinking whether we could do something to better stress that on say jqueryui.com.
[19:05:37] <tj_vantoll> A lot of libraries list their file size front and center but with UI it's hard because it's truly so modular.
[19:06:23] <scott_gonzalez> Heh, we can do something like "As small as X KB" :-P
[19:06:48] <tj_vantoll> Choose your own adventure
[19:06:53] <scott_gonzalez> :-)
[19:07:46] <tj_vantoll> It would be cool if the CDNs would accept a query string so that you didn't have to get all of jQuery UI to use a few pieces.
[19:07:55] <scott_gonzalez> 70% of people using download builder download everything.
[19:08:06] <tj_vantoll> Yeah there's that too.
[19:08:31] <scott_gonzalez> 4% download just datepicker.
[19:08:41] <scott_gonzalez> 1.5% just autocomplete
[19:08:51] <scott_gonzalez> 1.3% just dialog
[19:08:55] <scott_gonzalez> 1% just tabs
[19:09:23] <scott_gonzalez> It tails off from there.
[19:09:37] <scott_gonzalez> Oh, that data is only based on the last 24 hours.
[19:09:44] <scott_gonzalez> We should get an aggregate view on that data.
[19:10:36] <scott_gonzalez> This is interesting theme info:
[19:10:44] <scott_gonzalez> 47.8% UI lightness
[19:10:51] <scott_gonzalez> 17.5% smoothness
[19:10:57] <scott_gonzalez> 16.9% custom
[19:11:36] <scott_gonzalez> The rest is split between redmond, UI darkness, start, cupertino, blitzer, flick, and sunny.
[19:11:40] <scott_gonzalez> (last 30 days)
[19:11:45] <tj_vantoll> Hmmm.
[19:12:59] <tj_vantoll> I mean really, UI gives you the ability to truly customize but most web developers are lazy.
[19:13:35] <tj_vantoll> I include this script and $('input').datepicker() works.  Done.
[19:14:01] <scott_gonzalez> Yeah, but also companies should have designers who are building custom themes.
[19:14:14] <scott_gonzalez> Which would happen outside of TR.
[19:14:47] <scott_gonzalez> OH SHIT! http://bugs.jquery.com/ticket/13220#comment:14
[19:15:18] <tj_vantoll> wow
