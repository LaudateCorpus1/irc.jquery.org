[04:36:51] <caper> http://jsfiddle.net/3d6fbLbe/6/
[04:36:59] <caper> i want to make the json on drop on first time i can do that but on second time how can i append to it children 
[05:13:25] <scott_gonzalez> rxaviers: Don't forget that https://github.com/jquery/jquery-ui/pull/1440 is ready to land.
[05:13:37] <scott_gonzalez> Also rxaviers_ makes tab-completing your name a pain.
[05:14:39] <rxaviers> scott_gonzalez, thanks for the reminder. I'm getting to it.
[05:15:14] <rxaviers> scott_gonzalez, if I rename rxaviers_ to _rxaviers, would it help you?
[05:15:19] <scott_gonzalez> yup
[05:45:16] <arschmitz> rxaviers: just curious is there a reason you don't use ZNC to avoid multiple nicks? 
[06:01:59] <rxaviers> arschmitz, the other one is my znc one
[06:09:23] <arschmitz> rxaviers: ah ok
[06:09:42] <arschmitz> rxaviers: by the way congrats on the baby!
[06:10:59] <rxaviers> :) Yet to come. Thanks
[06:11:02] <rxaviers> brb
[06:26:19] <jquicommit> [13jquery-ui] 15scottgonzalez pushed 1 new commit to 06master: 02http://git.io/Ajh0
[06:26:19] <jquicommit> 13jquery-ui/06master 1445744ef 15Rafael Xavier de Souza: All: Add css-dependency-comments based on jQuery Mobile...
[06:28:56] <jquicommit> [13jquery-ui] 15scottgonzalez pushed 6 new commits to 06datepicker: 02http://git.io/Ajj5
[06:28:56] <jquicommit> 13jquery-ui/06datepicker 14876aed3 15Felix Nagel: Datepicker: Make Calendar pass-through options more dynamic...
[06:28:56] <jquicommit> 13jquery-ui/06datepicker 14a5734cd 15Felix Nagel: Datepicker: Remove whitespace...
[06:28:56] <jquicommit> 13jquery-ui/06datepicker 1411c1735 15Felix Nagel: Calendar: Use button instead of link elements for day items...
[06:30:37] <doesallmagic2> Yippee, build fixed!
[06:30:38] <doesallmagic2> Project jQuery UI build #1535: FIXED in 4 min 34 sec: http://jenkins.jquery.com/job/jQuery%20UI/1535/
[06:30:38] <doesallmagic2> Scott Gonz√°lez: All: Add css-dependency-comments based on jQuery Mobile
[06:30:52] <jquicommit> [13jquery-ui] 15scottgonzalez closed pull request #1432: Calendar: minor fixes (06datepicker...06calendar-minor-fixes) 02http://git.io/mcZwWg
[06:36:24] <jquicommit> [13jquery-ui] 15scottgonzalez closed pull request #1366: Draggable: $.ui.ddmanager.current release on draggable _destroy (06master...0610667-Draggable) 02http://git.io/56h1ag
[06:37:49] <jquicommit> [13jquery-ui] 15scottgonzalez closed pull request #1364: Droppable: $.ui.ddmanager.current released when droppable destroys (06master...0610666-Droppable) 02http://git.io/NneL1g
[06:42:34] <scott_gonzalez> Every UI PR is not labeled for CLA :-)
[07:17:05] <Surfoo> Hello there!
[07:17:57] <scott_gonzalez> Surfoo: hi
[07:18:17] <Surfoo> I'd to use a promise with a create event for a selectmenu (it's an ajax request the create event). How can I do that in your opinion?
[07:19:00] <scott_gonzalez> I'm not sure exactly what you're asking, but support is in #jquery.
[07:20:40] <Surfoo> ok, I asked the question too
[07:21:36] <Surfoo> scott_gonzalez: in fact, I have a complex dialog popin, with selectmenu filled by ajax request. 
[07:21:58] <Surfoo> it works perfectly for create
[07:22:20] <scott_gonzalez> Surfoo: You won't get support in this channel.
[07:22:51] <scott_gonzalez> This channel is for discussion about development of the actual libraries.
[07:23:03] <Surfoo> scott_gonzalez: ok sorry, thanks.
[08:03:56] <jqmobilecommit> [13jquery-mobile] 15H2Os opened issue #7978: Unable to get property 'nodeName' of undefined or null reference 02http://git.io/xeHa
[08:41:10] <scott_gonzalez> This is insanity.
[08:41:27] <scott_gonzalez> This whacky Firefox bug is even whackier than you'd think: http://bugs.jqueryui.com/ticket/10524
[08:41:34] <scott_gonzalez> The bug happens during .removeData().
[08:41:47] <scott_gonzalez> Even if there's no data to remove.
[08:46:43] <scott_gonzalez> Oh, that's not even it.
[08:46:49] <scott_gonzalez> It's just the presence of an event handler.
[09:45:32] <jqmobilecommit> [13jquery-mobile] 15gabrielschulhof closed issue #7978: Unable to get property 'nodeName' of undefined or null reference 02http://git.io/xeHa
[09:47:32] <gabriel_schulhof> arschmitz: Ping!
[09:50:26] <arschmitz> gabriel_schulhof: Pong!
[09:54:46] <gabriel_schulhof> arschmitz: Hey!
[09:55:09] <gabriel_schulhof> There are two ways to go about the "inset" option in listview.
[09:55:33] <gabriel_schulhof> We can deprecate it and document that you have to add ui-listview-inset and optionally ui-corner-all and ui-shadow.
[09:56:00] <gabriel_schulhof> ... or we can keep the option, and implement it as this._toggleClass( this.element, "ui-listview-inset", newOptionValue )
[09:56:11] <gabriel_schulhof> ... and define "ui-listview-inset": "ui-corner-all ui-shadow"
[09:56:38] <gabriel_schulhof> That would encapsulate the dependency between inset, corners, and shadow.
[09:57:33] <gabriel_schulhof> The non-deprecation solution came to mind because the name of the class is ui-listview-inset, and theoretically all ui-widgetname* classes should go through the class key.
[09:57:46] <gabriel_schulhof> ... but if they do, we also have to provide a mechanism for toggling them.
[09:59:03] <arschmitz> gabriel_schulhof: i think we should deprecate the option
[09:59:20] <arschmitz> and no we can have classes that just do stuff
[09:59:44] <arschmitz> and corners while it is NOW connected to inset really should not be why cant you have an inset list with no rounded corners?
[09:59:53] <arschmitz> same with shadow
[10:00:11] <gabriel_schulhof> You can, but adding corners to a non-inset listview breaks the layour.
[10:00:16] <gabriel_schulhof> Nut OK.
[10:00:19] <gabriel_schulhof> But
[10:00:26] <gabriel_schulhof> I'm fine with deprecating all the way.
[10:00:36] <arschmitz> gabriel_schulhof: but non inset is the default
[10:00:36] <gabriel_schulhof> We need not hand-hold wrt. the dependency between the three classes.
[10:00:46] <arschmitz> so there are no corners by default
[10:00:57] <arschmitz> you must explicitly add them
[10:01:02] <gabriel_schulhof> arschmitz: The default value for the corners option is true.
[10:01:12] <gabriel_schulhof> So, if you create the listview as inset, it will have corners.
[10:01:20] <arschmitz> right but only inset
[10:01:27] <arschmitz> and inset is not the default
[10:02:10] <arschmitz> so you must make an explicit change to cause there to be corners
[10:02:11] <gabriel_schulhof> Hmmm ... OK, so, in the backcompat we must implement the code that adds the corners and shadow classes if inset is on.
[10:02:19] <arschmitz> yes
[10:02:23] <gabriel_schulhof> OK.
[10:02:28] <gabriel_schulhof> I'm cool with that.
[10:02:39] <arschmitz> gabriel_schulhof: did you see my comments on your other classes pr's
[10:02:46] <arschmitz> might want to look at them before you go to far
[10:03:06] <gabriel_schulhof> So, I guess the rule that ui-widgetname* must must must have a corresponding class key is not so must must must, right?
[10:03:21] <gabriel_schulhof> I'm just looking at the backcompat PR now.
[10:03:41] <gabriel_schulhof> I like .match( /\S+/g )
[10:03:44] <arschmitz> so are you reffering to ui-listview-inset not being a key? 
[10:03:49] <gabriel_schulhof> Yes.
[10:04:05] <arschmitz> the widget will never under any ( non deprecated ) circumstance add that class
[10:05:25] <arschmitz> gabriel_schulhof: so its just a utility class its not a part of the widget in the JS sense
[10:05:52] <gabriel_schulhof> OK.
[10:21:40] <gabriel_schulhof> arschmitz: I just realized something.
[10:22:03] <gabriel_schulhof> If you this._addClass() for an enhanced element just to get tracking, it'll remove the class when the widget is destroyed.
[10:22:07] <gabriel_schulhof> We don't want that.
[10:22:22] <gabriel_schulhof> When you destroy a pre-rendered widget, the DOM is left alone, classes 'n all.
[10:22:56] <gabriel_schulhof> ... at least that's been our approach so far.
[10:23:05] <gabriel_schulhof> The purpose of enhanced is though to avoid startup costs.
[10:23:27] <gabriel_schulhof> We could modify our stance to say that when you destroy the widget it will be destroyed as if it hadn't been pre-rendered in the first place.
[10:23:51] <arschmitz> right but generally if your destroying there is a good chance your going to re init it and now your paying the cost when you reinit of rendering
[10:24:23] <gabriel_schulhof> This sounds like doing _addClass() for just tracking is not the way to go.
[10:24:45] <arschmitz> gabriel_schulhof: even a dedicated add mechanisim would not help
[10:25:08] <arschmitz> because the problem isnt the adding its anything thats tracked is removed
[10:25:22] <gabriel_schulhof> arschmitz: What about having out own implementation of _removeClass()?
[10:25:26] <arschmitz> you need to be able to short circuit the destroy
[10:25:32] <gabriel_schulhof> Yeah.
[10:25:53] <gabriel_schulhof> We could set a flag in _destroy() which is read by our implementation of _removeClass(), short-circuiting it.
[10:25:58] <arschmitz> well one easy way 
[10:26:42] <arschmitz> in _destroy ... this.classesElementLookup = {}; lol
[10:27:05] <gabriel_schulhof> That's actually totally not bad.
[10:27:20] <arschmitz> that will 100% short circut the destory and maintain the old api
[10:27:22] <gabriel_schulhof> if ( this.options.enhanced === true ) { this.classesElementLookup = {}; }
[10:28:04] <arschmitz> yup
[10:28:18] <gabriel_schulhof> You know, we may want to add option enhanced to js/widget.js
[10:28:42] <arschmitz> execpt thats not going to exist in 1.5
[10:29:07] <arschmitz> because it will be part of the enhancer module
[10:29:20] <gabriel_schulhof> Yes, but now we have other stuff that should go in there.
[10:29:27] <gabriel_schulhof> Like this.
[10:29:32] <arschmitz> what else
[10:29:37] <arschmitz> and not all widgets support enhanced
[10:29:45] <arschmitz> and this would add it to widgets that dont actually support it then
[10:30:02] <gabriel_schulhof> I thought we were gonna do enhanced for all widgets by 1.5.0.
[10:30:10] <gabriel_schulhof> ... though I suppose it's gonna be hard for the UI ones.
[10:30:14] <arschmitz> our own but what about ui
[10:30:45] <gabriel_schulhof> I know our plate is full, and we probably won't have enhanced for UI's widgets, but we should.
[10:30:55] <gabriel_schulhof> After all, that's why UI now does _enhance(), right?
[10:31:00] <arschmitz> it might not ever be in all of them
[10:31:22] <arschmitz> thats not on master yet dont count your chicken before they hatch and its only in the widgets i wrote lol
[10:31:41] <gabriel_schulhof> arschmitz: OK. I thought it was now canon.
[10:31:48] <arschmitz> not yet
[10:31:52] <arschmitz> im working on that lol
[10:31:59] <gabriel_schulhof> What about an extension? widget.enhanced.js?
[10:32:07] <gabriel_schulhof> I guess it might be too small to be worth it.
[10:32:13] <arschmitz> i think so
[10:32:18] <gabriel_schulhof> ... unless we can distill some more stuff to go into it.
[10:32:47] <gabriel_schulhof> You know, one thing that's keeping us from truly foregoing copying code around is that any and all AMD modules we make will be visible in DB.
[10:33:12] <gabriel_schulhof> I wouldn't mind a three-line module if it means that the right way of doing stuff can now be written once and copied into 5 places.
[10:33:20] <arschmitz> thats an enhancement we could work on
[10:33:23] <gabriel_schulhof> Especially since it wouldn't add that much to code size.
[10:33:40] <arschmitz> but i still dont think i would ever want i three line module
[10:33:46] <arschmitz> i hate that sort of thing honestly
[10:34:10] <arschmitz> it makes it very hard to follow code if your not familiar with it 
[10:35:18] <gabriel_schulhof> Well, I guess that's why we have helpers.
[10:35:39] <gabriel_schulhof> We have a lot of common, non-trivial stuff in there.
[10:36:01] <arschmitz> thats not a place for widget extensions though
[10:36:23] <arschmitz> and we should attempt to minimize its use to avoid the dependency of the whole thing 
[10:36:49] <arschmitz> if anything i would break that down more lol
[10:37:15] <arschmitz> there is a big difference between a 3 line trivial thing like emptying an object in a conditional
[10:37:23] <arschmitz> and large non trivial functions 
[10:40:44] <gabriel_schulhof> Yeah. I guess three lines is pretty small. Still, it gets me thinking as to what else is the same in all enhanced-supporting widgets.
[10:41:31] <gabriel_schulhof> ... so we can distill more into what would be a worthy extension. Perhaps even appears-in-DB-worthy.
[15:13:36] <jqcommit> [13jquerymobile.com] 15jaspermdegroot created 06team (+1 new commit): 02http://git.io/xUZV
[15:13:37] <jqcommit> 13jquerymobile.com/06team 14a8faa75 15Jasper de Groot: Pages: First pass on new team section on About page
[16:48:45] <scott_gonzalez> jzaefferer: Are you actually online right now?
[17:24:47] <scott_gonzalez> `uiteam
[17:24:48] <b-ot> scott_gonzalez: arschmitz jzaefferer fnagel mikesherov rxaviers rxaviers_ scott_gonzalez tj_vantoll tj_vantoll1
[17:25:10] <scott_gonzalez> For http://bugs.jqueryui.com/ticket/11197, `$.fn.outerwidth.length === 1` or `parseFloat( $.fn.jquery ) < 1.8`?
[17:26:30] <scott_gonzalez> I kind of want to use the latter, and when http://bugs.jqueryui.com/ticket/9647 is implemented, the core-1.7-support module could use that check upfront and just bail.
[17:40:57] <arschmitz> scott_gonzalez: i would opt for the second
[17:41:10] <arschmitz> its an explicit check of what we actually want to know
[17:42:46] <scott_gonzalez> THAT'S 100% AGREEMENT, FOLKS! DECISION MADE!
[17:42:57] <scott_gonzalez> :-P
[17:43:20] <scott_gonzalez> I'll just send a PR for this, then people can weigh in there.
[17:43:40] <arschmitz> yeah makes sense 
[17:45:04] <mikesherov> Also, I hate relying on fn length property.
[17:45:17] <arschmitz> mikesherov: agreed
[17:48:46] <scott_gonzalez> OH NO
[17:49:12] <arschmitz> scott_gonzalez: that sounds bad
[17:49:15] <scott_gonzalez> In the back of my head I knew this would blow up on me.
[17:49:18] <scott_gonzalez> 1.11 < 1.8.
[17:49:39] <arschmitz> > 1.7 && < 1.8
[17:49:44] <scott_gonzalez> heh
[17:50:04] <scott_gonzalez> But what about jQuery 1.71.0?
[17:50:04] <arschmitz> we dont support < 1.7 so that should be fine
[17:50:05] <scott_gonzalez> :-P
[17:50:20] <arschmitz> lol
[17:50:26] <arschmitz> im hoping we never see 1.71
[17:50:58] <scott_gonzalez> Yeah, I'm pretty confident that if the universe exploded and we got to 1.71, we wouldn't have this check anymore.
[17:51:07] <scott_gonzalez> We would have long since dropped support for 1.7.x :-P
[17:51:15] <arschmitz> lol
[17:56:47] <scott_gonzalez> We could also just use $.fn.jquery.substring( 0, 4 ) === "1.7."
[17:58:53] <arschmitz> either way
[17:59:25] <arschmitz> avoids the || that way
[18:00:50] <scott_gonzalez> Hah, and it has to be (0, 3) === "1.7" because we didn't use semver back then.
[18:01:15] <arschmitz> lol
[18:02:14] <jquicommit> [13jquery-ui] 15scottgonzalez opened pull request #1458: Core: Drop feature detection for version check to support jQuery 1.7 (06master...06core-1-7) 02http://git.io/xTkv
[18:02:19] <scott_gonzalez> I'll go crawl under a rock now.
[20:53:38] <arschmitz> scott_gonzalez: dszw wss]
[23:03:19] <doesallmagic2> Project jQuery UI - git core build #836: STILL UNSTABLE in 2 min 18 sec: http://jenkins.jquery.com/job/jQuery%20UI%20-%20git%20core/836/
[23:36:32] <doesallmagic2> Project jQuery UI - 1.7.x core build #700: STILL UNSTABLE in 30 min: http://jenkins.jquery.com/job/jQuery%20UI%20-%201.7.x%20core/700/
