[00:57:19] <tada> hello
[09:03:26] <gseguin> arschmitz: you there?
[09:03:39] <gseguin> missing the zip file on the cdn?
[09:03:42] <gseguin> that's weird
[09:05:10] <gseguin> the rsync:release task should upload the zip file as well
[13:20:11] <agcolom> uGoMobi: just to let you know that this week's minutes are up
[13:37:39] <_|Nix|_> uGoMobi: Ping!
[13:37:42] <_|Nix|_> arschmitz: Ping!
[13:49:19] <uGoMobi_> agcolom: thanks for uploading the minutes
[13:49:26] <uGoMobi_> _|Nix|_: pong
[13:51:20] <_|Nix|_> uGoMobi_: Hey!
[13:51:33] <_|Nix|_> uGoMobi_: The textinput needs an option called "inset".
[13:51:42] <uGoMobi_> hey  _|Nix|_ 
[13:51:49] <_|Nix|_> uGoMobi_: Hey!
[13:51:56] <uGoMobi_> right
[13:52:00] <_|Nix|_> uGoMobi_: It was solved fairly badly for autocomplete in .1.3.x
[13:52:39] <uGoMobi_> the inset style?
[13:52:42] <_|Nix|_> uGoMobi_: The problem is, it is inset by default, so the classes are set up such that you don't need to add a ui-textinput-inset or any other class to get an inset text input.
[13:53:08] <_|Nix|_> uGoMobi_: Yeah. The textinput created by the listview.filter extension looks really bad on top of non-inset listviews.
[13:53:51] <_|Nix|_> uGoMobi_: I tried to create a "ui-textinput-outset" class that will be added when the inset option is turned off, but I'm not having any luck.
[13:54:18] <_|Nix|_> uGoMobi: So, basically, what I'm asking is this: Can we make an inset option work for textinput?
[13:54:46] <uGoMobi_> sorry disconnected
[13:54:56] <_|Nix|_> uGoMobi_: I tried to create a "ui-textinput-outset" class that will be added when the inset option is turned off, but I'm not having any luck.
[13:55:00] <_|Nix|_> uGoMobi: So, basically, what I'm asking is this: Can we make an inset option work for textinput?
[13:55:07] <uGoMobi_> _|Nix|_: yes
[13:55:22] <_|Nix|_> uGoMobi_: Good! Glad to hear it!
[13:55:42] <uGoMobi_> as long as it has -inset class
[13:55:47] <_|Nix|_> uGoMobi_: I can merge the JS portion that adds the option into master, and you can work the CSS magic.
[13:56:03] <_|Nix|_> uGoMobi_: OK, but then you have to turn the classes on their head.
[13:56:24] <_|Nix|_> uGoMobi_: Right now, the textinput-related classes create an inset look by default, without any -inset class.
[13:57:19] <_|Nix|_> uGoMobi_: We need to turn that on its head: The textinput-related classes do not create an inset look by default, but the -inset class is added by default, so the overall effect is the  same, except now you have the option of removing the -inset class to achieve a non-inset look.
[13:58:33] <_|Nix|_> uGoMobi_: I can make the JS toggle the class in response to the value of the "inset" option, but I'm afraid my CSS-foo is too weak to actually turn the classes on their head like that.
[14:01:19] <_|Nix|_> uGoMobi_: What's the last thing you've read?
[14:02:26] <uGoMobi_> _|Nix|_: sorry my 3G is pretty bad. be back home in 10 mins
[14:02:27] <uGoMobi_> i can read back them
[14:02:27] <uGoMobi_> then*
[14:03:12] <_|Nix|_> uGoMobi_: OK. That's cool! Have a safe trip home
[14:14:28] * uGoMobi is reading back
[14:16:50] <uGoMobi> _|Nix|_: did you read my convo with arschmitz from last night?
[14:17:41] <uGoMobi> _|Nix|_: we were thinking that best solution is to leave the old filter "extension" in the library for 1.4
[14:18:14] <uGoMobi> _|Nix|_: so we don't have to worry about backwards compatibility
[14:18:59] <uGoMobi> _|Nix|_: so with this inset CSS for textinput I only have to try to avoid conflicts between both old and new one
[14:22:15] <uGoMobi> _|Nix|_: when will the JS add the -inset class to textinput? Only when it used as filter for inset listview or when the developer sets option inset for the textinput?
[14:29:52] <_|Nix|_> uGoMobi: The latter - that is, when the developer adds options inset for the textinput.
[14:30:06] <_|Nix|_> uGoMobi: This means that any old textinput can be non-inset.
[14:30:11] <uGoMobi> _|Nix|_: ok, sounds good
[14:30:43] <uGoMobi> I can add the CSS on master tomorrow morning
[14:31:17] <_|Nix|_> uGoMobi: As for the backwards compat, I wrote an extension to filterable which copies the options from the listview/controlgroup/collapsible and applies them to the textinput, but only if the textinput is generated by the filterable.
[14:31:57] <uGoMobi> _|Nix|_: oh that's nice
[14:32:14] <_|Nix|_> uGoMobi: We can deprecate this extension as of 1.4 (so it will never have lived without being deprecated), and we can add an option to filterable to do what the extension does now.
[14:32:30] <_|Nix|_> uGoMobi: I was thinking an option like targetWidget: "listview" or something.
[14:32:52] <uGoMobi> _|Nix|_: right, or something with target ID
[14:33:12] <_|Nix|_> uGoMobi: Nono. This is about the widget type of the target, not the location.
[14:33:23] <_|Nix|_> uGoMobi: The location is clear: this.element.
[14:33:43] <_|Nix|_> uGoMobi: However, what is this.element, besides being a filterable? Is it also a listview? Is it also a controlgroup?
[14:33:51] <_|Nix|_> uGoMobi: Filterable does not have that information.
[14:33:56] <uGoMobi> _|Nix|_: but does the developer add the textinput or does the framework genereate it?
[14:33:57] <_|Nix|_> uGoMobi: So the dev would have to tell it.
[14:34:11] <_|Nix|_> uGoMobi: Both.
[14:34:21] <_|Nix|_> uGoMobi: ... options are available.
[14:34:23] <uGoMobi> ok
[14:35:08] <_|Nix|_> uGoMobi: filterable has an options called "inputSelector" which tells it where the input is.
[14:35:13] <_|Nix|_> s/options/option/
[14:35:37] <_|Nix|_> uGoMobi: If the option is not set, it will create an input and insert it before this.element.
[14:36:14] <uGoMobi> cool
[14:36:31] <_|Nix|_> uGoMobi: If we add the targetWidget option as well, then we can actually have this synchronization as part of the filterable instead of this deprecated extension.
[14:37:13] <_|Nix|_> uGoMobi: The deprecated extension would still be necessary though, because currently this synchronization is assumed without any work on the part of the dev.
[14:38:26] <uGoMobi> would also be nice if we can switch from data-filter="true" to data-role="filterable" already
[14:38:38] <_|Nix|_> uGoMobi: So, as of 1.5.0 we would remove this automatic synchronization and we would tell people that: "If you want the textinput to change together with your listview, then set the option targetWidget: "listview" on the filterable, and their style will be linked.
[14:39:03] <_|Nix|_> "
[14:39:11] <uGoMobi> yeah I like that solution
[14:40:20] <_|Nix|_> uGoMobi: OK. Good. Then I'll merge the "inset" option into master, and tomorrow morning you can unleash your CSS fury upon the widget.
[14:40:46] <uGoMobi> _|Nix|_: ok great
[14:40:50] <_|Nix|_> uGoMobi: Wait a second ...
[14:40:55] <_|Nix|_> data-role="filterable"
[14:41:04] <_|Nix|_> How will that mesh with data-role="listview"?
[14:41:16] <uGoMobi> right
[14:41:27] <_|Nix|_> Like, if you have a listview that you want to filter, you can't give it two data-role attributes ...
[14:41:28] <uGoMobi> two data-role attributes on same element
[14:41:36] <uGoMobi> :(
[14:41:38] <_|Nix|_> uGoMobi: That ain't gone work ...
[14:41:42] <uGoMobi> hmm
[14:42:00] <_|Nix|_> uGoMobi: I think data-filter="true" is nice. It's powerful.
[14:42:18] <uGoMobi> ok let's stick to that
[14:42:37] <_|Nix|_> uGoMobi: I actually added an <h2>Filter anything</h2> to the demo page :)
[14:42:43] <uGoMobi> was just thinking about that change where we are gonna make the widget name the default initSelector
[14:42:46] <_|Nix|_> uGoMobi: Makes it sound powerful.
[14:42:58] <uGoMobi> :)
[14:43:07] <_|Nix|_> uGoMobi: Yeah, but there have to be exceptions.
[14:43:17] <uGoMobi> yes, and that's possible
[14:43:27] <_|Nix|_> uGoMobi: The whole point of these widgets is that you can instantiate as many as you like on the same element.
[14:43:30] <uGoMobi> so this will be one exception for a good reason
[14:43:55] <_|Nix|_> uGoMobi: Yeah. Anytime you instantiate more than one widget on the same element, you can't go with data-role for both.
[14:44:09] <_|Nix|_> uGoMobi: Unless we start doing data-role="widget1,widget2,widget3" ...
[14:44:27] <uGoMobi> yeah... no go
[14:44:28] <uGoMobi> lol
[14:44:35] <_|Nix|_> uGoMobi: Well ... *shrug*
[14:44:51] <_|Nix|_> uGoMobi: ... but I guess the semantics are pretty ugly.
[14:45:14] <_|Nix|_> uGoMobi: Why limit yourself to a single attribute when you have a whole universe of possible data-* attributes at your disposal.
[14:45:17] <_|Nix|_> ?
[14:45:40] <_|Nix|_> So, OK. I'll get cracking with the merge.
[14:46:02] <uGoMobi> data-listview="true" data-filterable="true"
[14:46:10] <uGoMobi> nevermind
[14:46:27] <uGoMobi> yeah, let's fix that inset textinput
[15:03:21] <_|Nix|_> uGoMobi: If you're still there: What should be the exact name of the -inset class?
[15:03:34] <uGoMobi> _|Nix|_: I am here
[15:03:56] <uGoMobi> _|Nix|_: do we use input type="search" ?
[15:04:15] <_|Nix|_> uGoMobi: No, because that renders a native [X] in addition to our (X)
[15:04:28] <_|Nix|_> uGoMobi: We use <input data-type="search"></input>
[15:04:52] <_|Nix|_> uGoMobi: So, natively speaking, it's not a search input.
[15:04:56] <uGoMobi> _|Nix|_: on what platform? We kill the native clear button on IE10
[15:05:17] <_|Nix|_> uGoMobi: Well, Chrome 28 AFAICT.
[15:05:25] <uGoMobi> hmm
[15:06:14] <uGoMobi> _|Nix|_:  I don't see that http://view.jquerymobile.com/master/demos/widgets/textinputs/
[15:06:22] <uGoMobi> or do you mean Chrome for Android?
[15:06:42] <_|Nix|_> uGoMobi: $( "input:first" ).attr( "type", "search" );
[15:06:47] <_|Nix|_> uGoMobi: ... on any demo page.
[15:06:58] <_|Nix|_> uGoMobi: Then start typing into the search input at the top.
[15:07:11] <_|Nix|_> uGoMobi: You will have both the native clear and our own clear.
[15:07:18] <_|Nix|_> uGoMobi: Chrome 28 on desktop.
[15:08:18] <_|Nix|_> uGoMobi: I'll make it ui-input-inset, OK?
[15:08:32] <uGoMobi> oh I see it now
[15:08:49] <uGoMobi> _|Nix|_: ui-textinput-inset
[15:08:53] <_|Nix|_> uGoMobi: OK.
[15:09:54] <uGoMobi> _|Nix|_: wait a sec
[15:10:17] <uGoMobi> we don't use the ui-textinput class there
[15:10:29] <_|Nix|_> uGoMobi: No. We use ui-input-text and ui-input-search.
[15:10:52] <uGoMobi> confusing
[15:11:07] <_|Nix|_> uGoMobi: We have a lot of rules in css/structure/jquery.mobile.forms.textinput.css which list both as selectors.
[15:11:20] <uGoMobi> I know
[15:11:25] <_|Nix|_> uGoMobi: A lot of duplication, but I guess there are some which apply only to search.
[15:11:48] <uGoMobi> yeah, so the other solution was to add two classes to search
[15:12:22] <_|Nix|_> uGoMobi: So, should I do like, ui-(input|search)-inset, depending on whether it's a search input?
[15:12:30] <uGoMobi> not completely sure what's better for performance... bit more bytes in the CSS or adding two classes
[15:12:51] <_|Nix|_> uGoMobi: I think if you add two classes at the same time that's still only one reflow.
[15:12:57] <uGoMobi> _|Nix|_: nah, I think I can handle it with one class
[15:13:00] <uGoMobi> for both
[15:13:03] <_|Nix|_> uGoMobi: OK.
[15:13:21] <uGoMobi> but your suggestion was better
[15:13:27] <uGoMobi> ui-input-inset
[15:13:32] <_|Nix|_> uGoMobi: OK. Done.
[15:13:47] <uGoMobi> it's just that we also have an input buttn
[15:13:50] <uGoMobi> button*
[15:14:02] <_|Nix|_> uGoMobi: Yeah ... :/
[15:14:26] <uGoMobi> _|Nix|_: for now ui-input-inset is fine
[15:14:35] <_|Nix|_> uGoMobi: OK.
[15:14:45] <uGoMobi> we can always change tomorrow if we come up with something better
[15:15:10] <uGoMobi> _|Nix|_: I will check again if we really need the two classes ui-input-text|searcg
[15:15:13] <uGoMobi> search*
[15:15:51] <_|Nix|_> uGoMobi: OK.
[15:16:27] <uGoMobi> we now always add the class ui-input-has-clear while we didn't do that for search (because it always has a clear button)
[15:16:33] <uGoMobi> that might make a difference
[15:16:36] <jqmobilecommit> 01[13jquery-mobile01] 15gabrielschulhof pushed 1 new commit to 06master: 02http://git.io/0NaswA
[15:16:36] <jqmobilecommit> 13jquery-mobile/06master 14e537114 15Gabriel Schulhof: Textinput: Introduce option "inset".
[15:21:39] <jqmobilecommit> 01[13jquery-mobile01] 15gabrielschulhof pushed 6 new commits to 06filter-widget-review: 02http://git.io/IGKm8Q
[15:21:39] <jqmobilecommit> 13jquery-mobile/06filter-widget-review 141295756 15Gabriel Schulhof: Merge branch 'master' into filter-widget-review
[15:21:39] <jqmobilecommit> 13jquery-mobile/06filter-widget-review 144558480 15Gabriel Schulhof: Filterable: Fall back to this.element.children() if the fancy selector returns empty.
[15:21:39] <jqmobilecommit> 13jquery-mobile/06filter-widget-review 1443b5d8b 15Gabriel Schulhof: Demos: Filterable: Fix the wording and the examples.
[15:36:55] <travis-ci> [travis-ci] jquery/jquery-mobile#532 (master - e537114 : Gabriel Schulhof): The build was broken.
[15:36:55] <travis-ci> [travis-ci] Change view : https://github.com/jquery/jquery-mobile/compare/3441e7760045...e537114051ad
[15:36:55] <travis-ci> [travis-ci] Build details : http://travis-ci.org/jquery/jquery-mobile/builds/9333633
[16:13:27] <travis-ci> [travis-ci] jquery/jquery-mobile#532 (master - e537114 : Gabriel Schulhof): The build passed.
[16:13:27] <travis-ci> [travis-ci] Change view : https://github.com/jquery/jquery-mobile/compare/3441e7760045...e537114051ad
[16:13:27] <travis-ci> [travis-ci] Build details : http://travis-ci.org/jquery/jquery-mobile/builds/9333633
[18:09:52] <kborchers> scott_gonzalez: around?
[23:59:37] <jquicommit> [13jquery-ui] 15gentooboontoo opened pull request #1035: Fix floating detection when sortable is initially empty (#9443) (06master...06fix-9443-empty-sortable-floating-detection)  02http://git.io/wQfbgg
