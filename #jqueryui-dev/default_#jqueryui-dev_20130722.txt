[01:06:45] <_|Nix|_> uGoMobi: Ping!
[01:08:13] <uGoMobi> _|Nix|_: morning
[01:09:33] <_|Nix|_> uGoMobi: Hey! Any luck with ui-input-inset?
[01:10:42] <uGoMobi> _|Nix|_: Hey! I haven't started with that yet. Finishing flip switch CSS first
[01:11:11] <_|Nix|_> uGoMobi: Riiiight ... that thing ... man ... enough work, eh?
[01:11:30] <uGoMobi> _|Nix|_: yeah, for all of us
[01:11:51] <_|Nix|_> uGoMobi: The good news is that I realized that I have some feedback when the inset option is on - namely that the ui-corner-all class will be missing.
[01:12:32] <jquicommit> [13jquery-ui] 15gentooboontoo synchronize pull request #1035: Fix floating detection when sortable is initially empty (#9443) (06master...06fix-9443-empty-sortable-floating-detection)  02http://git.io/wQfbgg
[01:15:00] <_|Nix|_> uGoMobi: I wonder if we could solve this with CSS ... like .ui-listview.ui-body-b - .ui-input-search { /* swatch b */ } for theme, and .ui-listview.ui-listview-inset - .ui-input-search { /* make it inset */ }
[01:15:19] <uGoMobi> _|Nix|_: don't we still need that class on the input or its wrapper?
[01:15:20] <_|Nix|_> uGoMobi: There is such a thing as "-" in CSS, right?
[01:15:42] <_|Nix|_> uGoMobi: Yeah, unless you wanna go with - *
[01:16:41] <_|Nix|_> uGoMobi: Actually, you'd want - .ui-filterable
[01:17:09] <uGoMobi> _|Nix|_: "-" ? http://www.w3.org/TR/css3-selectors/#selectors
[01:17:14] <_|Nix|_> uGoMobi: Because there can be situations where the widget preceding the listview happens to be a textinput, but it has nothing to do with filtering.
[01:17:53] <_|Nix|_> uGoMobi: Bah! There is + but there is no - ?
[01:18:02] <_|Nix|_> uGoMobi: That sucks!
[01:18:05] <uGoMobi> there isn't
[01:18:16] <_|Nix|_> uGoMobi: Oh, wait ... I meant ~
[01:18:22] <uGoMobi> right
[01:18:26] <_|Nix|_> No, wait, I didn't.
[01:18:46] <uGoMobi> but that's a sibling selector
[01:19:03] <_|Nix|_> uGoMobi: I want "an F element immediately followed by an E element"
[01:19:09] <_|Nix|_> uGoMobi: ... and that does not exist :(
[01:19:17] <uGoMobi> I wish that was possible
[01:19:26] <uGoMobi> CSS only works one way
[01:19:28] <uGoMobi> >
[01:19:55] <_|Nix|_> uGoMobi: I guess that's because the markup is supposed to be streamable.
[01:20:06] <_|Nix|_> uGoMobi: So no backtracking.
[01:20:07] <uGoMobi> _|Nix|_: remember that we were looking into ui-first-child ui-last-child with CSS only?
[01:20:25] <uGoMobi> same problem
[01:20:49] <_|Nix|_> uGoMobi: Right.
[01:20:57] <uGoMobi> that was because of hidden elements
[01:21:31] <_|Nix|_> Yes, I remember ... there's no such thing as :last-visible-child.
[01:21:39] <uGoMobi> yup
[01:22:11] <_|Nix|_> uGoMobi: Hmmm ... what if the filterable were placed after the listview in the markup, but it would appear before it?
[01:22:20] <_|Nix|_> uGoMobi: 
[01:22:23] <_|Nix|_> Sorry!
[01:22:32] <uGoMobi> _|Nix|_: yeah I was thinking about that too yesterday
[01:22:42] <uGoMobi> but not sure about semantics
[01:23:36] <_|Nix|_> uGoMobi: I think whatever we sacrifice in semantics will be worth it if we can synchronize styling via CSS.
[01:23:58] <_|Nix|_> uGoMobi: Besides, there are UIs where the filter input is at the bottom.
[01:24:09] <_|Nix|_> Look at IRC :)
[01:24:46] <uGoMobi> _|Nix|_: other thing I have been thinking about is adding the background of the inset textinput to the top of the listview
[01:25:04] <uGoMobi> just place it behind the textinput with CSS
[01:25:47] <uGoMobi> and keep the textinput itself the same for both inset and non-inset
[01:26:12] <uGoMobi> but have to see how that will look because we won't adjust left/right margin of the textinput
[01:26:40] <_|Nix|_> Yeah, the margins are the point where I gave up trying to implement the CSS for non-inset :)
[01:26:57] <_|Nix|_> So, you must carry on from here. On, to the Forbidden Mountain!
[01:27:02] <_|Nix|_> :)
[01:27:03] <uGoMobi> lol
[01:27:27] <_|Nix|_> uGoMobi: I watch waaay too many cartoons with my daughter. DAMN YOU, YOUTUBE!
[01:27:37] <uGoMobi> hahha
[01:28:14] <uGoMobi> _|Nix|_: BTW - I see we have a little corner styling issue with non-inset collapsibles http://view.jquerymobile.com/master/demos/widgets/accordions/
[01:29:15] <uGoMobi> I think the JS is adding ui-corner-all to non-inset collapsibles
[01:29:40] <_|Nix|_> uGoMobi: I see it.
[01:29:51] <_|Nix|_> uGoMobi: I wonder if collapsible-widget-review fixes that.
[01:30:08] <uGoMobi> _|Nix|_: ah I thought you merged that one
[01:30:21] <uGoMobi> _|Nix|_: let me check the branch
[01:30:48] <_|Nix|_> uGoMobi: Branch looks OK, but I wonder what happens if I merge master into it.
[01:31:18] <uGoMobi> _|Nix|_: yeah, branch looks good... something to check after the merge
[01:31:33] <_|Nix|_> uGoMobi: Actually, on master it looks like there's a problem with the vertical borders of inset listviews.
[01:33:12] <uGoMobi> _|Nix|_: I see what you mean
[01:34:17] <uGoMobi> _|Nix|_: I see it in the review branch too
[01:34:32] <_|Nix|_> Hmmm ...
[01:34:42] <_|Nix|_> Weird, I didn't see it.
[01:34:47] <uGoMobi> _|Nix|_: I think this is a CSS issue
[01:35:22] <uGoMobi> _|Nix|_: are we talking about the same? http://view.jquerymobile.com/collapsible-widget-review/demos/widgets/collapsibles/ the "Expanded" demo
[01:36:00] <uGoMobi> _|Nix|_: wait, I see the problem already
[01:36:03] <_|Nix|_> uGoMobi: No, sorry.
[01:36:24] <uGoMobi> _|Nix|_: that demo uses theme D
[01:36:32] <uGoMobi> D swatch is gone
[01:36:38] <uGoMobi> _|Nix|_: what did you mean?
[01:36:40] <_|Nix|_> uGoMobi: I was looking at the first accordion in http://view.jquerymobile.com/collapsible-widget-review/demos/widgets/accordions/
[01:36:57] <_|Nix|_> uGoMobi: On master, it has no vertical borders, but on the branch it does.
[01:37:33] <_|Nix|_> uGoMobi: On master, it looks like it's not inset, but has corners.
[01:37:54] <uGoMobi> _|Nix|_: master is wrong
[01:37:58] <_|Nix|_> uGoMobi: Yep.
[01:38:23] <uGoMobi> _|Nix|_: we don't set non-inset for that demo and inset is the default
[01:39:07] <_|Nix|_> Right, and yet it is rendered as if inset was false - except for the corners.
[01:40:06] <uGoMobi> yeah, hope everything will look as in your review branch after the merge
[01:40:26] <uGoMobi> I will try to replace theme="d" in the demos as much as possible before alpha release
[01:41:23] <_|Nix|_> uGoMobi: It should, because my branch is up-to-date wrt. master, except for last night's textinput change.
[01:41:36] <_|Nix|_> uGoMobi: ... which should have nothing to do with this.
[01:42:13] <uGoMobi> _|Nix|_: right, I am pretty sure it will be fine after the merge too
[02:55:30] <_|Nix|_> uGoMobi: The filterable currently handles listview dividers specially in that it hides them if all their items are hidden. This should be handled via listview's refresh() instead.
[02:56:12] <_|Nix|_> uGoMobi: Of course this means that filterable "knows" that it's filtering a listview and not a controlgroup or a collapsibleSet.
[02:56:26] <_|Nix|_> uGoMobi: ... which is bad.
[02:57:00] <_|Nix|_> uGoMobi: I think the special handling of listview dividers should also be deprecated as of 1.4.0.
[02:57:01] <uGoMobi> _|Nix|_: why should it be handled via refresh()
[02:57:03] <uGoMobi> ?
[02:57:16] <_|Nix|_> uGoMobi: Because the filterable should not perform widget-specific operations.
[02:57:26] <_|Nix|_> uGoMobi: collapsibles and controlgroups have no concept of "dividers".
[02:57:43] <_|Nix|_> uGoMobi: So, ideally, filterable applies ui-screen-hidden and calls refresh.
[02:57:50] <uGoMobi> _|Nix|_: ok I see what you mean
[02:58:01] <_|Nix|_> uGoMobi: Then, the widget does it's widget-specific handling of ui-screen-hidden.
[02:58:04] <uGoMobi> _|Nix|_: we are talking about autodividers here?
[02:58:07] <_|Nix|_> s/it's/its/
[02:58:15] <uGoMobi> or any divider?
[02:58:16] <_|Nix|_> uGoMobi: Not necessarily.
[02:58:21] <_|Nix|_> uGoMobi: Yeah, any dividers.
[02:58:46] <_|Nix|_> uGoMobi: the code for showing/hiding dividers should be in listview, not filterable, because filterable has nothing to do with listview (anymore).
[02:58:47] <uGoMobi> so it checks if there is any list item between the divider and the next divider or end of list?
[02:59:03] <_|Nix|_> uGoMobi: Currently, filterable does that, but IINM so does listview.
[02:59:23] <_|Nix|_> uGoMobi: Or, if listview doesn't, it should, and during refresh().
[02:59:41] <_|Nix|_> uGoMobi: ... and filterable should not.
[02:59:44] <uGoMobi> _|Nix|_: I agree
[03:00:02] <_|Nix|_> uGoMobi: Anyway ... this is also part of the listview widget review.
[03:00:18] <uGoMobi> _|Nix|_: again it would be nice if "-" would work in CSS
[03:00:32] <_|Nix|_> uGoMobi: Agreed, but alas ...
[03:01:14] <_|Nix|_> Well, you /might/ be able to use + here, but that may hide all remaining items in the list :)
[03:02:19] <_|Nix|_> ... or rather ~
[03:02:46] <_|Nix|_> Like .ui-listview-divider.ui-screen-hidden ~ li
[03:02:59] <_|Nix|_> ... but that would hide /all/ following LI.
[03:03:09] <uGoMobi> yup
[03:03:17] <_|Nix|_> There's no way to tell it to stop hiding when it runs into another .ui-listview-divider
[03:04:57] <uGoMobi> ui-li-divider + li.ui-screen-hidden + ui-li-divider
[03:04:57] <_|Nix|_> Anyway, this code should be in listview.
[03:06:31] <uGoMobi> but then we select the wrong divider
[03:06:33] <uGoMobi> so nevermind
[03:06:34] <uGoMobi> lol
[03:06:55] <uGoMobi> yes, we have to move that logic
[03:09:13] <_|Nix|_> I checked, and listview refresh does not currently hide the divider if all its children are invisible.
[03:09:36] <_|Nix|_> Not sure if this should be default behaviour or an option.
[03:09:55] <_|Nix|_> ... because there are instances where you'd want the divider to stick around.
[03:09:56] <b-ot> _|Nix|_: wantthedividertostickaround.com - 9â˜º AVAILABLE
[03:10:07] <_|Nix|_> This is really annoyinh.
[03:10:22] <uGoMobi> :)
[03:10:24] <_|Nix|_> The bot reacts to verbal contractions of "should" and "would" ...
[03:10:55] <_|Nix|_> So, anyway ....
[03:11:15] <_|Nix|_> In fact, I'm not sure that this auto-hide dividers behaviour of filterable is necessarily desirable.
[03:11:27] <uGoMobi> _|Nix|_: I don't feel like adding an option for this
[03:11:48] <_|Nix|_> uGoMobi: Then we should pick a default.
[03:12:02] <uGoMobi> _|Nix|_: yes, thinking about that
[03:12:02] <_|Nix|_> uGoMobi: Currently listview refresh does one thing, and filterable does the opposite.
[03:12:14] <uGoMobi> that's not good
[03:12:52] <uGoMobi> I am thinking about autodividers
[03:13:20] <uGoMobi> there it makes sense to hide dividers if all the list items are hidden
[03:13:22] <_|Nix|_> uGoMobi: What about them? Do they remove themselves if all their "children" are hidden?
[03:13:32] <uGoMobi> I don't think so
[03:13:35] <uGoMobi> but not sure
[03:13:42] <uGoMobi> I think it should
[03:14:22] <uGoMobi> then non-autodividers
[03:15:02] <_|Nix|_> uGoMobi: TBH this sounds more and more like an option or an extension.
[03:15:23] <_|Nix|_> uGoMobi: We can implement the option as another listview extension.
[03:15:43] <_|Nix|_> uGoMobi: We have auto-generate dividers, and now we will have auto-hide dividers.
[03:16:00] <_|Nix|_> uGoMobi: That's probably the best way to do it.
[03:16:16] <_|Nix|_> uGoMobi: ... and then filterable need have no special code other than calling refresh.
[03:17:10] <_|Nix|_> uGoMobi: ... and the dev can turn on auto-hide dividers by adding the extension and turning it on via some data-* options.
[03:17:15] <_|Nix|_> s/options/option/
[03:17:30] <_|Nix|_> I've typed the word "options" waaay too often recently.
[03:17:48] <_|Nix|_> I can't even type "often" anymore - it comes out as "options" ... *shake head*
[03:17:57] <uGoMobi> :)
[03:20:12] <uGoMobi> _|Nix|_: okay let's add this in an extension
[03:20:39] <_|Nix|_> OK ...
[03:20:39] <uGoMobi> it won't be good if we hide them when using auto-dividers but not if you add your own dividers
[03:21:28] <_|Nix|_> uGoMobi: I agree. The method you use for creating dividers (manual or auto) is orthogonal to whether you choose to hide them when all their "children" are hidden.
[03:21:46] <uGoMobi> right
[03:22:02] <_|Nix|_> OK. One extension coming up! Would you like fries with that?
[03:22:14] <uGoMobi> lol
[03:22:22] <uGoMobi> no thanks
[03:22:29] <uGoMobi> coffee would be nice though
[03:22:31] <uGoMobi> :)
[03:22:32] <_|Nix|_> :)
[03:23:25] <_|Nix|_> uGoMobi: Hmmm ... do we have a listview review branch? I should probably put it there ...
[03:23:42] <uGoMobi> _|Nix|_: arschmitz has been working on listviews a bit
[03:23:51] <_|Nix|_> Oh no - listview review is scheduled for 1.5.0 ...
[03:23:51] <uGoMobi> _|Nix|_: but I don't think he pushed a branch
[03:24:02] <_|Nix|_> uGoMobi: I guess he hasn't gotten around to it.
[03:24:29] <uGoMobi> yes, we discussed last Thursday that we move listview review to 1.5
[03:24:34] <_|Nix|_> Man ... listview extensions aren't even proper extensions ...
[03:24:52] <uGoMobi> _|Nix|_: yes, one of the reason there is a filterable widget now
[03:25:00] <uGoMobi> to replace the filter "extension"
[03:25:12] <_|Nix|_> uGoMobi: Wait a sec! I'm wrong. Autodividers is a proper extension now.
[03:25:13] <uGoMobi> autodividers is up for 1.5
[03:25:23] <uGoMobi> oh it is? great!
[03:25:33] <_|Nix|_> uGoMobi: ... and since filter is gone, there are no other extensions.
[03:25:46] <_|Nix|_> uGoMobi: Thus, introducing auto-hide dividers as a proper extension might be OK.
[03:27:12] <uGoMobi> _|Nix|_: what widget will have to hideDividers option? listview or filterable?
[03:27:17] <_|Nix|_> uGoMobi: There's still a snag. Calling refresh() on the widget requires knowing what widget it is :( This is what the filterable.backcompat.js extension does.
[03:27:19] <uGoMobi> s/to/the
[03:27:24] <_|Nix|_> uGoMobi: listview.
[03:27:27] <uGoMobi> ok
[03:27:52] <_|Nix|_> uGoMobi: However, this extension doesn't currently handle refresh().
[03:28:01] <_|Nix|_> uGoMobi: I guess I'll have to write more deprecated code :(
[03:28:54] <uGoMobi> _|Nix|_: is it bad to use an event for this?
[03:29:12] <_|Nix|_> uGoMobi: Not a bad idea.
[03:29:33] <_|Nix|_> uGoMobi: We already have filterablebeforefilter.
[03:29:46] <uGoMobi> nice name lol
[03:30:11] <_|Nix|_> uGoMobi: Well, it's "beforefilter", but it's namespaced by virtue of being triggered via _trigger.
[03:30:22] <uGoMobi> yeah
[03:30:40] <_|Nix|_> uGoMobi: So, if you attach to it via .filterable( { beforefilter: function() {} } ); you don't see the namespace.
[03:31:17] <_|Nix|_> uGoMobi: Anyway, an afterfilter might allow one to refresh the listview/controlgroup/collapsible/whatever.
[03:32:03] <_|Nix|_> uGoMobi: Come to think of it, filterable also adds first and last classes. This is also bad. The widget should be doing that.
[03:32:12] <uGoMobi> _|Nix|_: just thinking out loud here... if we use an event, do we need an option? can't we make the hide-divider code in the extension listen to the signal and don't call the refresh method, just hide the dividers?
[03:32:40] <uGoMobi> ah, if we need to refresh corners to we probably should just call refresh
[03:32:44] <_|Nix|_> uGoMobi: You also have to keep in mind addFirstLastClasses.
[03:32:49] <_|Nix|_> Yep.
[03:32:52] <uGoMobi> yup
[03:33:11] <_|Nix|_> *sigh* ... spaghetti design ...
[03:33:26] <uGoMobi> mama mia
[03:33:29] <_|Nix|_> :)
[03:34:04] <_|Nix|_> The fact is that filterable has waaay too much special handling in ti.
[03:34:07] <_|Nix|_> s/ti/it/
[03:34:44] <uGoMobi> basically it should just tell the widget what to hide
[03:34:53] <uGoMobi> anything else should be done by the widget
[03:35:11] <_|Nix|_> uGoMobi: Yep.
[03:35:30] <_|Nix|_> It should iterate over this.element.children() and apply ui-screen-hidden to some of them.
[03:35:46] <_|Nix|_> No corners, no dividers, nothing.
[03:35:56] <uGoMobi> yes, so not "tell" the widget but add that class
[03:37:10] <_|Nix|_> uGoMobi: OK, but somebody has to call refresh() to make sure that any widget-specific effects (such as corners/dividers) are handled gracefully.
[03:37:41] <uGoMobi> _|Nix|_: yeah
[03:38:10] <uGoMobi> _|Nix|_: or make widgets that can be filtered listen to the event
[03:38:34] <_|Nix|_> uGoMobi: If we go with afterfilter, we could write an afterfilter handler into listview/collapsible/controlgroup/select like this: this._on( this.element, { "filterableafterfilter": "refresh" } );
[03:39:24] <uGoMobi> _|Nix|_: I like that
[03:39:58] <_|Nix|_> *sigh* ... OK ... I'll hack filterable some more.
[03:41:47] <_|Nix|_> uGoMobi: Another problem. The list of items to filter is sometimes not the direct child of this.element.
[03:42:01] <_|Nix|_> uGoMobi: For example controlgroup has a wrapper around its children.
[03:42:09] <uGoMobi> _|Nix|_: was just looking at this line https://github.com/jquery/jquery-mobile/blob/filter-widget-review/js/widgets/filterable.js#L60
[03:42:24] <_|Nix|_> uGoMobi: Yeah.
[03:42:26] <_|Nix|_> That.
[03:42:40] <_|Nix|_> Another place where special handling takes place.
[03:42:43] <uGoMobi> _|Nix|_: have also seen a ticket about slow filter
[03:43:19] <uGoMobi> _|Nix|_: do we only look for filterable items during init?
[03:43:33] <_|Nix|_> uGoMobi: Yes, unless we make it an option.
[03:44:27] <_|Nix|_> uGoMobi: I guess people can write extensions to replace _getFilterableItems ...
[03:44:36] <_|Nix|_> uGoMobi: But it would be easier to have an options.
[03:44:44] <_|Nix|_> Gaaaah! An option! *sigh*
[03:44:53] <uGoMobi> yeah :s
[03:45:05] <_|Nix|_> This would be an option on filterable.
[03:45:28] <_|Nix|_> uGoMobi: It makes sense: "Where is my input?" Answer: option inputSelector
[03:45:52] <_|Nix|_> uGoMobi: "Where are my items?" Answer: option itemSelector
[03:46:44] <_|Nix|_> uGoMobi: The selector at line 60 might even be the default value for that option.
[03:46:49] <scott_gonzalez> Please don't use the word selector in option names.
[03:47:11] <uGoMobi> morning scott_gonzalez 
[03:47:17] <_|Nix|_> scott_gonzalez: Then what should I use if the value of the option is used as a selector? "sel"?
[03:47:24] <_|Nix|_> scott_gonzalez: expression?
[03:47:32] <scott_gonzalez> Nothing. Describe what it's selecting.
[03:47:36] <scott_gonzalez> items
[03:47:37] <scott_gonzalez> input
[03:47:40] <_|Nix|_> scott_gonzalez: OK.
[03:47:46] <scott_gonzalez> It should accept more than just a selector.
[03:48:00] <scott_gonzalez> At least for the input.
[03:48:08] <_|Nix|_> scott_gonzalez: OK. Understood.
[03:48:28] <scott_gonzalez> For the items, a selector is probably the only thing that makes sense.
[03:48:53] <scott_gonzalez> But the input should accept a selector, and element, a jQuery object.
[03:51:14] <_|Nix|_> scott_gonzalez: Got any exmaples in UI of such triple-typed options/variables? I'd like to see the canonical method of unifying an element/jQuery object/string.
[03:53:51] <scott_gonzalez> http://bugs.jqueryui.com/ticket/4957 references a bunch of options
[03:54:21] <_|Nix|_> scott_gonzalez: Thanks!
[03:55:20] <scott_gonzalez> Here's a version that was written recently: https://github.com/jquery/jquery-ui/blob/master/ui/jquery.ui.dialog.js#L128
[03:56:09] <scott_gonzalez> `this.document.find` may be `this.element.find` depending on the widget and the option.
[03:57:28] <_|Nix|_> scott_gonzalez: Thanks!
[03:58:51] <scott_gonzalez> no problem
[04:00:34] <_|Nix|_> scott_gonzalez: Well, I guess in this case I could simply try { return $( theOptionValue ); } catch( err ) { return $(); } since the jQuery constructor handles all three ...
[04:01:12] <scott_gonzalez> Never try {} if you can avoid it.
[04:01:47] <scott_gonzalez> Also, you should definitely not try in that block of code.
[04:01:58] <scott_gonzalez> The only way to get an error from that is an invalid selector.
[04:02:03] <scott_gonzalez> And hiding that error would be terrible.
[04:02:19] <scott_gonzalez> But anyway, you can't use $( selector ) in a widget.
[04:02:32] <scott_gonzalez> The closest is this.document.find( selector )
[04:03:37] <_|Nix|_> OK, then I definitely need to single out strings, because in the other two cases, I already have my element.
[04:25:00] <uGoMobi> _|Nix|_: arschmitz : interesting, if you have a var like this... test = $( "<span class='test'>" ) the element won't be created on IE8, however when you set  test = $( "<span class='test'></span>" ) it works
[04:25:43] <uGoMobi> arschmitz: that was the reason why I didn't see the button in the new flipswitch on IE8... we use var on = $( "<span tabindex='1'>" )
[04:28:06] <_|Nix|_> uGoMobi: OK, so tags need to be closed on IE8? Wow!
[04:28:24] <uGoMobi> _|Nix|_: yeah, looks like it
[04:29:35] <uGoMobi> _|Nix|_: that is only when it has an attribute
[04:30:56] <scott_gonzalez> If you're writing anything more than just an element name, you should be using valid HTML.
[04:31:06] <scott_gonzalez> So for a <span> that would indeed require the </span>
[04:31:53] <scott_gonzalez> I was not aware of this issue in IE8 though, so that's interesting.
[04:33:47] <_|Nix|_> I wonder if $( "<span>" ) works in IE8 ...
[04:34:01] <_|Nix|_> That is simply an element name, and yet there is no closing tag.
[04:34:40] <uGoMobi> _|Nix|_: it does work on IE8
[04:35:37] <_|Nix|_> *sigh* ... special handling FTW!
[04:36:48] <scott_gonzalez> This is documented behavior.
[04:37:03] <uGoMobi> makes sense that it should be valid HTML, never saw this mentioned though in the discussions about what is the fastest way to do this
[04:38:14] <scott_gonzalez> "To ensure cross-platform compatibility, the snippet must be well-formed. Tags that can contain other elements should be paired with a closing tag:"
[04:46:31] <_|Nix|_> Can we assume that a longer filter string will always result in fewer results than a shorter filter string?
[04:47:23] <_|Nix|_> That is, if you search for "a" and you get 29 results, then if you then search for "ab", it is safe to search only among the results not filtered?
[04:47:46] <_|Nix|_> ... no matter what your filter callback?
[04:47:59] <_|Nix|_> I'm thinking no, but this situation is the most common.
[04:59:54] <uGoMobi> _|Nix|_: I am thinking yes
[05:00:06] <uGoMobi> _|Nix|_: unless you don't filter with one string
[05:00:18] <uGoMobi> _|Nix|_: I mean, if it can be OR instead of AND
[05:03:05] <_|Nix|_> uGoMobi: The filterCallback can be anything!
[05:03:45] <uGoMobi> _|Nix|_: right, than you can't assume fewer results
[05:04:02] <uGoMobi> s/than/then
[05:04:13] <_|Nix|_> uGoMobi: *sigh* ... *nod* ...
[05:18:56] <jqmobilecommit> 01[13jquery-mobile01] 15uGoMobi pushed 8 new commits to 06flipswitch: 02http://git.io/GHL14A
[05:18:56] <jqmobilecommit> 13jquery-mobile/06flipswitch 14915edb5 15Jasper de Groot: Merge branch 'master' into flipswitch
[05:18:56] <jqmobilecommit> 13jquery-mobile/06flipswitch 14d0e94b4 15Jasper de Groot: Demos: Separate demo page for new flipswitch widget.
[05:18:56] <jqmobilecommit> 13jquery-mobile/06flipswitch 14247f6f4 15Jasper de Groot: Flipswitch: Added missing closing tag. This is required according specs and fixes IE8 where the "On" button wasn't created.
[05:20:00] <arschmitz> Morning uGoMobi: _|Nix|_: scott_gonzalez:
[05:20:02] <uGoMobi> _|Nix|_: should I work on inset textinput in filter-widget-review branch or on master?
[05:20:06] <uGoMobi> morning arschmitz 
[05:21:27] <uGoMobi> arschmitz: flipswitch is done
[05:21:34] <arschmitz> very awesome!
[05:22:10] <uGoMobi> arschmitz: we might wanna test it on a few more platforms/browsers
[05:24:31] <_|Nix|_> uGoMobi: On master.
[05:24:38] <_|Nix|_> uGoMobi: The option appears there.
[05:24:44] <uGoMobi> _|Nix|_: ok thanks
[05:25:18] <arschmitz> uGoMobi: cool i can bust out all the devices
[05:25:47] <arschmitz> uGoMobi: got the new autoinit working
[05:26:01] <uGoMobi> arschmitz: I just noticed that Opera doesn't position the button very nice :(
[05:26:11] <arschmitz> Opera!!!!!
[05:26:14] <uGoMobi> arschmitz: might have to do with em values and rounding
[05:26:24] <arschmitz> iv never been a fan of opera lol
[05:26:58] <uGoMobi> our SVG icons don't work on Opera either, but Filament already made changes to Grunticon loader script for this
[05:27:22] <arschmitz> uGoMobi: ended up refactoring / reviewing page while i was doing it
[05:27:33] <arschmitz> uGoMobi: hmm have a link to updated test?
[05:27:38] <uGoMobi> arschmitz: great that you've got new autoinit working !
[05:28:02] <arschmitz> uGoMobi: still have a little work todo a lot of changes to make
[05:28:42] <arschmitz> _|Nix|_: this means colapsible set / controlgroup / customselect need to call their required widgets internally now
[05:29:03] <arschmitz> _|Nix|_: did you do this while reviewing these i know we talked about it 
[05:29:22] <uGoMobi> arschmitz: http://view.jquerymobile.com/flipswitch/demos/widgets/flipswitch/index.php I created separate demo page for new flipswitch because slider flip switch will still be there in 1.4
[05:29:47] <arschmitz> uGoMobi: cool yeah i just did that while i was working on css to make them identical
[05:30:38] <uGoMobi> arschmitz: good point, I actually didn't compare with old one when I was done but no problem to make simple height or width change
[05:31:10] <arschmitz> yeah and really they dont NEED to be identical
[05:31:59] <uGoMobi> true, and now I look at them they look pretty much the same
[05:32:44] <uGoMobi> talking about 1 or 2 px diff only
[05:33:20] <arschmitz> cool
[05:33:39] <arschmitz> uGoMobi: the new autoinit has a nice feture for external widgets too
[05:33:54] <uGoMobi> arschmitz: tell me
[05:34:14] <arschmitz> you can easily call $.mobile.enhanceWithin( "body" ); on document ready
[05:34:27] <arschmitz> and it will enhance all your external widgets
[05:34:35] <arschmitz> so you dont need to explicitly call each one
[05:36:03] <uGoMobi> arschmitz: yeah, that's nice!
[05:37:13] <uGoMobi> arschmitz: any difference between that and calling each widget from performance point of view?
[05:37:38] <arschmitz> yeah 
[05:37:42] <arschmitz> but rule of thumb
[05:37:55] <arschmitz> if its a convience method its going to be slower
[05:39:26] <uGoMobi> yeah true
[05:49:06] <scott_gonzalez> gnarf jzaefferer rxaviers kborchers rworth: Anyone know if anything is still relying on ui-dev.jquery.com for anything?
[05:49:12] <scott_gonzalez> I can't think of anything.
[05:49:16] <scott_gonzalez> And I'd like to kill it.
[05:49:34] <kborchers> not off the top of my head, no
[05:49:36] <arschmitz> uGoMobi: Wow i just found a video on youtube comparing jqMobi and jquery mobile that totally lies!
[05:49:55] <scott_gonzalez> It's still running a cron to copy pages from docs.jquery.com :-P
[05:50:30] <rxaviers> DB is not for sure
[05:50:52] <uGoMobi> arschmitz: who posted it? those bastards from Intel? ;-)
[05:51:57] <uGoMobi> _|Nix|_ remove that YouTube video!
[05:52:05] <arschmitz> uGoMobi: http://www.appmobi.com/
[05:52:30] <arschmitz> they claim we use a javascript scroller that blocks all js execution
[05:52:53] <arschmitz> and that THEY use native scrolling
[05:53:13] <jqmobilecommit> 01[13jquery-mobile01] 15uGoMobi pushed 1 new commit to 06flipswitch: 02http://git.io/UFRiVQ
[05:53:13] <jqmobilecommit> 13jquery-mobile/06flipswitch 140bc9ba7 15Jasper de Groot: Flipswitch: Fixes the width and height of a flip switch in a field container.
[05:54:15] <arschmitz> and they are clearly rigging the tests because they have canvas animations and they are totally different on the different libraries but neither even do anything with that
[05:58:48] <uGoMobi> arschmitz: I am watching the video now
[06:05:51] <uGoMobi> arschmitz: disable doesn't work in the new flipswitch, can you make the JS add class ui-state-disabled to the div?
[06:06:01] <arschmitz> yup
[06:06:09] <arschmitz> are all your changes push?
[06:06:29] <uGoMobi> arschmitz: yes
[06:09:02] <_|Nix|_> arschmitz: I haven't touched autoinit during my review. I thought we were doing this after 1.4.0 ...
[06:09:17] <arschmitz> _|Nix|_: no after alpha
[06:09:21] <arschmitz> not after 1.4
[06:09:24] <_|Nix|_> Oh, OK.
[06:09:35] <arschmitz> but since we pushed it back i did it this weekend
[06:09:42] <_|Nix|_> arschmitz: Cool!
[06:09:50] <_|Nix|_> agcolom: I'm snowed in with filterable.
[06:10:03] <arschmitz> but i didnt want to mess with those since you had been working on them and had branches for them
[06:13:22] <jqmobilecommit> 01[13jquery-mobile01] 15uGoMobi pushed 1 new commit to 06flipswitch: 02http://git.io/six3ZQ
[06:13:22] <jqmobilecommit> 13jquery-mobile/06flipswitch 14c13d6c9 15Jasper de Groot: Flipswitch: Speed up the animation.
[06:15:40] <uGoMobi> arschmitz: I guess we should add option mini to flipswitch as well
[06:15:51] <arschmitz> ok will do it right now
[06:15:56] <uGoMobi> arschmitz: just a matter of adding class ui-mini to the div
[06:16:06] <uGoMobi> CSS works already
[06:16:53] <arschmitz> yup
[06:17:40] <uGoMobi> thinking if we should already deprecate option mini for all widgets in 1.4
[06:17:47] <uGoMobi> so we can remove it in 1.5
[06:32:50] <arschmitz> uGoMobi: added those options
[06:32:59] <arschmitz> and also 2 new examples to demo page
[06:33:01] <uGoMobi> arschmitz: great, thanks
[06:33:23] <arschmitz> for initial state checked and initial state second option selected
[06:33:30] <arschmitz> uGoMobi: what did you think of that video?
[06:33:44] <uGoMobi> arschmitz: do you think we can use same unit tests as slider widget flip switch?
[06:33:57] <arschmitz> no 
[06:34:22] <arschmitz> ill write some up i just wanted to let you finish css incase any classes / assumptions changed
[06:35:22] <uGoMobi> yeah makes sense
[06:35:46] <uGoMobi> arschmitz: re: that video... you're right that they say things that are not true
[06:36:06] <arschmitz> and did you notice how crazy didfferent the canvas animation was
[06:36:17] <arschmitz> which makes no sense at all thats only reliant on the device
[06:37:07] <uGoMobi> but then you can still wonder why their list scrolls faster
[06:38:03] <arschmitz> on android it didnt and its hard to put too much thought into becasue who knows what they had going on since they lied and had the canvas stuff rigged
[06:38:32] <uGoMobi> yeah, maybe tests weren't exactly the same or not same circumstances
[06:38:55] <arschmitz> they claimed it was same device each time but there is no way the animation performance was WAY different
[06:39:02] <arschmitz> and that has nothing to do with the library
[06:39:37] <uGoMobi> yeah
[06:40:07] <uGoMobi> anyways, better to not draw any attention to it
[06:40:22] <arschmitz> yeah someone was asking about it in #jquery
[06:40:47] <uGoMobi> that first comment was funny... compliments appmobi and then asked how to make something work with jquery + jqm
[06:41:01] <_|Nix|_> OK ... so ... the native selectmenu is no longer hidden when all its children are filtered, and the dividers are no longer hidden when all their "children" are hidden.
[06:41:06] <uGoMobi> unless I understood him wrong... no jqMobi at all
[06:41:23] <_|Nix|_> Basically, I removed all special handling from filterable.
[06:42:33] <uGoMobi> _|Nix|_: sounds like a good start :)
[06:42:53] <uGoMobi> so now we need extensions for this
[06:43:24] <_|Nix|_> uGoMobi: Right. Step[ 0 ] ... afterfilter.
[06:43:45] <uGoMobi> :)
[06:44:37] <arschmitz> uGoMobi: also makes me wonder about what version jqm that was
[06:44:46] <arschmitz> was it like 1.0 where there was a listview issue
[06:52:56] <arschmitz> _|Nix|_: why does popup need to run before custom select?
[06:54:25] <arschmitz> custom select actually calls popup from what i can see
[06:54:51] <_|Nix|_> arschmitz: Yeah. Not sure anymore. Maybe it doesn't.
[06:55:06] <arschmitz> also i dont see how popup running first would help since customselect will not have created the popup yet
[06:55:20] <_|Nix|_> arschmitz: You're definitely correct.
[06:56:10] <_|Nix|_> arschmitz: However, I've introduced another dependency, much to your chagrin no doubt: The filterable extension (which is deprecated as soon as it's published in 1.4.0) enhance-depends on controlgroup,listview,collapsible, and select.
[06:56:24] <_|Nix|_> arschmitz: ... because it searches for an instance of one of those on this.element.
[06:56:29] <_|Nix|_> arschmitz: ... during _create.
[06:56:36] <_|Nix|_> arschmitz: ... if it finds it, it calls refresh().
[06:56:47] <arschmitz> how is that dependency?
[06:57:00] <arschmitz> if it does not call it it will not run
[06:57:02] <_|Nix|_> arschmitz: Actually, I could probably move that to the filter itself.
[06:57:15] <_|Nix|_> arschmitz: Yeah, I'll move that to the filter function.
[06:57:16] <arschmitz> i mean does not find it
[06:57:26] <arschmitz> ok
[06:57:31] <_|Nix|_> arschmitz: NM. I'm glad we had this little chat :)
[06:57:34] <arschmitz> lol
[07:00:01] <uGoMobi> lol
[07:01:08] <uGoMobi> _|Nix|_: I blame the wine but I am not sure if I remember everything we discussed last night correctly ;)
[07:01:28] <uGoMobi> _|Nix|_: do we still need the ui-listview-filter CSS?
[07:01:31] <_|Nix|_> uGoMobi: Don't worry! http://irc.jquery.org/ remembers.
[07:01:43] <_|Nix|_> uGoMobi: I don't think so. We haven't talked about that.
[07:01:44] <uGoMobi> right :)
[07:02:12] <uGoMobi> _|Nix|_: do we keep the old filter "extension" in 1.4?
[07:02:20] <_|Nix|_> uGoMobi: No. It's gone.
[07:02:22] <uGoMobi> we don't
[07:02:24] <uGoMobi> ok
[07:02:44] <uGoMobi> so it will always be a textinput that uses option "inset"
[07:03:04] <uGoMobi> then we can remove that CSS
[07:03:56] <_|Nix|_> uGoMobi: Well, the value of the textinput inset option will be a boolean and will be identical to the value of the list's "inset" option.
[07:04:34] <_|Nix|_> uGoMobi: ... and whenever the textinput option "inset" is set to true, the JS will add ui-input-inset to either the <input> or, if it's wrapped, to the wrapper.
[07:04:54] <uGoMobi> _|Nix|_: ok clear
[07:05:34] <_|Nix|_> uGoMobi: I think the styling of the textinput should not be influenced by whether it's serving the purpose of a filterable or not.
[07:06:02] <uGoMobi> _|Nix|_: no it shouldn't
[07:06:27] <uGoMobi> I will just keep a rule in the listview CSS to avoid double border between textinput and listview
[07:06:28] <_|Nix|_> uGoMobi: I'm even thinking that the class "ui-filterable" should not be added to the textinput when the filterable widget generates it.
[07:06:52] <_|Nix|_> uGoMobi: What about controlgroup and collapsible?
[07:07:37] <uGoMobi> _|Nix|_: https://github.com/jquery/jquery-mobile/issues/1835
[07:07:37] <b-ot> uGoMobi: Issue #1835 by frequent (25mon 6d ago): add class for listview search-filter
[07:08:36] <uGoMobi> _|Nix|_: I don't think the textinput need ui-filterable class but it does need a class so you can target it in your custom CSS
[07:09:50] <uGoMobi> for collaspibe I can do same as for listview to avoid double border
[07:10:02] <uGoMobi> vertical controlgroup doesn't have an inset option
[07:10:22] <_|Nix|_> uGoMobi: Well, if you need custom CSS, then you're better off creating the input yourself.
[07:10:40] <_|Nix|_> uGoMobi: Was there a way to add a class to the listview filter extension?
[07:10:47] <_|Nix|_> uGoMobi: ... for custom CSS?
[07:10:50] <uGoMobi> nope
[07:10:58] <uGoMobi> that's what that ticket is about
[07:11:10] <uGoMobi> pretty hard to target it
[07:11:44] <_|Nix|_> uGoMobi: Well, if you need custom CSS, then don't rely on the framework to generate it for you. Now, the framework allows you to provide your own input for filtering purposes.
[07:11:47] <uGoMobi> _|Nix|_: does textinput have the "class" option already?
[07:11:58] <_|Nix|_> uGoMobi: It does, but filterable does not.
[07:12:20] <_|Nix|_> uGoMobi: ... and I'm not planning on adding it just so I can pass the value to the generated textinput.
[07:12:31] <uGoMobi> ok, but if you add the textinput yourself you can have it add a class to the wrapper
[07:12:38] <_|Nix|_> uGoMobi: Yep.
[07:12:48] <_|Nix|_> uGoMobi: Via the wrapperClass option.
[07:12:57] <uGoMobi> yup
[07:13:01] <_|Nix|_> uGoMobi: So, you can target all you want, and you can filter all you want.
[07:13:07] <uGoMobi> sounds good enough to me
[07:13:26] <uGoMobi> let's not forget to close that ticket ;)
[07:13:58] <_|Nix|_> <input data-wrapper-class="my-custom-class" id="filter-input"><ul data-role="listview" data-filter="true" data-input="#filter-input">...</ul>
[07:14:09] <_|Nix|_> Bam!
[07:14:31] <uGoMobi> nice
[07:14:46] <uGoMobi> what happened to data-wrapper-id BTW?
[07:14:57] <arschmitz> uGoMobi: no use
[07:15:01] <uGoMobi> I saw a comment from arschmitz on frequent his PR
[07:15:04] <_|Nix|_> uGoMobi: ^
[07:15:15] <uGoMobi> why no use?
[07:15:17] <arschmitz> uGoMobi: id is bad practice for css
[07:15:21] <uGoMobi> why?
[07:15:25] <_|Nix|_> uGoMobi: if you have wrapperClass you can just select by the class.
[07:15:28] <arschmitz> and for js you can use widget method
[07:15:37] <_|Nix|_> Right.
[07:15:43] <uGoMobi> ok but why is it bad practise for CSS?
[07:15:56] <_|Nix|_> uGoMobi: You can make the class unique to the widget if you wish.
[07:16:03] <uGoMobi> the id selector is the fastest selector in CSS
[07:16:51] <_|Nix|_> arschmitz: Can we not generate an ID if the original element also had an ID?
[07:16:52] <arschmitz> uGoMobi: little write up on it http://screwlewse.com/2010/07/dont-use-id-selectors-in-css/
[07:20:27] <uGoMobi> ok that's someones opinion about the use of ID's in CSS
[07:20:41] <arschmitz> uGoMobi: yes i was just saying it brings up points
[07:20:44] <uGoMobi> but I wouldn't call using ID's in CSS bad practise
[07:21:05] <uGoMobi> yeah, and depending on your use case these can be valid points
[07:21:41] <arschmitz> uGoMobi: scott_gonzalez and jzaefferer were also very against id for same reasons
[07:22:32] <_|Nix|_> uGoMobi: IDs are great 'n all, but when you have to write JS to make two DOM manips (one to read data-wrapper-id and one to write out .attr( "id", valueReadFromOtherAttribute ) that's two DOM manips.
[07:22:34] <uGoMobi> ok, I missed that discussion
[07:22:50] <arschmitz> uGoMobi: it was a while back 
[07:23:02] <arschmitz> might have even been when you were on vacation after portland
[07:23:18] <uGoMobi> _|Nix|_: yeah, I am not saying we have to add data-wrapper-id
[07:23:19] <_|Nix|_> arschmitz: We could, however, do the this.element.attr( "id" ) + "-wrapper" thing ... what do you think?
[07:23:26] <_|Nix|_> uGoMobi: ^
[07:23:32] <uGoMobi> I was just curious about the reason why
[07:23:33] <arschmitz> _|Nix|_: dont see the point
[07:23:48] <_|Nix|_> arschmitz: OK. WORKSFORME. *shrug*
[07:23:53] <_|Nix|_> :)
[07:23:57] <arschmitz> the real thing here is that anything you could do with the id you can do with class or widget method
[07:24:08] <arschmitz> so why add code bloat 
[07:24:53] <_|Nix|_> OK, then maybe it's pointless to set an ID on the filterable input ...
[07:25:19] <_|Nix|_> Like, if you're generating it.
[07:25:30] <_|Nix|_> Since, if you need to target it, you wouldn't be generating it.
[07:25:43] <_|Nix|_> ... and since before you've had no way of targeting it.
[07:25:44] <scott_gonzalez> Never add ids to elements unless you actually need them inside the widget.
[07:26:00] <_|Nix|_> scott_gonzalez: Indeed ...
[07:26:55] <arschmitz> scott_gonzalez: so i did the autoinit stuff this weekend as promised
[07:27:00] <scott_gonzalez> And in the cases where you do need an ID, you need to use .uniqueId()
[07:27:43] <scott_gonzalez> arschmitz: awesome :-)
[07:27:56] <arschmitz> didnt work quite as we had it but was simple fix
[07:28:30] <arschmitz> scott_gonzalez: wrapping the widget method destroyed refrences to $.widget.extend and $.widget.bridge
[07:28:41] <scott_gonzalez> Gah.
[07:28:54] <scott_gonzalez> $.widget = $.extend( function() { ... }, $.widget )
[07:29:47] <scott_gonzalez> Oh, this remind me of something I thought of for AMD.
[07:30:00] <arschmitz> scott_gonzalez: i just saved a refrence to the original $.widget and then did $.widget.extend = originalWidget.extend;
[07:30:13] <scott_gonzalez> And it applies here as well.
[07:30:28] <scott_gonzalez> You need to use $.extend().
[07:30:37] <arschmitz> actually i did lol
[07:30:41] <scott_gonzalez> :-)
[07:31:00] <arschmitz> i was just being lazy with the typeing lol
[07:31:12] <arschmitz> anyway what did you think of?
[07:31:25] <scott_gonzalez> The reference won't update for extensions.
[07:31:36] <scott_gonzalez> When you define a widget extension, it creates a new constructor.
[07:31:40] <arschmitz> oh i tookcare of that
[07:32:08] <arschmitz> instead of an array i used an object
[07:32:29] <arschmitz> with the widgetname as key so if it came up again i could update it 
[07:32:48] <scott_gonzalez> :-)
[07:33:10] <scott_gonzalez> I think for AMD we'll just have to say "Deal with it."
[07:33:11] <arschmitz> yeah i had to change some of the details but its the same basic concept
[07:33:25] <arschmitz> yeah not as easy to work around there
[07:33:29] <scott_gonzalez> "You're the dummy who chose to use AMD" :-P
[07:33:34] <arschmitz> lol
[07:33:44] <scott_gonzalez> Is this in a branch I can look at?
[07:33:52] <arschmitz> i can push it right now
[07:33:55] <arschmitz> im not 100
[07:34:05] <arschmitz> % done yet but plenty enough to look at
[07:34:26] <arschmitz> just give me like 5 minutes to commit what im working on right this second
[07:35:49] <scott_gonzalez> No rush. I'm in the middle of something else anyway (something that's taking me several days :-/)
[07:35:55] <jqmobilecommit> [13jquery-mobile] 15gabrielschulhof synchronize pull request #6192: Filter widget review (06master...06filter-widget-review)  02http://git.io/EdhQzA
[07:36:21] <arschmitz> ok well ill push when i finish what im doing right now and you can look when ever you have time
[07:36:26] <uGoMobi> _|Nix|_: do you mind if we merge master in filter-widget-review and i make the changes there?
[07:36:39] <_|Nix|_> uGoMobi: For the -inset class?
[07:36:43] <uGoMobi> _|Nix|_: yes
[07:36:50] <_|Nix|_> uGoMobi: OK *shrug*
[07:36:58] <uGoMobi> I need to make changes to listview as well
[07:37:03] <uGoMobi> and can't test that on master
[07:37:05] <scott_gonzalez> Speaking of branches, are all of the branches on the jquery account actually active/needed?
[07:37:12] <uGoMobi> because there it doesn't get the classes
[07:37:25] <arschmitz> scott_gonzalez: we need to clean up many are old and of no use
[07:37:30] <_|Nix|_> uGoMobi: What doesn't get which classes?
[07:37:51] <uGoMobi> _|Nix|_: listview with new filterable widget
[07:38:04] <_|Nix|_> uGoMobi: filterable does not give listview any new classes.
[07:38:22] <_|Nix|_> uGoMobi: ... and it doesn't give the textinput any new classes either.
[07:38:46] <_|Nix|_> uGoMobi: So, a non-inset listview preceded by a non-inset textinput may or may not be a filterable setup.
[07:39:05] <_|Nix|_> uGoMobi: It's up to the dev to unite them into a filterable setup.
[07:39:14] <uGoMobi> _|Nix|_: right, hmm
[07:39:32] <uGoMobi> let me look at the demo page that frequent added
[07:39:39] <_|Nix|_> uGoMobi: ... and she doesn't do that via any classes, but via specifying data-filter="true" data-input="#thePrecedingInput" on the listview.
[07:40:46] <_|Nix|_> uGoMobi: master is already merged into filter-widget-review
[07:41:05] <uGoMobi> _|Nix|_: ok
[07:41:29] <uGoMobi> _|Nix|_: the textinput inset style is not a big deal
[07:41:37] <_|Nix|_> uGoMobi: OK, great!
[07:41:49] <uGoMobi> _|Nix|_: just looking at how to make it work nicely together with the widget that is filtered
[07:42:17] <_|Nix|_> uGoMobi: Yeah, it's basically two widgets that happen to be sitting side by side. There's no connection between them.
[07:42:29] <_|Nix|_> uGoMobi: At least that's the concept.
[07:42:41] <uGoMobi> yeah I see it now
[07:43:11] <_|Nix|_> uGoMobi: I'm'na take off until my daughter goes to be. So, I should be back in, like, 6-7 hours.
[07:43:14] <_|Nix|_> s/be/bed/
[07:43:27] <uGoMobi> _|Nix|_: ok later
[07:43:33] <uGoMobi> _|Nix|_: one question
[07:43:37] <uGoMobi> http://view.jquerymobile.com/filter-widget-review/demos/widgets/filter/
[07:44:02] <uGoMobi> _|Nix|_: there the textinput still has class ui-filterable but you removed that right?
[07:56:40] <agcolom> _|Nix|_: hey, how is it going ?
[07:56:59] <agcolom> good afternoon all :-)
[07:59:15] <arschmitz> hey agcolom
[07:59:26] <agcolom> hey Alex :-)
[07:59:52] <arschmitz> agcolom: i know you have mentioned if before but i forget whats your talk in austin on?
[08:00:19] <agcolom> journey to the Center of jQuery! 
[08:00:48] <agcolom> (how does one get involved with the project, starts contributing, and all the cool stuff that happens after that ;-) )
[08:01:49] <arschmitz> awesome
[08:02:25] <arschmitz> thats a good one can always use more help!
[08:03:10] <agcolom> yes! it's not like we're running around wondering what to do next ;-)
[08:03:35] <arschmitz> lol yeah and with out the dev summit i doubt id be involved like i am today
[08:04:42] <agcolom> yes, and it was amazing to have you join the team! 
[08:05:16] <arschmitz> so to try and get the word out in places where people actually also have the opportunity to meet actual team members is great makes the whole thing easier
[08:05:53] <arschmitz> agcolom: you should make all the team memebers in the audience stand up so people know who to talk to if they are interested at the end lol
[08:06:05] <agcolom> that was my plan! 
[08:06:10] <arschmitz> awesome!
[08:06:20] <agcolom> either stand up or come on stage...
[08:06:43] <arschmitz> yeah either way come to stage is good then people can come mingle ask questions after for a few minutes
[09:41:54] <uGoMobi> arschmitz: looks like we can remove line 27-29 & 35-37 from textinput.js https://github.com/jquery/jquery-mobile/blob/master/js/widgets/forms/textinput.js#L27
[09:42:25] <arschmitz> uGoMobi: yes leftover i missed
[09:42:33] <uGoMobi> ok
[09:42:40] <uGoMobi> I'll remove them
[09:42:52] <arschmitz> uGoMobi: actually a few other associated lines can go too
[09:43:13] <uGoMobi> arschmitz: what line numbers?
[09:43:52] <arschmitz> no need to extend the widget with it on line 35 and remove 139 and 141 can go
[09:44:43] <arschmitz> and 140 should just do removeClass( "ui-body-" + this.options.theme ).addClass( "ui-body" + option.theme )
[09:45:11] <uGoMobi> yeah I already mentioned 35-37, will check the other lines... thanks!
[09:45:34] <arschmitz> oh sorry i just looked at the link and didnt finish reading
[09:45:36] <arschmitz> my bad
[09:46:39] <arschmitz> uGoMobi: also why dont we have theme default to inherit?
[09:46:46] <arschmitz> simplifies things a lot 
[09:46:53] <arschmitz> no need to check for null then
[09:47:37] <uGoMobi> yeah
[09:48:07] <arschmitz> i think i already did that some place else in one of the branches
[09:48:11] <arschmitz> meant to ask you about it
[09:49:01] <_|Nix|_> arschmitz: We need to merge _toggleClasses so that we don't do one reflow per class added/removed.
[09:49:11] <_|Nix|_> arschmitz: ... in textinput.
[09:49:49] <_|Nix|_> arschmitz: In _setOptions we should compute a value for the classes, then set the value, then record it.
[09:50:05] <arschmitz> _|Nix|_: i really dont think perf is an issue on option setting
[09:50:06] <_|Nix|_> arschmitz: ... next time around, we should remove the classes listed in the value, compute a new value, and set that.
[09:50:17] <_|Nix|_> arschmitz: It is on initial option setting.
[09:50:26] <arschmitz> changing options after init is not very common in jqm
[09:50:36] <arschmitz> espically multiple at same time
[09:50:45] <_|Nix|_> arschmitz: Yeah, but initially none of the options are undefined.
[09:51:02] <arschmitz> huh?
[09:51:25] <arschmitz> i dont think we should generally be calling set options on create
[09:51:35] <_|Nix|_> arschmitz: During _create() we call this._setOptions( this.options ), right? Well, no member of this.options is undefined, so all the if-statements will be true.
[09:51:47] <arschmitz> no i dont think we should do that
[09:52:05] <arschmitz> anything with a wrapper thats very bad
[09:52:26] <_|Nix|_> arschmitz: I understand, and it's a tradeoff. Either you .addClass() in two palces, or you do it once in _setOptions() and you call it from _create().
[09:52:43] <arschmitz> add class in two places
[09:52:58] <arschmitz> the extra lines of code are better then calling setOptions() from create 
[09:53:23] <arschmitz> extra lines of code give a very small download diff once 
[09:53:46] <arschmitz> calling set options on create hits you on every widget thats created
[09:54:02] <_|Nix|_> arschmitz: Is it really such a big hit?
[09:54:11] <_|Nix|_> arschmitz: What if they both called the same function?
[09:54:14] <arschmitz> its a reflow
[09:54:23] <arschmitz> vs no reflow 
[09:54:34] <_|Nix|_> arschmitz: No reflow? You still have to apply all those classes.
[09:54:44] <arschmitz> yes to an element not yet in the dom
[09:55:01] <_|Nix|_> arschmitz: So, during _create() the element is not in the DOM?
[09:55:22] <arschmitz> for textinput its not when the classes are applied
[09:55:26] <arschmitz> because its a wrapper
[09:55:36] <arschmitz> all the classes are appiled directly to wrapper in enhance
[09:55:42] <arschmitz> before its inserted
[09:56:03] <arschmitz> well in _wrap called from enhance
[09:57:31] <arschmitz> anything that is not initially in the dom should have any manip done before its inserted
[09:57:41] <arschmitz> faster and no reflows
[10:01:21] <_|Nix|_> arschmitz: Right. So, if we create the wrapper and call _setOptions() before we add it to the DOM, then we will have achieved the same thing.
[10:02:04] <_|Nix|_> arschmitz: OK. I'm not totally hell-bent on calling _setOptions() from _create(). Don't get me wrong. I'm just thinking that if it's the cost of the function call then that doesn't seem that high.
[10:02:27] <arschmitz> _|Nix|_: im not completely against toggleClasses either
[10:02:34] <arschmitz> just need to be convinced its worth it
[10:03:04] <uGoMobi> arschmitz: I think line 139-141 are meant to make sure ui-body-inherit is removed, so I can't remove them now: https://github.com/jquery/jquery-mobile/blob/master/js/widgets/forms/textinput.js#L139 
[10:03:18] <uGoMobi> arschmitz: I will look into make theme default to inherit
[10:03:31] <arschmitz> uGoMobi: yeah you would have to default to inherit
[10:03:33] <uGoMobi> but I think we should do that for all widgets then
[10:03:43] <uGoMobi> for consistency
[10:03:50] <arschmitz> yes i think so as well
[10:04:05] <uGoMobi> added to the TODO list ;)
[10:04:09] <arschmitz> makes it so you can just toggle class without checking for null
[10:04:19] <arschmitz> and makes sense
[10:04:25] <arschmitz> by setting null its like faking it
[10:04:41] <arschmitz> like if you leve nul we will assume you REALLY meant inherit
[10:04:51] <arschmitz> maybe they actually want ui-body-null lol
[10:05:01] <uGoMobi> lol
[10:05:04] <arschmitz> ( not being serious )
[10:05:30] <uGoMobi> was just thinking about if you don't want a theme class at all
[10:05:31] <arschmitz> _|Nix|_: anyway if your around in like an hour lets talk about it more and make a decision
[10:05:40] <arschmitz> uGoMobi: undefined
[10:06:12] <uGoMobi> right
[10:06:43] <arschmitz> gotta run for a bit
[10:06:45] <uGoMobi> also have to check some JS where we use a regex 
[10:06:53] <uGoMobi> to find the theme
[10:07:02] <_|Nix|_> arschmitz: OK ... I'll try to make it ...
[10:07:05] <uGoMobi> ok later
[10:07:50] <uGoMobi> _|Nix|_: shouldn't we wrap the filterable texinput in a form element when the framework generates it?
[10:08:05] <uGoMobi> _|Nix|_: was also thinking about a hidden label for a11y
[10:08:23] <uGoMobi> which would require an option for i18n 
[10:16:17] <_|Nix|_> uGoMobi: It used to be wrapped in a form - you're right.
[10:19:00] <_|Nix|_> uGoMobi: Dunno exactly how to go about it ... I mean, what should the label be?
[10:19:59] <uGoMobi> _|Nix|_: "Filter:" ?
[10:20:42] <uGoMobi> _|Nix|_: I am not sure if there is an ARIA attribute to associate the input and the filtered widget
[10:21:18] <uGoMobi> but I can live with looking into that for 1.5 when we review more ARIA stuff
[10:21:36] <uGoMobi> _|Nix|_: what do you think?
[10:21:45] <_|Nix|_> uGoMobi: OK ... then, for now I will just wrap the whole thing in a form.
[10:22:16] <uGoMobi> _|Nix|_: ok, I'll open a ticket for label + ARIA
[10:23:37] <_|Nix|_> uGoMobi: The problem is we should have some source for the string that becomes the label.
[10:23:46] <_|Nix|_> uGoMobi: OTOH, maybe we don't need to worry about it.
[10:23:57] <uGoMobi> _|Nix|_: yeah it should be an option
[10:23:58] <_|Nix|_> uGoMobi: People who want a11y should just provide their own textinput.
[10:24:27] <_|Nix|_> uGoMobi: No. We don't need that. If you want a11y, then provide your own textinput with data-input="#myTextInput"
[10:24:39] <uGoMobi> _|Nix|_: not sure if I agree
[10:24:47] <uGoMobi> _|Nix|_: a11y is a framework feature
[10:25:01] <uGoMobi> _|Nix|_: so when we generate stuff we should look into that
[10:25:05] <_|Nix|_> uGoMobi: Remember, we wanna avoid generating markup.
[10:25:13] <_|Nix|_> uGoMobi: OK, understood.
[10:25:26] <uGoMobi> _|Nix|_: I know, so we should recommend writing your own markup
[10:25:30] <_|Nix|_> uGoMobi: We should still discourage markup generation, but when we do generate markup, it should be "nice".
[10:25:37] <uGoMobi> exactly
[10:25:43] <_|Nix|_> Roger that!
[10:25:47] <uGoMobi> :)
[10:25:53] <_|Nix|_> uGoMobi: ... and it will be in 1.5.0.
[10:26:02] <_|Nix|_> uGoMobi: In 1.4.0 it will be a plain form with a single input.
[10:26:07] <uGoMobi> _|Nix|_: yes, I am opening a ticket
[10:26:18] <uGoMobi> yup
[10:34:23] <jqmobilecommit> [13jquery-mobile] 15uGoMobi opened issue #6196: Filterable: input label and ARIA attribute  02http://git.io/2cazLA
[10:46:15] <jqmobilecommit> [13jquery-mobile] 15adrianomac opened issue #6197: Loader never appear on some browsers  02http://git.io/r3wRsw
[10:47:07] <_|Nix|_> uGoMobi: D'oh! I have to specify ui-filterable on the outermost element so that the children can be hidden :)
[10:48:02] <uGoMobi> _|Nix|_: why is that? ui-screen-hidden not enough?
[11:04:35] <_|Nix|_> uGoMobi: No, remember, I needed a high-specificity .ui-filterable + * .ui-screen-hidden to make it work.
[11:05:20] <uGoMobi> _|Nix|_: yeah I remember that but if that's the only reason to add the class I think we can come up with a CSS solution
[11:05:29] <five> Is there a good doc to start reading if I want to release a jquery-ui Interaction? I've written one for an app I wrote, and I want to split it out and release it independently.
[11:07:17] <uGoMobi> _|Nix|_: I wouldn't mind to make ui-screen-hidden a framework wide utility class to hide something
[11:07:30] <uGoMobi> we can move it from widgets that use it to core
[11:07:38] <uGoMobi> core.css
[11:25:15] <_|Nix|_> uGoMobi: OK. If you can make it have its intended effect without the need for that high-specificity selector, then I'm all in favour.
[11:25:48] <_|Nix|_> uGoMobi: I can always yank the code that puts on the class whenever you render the selector useless.
[11:28:58] <arschmitz> _|Nix|_: im back
[11:37:50] <_|Nix|_> arschmitz: Hey!
[11:38:03] <_|Nix|_> arschmitz: Still gunnin' it on the filterable. That thing's a tangle.
[11:38:08] <arschmitz> _|Nix|_: do you have somewhere i can see the _toggleClasses you have in mind?
[11:38:15] <_|Nix|_> arschmitz: Of course.
[11:39:09] <_|Nix|_> arschmitz: https://github.com/jquery/jquery-mobile/blob/collapsible-widget-review/js/jquery.mobile.widget.js
[11:39:18] <_|Nix|_> https://github.com/jquery/jquery-mobile/blob/collapsible-widget-review/js/jquery.mobile.widget.js#L31
[11:39:21] <_|Nix|_> arschmitz: ^
[11:39:24] <arschmitz> _|Nix|_: on filter this extension you have been talking about to generate the input
[11:39:33] <arschmitz> _|Nix|_: that is just for backcompat right?
[11:39:51] <_|Nix|_> arschmitz: No. The input needs to be generated no matter what, otherwise filterable is useless.
[11:39:54] <uGoMobi> _|Nix|_: Ok, I'll make the change in filter review branch
[11:39:58] <_|Nix|_> arschmitz: However, we will discourage that.
[11:40:01] <arschmitz> _|Nix|_: why?
[11:40:06] <_|Nix|_> arschmitz: How do you filter?
[11:40:14] <arschmitz> specify an input
[11:40:17] <arschmitz> as an option
[11:40:25] <_|Nix|_> arschmitz: ... and you can, in which case no input will be generated.
[11:40:28] <arschmitz> make it required
[11:40:38] <_|Nix|_> uGoMobi: ^
[11:40:46] <_|Nix|_> arschmitz: Maybe as of 1.5.0.
[11:40:56] <arschmitz> uGoMobi: and i talked about this the other day 
[11:41:09] <arschmitz> then you came back and we were both mia i think lol
[11:41:13] <_|Nix|_> arschmitz: I suppose I can move the input generation code to the backcompat extension.
[11:41:47] <arschmitz> _|Nix|_: yeah make filterable just be the filtering and leave everything else up to the user as far as style
[11:42:06] <_|Nix|_> arschmitz: Oh, that's already the case. filtertable does no styling of its own.
[11:42:13] <_|Nix|_> arschmitz: The textinput is totally bare bones.
[11:42:32] <arschmitz> _|Nix|_: yeah but i mean not even do any dom manip other then show hide
[11:42:40] <arschmitz> dont generate any markup 
[11:42:51] <_|Nix|_> arschmitz: The deprecated extension syncs up the style with that of the listview/collapsible/selectmenu/controlgroup, but that's only for backwards compatibility.
[11:42:56] <_|Nix|_> arschmitz: OK.
[11:43:01] <_|Nix|_> arschmitz: WORKSFORME.
[11:43:11] <uGoMobi> other benefit,,,
[11:43:14] <arschmitz> _|Nix|_: keep it simple and make it do one thing really well
[11:43:22] <_|Nix|_> arschmitz: I'll move the generation to the extension, and we'll endeavour to deprecate the entire extension.
[11:43:26] <uGoMobi> you could also use a select or radio or whatever input to filter
[11:43:38] <arschmitz> _|Nix|_: then its only dependency is widget factory too
[11:43:40] <_|Nix|_> uGoMobi: Good point.
[11:43:59] <_|Nix|_> arschmitz: That's already the case.
[11:44:07] <arschmitz> _|Nix|_: and you mentioned before calling refresh
[11:44:17] <arschmitz> to fix corners and such
[11:44:30] <_|Nix|_> arschmitz: Well, that's a bit of a snag. You kinda need to.
[11:44:48] <arschmitz> filterable should check if the filtered element is one of a set of widgets
[11:44:58] <arschmitz> listview / select / etc
[11:45:01] <_|Nix|_> arschmitz: Doing that in the deprecated extension.
[11:45:03] <arschmitz> then call refresh if needed
[11:45:15] <arschmitz> if its none of the above do nothing
[11:45:17] <_|Nix|_> arschmitz: I hate having to discover what widget it is.
[11:45:29] <arschmitz> yeah but it should be part of its job
[11:45:42] <arschmitz> do it once on create
[11:45:45] <arschmitz> and store it
[11:45:48] <_|Nix|_> arschmitz: That's terrible! That's just terrible! That means nobody can ever write another widget that has corners and have filterable work on it :(
[11:46:03] <_|Nix|_> arschmitz: I hate this "assume it can only be this or this or this" ...
[11:46:03] <arschmitz> _|Nix|_: thats what extensions are for
[11:46:30] <arschmitz> we cant make special cases for mythical widgets we know nothing about
[11:47:02] <_|Nix|_> arschmitz: Exactly, which is why we should make it generic. Fortunately, you can always write an extension that overrides _filterItems() and appends a call to refresh().
[11:47:17] <arschmitz> if someone wants to make a widget and make it work with filterable they can write what would be probably a 3 line extension to check they widget also
[11:47:20] <_|Nix|_> arschmitz: Currently the deprecated extension does exactly that for controlgroup/listview/collapsible/selectmenu.
[11:47:49] <arschmitz> _|Nix|_: its basicly the same as control group and enhancing its children
[11:48:13] <_|Nix|_> arschmitz: Exactly. We should probably write an _enhanceChildren() function to make that process overrideable.
[11:48:17] <arschmitz> _|Nix|_: make it its own special method even to make it REALLY easy to extend
[11:48:45] <arschmitz> _|Nix|_: thats exactly what i had in mind just make a method that does only that
[11:49:00] <arschmitz> then they can just this._super(); if( .....
[11:49:21] <_|Nix|_> arschmitz: OK, so I'll move this refresh handling out of the extension and into the widget.
[11:49:42] <_|Nix|_> input gen goes into the extension, and refresh-calling comes out of the extension.
[11:49:49] <_|Nix|_> *whew* ...
[11:49:54] <arschmitz> _|Nix|_: seems like a good trade to me lol
[11:50:10] <_|Nix|_> arschmitz: *sigh* ... I'm slowly losing my mind over this filterable.
[11:50:31] <arschmitz> yeah we have kinda substantially changed how it works lol
[11:51:25] <arschmitz> _|Nix|_: not to mention the old filter was kinda crazy so to keep backcompt ....
[11:51:33] <_|Nix|_> arschmitz: D00d - my hands very rarely hurt from typing ...
[11:53:17] <arschmitz> _|Nix|_: you would want to add toggleClasses to the base widget lol i just finished removing everything execpt getCreateOptions lol
[11:54:23] <_|Nix|_> arschmitz: Well, yeah ...
[11:54:39] <_|Nix|_> arschmitz: I mean, I could make it an extension and just load it from everywhere ... *shrug* ...
[11:54:51] <arschmitz> lol yeah probably not
[12:10:31] <arschmitz> _|Nix|_: all right so i think im still not in favor of this i dont like the calling setOptions from create rather then just making the minip 
[12:10:45] <arschmitz> and i think this is overcomplicated for the small gain it will make
[12:10:58] <arschmitz> im not saying it will not work and maybe be a little faster in some situations
[12:11:17] <arschmitz> i think it is just a little too much for what it solves
[12:12:06] <arschmitz> _|Nix|_: i think it should do all inital class changes while creating the elements before appending in its own method and leave setOptions just for setting options when called
[12:12:41] <arschmitz> _|Nix|_: and i dont think at that point generating a big class string has much advantage because most of the time people will only be changing 1 or 2 options
[12:15:20] <_|Nix|_> arschmitz: OK.
[12:15:31] <arschmitz> _|Nix|_: but thats my opinion we can pull some others in on this
[12:15:46] <_|Nix|_> OK. I'm fine either way.
[12:17:07] <_|Nix|_> arschmitz: Also, this need not be decided here and now. This is internal stuff so we can fix it even after alpha.
[12:17:23] <arschmitz> _|Nix|_: yup
[12:17:26] <_|Nix|_> arschmitz: ... as long as setting options works.
[12:38:10] <_|Nix|_> OK. I'm taking a break. BBIAB!
[12:38:17] <jqmobilecommit> 01[13jquery-mobile01] 15gabrielschulhof pushed 3 new commits to 06filter-widget-review: 02http://git.io/rKr6EA
[12:38:17] <jqmobilecommit> 13jquery-mobile/06filter-widget-review 14903ad43 15Gabriel Schulhof: Filterable: Wrap generated input into a form.
[12:38:17] <jqmobilecommit> 13jquery-mobile/06filter-widget-review 147a66c5a 15Gabriel Schulhof: Integration tests: Filterable: Correctly retrieve generated textinput.
[12:38:17] <jqmobilecommit> 13jquery-mobile/06filter-widget-review 146a70acb 15Gabriel Schulhof: Filterable: Input generation becomes deprecated, calling refresh on recognized children becomes non-deprecated, and refiltering takes into account updated option values.
[12:49:06] <jqmobilecommit> 01[13jquery-mobile01] 15uGoMobi pushed 3 new commits to 06master: 02http://git.io/taI5_w
[12:49:06] <jqmobilecommit> 13jquery-mobile/06master 1452c6800 15Jasper de Groot: Textinput: whitespace.
[12:49:06] <jqmobilecommit> 13jquery-mobile/06master 145c42264 15Jasper de Groot: Textinput: Add the ui-input-inset class to the wrapper.
[12:49:06] <jqmobilecommit> 13jquery-mobile/06master 14e2e94f3 15Jasper de Groot: Textinput: Removed unused code.
[13:33:07] <travis-ci> [travis-ci] jquery/jquery-mobile#536 (master - e2e94f3 : Jasper de Groot): The build passed.
[13:33:07] <travis-ci> [travis-ci] Change view : https://github.com/jquery/jquery-mobile/compare/e537114051ad...e2e94f3de2b2
[13:33:07] <travis-ci> [travis-ci] Build details : http://travis-ci.org/jquery/jquery-mobile/builds/9366439
[14:42:30] <jqmobilecommit> [13jquery-mobile] 15gabrielschulhof synchronize pull request #6192: Filter widget review (06master...06filter-widget-review)  02http://git.io/EdhQzA
[17:15:23] <five> It's not quite industrial strength, but some may find this useful. https://github.com/godswearhats/jquery-ui-rotatable
