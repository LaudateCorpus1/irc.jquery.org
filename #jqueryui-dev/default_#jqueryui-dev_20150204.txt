[00:05:05] <doesallmagic2> Project jQuery UI - 1.8.x core build #667: STILL UNSTABLE in 9 min 4 sec: http://jenkins.jquery.com/job/jQuery%20UI%20-%201.8.x%20core/667/
[00:49:13] <jqmobilecommit> [13jquery-mobile] 15T18970237136 opened issue #7959: Code for comparing .tagName misses .toLowerCase() or .toUpperCase() for XHTML 02http://git.io/bnI1
[04:12:44] <scott_gonzalez> mikesherov: Can you look at https://github.com/jquery/jquery-ui/pull/1444? It's for a bug assigned to you.
[05:08:41] <jqmobilecommit> [13jquery-mobile] 15arschmitz closed issue #7958: Checkbox - no corners option supported. 02http://git.io/bZYt
[05:44:31] <mikesherov> scott_gonzalez: that fix is essentially correct
[05:45:16] <mikesherov> so, either we always use .css('width'), or we always use .width()
[05:45:42] <mikesherov> both will result in the correct behavior, it just that if we're using .width(), you can't bulk update using the .css() command
[05:46:14] <mikesherov> and if we're using .css(width), then we're parseInt'ing on retrieval
[05:46:32] <mikesherov> depends on which you think is worse ;-)
[05:48:23] <scott_gonzalez> I'd personally want us using .width() everywhere.
[05:48:40] <scott_gonzalez> I don't think I would have written .css( "width" ) in the first place ;-)
[06:41:35] <jquicommit> [13download.jqueryui.com] 15rxaviers created 06fix-178-n-255 (+1 new commit): 02http://git.io/bCsR
[06:41:35] <jquicommit> 13download.jqueryui.com/06fix-178-n-255 14a74bf78 15Rafael Xavier de Souza: Packer: Support building 1.12.0 package...
[06:41:57] <jquicommit> [13download.jqueryui.com] 15rxaviers opened pull request #256: Packer: Support building 1.12.0 package (06master...06fix-178-n-255) 02http://git.io/bCsw
[06:52:38] <jquicommit> [13jquery-ui] 15rxaviers pushed 1 new commit to 06ref-1029-css-dependency-comments: 02http://git.io/bCWK
[06:52:38] <jquicommit> 13jquery-ui/06ref-1029-css-dependency-comments 14dc21571 15Rafael Xavier de Souza: fixup! Various: Add css-dependency-comments based on jQuery Mobile
[07:41:12] <mikesherov> ok, so we'll use width everywhere
[09:04:44] <jquicommit> [13jquery-ui] 15arschmitz created 06button-classes (+79 new commits): 02http://git.io/bWXC
[09:04:44] <jquicommit> 13jquery-ui/06button-classes 1440c9fce 15Alexander Schmitz: Build: Add qunit-assert-classes plug-in for classes tests
[09:04:44] <jquicommit> 13jquery-ui/06button-classes 144e3e083 15Alexander Schmitz: Widget: Add classes option and _add/_remove/_toggleClass methods
[09:04:44] <jquicommit> 13jquery-ui/06button-classes 1450eb778 15Alexander Schmitz: Button: Add classes option to please the tests
[10:31:58] <arschmitz> scott_gonzalez: ok lets figure out icons so i can finish this
[11:01:57] <scott_gonzalez> arschmitz: so, icons and labels
[11:02:11] <scott_gonzalez> What exactly needs to be figured out?
[11:02:36] <arschmitz> you had been concerned about the space
[11:02:45] <arschmitz> if we go with inline
[11:03:34] <arschmitz> the label option not working on the page was me reversing a ternary somehow when i did updates this morning. 
[11:08:19] <scott_gonzalez> I was just concerned about the padding on the actual button.
[11:08:29] <scott_gonzalez> Regardless of icons.
[11:08:39] <scott_gonzalez> But there was also the space issue between the icon and the text.
[11:09:15] <arschmitz> right and i said button padding change was a totally different issue you and jorn said you didnt like it i said ok no problem
[11:10:02] <scott_gonzalez> In terms of the space, the current button implementation does a redraw on create.
[11:10:02] <scott_gonzalez> Which probably isn't the best.
[11:10:12] <scott_gonzalez> But that would prevent this problem.
[11:11:12] <arschmitz> yes
[11:11:47] <arschmitz> because you just add the space then
[11:12:50] <scott_gonzalez> So one thing about not wrapping the label in a span is that if anyone does any custom stuff to the button, changing the label will blow away their changes, right?
[11:13:39] <arschmitz> what do you mean?
[11:14:02] <arschmitz> like add their own extra markup?
[11:15:12] <arschmitz> the initial label value is .html() of the button
[11:16:43] <arschmitz> if you change it after that its just what ever you change it to
[11:17:42] <scott_gonzalez> I mean if you initialize a button, then add some additional stuff to the button yourself.
[11:18:01] <scott_gonzalez> And then you change the label, it will remove the additional stuff, right?
[11:18:48] <arschmitz> yes
[11:19:16] <arschmitz> but i feel like you should not be using the label option if your going to do that
[11:19:20] <scott_gonzalez> For example, if they wanted to do multiple icons and use the JS widget.
[11:19:38] <scott_gonzalez> Ok, let me phrase it differently.
[11:19:47] <scott_gonzalez> How would someone build an extension to add a second icon?
[11:20:05] <arschmitz> scott_gonzalez: overide _updateIcon
[11:20:45] <scott_gonzalez> I don't think that would work.
[11:20:58] <arschmitz> hm your right
[11:21:05] <arschmitz> it would need a different extension point
[11:21:23] <arschmitz> like this._buttonHTML();
[11:21:30] <arschmitz> that currently would contain just
[11:21:37] <arschmitz> this.element.html( !!this.icon ? this.icon : "" ).append( value );
[11:22:11] <scott_gonzalez> But that gets us back to thrasing the whole element for every change.
[11:22:32] <arschmitz> yup
[11:22:40] <arschmitz> but people HATE wrapping the label text
[11:22:55] <arschmitz> we had endless complaints about it on mobile
[11:23:16] <arschmitz> which is why we use a :pseudo and have the enhanced option
[11:24:47] <scott_gonzalez> Well, the wrapping doesn't have to be required for CSS.
[11:24:56] <scott_gonzalez> But we could make the widget always wrap if we wanted.
[11:25:08] <arschmitz> scott_gonzalez: also this does not do anything with label on create
[11:25:12] <arschmitz> it just appends the icon
[11:25:19] <scott_gonzalez> Right, but that's the problem.
[11:25:23] <arschmitz> it only recreates when you do setoption
[11:25:34] <scott_gonzalez> It appends the icon and then can't get the space in.
[11:25:47] <arschmitz> why cant it get the space in?
[11:25:59] <scott_gonzalez> How would you get the space in by just inserting the icon span?
[11:26:20] <arschmitz> this.icon.after( "&nbsp;" )
[11:26:26] <arschmitz> or before which ever you needed
[11:26:29] <arschmitz> based on position
[11:26:43] <scott_gonzalez> hmm...
[11:27:56] <scott_gonzalez> And then how do you make sure to only ever do that once?
[11:28:15] <arschmitz> flag
[11:28:18] <scott_gonzalez> And remove it if the icon option is set to null
[11:28:43] <arschmitz> get the text remove first / last char
[11:29:06] <scott_gonzalez> I really don't like that idea.
[11:29:16] <scott_gonzalez> It seem extremely hacky.
[11:29:21] <arschmitz> i suppose we could use  space span
[11:29:44] <arschmitz> so this.icons.after( "<span>&nbsp;</span>" );
[11:29:52] <arschmitz> then remove the span
[11:30:26] <scott_gonzalez> That's better.
[11:30:31] <scott_gonzalez> Also doesn't need to be non-breaking.
[11:30:34] <scott_gonzalez> Just a regular space.
[11:30:37] <arschmitz> true
[11:30:49] <scott_gonzalez> Which would prevent any problems with existing spaces as well.
[11:30:50] <arschmitz> can even do like this.iconSpace = 
[11:31:06] <arschmitz> so then no future dom lookups for it
[11:32:34] <scott_gonzalez> Yeah, I'm ok with that.
[11:32:42] <scott_gonzalez> So you're good to continue now, right?
[11:34:02] <arschmitz> yup
[11:40:26] <arschmitz> scott_gonzalez: oh one thing were you saying i should add an extension point for custom rendering of for example multiple icons?
[12:01:14] <scott_gonzalez> I was just pointing out that by not having a wrapper for the label, doing any kind of extension is painful.
[12:01:42] <scott_gonzalez> Because it's impossible for the widget to have any kind of scope for changes.
[12:03:14] <arschmitz> Ok its not an issue for our own use but its pretty simple to extract that one line into an extension point if you want then people could modify icon logic to their hearts content
[12:03:49] <arschmitz> scott_gonzalez: makes little difference to me either way can always wait and see if anyone complains 
[12:04:24] <scott_gonzalez> I wouldn't change the icon stuff at all.
[12:04:35] <scott_gonzalez> Since we're not blessing any APIs right now.
[12:05:21] <arschmitz> ok
[13:09:57] <jquicommit> [13jquery-ui] 15arschmitz 04force-pushed 06classes from 145c0bba3 to 147a3eaa8: 02http://git.io/s807XQ
[13:09:57] <jquicommit> 13jquery-ui/06classes 147a3eaa8 15Alexander Schmitz: Menu: fix incorrect default classes value
[13:10:52] <jquicommit> [13jquery-ui] 15arschmitz 04force-pushed 06classes from 147a3eaa8 to 14b5366bd: 02http://git.io/s807XQ
[15:44:43] <jquicommit> [13download.jqueryui.com] 15jzaefferer opened pull request #257: Improve grunt-prepare error handling, specify supported npm version (06master...06fixies) 02http://git.io/b49W
