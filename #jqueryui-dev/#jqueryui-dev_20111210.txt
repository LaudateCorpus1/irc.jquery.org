[03:17:49] <IvanKuzev> rworth: thanx for taking your time to get that carousel wiki page to look nicer
[03:18:06] <IvanKuzev> *of your time
[03:18:09] <rworth> IvanKuzev: np. I'm adding a comment to you on that page now
[03:22:15] <rworth> done
[03:34:29] <IvanKuzev> rworth: okay..i will move my things.. just keep on the wiki for another day please.
[03:34:52] <rworth> np, in fact, you can remove once you have it moved over
[03:35:34] <rworth> there's no rush at all, just trying to avoid the chance that it sits there for 6 months and then when someone comes around to it, it seems "baked" and it's not clear that what it's documenting is your widget
[03:36:33] <rworth> which I don't mean to discourage you, but like I said in my comment, we need space to be able to have discussion, and if we're going to remove 3 options and add 1, it needs to be clear we're doing that to our proposed spec, not changing the docs for your reference widget
[03:43:08] <IvanKuzev> okay...makes sense. this way you can change the proposed specs.without changing the documentation for any specific widget
[03:43:23] <rworth> exactly
[03:43:43] <rworth> this is key during the planning phase. If it were development phase it would be more like what you've done
[03:43:54] <rworth> fork the jquery-ui repo, make changes we can merge
[03:44:30] <rworth> write the spec on the wiki, ask for review, which would lead to changes on the spec on the wiki, which would lead to more changes in your fork of the jquery-ui repo
[03:47:46] * faassen waves hi.
[03:49:05] <faassen> is there anything here who is working on observable?
[03:49:16] <faassen> anybody* here. :) didn't want to imply somebody is a thing.
[03:50:07] * rworth raises hand
[03:50:11] <faassen> yay.
[03:50:21] <faassen> rworth: I've been talking to Boris Moore by email for a little while.
[03:50:24] <rworth> ok
[03:50:31] <faassen> rworth: because he's working on the jsview stuff which I'm interested in.
[03:50:40] <faassen> rworth: just for background, I'm working on http://obviel.org
[03:51:01] <faassen> rworth: anyway, I'm looking to extend obviel with a template language that can do live updates.
[03:51:24] <faassen> rworth: so anyway, I was trying to dive into the jsview code and since I've been using datalink in Obviel forms and I heard datalink is going away and observable + stuff may take its place..
[03:51:36] <faassen> rworth: I read the observable code in the jsviews repository.
[03:51:53] <faassen> rworth: and I gave some comments to Boris and then he said, this is just one version, there are other versions, and he pointed to your wiki.
[03:52:08] <rworth> yeah, have you seen http://wiki.jqueryui.com/Observable ?
[03:52:18] <faassen> yes, I just read his email pointing to that.
[03:52:27] <rworth> ok
[03:52:31] <faassen> I read the observable code elsewhere but it turns out that isn't the only version.
[03:52:45] <faassen> so I got a bit frustrated, but obviously it's going to take me a little while to engage with the right people at the right place.
[03:53:02] <rworth> see section 5 on that wiki page, that's "the" version today
[03:53:11] <faassen> I am very interested in the whole data linking technology and the "live" template language effort, and I was thinking about hacking on it myself but I figured I'd do the research and see what else is up first, and ran into Boris' efforts.
[03:53:23] <rworth> but of course the API could be implemented by any number of libraries, that's part of the idea
[03:53:42] <faassen> so basically my goal is to offer a bit of my time on this effort instead of reinventing the wheel.
[03:53:49] <faassen> so I'm here, how can I help? :)
[03:54:06] * faassen goes to section 5.
[03:54:15] <faassen> yeah, Boris now also gave me a link to that one.
[03:54:37] <faassen> it's quite different from the jsviews one, though they do share evolutionary ancestry. :)
[03:55:12] <IvanKuzev> rworth: do i have to change class names too..cuz i have used ui-carousel till now
[03:56:09] <rworth> IvanKuzev: you should, yeah. Again, there's a real possibility that anyone in your shoes could write a plugin that gets adopted by 200 people over the next 3 years, we want to avoid confusion that what they're using a plugin written by you vs. one that's supported by the jQuery UI team
[03:56:37] <IvanKuzev> okay
[03:56:46] <rworth> so while it is your work and not the work of jQuery UI, it should be known by a name of your choosing not the name of our suite
[03:57:21] <rworth> exception being when you're using the generic css framework classes, like ui-widget, ui-widget-content, ui-state-activet, etc.
[04:00:45] <faassen> rworth: so what is your thinking about observable and how it relates to data linking of forms, i.e. what you can do with jquery datalink?
[04:01:28] <rworth> my thinking is we're happy with observable as a low-level utility to be used, extended, and built on top of for data binding fun
[04:01:53] <faassen> rworth: right, I'm looking for the data binding fun thoughts. :)
[04:02:00] <rworth> although we're aware of things like datalink, we haven't approached them from a "let's build and support that too" perspective (yet?)
[04:02:02] <faassen> rworth: i.e. form data binding, where is that?
[04:02:10] <faassen> rworth: well, Boris Moore is the datalink guy too, right?
[04:02:25] <rworth> right, so the open question is whether that's application logic that we don't want to get into
[04:02:26] <faassen> rworth: and he says he's leaving that behind and going with observable + other stuff.
[04:02:53] <rworth> or whether there's a next higher level utility that we want to ship and support, and promote as a standard block
[04:03:26] <faassen> I'd think the notion that there are values in the DOM (in particular a form) that are kept in sync with underlying value in an object is valuable in a general way.
[04:03:36] <faassen> especially since with the observable story you have the other direction already.
[04:03:43] <rworth> right, datalink is in the past. Boris is doing the declarative binding with jsViews, but we're not there yet (if ever)
[04:04:03] <faassen> yes, but jsviews focuses on the template story primarily, right? I mean, I find that interesting.
[04:04:06] <rworth> for the moment, we're at a lower level, and cautiously evaluating how much we increase our scope
[04:04:09] <faassen> but I've built code on the datalink stuff.
[04:04:30] * IvanKuzev finished renaming the classes and namespace of the plugin...now about the documentation
[04:04:44] <faassen> rworth: where do I go if I want to sit in on the cautiously evaluating?
[04:05:06] <rworth> I guess for the moment we're anxious for people to build things at this layer and propose what could distill as a useful reusable component. Or even better, and API
[04:05:10] <rworth> an API
[04:05:30] <faassen> okay, so I could start talking about an API to replace what datalink does that is still missing in observable.
[04:05:50] <faassen> and see how it ties to observable.
[04:06:16] <faassen> I've used datalink to write a form generation component in javascript, part of obviel.
[04:06:26] <faassen> http://www.obviel.org/en/0.-0/form.html
[04:06:33] <rworth> faassen: we meet weekly in here, see the wiki. Also you could tackle some open todos on observable or another wiki page, such as http://wiki.jqueryui.com/w/page/40076465/Grid-Editing
[04:06:36] <faassen> http://www.obviel.org/en/0.-0/_static/demo/form-demo.html
[04:07:13] <faassen> rworth: I'll put the weekly meeting in the wiki.
[04:07:31] <faassen> I meant, put it in my calendar. :)
[04:07:55] <faassen> I guess I just approached this from the wrong end.
[04:08:13] <faassen> I mean, I didn't know that jquery ui was thinking about this kind of stuff, I only saw Boris's stuff until today.
[04:09:04] <rworth> the most we've really talked about it to now, other than the wiki (which plenty of people aren't aware of), is http://blog.jqueryui.com/2011/10/state-of-the-jquery-ui-grid/
[04:09:21] <faassen> okay, thanks, I'll read that.
[04:21:02] <faassen> rworth: so concerning data linking and live templates.. I just read the template wiki page you edited three weeks ago, but it doesn't seem to come to much of a conclusion. concerning that.
[04:21:28] <rworth> faassen: which page?
[04:21:33] <faassen> http://wiki.jqueryui.com/w/page/37898666/Template
[04:22:06] <faassen> I assume the whole notion of live templates is still up for debate?
[04:22:17] <rworth> right, so this goes as far as we're willing to go atm, which doesn't involve template and data-binding in any way
[04:22:21] <rworth> yup
[04:22:23] <faassen> okay.
[04:22:38] <faassen> so in the jquery space, Boris Moore is the guy to talk to for that topic?
[04:23:11] <rworth> he's been doing the most that I'm aware, certainly the most of anyone that has worked/is working with us
[04:23:36] <rworth> and by us I mean myself and JÃ¶rn, working on the grid
[04:23:39] <faassen> okay. I mean, I am talking to him, but I am checking what's going on with all of this.
[04:24:17] <faassen> it looks like currently there is nobody working very hard on the datalink form data story.
[04:24:33] <faassen> I mean, you guys have observable, which can keep a DOM in sync with data.
[04:24:54] <faassen> but keeping data in sync with DOM is not currently a hot topic.
[04:25:02] <faassen> of course the main part where that makes sense is form input.
[04:25:27] <faassen> otherwise you'd prefer to just manipulate data directly and have the DOM update, not update the DOM and change the data.
[04:25:36] <faassen> but for form data it does make sense to do it that way around.
[04:26:42] <rworth> sure, but I think of it more as one-way vs. two-way databinding, rather than dom rendered from data vs. form data
[04:26:57] <faassen> other use cases for two way data binding?
[04:27:01] <faassen> besides forms?
[04:27:22] <faassen> I'm just being very explicit about the direction of the ways.
[04:27:37] <rworth> there are plenty of people interested in two-way data binding that aren't dying to have an implementation tied to input fields with microdata decorations
[04:28:04] <faassen> sure, a generic implementation probably is easier anyway.
[04:28:11] <rworth> my point is that any kind of input from the user could be interesting, and it doesn't have to be from the user, it could from a different part of the system
[04:28:37] <faassen> a different part of the system manipulating the DOM? I mean, one of the end points here is the DOM, right?
[04:28:41] <rworth> but it's going through a mechanism which is tracking changes and merging conflicts, rather than having direct access to the data
[04:29:15] <rworth> hey scott_gonzalez
[04:29:45] <faassen> tracking changes and merging conflicts, how does that tie into data linking?
[04:30:20] <scott_gonzalez> hey
[04:30:50] <rworth> faassen: it's a view of the problem beyond the simplicity of "there's a single user making changes to these form fields, let's relay them to the underlying data object"
[04:31:19] <rworth> because you've got changes (potentialy) happening above and below from multiple sources
[04:31:34] <faassen> but we're still talking about a browser window here, right?
[04:31:39] <rworth> yeah
[04:31:57] <faassen> I mean, if there are things a server must do to coordinate multiple users.. isn't that something else again?
[04:32:04] <faassen> isn't that on the data level anyway?
[04:32:16] <faassen> you could have five users editing the same object, and a sever might coordinate the changes somehow.
[04:32:45] <faassen> but that seems to me to be on the data level already. not on level of linking a user interface to an underlying data object.
[04:33:35] <rworth> honestly, I'm trying to avoid too much "magic" that isn't sensible and reusable
[04:33:37] <faassen> so I'm trying to envision how you'd have multiple sources in a two-way linking scenario in a browser.
[04:34:10] <rworth> and, we need a solution that is not just one flavor of doing something. If there are ten flavors, we'll let people choose their own
[04:34:30] <faassen> yes, but specific use cases beside the form one would be useful. :)
[04:34:39] <rworth> if there's some very obvious commonality, we'll see about what it makes sense to build that any flavor can extend or implement or map to
[04:34:54] <faassen> I'm all for generic solutions and non specific magic.
[04:35:20] <faassen> I'm just trying to figure how that flows from specific use cases.
[04:36:15] <faassen> the most generic I can get is.. there's a DOM. the DOM changes. some parts of the DOM are linked to a data object. when the DOM changes, the data object changes.
[04:36:46] <faassen> there's a way to declare how the data changes when the DOM changes, i.e. what elements to look at, what attributes and properties to look at, and converting data found in the DOM to data in the object.
[04:37:33] <rworth> another way to look at that would be "a change in the DOM represents a request that the data object change. if that request is successful, separately and asynchronously from that, the change in the data object will be reflected back to the DOM"
[04:37:59] <rworth> that's where it gets fun, when you're making those changes and the data is changing for other reasons below as well
[04:38:33] <faassen> hm, but in some cases the DOM really is changed directly by the browser, right?
[04:38:40] <faassen> I mean, if I type stuff into an input field.
[04:38:52] <faassen> is it possible to change that into a request that the input field changes?
[04:39:19] <faassen> or can all the events be hooked into.
[04:39:33] <faassen> maybe they can. yeah, that's an interesting way to look at it.
[04:40:00] <faassen> not sure how that feels to a user, though. lots of work might be happening when they type in a single character.
[04:40:50] <rworth> if a data change can cause an update in the dom and a user can also change the same dom, that's where we need some coordination. That's why I'm looking for something more than "when you make a change to this input, it automagically updates the underlying string from which it was rendered"
[04:41:26] <rworth> MVC is an approach to this, and a lot of frameworks have applied all 3 layers client-side
[04:43:20] <faassen> "automagically update the underlying string from which it was rendered".. I'm not proposing the template has much to do with this.
[04:43:56] <faassen> in the case of the form, there's a form description and a data object.
[04:44:07] <faassen> and those combined result in a rendered form (with data filled in according to the data object).
[04:44:35] <faassen> you can see the form description as a special kind of template, so perhaps you're referring to that.
[04:46:22] <rworth> I didn't say anything about templates, if there's a data object somewhere of which the view/DOM is a representation, there's a link
[04:46:56] <rworth> perhaps confusing because I used the word 'rendered' but I just mean in that the DOM is acting like a rendered view of that bit of data
[04:47:49] <rworth> but also, as we're discussing, the DOM is also a source of changing that data (or requesting it be changed in some cases)
[04:47:49] <faassen> anyway, specific coordination scenario. there's an input field. someone changes it. the underlying data object is changed as a result. as a result, the input field is changed again. that's a coordination issue: potentially the change the user makes it different from the one resulting from the underlying data object. but I'm trying to see other coordination scenarios, as in this case my intuition is: the code shouldn't be doing tha
[04:47:51] <faassen> t. it should be resulting in the same thing, otherwise what sense can be made of interpreting an echo?
[04:49:31] <rworth> it shouldn't necessarily always be the same, even if the values could be considered equiv. for example, may it should be formatted
[04:50:07] <faassen> yes, that's a good example.
[04:50:10] <rworth> or it could be invalid, and you want to notify the user that what they entered was invalid, but not remove it, because we don't want to lose data
[04:50:30] <faassen> yes, I know, I mean, I did implement a form engine on top of datalink. :)
[04:50:37] <rworth> and that validation could be client-side, but parts may be server-side, and it might be asynchronous
[04:50:49] <faassen> yes, I know.
[04:51:02] <faassen> my form engine supports that use case. though imperfectly. but that's why I'm here.
[04:51:19] <faassen> (it's imperfect primarily because of relations between fields that need to be validated together)
[04:51:50] <rworth> another person to talk to would be Brad Olenick
[04:51:53] <rworth> also from Microsoft
[04:52:07] <rworth> he's done (and is doing) a lot of work in this space
[04:52:08] <faassen> rworth: what's the best way to contact him?
[04:52:22] <rworth> and on top of Observable, in fact he's extending our current observable
[04:52:31] <faassen> cool.
[04:52:48] <rworth> I can intro you, send me your email rdworth@gmail.com
[04:52:53] <faassen> rworth: will do.
[04:53:26] <rworth> faassen: pleasure meeting and talking, I gotta run
[04:53:34] <faassen> rworth: thanks for the chat!
[04:53:41] <faassen> rworth: hopefully next time we'll be able to understand each other better. :)
[04:53:44] <faassen> rworth: I'll look you up.
[04:54:04] <faassen> rworth: but it's good to be able to talk about this kind of stuff with someone who wants to get things right.
[04:55:25] <faassen> anyway, see you later.
[07:49:22] <IvanKuzev> hey ...what are we using for shadows?
