[06:47:17] <jquicommit> [jquery-ui] rdworth pushed 1 new commit to master: http://git.io/6DzR5g
[06:47:17] <jquicommit> [jquery-ui/master] Fix various issues in our html files, fifth batch - Richard D. Worth
[06:48:03] <jq-jenkins> Project jQuery UI build #364: STILL FAILING in 30 sec: http://swarm.jquery.org:8080/job/jQuery%20UI/364/
[06:48:04] <jq-jenkins> rdworth: Fix various issues in our html files, fifth batch
[07:06:12] <jquicommit> [jquery-ui] rdworth pushed 1 new commit to master: http://git.io/16rKnQ
[07:06:12] <jquicommit> [jquery-ui/master] tests visual position: minor refactor - Richard D. Worth
[07:06:42] <jq-jenkins> Project jQuery UI build #365: STILL FAILING in 23 sec: http://swarm.jquery.org:8080/job/jQuery%20UI/365/
[07:06:42] <jq-jenkins> rdworth: tests visual position: minor refactor
[09:04:41] <gnarf> hey maxcutler
[09:05:14] <scott_gonzalez> So we've got a directory structure like this: https://gist.github.com/2500602
[09:05:15] <maxcutler> hey there. some folks get prickly about support-type stuff going on in #wordpress-dev
[09:05:54] <scott_gonzalez> We're the same way for our -dev channels.
[09:06:08] <scott_gonzalez> But this is actually relevant to our dev :-P
[09:06:48] <scott_gonzalez> So we're walking /dist to find the post types.
[09:06:57] <maxcutler> scott_gonzalez: would it be possible for you to maintain a textfile or SQLite DB or something that persists between publish cycles?
[09:07:23] <scott_gonzalez> We could probably do that on our stagning and production servers.
[09:07:44] <scott_gonzalez> Probably couldn't ensure that it'd stay around on individual dev machines though.
[09:07:48] <gnarf> maxcutler: maybe, but its kinda a distributed thing
[09:08:11] <scott_gonzalez> Do you have an idea of how we'd deal with deleted posts?
[09:08:16] <maxcutler> as nacin suggested, there are basically two routes: write a WP plugin with a new method that does what you want, or store the IDs in some persistent location that you can lookup. otherwise you have to page through wp.getPosts until you find what you are looking for
[09:08:23] <gnarf> what scott_gonzalez - the process running on stage/prod might actually be able to store that info, but then if someone ran it from their local machine...
[09:08:44] <nacin> I kind of figured you'd just wipe the database and re-import each time.
[09:09:00] <nacin> it's not like you need history; it's all stored in git.
[09:09:06] <scott_gonzalez> I thought that at first, but it'd kill other content like comments.
[09:09:20] <gnarf> scott_gonzalez: are we planning on using comments on wp anyway?
[09:09:33] <scott_gonzalez> For sites like blog.jquery.com, yes.
[09:09:42] <scott_gonzalez> Which will still run from git.
[09:09:46] <gnarf> scott_gonzalez: as opposed to using like a disqus?
[09:10:06] <gnarf> cuz that would be based on the slug (which shouldn't change) instead of a post id
[09:10:25] <scott_gonzalez> If we don't use WP comments then that would solve the problem.
[09:10:36] <scott_gonzalez> I can't think of any other content that would be generated outside.
[09:10:47] <scott_gonzalez> Though I'm not sure if there will ever be a mix of content on a site.
[09:11:01] <scott_gonzalez> Content generated directly in WP and content generated by node-wordpress.
[09:11:05] <scott_gonzalez> I don't think there will be.
[09:12:31] <scott_gonzalez> nacin: Easiest way to wipe the db?
[09:13:02] <scott_gonzalez> Also, what's our plan for keeping the site live during updates if we're wiping?
[09:13:10] <nacin> scott_gonzalez: you'd have to do it in an atomic fashion to ensure that you don't take the site down
[09:13:12] <scott_gonzalez> Will we have two dbs and swap?
[09:13:30] <nacin> scott_gonzalez: so yeah, probably two dbs and swap. you guys are already doing crazy things anyway, what's one more
[09:13:47] <gnarf> ehhhhhh
[09:13:51] <gnarf> i don't think thats gonna work
[09:14:01] <gnarf> there will be a hiccup
[09:14:13] <nacin> how?
[09:14:26] <nacin> just a matter of changing the DB in wp-config and deploying.
[09:14:32] <gnarf> nacin: don't all the sites use the same db anyway?
[09:14:52] <nacin> they can use any db you'd like them to use :-)
[09:14:52] <scott_gonzalez> Same db, but different tables.
[09:15:07] <scott_gonzalez> Well, how would we wipe anyway?
[09:15:44] <nacin> scott_gonzalez: probably just running TRUNCATE queries on the five content tables (posts, postmeta, terms, term_taxonomy, term_relationships)
[09:15:51] <maxcutler> it sounds to me like it'd be easier to write a simple WP plugin that adds a non-authenticated XML-RPC method that takes a path as the argument and returns the post ID
[09:15:59] <nacin> I agree with maxcutler.
[09:15:59] <scott_gonzalez> Wouldn't that cause the same problems that writing dirctly to the DB has?
[09:16:25] <scott_gonzalez> That still doesn't address the deleted posts problem.
[09:16:52] <maxcutler> I must have missed that part of the discussion. what's the issue with deleted posts?
[09:16:53] <scott_gonzalez> It's probably also faster to use the existing APIs.
[09:17:00] <scott_gonzalez> How do I know to delete them?
[09:17:21] <scott_gonzalez> If I get all the posts up front, then at the end I know what needs to be deleted (anything that I didn't edit).
[09:17:32] <nacin> so, two ways to do that. one, you can watch git history to see removed files. or, if you have no intention of doing that, you could delete anything you didn't edit.
[09:18:17] <nacin> if say you have it running on a post-commit hook, you'd know exactly which files to update, remove, and even move to a different path.
[09:18:18] <scott_gonzalez> The former can't happen because of the two step process. The latter requires knowing all the posts, which goes back to calling wp.getPosts().
[09:18:28] <nacin> sure.
[09:18:56] <scott_gonzalez> The most efficient would be a call that just gives me post id -> custom field value.
[09:19:13] <nacin> post_id => calculated path
[09:19:28] <scott_gonzalez> Yeah, I'm using the calculated path as the custom field value.
[09:19:43] <scott_gonzalez> I'm storing { key: "gwid", value: path }
[09:19:50] <nacin> you can probably just let WP calculate that, though.
[09:19:50] <maxcutler> but that wouldn't help find posts to delete?
[09:19:57] <scott_gonzalez> where path is something like "page/foo/bar.html"
[09:20:25] <scott_gonzalez> It would, it'd be a list of everything already in the DB. After I process everything in the git repo, whatever's left from the original list needs to be deleted.
[09:20:56] <nacin> if you store it in a custom field value, you'd avoid the need to do any custom XML-RPC method.
[09:20:56] <scott_gonzalez> The new API call should actually be gwid -> post_id
[09:20:59] <gnarf> scott_gonzalez: that sounds useful
[09:21:27] <scott_gonzalez> nacin: How would we do it?
[09:21:30] <nacin> I wouldn't think of a custom XML-RPC method as bad, though - there's already plenty custom code running to handle transformations etc.
[09:21:49] <nacin> two options, I see
[09:22:18] <nacin> one is, on create, you save the path of that post as found in the git repo. then on edit, you slurp all posts, and use that path value to figure out what needs to be deleted when you're done.
[09:22:38] <maxcutler> note that wp.getPosts has a 'fields' parameter. so if you don't want the whole post object, you can do wp.getPosts(0, username, password, array(filters here), array('custom_fields'))
[09:22:41] <scott_gonzalez> That's my current plan.
[09:22:45] <nacin> two is, a custom method that returns you post_id + path of all posts of a particular type, then you just use that on edit.
[09:23:16] <scott_gonzalez> Yeah, the custom method is what I'm wondering about.
[09:23:21] <scott_gonzalez> What's the easiest way to implement that?
[09:23:38] <maxcutler> http://codex.wordpress.org/XML-RPC_Extending
[09:24:38] <scott_gonzalez> Where do I put that code?
[09:24:50] <maxcutler> in a plugin preferably, or else a theme's functions.php
[09:25:01] <nacin> for you, it'd go into a file in mu-plugins
[09:26:48] <maxcutler> hey nacin, would you mind nuking L1227 of class-wp-xmlrpc-server.php?
[09:27:01] <scott_gonzalez> Where's mu-plugins again?
[09:27:13] <nacin> web-base-template/mu-plugins/extending-xmlrpc.php
[09:27:27] <nacin> maxcutler: the do_action?
[09:27:34] <maxcutler> yeah, it's a dupe of L1196
[09:28:46] <scott_gonzalez> ah, I was on an old rev.
[09:30:24] <maxcutler> the alternative to adding a new method would be to use the xmlrpc_prepare_post filter to add a new field to the post struct containing the path (extracted from the custom field or whatever), and then paging through wp.getPosts as normal
[09:31:08] <scott_gonzalez> A single call that gets all post types would be the easiest.
[09:31:32] <nacin> scott_gonzalez: so page/my-path/foo.html?
[09:31:52] <scott_gonzalez> yeah
[09:32:00] <scott_gonzalez> and page/foo.html for a parent page
[09:32:39] <nacin> gist coming up
[09:33:08] <nacin> https://gist.github.com/2500819
[09:33:33] <nacin> returns array of type+path => post_id
[09:34:05] <nacin> and forces that XML-RPC enable checkbox to always be checked.
[09:34:13] <scott_gonzalez> I don't think `get_page_uri( $post->ID )` will always be right.
[09:34:36] <scott_gonzalez> The post type can configure custom URLs, right?
[09:35:25] <nacin> yes
[09:35:37] <nacin> get_page_uri() just returns the path segments
[09:35:59] <scott_gonzalez> So we probably want to use the custom field, right?
[09:36:24] <nacin> this means you don't need it, as this will return you an array of every path currently in the DB
[09:37:09] <scott_gonzalez> But what happens when the git repo has /foo/bar.html and the foo type sets a custom URL structure?
[09:37:18] <gnarf> scott_gonzalez: dist_src custom field?
[09:37:20] <nacin> what's the custom URL structure going to be?
[09:37:32] <nacin> by path segments, I mean, it'll just return 'bar'
[09:37:39] <nacin> and actually 'foo/bar' because I added the type in there
[09:37:57] <nacin> even if the URL is jquery.com/api-methods/bar
[09:38:13] <scott_gonzalez> What about /foo/bar/baz/qux.html.
[09:38:29] <scott_gonzalez> That will have a name of "qux" and a parent of {id of baz}
[09:38:45] <scott_gonzalez> What will get_page_uri() return?
[09:39:24] <nacin> "foo/bar/baz/qux"
[09:39:48] <nacin> and if you wanted to add in the leading slash and the .html in the return response, that's easy.
[09:39:57] <scott_gonzalez> How does it know that? Does it just walk the parents and prepend their names?
[09:40:00] <nacin> yes
[09:40:11] <scott_gonzalez> Ok, so this is perfect then.
[09:40:25] <nacin> yes :-)
[09:40:54] <scott_gonzalez> Right now I'm working on a fress install of WP, not web-base-template. What's the easiest way for me to include this?
[09:41:03] <scott_gonzalez> Is there a file I can just drop this in for now?
[09:41:39] <nacin> create wp-content/mu-plugins
[09:41:42] <nacin> drop that file into there
[09:41:45] <scott_gonzalez> ok
[09:42:11] <nacin> mu-plugins are files that are always included ('must-use') for all sites on a network
[09:43:07] <gnarf> this is kinda neat
[09:43:17] <gnarf> defining our own XML RPC extension? :)
[09:46:45] <scott_gonzalez> WP_Query() always works against a single post type?
[09:47:21] <maxcutler> no, it can take 'any'
[09:47:42] <scott_gonzalez> perfect
[09:47:44] <scott_gonzalez> It's working :-)
[09:47:59] <scott_gonzalez> Oh, does that mean I can pass 'any' get wp.getPosts()?
[09:48:24] <maxcutler> sadly not, wp.getPosts checks if the passed value matches an actual post type. though maybe we should allow that...
[09:49:08] <scott_gonzalez> Seems reasonable.
[09:49:15] <scott_gonzalez> To allow it, that is.
[09:50:39] <maxcutler> I think the roadblock was that it makes cap checks harder. maybe nacin and I can talk about that this weekend
[09:51:38] <nacin> as long as wp.GetPosts uses WP_Query, it is fine for 'any' or an array of post types to be valid. WP_Query will handle checks.
[09:52:38] <maxcutler> it uses wp_get_recent_posts currently, which goes through get_posts which uses WP_Query. XML-RPC is just doing typical paranoid cap checks
[09:52:51] <gnarf> If the underlying API supports "any" and arrays, it seems only logical to expect the getPosts() can accept em
[09:53:37] <nacin> yeah, but it uses a very high-level API because in the past, it was designed for simplistic requests. in time.
[09:53:51] <maxcutler> gnarf: agreed. it'd be ideal if getPosts was just a wrapper on WP_Query with sane defaults, but that was too much change for this cycle
[09:54:14] <gnarf> oh so it existed first
[09:54:17] <gnarf> that makes sense then :)
[09:59:22] <scott_gonzalez> Thanks for the help with this. It's going to be a lot easier when I don't have to store the custom field.
[10:00:21] <scott_gonzalez> Well, at least I've implemented two more methods in node-wordpress along the way :-P
[10:02:14] <maxcutler> scott_gonzalez: glad to help. and thanks for banging on this new 3.4 stuff and the docs
[10:09:45] <gnarf> hey nacin - I'm not sure if you ever sent me those nginx proxy configs
[10:10:11] <gnarf> nacin: if you did, I don't remember what I did with them - would you mind tracking em down and gisting for me?
[10:10:16] <nacin> gnarf: I will look
[10:13:41] <rworth> so will node-wordpress have to check if this custom extension is available on the configured XML-RPC endpoint?
[10:14:15] <nacin> I don't think this is node-wordpress; I think it is the jquery library that uses the general library. if I had to guess.
[10:14:51] <rworth> scott_gonzalez is this the publish script, on top of node-wordpress ?
[10:14:58] <scott_gonzalez> yes
[10:15:01] <rworth> coo
[10:15:15] <maxcutler> and if you do need to check, call the 'system.listMethods()' method and look for the name
[10:15:40] <rworth> yeah, that would be a good check. thanks maxcutler
[10:16:42] <rworth> scott_gonzalez do you think we can have a live stage sizzejs today? And can I be working on a sep. piece atm?
[10:17:29] <scott_gonzalez> rworth: Maybe. But probably pretty late if it's done today.
[10:17:51] <scott_gonzalez> You can work on anything that isn't the publish task :-P
[10:18:05] <scott_gonzalez> I suppose there's a bunch of footer customization and the like.
[10:18:14] <rworth> ok, I'll work on the build task
[10:18:23] <rworth> and maybe a local preview after build
[10:18:42] <rworth> oh, footer customization for sizzle. yeah
[10:18:51] <scott_gonzalez> Ok, though working on the theme is probably better.
[10:19:14] <scott_gonzalez> The build task should just be a file copy :-P
[10:19:26] <rworth> gnarf do we have auto publish set up for web-base-template yet? In the meantime I can develop locally
[10:19:42] <scott_gonzalez> Hell, if I make the dir configurable, the won't even need to be a build task for sizzle.
[10:20:07] <rworth> how would the dir be configurable? Not the post type?
[10:21:22] <scott_gonzalez> Oh, right, we'll need the copy for the post type.
[10:21:35] <scott_gonzalez> Unless we just make a page directory in the repo :-)
[10:21:44] <scott_gonzalez> Anyway, the build task will just be a copy.
[10:21:53] <rworth> yeah, this one is quite simple
[10:25:59] <gnarf> rworth: no - no auto-pull stuff has been written yet
[10:26:27] <gnarf> rworth: i could set up a quick cronjob for you
[10:26:34] <gnarf> rworth: or i could get you ssh access to jq01
[10:26:43] <gnarf> so you can sudo git pull yourself
[10:27:08] <rworth> gnarf yeah that works. My key is on ui-dev.jquery.com
[10:40:54] <gnarf> hey nacin - did you change some files in web-base-template?
[10:41:04] <gnarf> i just tried to do a git pull
[10:41:09] <gnarf> and it warned me that i would lose local changes
[10:41:19] <nacin> I don't think, but let me check
[10:41:56] <nacin> I will push those changes, one second
[10:42:35] <gnarf> nacin: thx - whenever you get it resolved, can you reset / pull web-base-template ?
[10:43:13] <nacin> actually, just needs a reset. doing it now.
[10:43:58] <gnarf> thanks
[10:44:01] <nacin> done
[11:19:27] <jquicommit> [jquery-ui] jzaefferer pushed 2 new commits to master: http://git.io/j623iQ
[11:19:27] <jquicommit> [jquery-ui/master] Grunt: Ignore ajax content test files in htmllint task - Jörn Zaefferer
[11:19:27] <jquicommit> [jquery-ui/master] Position: Fix markup for deprecated tests. Insert/remove some new lines to make comparision to position.html trivial - Jörn Zaefferer
[11:22:18] <jq-jenkins> Project jQuery UI build #366: STILL FAILING in 2 min 27 sec: http://swarm.jquery.org:8080/job/jQuery%20UI/366/
[11:22:19] <jq-jenkins> * joern.zaefferer: Grunt: Ignore ajax content test files in htmllint task
[11:22:19] <jq-jenkins> * joern.zaefferer: Position: Fix markup for deprecated tests. Insert/remove some new lines to make comparision to position.html trivial
[11:38:01] <jquicommit> [jquery-ui] rdworth pushed 1 new commit to master: http://git.io/inwumA
[11:38:01] <jquicommit> [jquery-ui/master] Partial revert to fix IE6 regression in 258a637 - Richard D. Worth
[11:38:33] <jq-jenkins> Project jQuery UI build #367: STILL FAILING in 19 sec: http://swarm.jquery.org:8080/job/jQuery%20UI/367/
[11:38:33] <jq-jenkins> rdworth: Partial revert to fix IE6 regression in 258a637
[11:41:14] <scott_gonzalez> nacin: oh no, you can't set the name in wp.newPost()
[11:43:05] <nacin> scott_gonzalez: looking
[11:43:48] <nacin> scott_gonzalez: you sure you can't just pass post_name?
[11:43:55] <scott_gonzalez> Wait, this could be my code.
[11:44:12] <nacin> it looks like it allows anything that wp_insert_post() allows.
[11:44:13] <scott_gonzalez> I changed it to trim the .html from the file name sooner, and now I'm double trimming.
[11:44:59] <scott_gonzalez> ok, it's working
[11:45:27] <scott_gonzalez> I'm now properly detecting new vs. existing posts :-)
[11:55:31] <rworth> sweet
[11:59:39] <scott_gonzalez> WOOHOO! create, update, delete!
[11:59:58] <scott_gonzalez> I think that covers everything except for custom fields.
[12:01:45] <scott_gonzalez> I'm gonna add proper logging and then we can test against Sizzle.
[12:03:46] <rworth> cool
[12:04:43] <rworth> so how do we set up sizzle's them to show the index page as the index page? Or do we set up all themes to do that in some way, or just the parent?
[12:04:52] <rworth> may be a question for nacin
[12:05:03] <nacin> howdy
[12:05:21] <nacin> what's the goal for sizzle?
[12:05:52] <rworth> sizzlejs.com is the simplest of all sites
[12:05:58] <rworth> which is why we're starting with it
[12:06:01] <rworth> single index page
[12:06:31] <rworth> so scott_gonzalez just about has the publish task ready that will take that index.html page from the sizzlejs.com repo and put it in as a post
[12:06:50] <nacin> okay.
[12:06:51] <rworth> how do we then instruct the theme to display that post as the index of the whole site?
[12:07:03] <nacin> if the theme has only one post, then that's super simple.
[12:07:18] <nacin> otherwise, the node script will need to set a specific option
[12:07:27] <scott_gonzalez> It's just one post.
[12:08:09] <nacin> so take the index.php file in the theme and have it do a simple loop
[12:08:16] <nacin> and it'll show that one post, done.
[12:08:36] <rworth> ok
[12:10:58] <scott_gonzalez> nacin: Just ran into a problem.
[12:11:04] <nacin> ok
[12:11:07] <scott_gonzalez> If I publish page/foo
[12:11:09] <scott_gonzalez> Then delete page/foo
[12:11:14] <scott_gonzalez> Then publish page/foo
[12:11:22] <scott_gonzalez> I end up with page/foo-1 since the page isn't actually deleted.
[12:11:27] <nacin> let me check
[12:14:12] <nacin> okay. you'll like this
[12:14:18] <nacin> call wp.deletePost twice per post
[12:14:29] <nacin> first one trashes it, second one deletes it
[12:14:39] <nacin> we should add an argument to allow force-deletion, but for now, that should work.
[12:15:11] <scott_gonzalez> haha
[12:15:26] <scott_gonzalez> That'll look nice with callbacks :-P
[12:15:35] <scott_gonzalez> delete( id, function() { delete( id, function() { ...
[12:15:49] <nacin> in core, wp_delete_post() only trashes the post, unless it is already trashed, or if you do wp_delete_post( $post_id, $force_delete = true )
[12:17:12] <scott_gonzalez> Exposing that flag would be nice.
[12:17:42] <scott_gonzalez> Looks like it's probably working. Let me drop my posts table again.
[12:19:12] <scott_gonzalez> Yeah, it's working :-)
[12:21:39] <scott_gonzalez> rworth: I'm going to clean this up a bit, make some changes to node-wordpress, publish node-wordpress 0.0.3, then commit this to sizzlejs.com
[12:21:50] <rworth> awesome
[12:29:04] * scott_gonzalez has way too many projects. Navigating files is becoming painful.
[12:34:57] <scott_gonzalez> hah, demo.addTwoNumbers and demo.sayHello ship with WordPress?
[12:35:02] <scott_gonzalez> nacin: ^
[12:35:39] <nacin> scott_gonzalez: yeah. I think they are the only non-authenticated methods, so good for testing, I suppose.
[12:36:08] <scott_gonzalez> Are the system.* calls documented anywhere?
[12:36:25] <nacin> let me look
[12:36:50] <nacin> wp-includes/class-IXR.php ~ line 509
[12:37:03] <maxcutler> scott_gonzalez: http://scripts.incutio.com/xmlrpc/introspection.html
[12:37:14] <nacin> well there you go.
[12:37:58] <maxcutler> only listMethods is useful for WP, since we don't play nice with IXR for the other two
[12:38:55] <scott_gonzalez> cool
[12:53:02] <scott_gonzalez> rworth, gnarf: Should I list wordpress and grunt as dependencies or devDependencies for sizzlejs.com?
[12:53:22] <scott_gonzalez> They're not required to write content, but they're required for the repo to actually do anything.
[12:53:34] <scott_gonzalez> I have them in dependencies right now.
[12:53:48] <rworth> should be fine
[12:54:33] <rworth> package.json here means using npm+grunt in my view. Otherwise you can just play with plain content all you want
[13:31:53] <scott_gonzalez> rworth: Does this look like what we want for site repos?
[13:31:54] <scott_gonzalez> https://gist.github.com/2502842
[13:32:22] <scott_gonzalez> Should we point to .com or .org?
[13:32:28] <scott_gonzalez> Any email address?
[13:32:32] <scott_gonzalez> jQuery Team or jQuery Foundation?
[13:32:43] <rworth> jQuery Foundation jquery.org
[13:33:07] <scott_gonzalez> homepage as site or GH?
[13:33:20] <scott_gonzalez> I think site makes sense.
[13:33:45] <rworth> yeah, though I may have done GH for api.jquery.com
[13:35:04] <rworth> https://github.com/jquery/api.jquery.com/blob/master/package.json
[13:35:08] <scott_gonzalez> https://github.com/jquery/sizzlejs.com/commit/HEAD :-)
[13:35:08] <socialhapy> ★ Commit on sizzlejs.com by scottgonzalez (22.283s ago): Initial WordPress publish task.
[13:35:08] <rworth> don't forget bugs and licenses
[13:35:58] <scott_gonzalez> socialhapy is a bit precise, huh?
[13:36:42] <peol> just when it's < 60 secs :)
[13:37:20] <peol> .duration 59384.39248
[13:37:24] <peol> hm
[13:37:36] <peol> probably removed that one
[13:43:28] <scott_gonzalez> rworth: Ready to test this out?
[13:43:51] <rworth> scott_gonzalez oh yeah
[14:14:36] <rworth> nacin ping
[14:14:44] <nacin> pong
[14:15:03] <rworth> just updated index.php in the sizzlejs.com theme folder on the server
[14:15:10] <rworth> doesn't seem to have done the trick
[14:15:14] <rworth> can you take a look?
[14:15:27] <rworth> meanwhile scott_gonzalez 's publish tasked worked beautifully
[14:16:28] <nacin> ah, so, it's a page, rather than a post.
[14:16:41] <rworth> it is
[14:16:44] <nacin> let me look to see how we can automate this a bit.
[14:16:44] <scott_gonzalez> We can make it a post.
[14:16:49] <nacin> if you make it a post, it will work.
[14:16:56] <rworth> yeah, we don't really care about the type
[14:16:58] <nacin> if not, we can have a little fun filtering the front page values.
[14:16:59] <rworth> ok, I'll try that
[14:17:13] <scott_gonzalez> mv dist/page dist/post; grunt wordpress-publish :-P
[14:18:57] <gnarf> hrm
[14:19:03] <gnarf> that looks --- interesting ;)
[14:19:09] <rworth> haha
[14:19:16] <rworth> it's getting there
[14:19:28] <nacin> I think I would rather solve it from the page perspective
[14:19:33] <gnarf> http://stage.sizzlejs.com/2012/04/26/index/
[14:19:34] <nacin> as that'll be needed for other sites
[14:19:38] <gnarf> is that gonna be a problem?
[14:19:52] <rworth> we just had to see it work nacin
[14:19:52] <rworth> indeed
[14:20:06] <rworth> even /index if a page will be a problem
[14:20:14] <rworth> we don't want duplicate content
[14:20:30] <gnarf> also, it looks like / has that strange render issue, but the individual post looks pretty nice
[14:20:36] <rworth> but we wouldn't have permalinks like this
[14:20:38] <nacin> yeah, leave it as is at dist/page
[14:20:42] <rworth> xcept maybe on the blog
[14:20:46] <nacin> and I will come up with a fix in a moment
[14:21:03] <rworth> ok, publishing as a page again
[14:21:29] <gnarf> hrm
[14:21:39] <gnarf> authors...
[14:21:56] <gnarf> that might become an issue too
[14:22:16] <rworth> authors?
[14:22:20] <nacin> we should rename jqadmin to jquery, make sure it is user_id of 1, and that then becomes the default author everywhere.
[14:22:31] <rworth> oh that
[14:22:48] <rworth> yeah, and again we won't ever show that except on the blog
[14:23:08] <gnarf> rworth: learning articles?
[14:23:24] <rworth> perhaps
[14:23:36] <rworth> we'd have to decide whether to transfer that metadata to a wordpress author
[14:23:40] <rworth> rather than a custom field
[14:23:53] <rworth> wordpress author would be cool if tied to a jQuery profile
[14:24:00] <nacin> I would start with a custom field (simple) until you know what you want to do with regards to profiles.
[14:24:08] <rworth> caus then you could find other articles (or blog posts, or plugins) by the same author
[14:24:34] <rworth> yeah, custom field will be real simple
[14:25:03] <rworth> and we could have authors as a post type, so they could have pages without being wordpress authors, right?
[14:25:13] <rworth> so we could even get some ways with custom fields
[14:29:31] <nacin> oh god
[14:29:46] <nacin> authors as a post type is rather difficult
[14:29:50] <rworth> oh
[14:30:11] <nacin> <— there's only one person I know of who has pulled it off, though.
[14:30:15] <rworth> so we'd be better off with genuide user authors?
[14:30:32] <nacin> totally possible as a post type. it just brought back haunting memories of writing that plugin for a news org.
[14:30:52] <rworth> from what I've seen so far, I have faith in you and scott_gonzalez ;)
[14:30:54] <nacin> however, genuine users make way more sense, given that they might, say, log in to favorite a plugin.
[14:31:05] <nacin> or rate. or edit their profile. etc.
[14:31:08] <rworth> yeah
[14:31:21] <nacin> they don't need to go to github and commit something to rate a plugin, right?
[14:31:23] <nacin> ;)
[14:31:52] <rworth> we don't want quite that high a barrier to entry, but I'd love it if the data ended up there
[14:32:00] <gnarf> I changed jqadmin's name to "jQuery Team"
[14:32:16] <nacin> I can rename the username
[14:33:48] <scott_gonzalez> ummm....
[14:34:02] <nacin> ideally you just don't even give admin rights to this user.
[14:34:09] <scott_gonzalez> Keep in mind that we just decided, only a few hours ago, that there will be 0 content generated inside WordPress.
[14:34:16] <scott_gonzalez> For any site that uses node-wordpress.
[14:34:24] <nacin> scott_gonzalez: this is just for the "Author" of a post
[14:34:40] <rworth> yeah, and profiles will be in a master site, like the network site, right?
[14:34:43] <nacin> could potentially show up in a feed for example
[14:34:45] <scott_gonzalez> I was referring to voting and editing author profiles...
[14:34:48] <nacin> rworth: pretty much
[14:35:00] <nacin> scott_gonzalez: well that is a whole separate thing
[14:35:03] <scott_gonzalez> As long as those changes end up in the associated git repos and not directly into WP...
[14:35:34] <nacin> it all depends what you plan out for profiles and user activity.
[14:35:37] <scott_gonzalez> Yeah, having profiles in a separate site works.
[14:36:04] <nacin> heads up, s/jqadmin/jquery/
[14:36:15] * rworth goes to dinner
[14:36:18] <scott_gonzalez> We can have sites that are purely WP-generated and sites that are purely node-generated, and they can interact with each other from within WP.
[14:38:17] <nacin> afk for a bit
[14:43:34] <gnarf> hrm nacin did that mean you changed jqadmin's username to jQuery ?
[14:45:43] <nacin> yes
[14:46:16] <nacin> lowercase Q but I can make it uppercase if you'd like. we're sticklers for spelling WordPress with a capital P, I understand
[15:02:37] <rworth> nacin I'm a little surprised you do it in a url though, like https://github.com/WordPress/WordPress . That's where we draw the line ;)
[15:03:16] <rworth> gnarf maybe nacin I just notived that the sizzle theme folder is called sizzlejs-org should be sizzlejs-com. I can rename it, what change(s) have to be made to correspond with that?
[15:15:06] <gnarf> rworth: unsure
[15:18:44] <nacin> rworth: haha :-)
[15:52:33] <nacin> rworth: gnarf: I would just make the change
[15:59:31] <scott_gonzalez> ZOMG, what happened?
[15:59:54] <gnarf> ?
[16:03:08] <nacin> stage.sizzlejs is probably a whitescreen right now because the theme moved
[16:04:51] <gnarf> hey nacin
[16:05:01] <gnarf> the "jquery" user doesnt have permissions on wp-admin/network ?
[16:05:42] <gnarf> why did we change that btw?
[16:05:43] <gnarf> :)
[16:05:58] <gnarf> just to reserve it?
[16:06:21] <nacin> to reserve it, and so it wouldn't look weird in URLs if it were ever present
[16:06:38] <nacin> in general if you did registrations you would probably block any registrations with 'jquery' in it
[16:07:15] <nacin> fixing the permissions
[16:07:32] <gnarf> i was gonna go reset the theme for sizzlejs if i could figure it out
[16:07:37] <gnarf> but it didn't let me ;)
[16:07:54] <nacin> you have your own account, yes?
[16:10:21] <gnarf> yes
[16:10:50] <gnarf> i had some issue getting in with that one before
[16:10:53] <gnarf> but it seems okay now
[16:11:20] <gnarf> hrm
[16:11:22] <gnarf> i don't get this
[16:11:33] <gnarf> sizzlejs-org is still listed and i don't see sizzlejs-com
[16:12:39] <gnarf> hrm
[16:12:43] <gnarf> this is interesting
[16:14:39] <nacin> the theme name was called "sizzlejs-org" in the style.css file
[16:14:55] <nacin> i just updated that, everything is squared away
[16:15:06] <nacin> working on a quick plugin for the front page
[16:23:21] <scott_gonzalez> nacin: If we have repos with media items, how should we reference those from the posts?
[16:23:35] <nacin> what is it you're trying to do with said media items?
[16:23:50] <gnarf> nacin's gonna need a special mention in this footer by the time we're done :)
[16:23:51] <scott_gonzalez> For example, the books in the footer will be posts.
[16:25:07] <scott_gonzalez> And sometimes we put images in blog posts: http://blog.jquery.com/2011/12/08/what-is-happening-to-the-jquery-plugins-site/
[16:43:24] <nacin> scott_gonzalez: how would you expect referencing an image in both of those situations?
[16:43:36] <nacin> scott_gonzalez: and do you plan to serve the media items from .github.com?
[16:43:51] <gnarf> hrm
[16:43:59] <gnarf> i wonder if github would get angry with us
[16:44:00] <gnarf> lol
[16:44:05] <scott_gonzalez> heh
[16:44:15] <scott_gonzalez> I was thinking we'd create media items and reference them.
[16:44:17] <scott_gonzalez> But I'm not sure how we'd reference them.
[16:44:21] <gnarf> cuz thats not a half bad idea
[16:44:38] <nacin> it depends in part on where you plan to server images, I guess
[16:44:51] <nacin> you really don't need to create media items/attachments
[16:44:51] <scott_gonzalez> If we serve them from GitHub, then it's easy :-)
[16:45:15] <gnarf> scott_gonzalez: even if we served them from our own repo its still pretty easy
[16:45:22] <gnarf>  /dist/img
[16:45:37] <gnarf> let the build tool name em
[16:45:46] <gnarf> i dunno
[16:46:18] <scott_gonzalez>  /dist won't be committed, but we could figure something out if we decide to use GitHub for hosting images.
[16:46:20] <gnarf> scott_gonzalez: can we serve them from github? *shrug*
[16:46:37] <scott_gonzalez> Well, I assume they allow images on GH pages, right?
[17:03:11] <nacin> scott_gonzalez: http://stage.sizzlejs.com/
[17:03:50] <scott_gonzalez> :-)
[17:04:06] <scott_gonzalez> So we probably want to change the content of the page.
[17:04:18] <scott_gonzalez> Set "Sizzle JavaScript Selector Library" as the title and remove it from the content.
[17:04:25] <nacin> yeah, sure
[17:04:34] <scott_gonzalez> I'm not sure if we want that inner content box.
[17:04:36] <nacin> easy to just add to the child theme
[17:04:39] <scott_gonzalez> But that's just styling and content changes.
[17:05:08] <scott_gonzalez> And we should remove the search.
[17:05:21] <scott_gonzalez> But that's just a custom header or page or something :-P
[17:05:50] <scott_gonzalez> It's so awesome that we were able to get this far in just two days.
[17:06:10] <nacin> well, a few weeks, but yes :-)
[17:06:19] <scott_gonzalez> Well, yeah, for the themes and infra stuff.
[17:06:43] <scott_gonzalez> But from "Hey, let's start getting the repo for Sizzle ready" to now is about 30 hours.
[17:06:55] <gnarf> scott_gonzalez: maybe a <title> tag makes sense in these html docs btw
[17:07:16] <scott_gonzalez> gnarf: <script>{"title": "Foo"}</script>
[17:07:36] <gnarf> scott_gonzalez: i suppose thats easier to parse...
[17:07:39] <scott_gonzalez> If we put a title in, then we need to rip it out in the build.
[17:07:55] <scott_gonzalez> All post meta goes in the <script> at the top.
[17:08:11] <scott_gonzalez> Anything that you can control in WP you can set in the <script> :-)
[17:08:21] <gnarf> nice
[17:09:05] <scott_gonzalez> I guess it was three days if you count when I started the node-wordpress rewrite. Still pretty quick.
[17:09:14] <gnarf> wouldn't adding the <title> make html lint happier and also be as easy to parse as the <script> is?
[17:09:47] <scott_gonzalez> <title> would make lint happy, yes
[17:10:01] <scott_gonzalez> It'd probably still yell about <!doctype>
[17:10:14] <gnarf> so no on the "easy to parse" ?
[17:10:28] <scott_gonzalez> It'd definitely complicate the parsing.
[17:10:38] <scott_gonzalez> We could mandate the order of <script> and <title> to make it easier.
[17:10:45] <scott_gonzalez> But it's also more difficult to generate.
[17:10:54] <scott_gonzalez> Keep in mind that many sites won't start as HTML.
[17:11:03] <scott_gonzalez> For example, the learn site starts as markdown and yaml.
[17:11:05] <gnarf> you could skip <title> if its not from an HTML
[17:11:27] <gnarf> and still use <script>{"title":"Foo"}</script> right?
[17:11:42] <scott_gonzalez> Sure.
[17:11:46] <scott_gonzalez> Though this script is always run against HTML.
[17:11:52] <scott_gonzalez> Not that it really matters.
[17:12:04] <gnarf> point scott_gonzalez
[17:13:06] <scott_gonzalez> Parsing for <title> would probably be safe, though <textarea><title> would kill us (unlikely to happen).
[17:13:24] <scott_gonzalez> Of course we could do the same restriction that we do on <script>, which is that it must be the first character.
[17:13:59] <scott_gonzalez> I'm just not sure what <title> really buys us.
[17:14:06] <scott_gonzalez> Just the ability to run html lint?
[17:14:34] <gnarf> I was thinking like /(?:<!doctype[^>)?\s*(?:<title>([^<]+)<title>\s*)?<script>....
[17:14:39] <gnarf> scott_gonzalez: pretty much
[17:14:47] <scott_gonzalez> haha
[17:15:42] <scott_gonzalez> It'd only be useful in very limited cases.
[17:15:51] <scott_gonzalez> Like this single page repo which is written in HTML.
[17:15:56] <scott_gonzalez> Blog posts will be written in markdown.
[17:16:00] <scott_gonzalez> Same for learn site.
[17:16:03] <scott_gonzalez> API sites are written in XML.
[17:16:25] <scott_gonzalez> Linting the build output doesn't seem too useful.
[17:16:27] <nacin> do you guys have code yet for markdown, btw?
[17:16:38] <gnarf> ?zalgo @scott_gonzalez
[17:16:38] <bot-t> scott_gonzalez, H̹̙̦̮͉̩̗̗ͧ̇̏̊̾Eͨ͆͒̆ͮ̃͏̷̮̣̫̤̣ ̵̞̹̻̀̉̓ͬ͑͡ͅCͯ̂͐͏̨̛͔̦̟͈̻O̜͎͍͙͚̬̝̣̽ͮ͐͗̀ͤ̍̀͢M̴̡̲̭͍͇̼̟̯̦̉̒͠Ḛ̛̙̞̪̗ͥͤͩ̾͑̔͐ͅṮ̴̷̷̗̼͍̿̿̓̽͐H̙̙̔̄͜
[17:17:05] <nacin> there's a plugin out there to enable markdown conversion very easily.
[17:17:15] <scott_gonzalez> nacin: I think the learn site is already doing something.
[17:17:30] <scott_gonzalez> Yeah, we can use a WP plugin too.
[17:17:49] <scott_gonzalez> Hooray for post_content_filtered :-)
[17:18:29] <scott_gonzalez> I guess we'll see if there are reasons to do it locally.
[17:18:36] <scott_gonzalez> Like having a local preview without WordPress.
[17:18:47] <scott_gonzalez> Just browsing /dist locally.
[17:19:45] <scott_gonzalez> node-wordpress keeps getting bigger :-P
[17:19:57] <scott_gonzalez> I keep needing more features.
[17:20:17] <gnarf> still one of my favorite stack overflow answers ever btw: http://stackoverflow.com/a/1732454/91914 "...HTML and regex go together like love, marriage, and ritual infanticide. The <center> cannot hold it is too late. The force of regex and HTML together in the same conceptual space will destroy your mind like so much watery putty..."
[17:58:54] <scott_gonzalez> https://github.com/jquery/sizzlejs.com/commit/HEAD :-)
[17:58:55] <socialhapy> ★ Commit on sizzlejs.com by scottgonzalez (18.575s ago): Grunt WordPress: Handle custom fields.
[17:59:27] <scott_gonzalez> nacin: That's actually quite a bit of work :-/
[18:00:29] <nacin> yeah.
[18:01:06] <scott_gonzalez> It's only that much work because I want to resuse existing fields.
[18:01:19] <scott_gonzalez> It'd probably be half the size if I just deleted all existing fields.
[18:01:43] <scott_gonzalez> Just seems like the ids would jump up really fast then.
[18:01:56] <nacin> shrug. I would wipe them all out and re-insert, personally.
[18:03:44] <scott_gonzalez> Meh, the code's already written.
[18:03:52] <nacin> as a big integer in MySQL, you end up with an upper limit of 18,446,744,073,709,551,615
[18:04:39] <scott_gonzalez> I suppose we wouldn't run into problems with JS not handling that since we'd always be getting ids from WP which would give us strings.
[18:05:24] <nacin> right. your bottleneck would be if they were integers in JS… not PHP or MySQL
[18:05:56] <nacin> and at any time you could truncate the tables to start over
[18:06:23] <scott_gonzalez> I feel like truncating tables is so dirty.
[18:06:56] <scott_gonzalez> Couldn't that cause problems since it wouldn't go through any hooks?
[18:07:13] <scott_gonzalez> The script as is would actually handle someone truncating the tables :-)
[18:07:32] <nacin> I was just referring to the doomsday scenario of reaching the 9E18 limit in PHP :-)
[18:07:46] <scott_gonzalez> oh, heh
[18:08:34] <scott_gonzalez> When that day comes, I'll just switch to dojo.
[18:11:39] <nacin> your custom fields code isn't too bad.
[18:13:47] <scott_gonzalez> This is so awesome. I can't wait to use this on another site and prove that it'll work for all of our sites.
[19:20:57] <scott_gonzalez> https://github.com/jquery/sizzlejs.com/commit/b3266b791b47d5ff250dee7d4bc53572f6756ec4
[19:20:58] <socialhapy> ★ Commit on sizzlejs.com by scottgonzalez (47.807s ago): Use grunt-wordpress :-)
