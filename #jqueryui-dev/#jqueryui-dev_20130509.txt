[04:39:47] <rxaviers> scott_gonzalez, gd morning
[04:39:53] <rxaviers> quick question
[04:40:03] <rxaviers> On DB we have external JS dependencies
[04:40:12] <rxaviers> are you ok on using bower to manage them?
[04:43:17] <rxaviers> it would allow us not to have those dep files included on our repo, but to `bower install` them.
[05:31:39] <scott_gonzalez> rxaviers: I'm not sure what you mean. What external resources?
[05:34:22] <scott_gonzalez> http://lists.whatwg.org/htdig.cgi/whatwg-whatwg.org/2013-May/039555.html :-P
[05:34:43] <rxaviers> app/src/external/ = {event_emitter.min.js  farbtastic.js  handlebars.runtime.js  lzma.js}
[05:35:05] <rxaviers> + app/resources/external/ = {farbtastic.css  lzma_worker.min.js}
[05:35:55] <scott_gonzalez> I'd rather follow the pattern of every other site repo and keep it in the repo.
[05:36:32] <scott_gonzalez> Actually, Bower even tells you not to use Bower: If you aren't authoring a package that is intended to be consumed by others (e.g., you're building a web app), you should always check installed packages into source control.
[05:38:14] <rxaviers> Is any of those deps not intended to be consumed for others? They all are arent?
[05:38:22] <rxaviers> (deps listed above)
[05:39:41] <rxaviers> Use case: lzma had a bug and I wanted to update. Instead of changing its version number in a bower.json config file, we need to download the new version, replace the file and commit it.
[05:39:52] <rxaviers> (to update it*)
[05:40:22] <rxaviers> That approach would lets us manage the deps in a cleaner way
[05:41:15] <rxaviers> looking `git show` of a dep upgrade change, we'd simply see one line saying - version a, + version b (where usually b > a) :)
[05:42:04] <rxaviers> (instead of a dep content change)
[05:42:29] <rxaviers> does it sound bad?
[07:18:06] <scott_gonzalez> rxaviers: It's not about whether your dependencies are intended to be consumed (of course they are).
[07:18:48] <kborchers> APPLE #!$!%$#%!%#%$!%$#%!#%$!%#$!
[07:20:35] <scott_gonzalez> The recommendation here, even from Bower, is to have all of those dependencies checked into our repo.
[07:24:02] <rxaviers> scott_gonzalez, the recommendation you pasted above tells about not putting on bower private stuff that won't be used for others (plz correct me if Im wrong). What I'm saying is let's use bower for those deps (most of them are already in bower), so we can keep in repo our own website, which is the download builder code.
[07:24:21] <scott_gonzalez> You're wrong :-)
[07:24:34] <rxaviers> really? where?
[07:24:53] <scott_gonzalez> "If you're building a web app, you shoudl always check installed packages into source control."
[07:24:57] <scott_gonzalez> That's directly from Bower's docs.
[07:25:41] <rxaviers> hm, so it's not like an npm for front-end that I thought it was!? mmm
[07:26:38] <scott_gonzalez> Bower's only purpose is to fetch dependencies.
[07:26:52] <scott_gonzalez> The scope is much more limited than npm.
[07:26:58] <rxaviers> The same way we manage node.js dependecies with npm, I would like to do with frontend deps. DO you know a tool that we could?
[07:27:10] <scott_gonzalez> And there's no specific environment for it to integrate with, the way npm integrates with node.
[07:28:14] <scott_gonzalez> Bower will do that, but you'd still be committing the dependencies.
[07:30:07] <rxaviers> scott_gonzalez, bower docs says
[07:30:08] <rxaviers> N.B. If you aren't authoring a package that is intended to be consumed by others (e.g., you're building a web app), you should always check installed packages into source control.
[07:30:14] <rxaviers> I still think I am not wrong :P
[07:30:41] <rxaviers> It says not to put your whole web app into bower and manage your web app there
[07:30:45] <scott_gonzalez> That very clearly says If you're building a web app, always check installed packages into source control.
[07:30:57] <scott_gonzalez> That's not at all what that note is talking about.
[07:32:16] <rxaviers> af.you are correct
[07:32:32] <rxaviers> thanks for re-checking that.
[07:33:55] <rxaviers> That makes me wonder why a "front-end package management" (from its docs) is not intended to manage my front-end packages!?
[07:34:42] <scott_gonzalez> It is.
[07:35:01] <scott_gonzalez> Whether your packages are committed to source control has nothing to do with how they're managed.
[07:35:22] <scott_gonzalez> Just like using npm has nothing to do with whether your modules are committed to source control.
[07:38:45] <rxaviers> but, we dont commit the node_modules stuff
[07:38:54] <rxaviers> we gitignore then
[07:39:04] <scott_gonzalez> Yes, but that's different.
[07:39:06] <rxaviers> so, why to do it with frontend?
[07:39:17] <scott_gonzalez> 2 very important differences:
[07:39:40] <scott_gonzalez> 1) npm modules would not work if committed (things like syslog and sqlite need to be compiled)
[07:39:51] <scott_gonzalez> 2) file size is massively different
[07:43:14] <rxaviers> If you have a frontend dep that is used across several websites, it still makes no sense to commit that same thing on all of them. That's where a package manager gets into... Install it for you, so you dont need to version control something you dont need to.
[07:44:42] <scott_gonzalez> I don't see how "across several websites" has anything to do with this.
[07:45:37] <rxaviers> "several websites" is an absurd to exemplify the package management utility. ;)
[07:46:10] <scott_gonzalez> I don't see how it's relevant in any way.
[07:46:15] <rxaviers> which actually happens.
[07:46:27] <rxaviers> well but nevermind
[07:47:02] <rxaviers> thanks for your thoughts
[07:47:03] <rxaviers> ;)
[08:55:18] <scott_gonzalez> jzaefferer: Thoughts on https://gist.github.com/scottgonzalez/ac08922ca8c61c9606f8 ?
[08:59:21] <kborchers> scott_gonzalez: i know you didn't ask me but I am +1 for that change
[08:59:30] <scott_gonzalez> :-)
[08:59:40] <scott_gonzalez> I only asked jzaefferer because he added them.
[08:59:47] <kborchers> oh, ha
[09:00:05] <scott_gonzalez> I didn't realize we had all of these until someone tried to add another line.
[09:04:32] <jzaefferer> scott_gonzalez: looks good. I'll adjust my global ignore if necessary
[09:11:44] <jquicommit> 01[13jquery-ui01] 15scottgonzalez pushed 1 new commit to 06master: 02http://git.io/ZF44Pw
[09:11:44] <jquicommit> 13jquery-ui/06master 149db5e16 15Scott Gonz√°lez: Remove environment-specific files from .gitignore.
[10:35:00] <scott_gonzalez> Huh, I've never seen this before: http://cl.ly/image/3I421Z2M0n3b
[10:35:34] <rxaviers> wow me neither
[10:35:45] <tj_vantoll> Same here.
[10:36:51] <scott_gonzalez> I'm getting it consistently for https://github.com/h5bp/html5-boilerplate
[11:29:57] <DaveStein> mikesherov you never set away when you're away so i keep harassing you :P
[11:30:08] <DaveStein> need to talk to you about some false positives 
[11:38:34] <scott_gonzalez> DaveStein: Just leave a message for him.
[11:38:49] <DaveStein> scott_gonzalez: I did but he's slacking like I do :P
[11:38:52] <DaveStein> about to board plane
[11:39:00] <DaveStein> ill hit him up later via bot
[11:39:13] <DaveStein> simulate doesnt like auto scrolling feature i believe
[11:39:27] <DaveStein> the old tests would work cause they went the wrong direction so no scrolling would actually happen
[11:39:31] <DaveStein> see ya
[12:24:44] <mikesherov> I'm not slacking
[12:24:45] <mikesherov> !!!
[12:24:55] <mikesherov> I've been crazy crazy crazy busy
[12:48:05] <jquicommit> 01[13jquery-ui01] 15scottgonzalez created 06pr/982 (+1 new commit): 02http://git.io/kxg7dA
[12:48:05] <jquicommit> 13jquery-ui/06pr/982 14e4efa01 15Scott Gonz√°lez: Effects: Update demos to work with new directory structure.
[12:51:56] <scott_gonzalez> This took way too long to get working: https://github.com/jquery/jquery-ui/pull/982#issuecomment-17685595
[13:02:51] <rxaviers> cool scott, will see your demo commits
