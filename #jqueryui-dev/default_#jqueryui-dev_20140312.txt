[02:27:19] <jqmobilecommit> [13jquery-mobile] 15gabrielschulhof closed issue #7238: 1.4.2 - listview('refresh') does not set correct .ui-list-child unless called in pageshow or after 02http://git.io/RTDNJQ
[02:35:37] <jquicommit> [13jquery-ui] 15jzaefferer pushed 1 new commit to 06master: 02http://git.io/YvSfpA
[02:35:37] <jquicommit> 13jquery-ui/06master 144752ee9 15JoÌˆrn Zaefferer: Build: Include grunt tasks files in jscs task
[02:38:20] <jqmobilecommit> [13jquery-mobile] 15gabrielschulhof pushed 1 new commit to 06master: 02http://git.io/Ut07Fg
[02:38:20] <jqmobilecommit> 13jquery-mobile/06master 14a9d37be 15Gabriel Schulhof: Build: Use cheerio to update paths inside hrefs...
[02:40:14] <jqmobilecommit> [13jquery-mobile] 15gabrielschulhof 04deleted 066941-fix-grunticon-demo at 1406dc30c: 02http://git.io/DaS8Og
[02:41:15] <jqmobilecommit> [13jquery-mobile] 15gabrielschulhof 04deleted 06fix-page-tests-1.3 at 14ca5224f: 02http://git.io/bfnQ3w
[02:45:25] <jqmobilecommit> [13jquery-mobile] 15gabrielschulhof pushed 1 new commit to 06master: 02http://git.io/ygiC_g
[02:45:25] <jqmobilecommit> 13jquery-mobile/06master 149ff610d 15Gabriel Schulhof: Checkboxradio: Retrieve form ID via .getAttribute()...
[02:45:43] <jqmobilecommit> [13jquery-mobile] 15gabrielschulhof pushed 1 new commit to 061.4-stable: 02http://git.io/RElqWQ
[02:45:43] <jqmobilecommit> 13jquery-mobile/061.4-stable 142f6583e 15Gabriel Schulhof: Checkboxradio: Retrieve form ID via .getAttribute()...
[02:45:53] <jqmobilecommit> [13jquery-mobile] 15gabrielschulhof 04deleted 067223-correctly-retrieve-form-id at 14bdd7ae9: 02http://git.io/D3DzeA
[02:53:48] <jqmobilecommit> [13jquery-mobile] 15lastboy opened issue #7241: Feature Request: Add automation testing support (New approach) 02http://git.io/dMzaZg
[03:03:48] <travis-ci> [travis-ci] jquery/jquery-mobile#1503 (master - a9d37be : Gabriel Schulhof): The build passed.
[03:03:48] <travis-ci> [travis-ci] Change view : https://github.com/jquery/jquery-mobile/compare/68d2ccd3c8c0...a9d37bef04c8
[03:03:48] <travis-ci> [travis-ci] Build details : http://travis-ci.org/jquery/jquery-mobile/builds/20593132
[03:04:08] <jquicommit> [13jquery-ui] 15jzaefferer pushed 1 new commit to 06master: 02http://git.io/ICMoMg
[03:04:08] <jquicommit> 13jquery-ui/06master 149fad37d 15JoÌˆrn Zaefferer: Build: Fix testswarm task, use API correctly
[03:16:04] <jqcommit> [13jquery-color] 15jzaefferer pushed 1 new commit to 06master: 02http://git.io/D4Xm0A
[03:16:04] <jqcommit> 13jquery-color/06master 146e6e673 15JoÌˆrn Zaefferer: Build: Fix testswarm task, use API correctly
[03:24:49] <travis-ci> [travis-ci] jquery/jquery-mobile#1504 (master - 9ff610d : Gabriel Schulhof): The build passed.
[03:24:49] <travis-ci> [travis-ci] Change view : https://github.com/jquery/jquery-mobile/compare/a9d37bef04c8...9ff610de4790
[03:24:49] <travis-ci> [travis-ci] Build details : http://travis-ci.org/jquery/jquery-mobile/builds/20593613
[04:12:19] <_|Nix|_> uGoMobi: Ping! Hey! Is https://github.com/jquery/jquery-mobile/issues/7240 a bug?
[04:12:57] <uGoMobi> _|Nix|_: hey
[04:12:58] <_|Nix|_> uGoMobi: I'm thinking, since the dev provides the input for the filterable, it's the dev's responsibility to make sure pressing enter does not result in any form submission.
[04:13:50] <_|Nix|_> ... or should we handle that inside the lib when we "take over" the input?
[04:14:04] <uGoMobi> _|Nix|_: I am in doubt
[04:15:17] <_|Nix|_> uGoMobi: In filterable.backcompat we do indeed suppress the submit.
[04:15:39] <_|Nix|_> uGoMobi: However, if the user provides the input, the form may not be so well defined.
[04:16:16] <uGoMobi> _|Nix|_: I can think of cases where you want the form being submitted (like the search in our demos) but in most cases you probably don't want it 
[04:16:46] <_|Nix|_> uGoMobi: Yeah, if the input is part of a larger form, you don't want to suppress the submit, unless the textinput originates the submit.
[04:17:16] <_|Nix|_> uGoMobi: ... and if all you do is handle the submit, you dunno if the submit was caused by the textinput or not.
[04:17:29] <uGoMobi> _|Nix|_: right
[04:17:30] <_|Nix|_> uGoMobi: So, maybe what we can do is handle they keydown on the textinput.
[04:17:51] <_|Nix|_> uGoMobi: However, there may be other ways of triggering submit from a textinput.
[04:17:59] <_|Nix|_> uGoMobi: So, it wouldn't be a complete supression.
[04:18:25] <uGoMobi> _|Nix|_: yeah
[04:18:28] <_|Nix|_> uGoMobi: I can also explain this in the bug report and close the bug saying we cannot catch all cases if the input is given to use by the dev.
[04:19:51] <uGoMobi> _|Nix|_: let's first discuss the API with arschmitz as well
[04:19:57] <_|Nix|_> OK.
[04:20:16] <_|Nix|_> uGoMobi: We also need to discuss style option removal.
[04:20:25] <uGoMobi> _|Nix|_: this is a good example what happens if you don't start with documenting the API before developing
[04:20:39] <uGoMobi> _|Nix|_: yes, I would like to do that this afternoon when arschmitz is around
[04:21:00] <_|Nix|_> Yeah, OK. I'll make an effort to be around as well, because this will affect tomorrow morning's meeting.
[04:21:04] <uGoMobi> _|Nix|_: then we can inform the web-ui-fw tomorrow morning during the meeting
[04:21:09] <_|Nix|_> Exactly.
[04:21:13] <uGoMobi> heh :)
[04:21:34] <uGoMobi> _|Nix|_: I saw your conversation last Friday about this
[04:22:28] <_|Nix|_> Right. 
[04:22:28] <uGoMobi> _|Nix|_: but it's not completely clear to me yet why it would have to wait for the classes option
[04:22:34] <_|Nix|_> uGoMobi: 
[04:22:50] <_|Nix|_> because the classes option essentially replaces the current style options.
[04:23:05] <_|Nix|_> The classes option is essentially an all-in-one style option.
[04:23:11] <_|Nix|_> One style option to rule them all.
[04:23:47] <_|Nix|_> ... and the code for applying it will exist in exactly one place: the widget factory.
[04:23:58] <_|Nix|_> So we won't have .toggleClasses() all over our widgets.
[04:24:15] <uGoMobi> _|Nix|_: yes, I understood that part
[04:24:43] <uGoMobi> _|Nix|_: from the style options removal wiki page.... Users should (un)set styles by adding/removing the applicable classes. Before a widget is initialized you can add classes in your markup or (if the classes need to be added to a generated wrapper) by setting wrapperClass option. After initialization you can use addClass/removeClass.
[04:25:15] <_|Nix|_> Yeah, I agree. We will lose that part.
[04:25:32] <_|Nix|_> You still won't be able to apply classes directly in your original markup.
[04:25:37] <uGoMobi> _|Nix|_: so I understand you could handle that with the classes options, but you can already handle it with bit custom code
[04:25:53] <uGoMobi> _|Nix|_: why not?
[04:26:48] <_|Nix|_> uGoMobi: the only reason I can think of is that you won't be able to replace all style options that way.
[04:27:29] <_|Nix|_> My ultimate goal wrt. style options would be this: Absolutely no JS needs to be executed to achieve the widget's initial style.
[04:27:32] <uGoMobi> _|Nix|_: the thing is that things like corners and shadow are style, not state. So I don't think it is something you want to change at runtime anyway
[04:28:11] <uGoMobi> _|Nix|_: yes , that would be ideal
[04:28:41] <uGoMobi> _|Nix|_: which is possible if all widgets have "enhanced" option
[04:29:55] <_|Nix|_> Yes, and, in fact, the widget factory classes option code wouldn't even be needed for pre-rendered widgets.
[04:30:04] <uGoMobi> _|Nix|_: right
[04:30:09] <_|Nix|_> It would only slow things down (but not a lot).
[04:30:19] <uGoMobi> _|Nix|_: that's why I dont' understand why we would have to wait for that
[04:30:47] <_|Nix|_> uGoMobi: We have to wait, because, without the classes option, style options can only be deprecated for pre-rendered widgets.
[04:30:58] <_|Nix|_> uGoMobi: Non-pre-rendered widget still /require/ style options.
[04:31:23] <_|Nix|_> uGoMobi: With the classes option in place, we can deprecate style options for all widgets, because we have an alternative way of specifying style options.
[04:32:53] <uGoMobi> _|Nix|_: Can you explain to me why non-pre-rendered widgets still require style options?
[04:33:16] <_|Nix|_> uGoMobi: Because the DOM elements to which you have to add classes do not exist yet.
[04:33:31] <uGoMobi> _|Nix|_: we have wrapperClass
[04:33:36] <_|Nix|_> uGoMobi: ... and yes, you can solve /some/ of that with data-wrapper-class, but can you solve them all?
[04:33:55] <uGoMobi> _|Nix|_: and adding enhanced option to remaining widgets is on the roadmap for 1.5 anyway
[04:33:56] <_|Nix|_> uGoMobi: For example, can you set the theme on the collapsible's button?
[04:34:34] <uGoMobi> _|Nix|_: I was only talking about corners, shadow, etc.
[04:34:55] <uGoMobi> _|Nix|_: like we discussed last week, theme, icon, and iconpos are different case
[04:35:04] <_|Nix|_> Well, OK, can you turn off corners on the collapsible's button?
[04:35:50] <uGoMobi> _|Nix|_: yes, just remove ui-corner class
[04:36:27] <_|Nix|_> uGoMobi: Yes, but you have to write code that does that.
[04:36:45] <_|Nix|_> uGoMobi: Can you write markup that, for a non-pre-rendered collapsible can make it have no corners?
[04:37:23] <uGoMobi> _|Nix|_: yes... .removeClass( "ui-corner-all" )
[04:37:31] <_|Nix|_> markup, not code.
[04:38:02] <_|Nix|_> uGoMobi: If you write code like that, you're again styling with JS.
[04:38:03] <uGoMobi> _|Nix|_: the default has to change to no corners
[04:38:46] <_|Nix|_> uGoMobi: With classes you could data-classes="{ 'corners': '' }"
[04:39:03] <_|Nix|_> uGoMobi: ... which is basically equivalent to data-corners="false"
[04:39:54] <_|Nix|_> uGoMobi: So, all you're really doing is changing the syntax for specifying style options, and handling the application of style options in a single place, rather than in every widget.
[04:40:11] <uGoMobi> _|Nix|_: ok, but my point is that I don't see why it is so important to make it easy to dynamically change corner, shadow, etc. styles
[04:40:38] <uGoMobi> _|Nix|_: it should be possible yes, but it's fine by me if you have to write a bit code for it
[04:40:41] <_|Nix|_> uGoMobi: Even if it's not important, you should still not have to write code that sets the /initial/ style.
[04:41:40] <uGoMobi> _|Nix|_: true, that's why it should be possible to just add class in markup. That is possible if you can write the markup for all widgets yourself (enhanced option)
[04:41:51] <_|Nix|_> I'd hate to see a JS file that basically does a bunch of $.mobile.document.on( "collapsiblecreate", "#advancedOptions", function() { $( "#advancedOptions" ).find( "a:first" ).removeClass( "ui-corner-all" ); } );
[04:43:01] <_|Nix|_> uGoMobi: Have we exhausted what can be achieved with the class option?
[04:43:33] <_|Nix|_> uGoMobi: That is, have we minimized the situations where style classes have to be applied to elements which are not part of the original markup (assuming non-pre-rendered wigdets)?
[04:46:06] <_|Nix|_> I mean with the class attribute, not the class option.
[04:46:19] <uGoMobi> _|Nix|_: I don't think so since we didn't really work on this yet and were planning on removing style options anyway
[04:46:48] <uGoMobi> not sure if I follow you though
[04:50:55] <_|Nix|_> Hold on ...  had an idea ...
[04:51:36] <uGoMobi> _|Nix|_: I do understand that the classes option makes things easier/better, but it appears to me that we have already solutions in place with the enhanced and wrapperClass options
[04:52:14] <_|Nix|_> uGoMobi: enhanced is definitely a good solution. wrapperClasses is a simplified version of classes.
[04:52:19] <_|Nix|_> I mean wrapperClass
[04:52:29] <uGoMobi> yeah
[04:54:03] <_|Nix|_> Let's ignore enhanced for now, because the problem is solved whenever you use enhanced. Let's assume enhanced doesn't exist. Then, we can only get rid of a style option if you can add a class to the original element that ends up getting enhanced. Correct?
[04:54:13] <uGoMobi> when all widgets that generate markup have the enhanced option you wouldn't even need wrapperClass anyway
[04:54:35] <_|Nix|_> You wouldn't need it if you actually used the enhanced option - but it's only an option.
[04:55:49] <uGoMobi> _|Nix|_: "we can only get rid of a style option if you can add a class to the original element that ends up getting enhanced", you mean if the style class is added to the native element and not the generated wrapper?
[04:55:59] <_|Nix|_> uGoMobi: yeah.
[04:56:11] <uGoMobi> _|Nix|_: and then?
[04:57:14] <uGoMobi> _|Nix|_: JS to move the class?
[04:57:22] <_|Nix|_> Nonononono ...
[04:58:07] <_|Nix|_> Remember, I want 0 JS for initial style.
[04:58:21] <_|Nix|_> I want JS only if you decide to change the style.
[04:58:36] <uGoMobi> _|Nix|_: yes, but we can't target a parent with CSS
[04:58:44] <_|Nix|_> Nono. Of course not.
[04:59:02] <uGoMobi> _|Nix|_: ok, I shut up and wait for your explanation ;-)
[04:59:17] <_|Nix|_> But that's basically one form of having-to-target-an-element-not-initially-present.
[04:59:33] <_|Nix|_> Do we have any places where there are problems even with child elements?
[05:00:28] <uGoMobi> _|Nix|_: what kind of problems?
[05:00:40] <_|Nix|_> Like, in the case of collapsible, I see that we have solved the problem of corners with selectors. So, if ui-corner-all is added to the topmost element, corners appear in all the right places without having to also add ui-corner-all to, say, the anchor.
[05:01:10] <_|Nix|_> Have we done this for all style options for all widgets for all their children?
[05:01:14] <uGoMobi> _|Nix|_: yes, we made it inherit border-radius
[05:01:37] <uGoMobi> _|Nix|_: in case of corners yes
[05:01:53] <uGoMobi> _|Nix|_: in case of shadow you only want the wrapper to have the shadow
[05:02:16] <_|Nix|_> What about inset?
[05:02:23] <_|Nix|_> I gues that works too, right?
[05:03:18] <uGoMobi> _|Nix|_: yeah, only the outer element needs inset style
[05:03:43] <_|Nix|_> OK, good. So, it sounds like the only remaining problem  is one CSS cannot solve - the parent.
[05:03:50] <_|Nix|_> s/parent/wrapper/.
[05:04:25] <uGoMobi> _|Nix|_: yup
[05:04:59] <uGoMobi> _|Nix|_: that's why I am curious what you have in mind
[05:05:32] <_|Nix|_> Well, one idea I've had is that if you set data-wrapper-class="" then it adds no classes to the parent.
[05:05:56] <_|Nix|_> So, if data-wrapper-class is absent or undefined, then it sets the default classes on the parent.
[05:06:09] <_|Nix|_> But if data-wrapper-class is defined, then the style options are ignored.
[05:06:32] <_|Nix|_> Or, I mean, those style options which would result in classes being added to the wrapper are ignored in favour of the value of wrapperClass.
[05:06:45] <_|Nix|_> So, this is basically partial pre-rendering.
[05:07:07] <_|Nix|_> Because you don't provide the wrapper as part of the original markup, but you do provide the classes as part of the original markup.
[05:07:29] <uGoMobi> _|Nix|_: you started your idea with adding the style class to the native element
[05:07:30] <_|Nix|_> So, if data-wrapper-class does not include ui-corner-all, then the textinput will not have corners, even if the default is true.
[05:07:35] <uGoMobi> _|Nix|_: and no JS
[05:08:00] <_|Nix|_> uGoMobi: I know, but you have no choice but to JS for initial styles that cannot be expressed by CSS alone.
[05:09:01] <_|Nix|_> uGoMobi: I guess I must accept that JS cannot be avoided in some cases. It's not ideal, but if you must have it, then you should centralize it as much as possible, so that one small chunk of JS can serve /all/ widgets.
[05:09:37] <_|Nix|_> uGoMobi: the classes option does that. Until that lands, the wrapperClass option does that for mobile widgets.
[05:09:47] <uGoMobi> _|Nix|_: but that is if there isn't an enhanced option, but all widget will have enhanced option in 1.5
[05:10:10] <_|Nix|_> uGoMobi: Yes, but like I said, enhanced is an option, not a requirement in 1.5.
[05:10:12] <uGoMobi> _|Nix|_: so we are only talking about if you don't use the recommended way
[05:11:28] <_|Nix|_> If our long-term plan is to require that all markup be provided as part of the original markup (i.e. enhanced is no longer an option, but the only way), then we should synchronize the introduction of the requirement with the removal of the style options.
[05:11:39] <uGoMobi> _|Nix|_: "It's not ideal, but if you must have it, then you should centralize it as much as possible, so that one small chunk of JS can serve /all/ widgets" ... all widgets that generate a wrapper have the wrapperClass option now, right?
[05:12:03] <uGoMobi> _|Nix|_: so we don't have to do anything, because it will be replaced by the new classes option later anyway
[05:12:05] <_|Nix|_> uGoMobi: yes, but the code for processing the value of the wrapperClass option is widget-specific.
[05:12:40] <_|Nix|_> uGoMobi: Is it our long-term goal to require devs to pre-render their widgets?
[05:14:20] <uGoMobi> _|Nix|_: I see that as a result of our goal to offer best performance
[05:14:46] <uGoMobi> _|Nix|_: reduce DOM manip as much as possible
[05:15:01] <_|Nix|_> If what I did with the demos is any indication, then it's definitely something we want to require.
[05:15:02] <uGoMobi> _|Nix|_: but the UI widgets don't have an enhanced option
[05:16:47] <_|Nix|_> I guess what I'm saying is that if we're moving towards always-pre-rendered, then deprecating style options === requiring pre-rendering.
[05:17:15] <_|Nix|_> During the deprecation period, however, we can specify that you either use style options, or you use enhanced.
[05:17:28] <_|Nix|_> No mixing.
[05:18:31] <uGoMobi> _|Nix|_: deprecating style options !== requiring pre-rendering, because you can also use wrapperClass (first) and classes option (later)
[05:18:46] <uGoMobi> _|Nix|_: it's just that pre-rendered is better for performance
[05:18:51] <uGoMobi> so that's the recommended way
[05:19:36] <_|Nix|_> OK. If we take that approach, then we must worry about whether wrapperClass can truly serve all our use cases, or whether we must wait for the classes option.
[05:20:35] <_|Nix|_> ... and if we take that approach, then we should never say that "if you want to do that, just set data-enhanced=true and pre-render your widget".
[05:20:48] <uGoMobi> _|Nix|_: yes, and because I assumed wrapperClass can handle all use cases I asked the question why we would need to wait for the classes option
[05:21:30] <_|Nix|_> uGoMobi: OK, then the generic question is this: Can wrapperClass handle all use cases?
[05:21:48] <uGoMobi> _|Nix|_: exactly
[05:21:51] <_|Nix|_> uGoMobi: For example, can we replace <input data-corners="false"> with <input data-wrapper-class="?????">?
[05:22:01] <_|Nix|_> That's a more specific question.
[05:22:15] <_|Nix|_> However, the second question is a prerequisite for an answer to the generic question.
[05:22:16] <uGoMobi> _|Nix|_: I don't see why not
[05:22:31] <_|Nix|_> What would be the value of ?????
[05:22:47] <uGoMobi> _|Nix|_: ui-corner-all
[05:23:17] <_|Nix|_> uGoMobi: Nono. I want the equivalent of data-corners="false", not data-corners="true".
[05:24:01] <uGoMobi> _|Nix|_: ah sorry, I misread
[05:24:11] <uGoMobi> _|Nix|_: we have to change the defaults
[05:24:27] <_|Nix|_> ... or we can give data-wrapper-class precedence over the other style options.
[05:24:42] <uGoMobi> _|Nix|_: the default for corners have to be false
[05:24:43] <_|Nix|_> So, if wrapperClass !== undefined that the other style options do not matter.
[05:25:07] <_|Nix|_> So, even if the default is true, if wrapperClass !== undefined, then we ignore the value of the corners option.
[05:25:55] <uGoMobi> _|Nix|_: might be a bit tricky because if you use wrapperClass to add my-custom-class and you still to use style options in 1.5 it won't work
[05:26:26] <uGoMobi> _|Nix|_: or do you mean, check if the wrapperClass string contains style classes?
[05:26:37] <_|Nix|_> Nononono ... I want to avoid that.
[05:26:50] <uGoMobi> _|Nix|_: good, me too :)
[05:27:12] <_|Nix|_> uGoMobi: How about this: In 1.5, wrapperClass + style options will work as they did in 1.4.
[05:27:33] <_|Nix|_> But we deprecate style options in 1.5, and we say that as of 1.6, you have to add them to wrapperClass instead.
[05:28:01] <uGoMobi> _|Nix|_: that's not a correct way of deprecating something if you ask me
[05:28:03] <_|Nix|_> ... and for places where you don't need data-wrapper-class, you have to add them to ... well, ... class
[05:29:00] <_|Nix|_> I know what you mean. We don't provide the two solutions simultaneously.
[05:29:14] <uGoMobi> _|Nix|_: yeah
[05:29:48] <arschmitz> uGoMobi: _|Nix|_: good morning
[05:29:54] <uGoMobi> arschmitz: morning arschmitz 
[05:29:57] <arschmitz> if you ask me style options should just be part of theme
[05:30:04] <_|Nix|_> Actually, what if the code for the style options were to change so that they modify the value of wrapperClass.
[05:30:08] <arschmitz> they should not be something we worry about the ability to set 
[05:30:29] <arschmitz> you set how you want your page to look in your custom theme for things like shadow and corners
[05:30:31] <uGoMobi> arschmitz: I agree
[05:30:40] <arschmitz> and we dont provide any handy way to change at run time
[05:30:52] <uGoMobi> arschmitz: do you mean no class for things like corners and shadow at all?
[05:30:59] <arschmitz> no there should be a class
[05:31:04] <uGoMobi> ok
[05:31:05] <arschmitz> but it should ALWAYS be applied
[05:31:14] <arschmitz> and if you dont want corners
[05:31:20] <arschmitz> set borderradious = 0 in your theme
[05:31:26] <uGoMobi> ah ok, gotcha
[05:31:34] <arschmitz> thts how ui does it
[05:31:35] <uGoMobi> yeah, I can live with that
[05:31:42] <_|Nix|_> arschmitz: ... or for a specific selector that amounts to a widget or a section of the page or whatever.
[05:31:58] <uGoMobi> feels a bit ugly to have corner class in markup but no border-radius
[05:32:00] <arschmitz> and if you want to overide for a specific element you can target it how you choose with css
[05:32:36] <arschmitz> uGoMobi: yeah but thats basicly what making it not an option means
[05:32:36] <_|Nix|_> Wait a sec ... why do we even add ui-corner-all to every possible widget?
[05:32:39] <arschmitz> its not an option
[05:33:04] <arschmitz> _|Nix|_: well thats a debatable thing and has been considered for change in ui 
[05:33:06] <uGoMobi> arschmitz: yeah, that's the essence... it is not an option and not a state... it is style
[05:33:17] <_|Nix|_> OK. Gotcha.
[05:33:21] <arschmitz> to make a non corners class instead
[05:33:28] <arschmitz> but that i think is something for new theme
[05:33:29] <_|Nix|_> So, the theme is basically a place where all style options are on by default.
[05:33:31] <arschmitz> to think about
[05:33:39] <arschmitz> _|Nix|_: right
[05:33:48] <arschmitz> thats kinda the point of a theme to make it all look the same
[05:34:30] <_|Nix|_> OK, but then, if some things are not inherited by default, then those things must be made to be inherited by explicitly setting their value to inherit.
[05:34:50] <arschmitz> _|Nix|_: i dont follow?
[05:35:32] <_|Nix|_> arschmitz: I'm not sure which CSS properties are not inherited by default ...
[05:35:42] <_|Nix|_> but I know we have places where we say something: inherit;
[05:35:46] <arschmitz> why does it matter?
[05:36:29] <_|Nix|_> arschmitz: Because to write something: inherit you need to put that somewhere. I'm thinking, if we do not create extra classes for these cases, then such rules will go into .ui-<widgetname>
[05:36:48] <uGoMobi> _|Nix|_: what should be inherited?
[05:36:56] <arschmitz> _|Nix|_: im really not following sorry
[05:37:15] * _|Nix|_ is looking into the CSS for an example ...
[05:37:30] <arschmitz> for the current time things like corners and shadow should have there own class
[05:37:42] <uGoMobi> _|Nix|_: we only use that for corner styling in groups
[05:37:43] <arschmitz> any changes to the theme should be saved for new theme
[05:37:59] <arschmitz> we should not be investing time in changing or optimizing our current theme
[05:38:40] <_|Nix|_> I'm just trying to acquire a clear picture in my mind of what the new way of doing things will look like.
[05:38:56] <arschmitz> _|Nix|_: the new way is people are on their own
[05:39:00] <arschmitz> its not an option any more
[05:39:13] <arschmitz> on a per instance basis
[05:39:28] <arschmitz> if someone wants to change on a per instance basis they will need to write css to do so
[05:39:35] <_|Nix|_> arschmitz: Agreed, but, for example, for border-radius: If you say html { border-radius: 1em; } that doesn't mean every single element will have a border radius.
[05:39:37] <arschmitz> and possibly some code
[05:39:56] <arschmitz> _|Nix|_: nope you need to set it where you want
[05:40:03] <uGoMobi> in my prototype work for new CSS framework I just added border-radius to ui-button rule
[05:40:23] <uGoMobi> if you don't want it.... use themeroller/pre-processor
[05:40:58] <_|Nix|_> That's it, I think. This needs to be solved using a pre-processor, because there's no other way of passing the value around without actually copy/pasting it.
[05:41:08] <uGoMobi> and we can also add a ui-corner class with same border-radius value for convenience so you can add it to any element
[05:41:09] <arschmitz> _|Nix|_: thats NEW THEME
[05:41:12] <arschmitz> not for current theme
[05:41:32] <uGoMobi> arschmitz: don't need to yell ;-)
[05:42:08] <arschmitz> im not lol just trying to be clear that things like pre processors and theme changes are things for the new theme
[05:42:08] <_|Nix|_> arschmitz: I get it, I get it. I did say I wanted to get a clear picture of the new way things /will/ work. 
[05:42:13] <uGoMobi> that is new theme, just wanted to share what I have in mind for the future
[05:42:35] <arschmitz> uGoMobi: shouldnt it be ui-button-corners or something like that though
[05:42:36] <uGoMobi> arschmitz: yes, I agree, in general we don't invest time in things we are going to replace
[05:42:40] <arschmitz> if we are going to use bem
[05:43:37] <_|Nix|_> OK, so that takes us back to how we wanna handle 1.5.0.
[05:43:49] <uGoMobi> arschmitz: if we provide a button with corners and a button without corners, yes
[05:44:07] <uGoMobi> arschmitz: I am working on moving my local work to css-framework repo
[05:44:24] <arschmitz> uGoMobi: cool would like to see your progress in there as you go
[05:44:29] <uGoMobi> arschmitz: we can discuss that later when you had a look at it
[05:44:48] <arschmitz> _|Nix|_: for 1.5 its still an option
[05:45:02] <arschmitz> and we cant change the default as that would be an api break not a deprecation
[05:45:03] <_|Nix|_> arschmitz: What was the reason we wanted to hold off on style option removal until the classes option is in place?
[05:45:28] <uGoMobi> arschmitz: huh, is changing a default an API break?
[05:45:52] <arschmitz> uGoMobi: of course you have changed a default
[05:46:00] <arschmitz> things that count on that default will break
[05:46:16] <_|Nix|_> No more jQM apps/sites will have corners :)
[05:46:29] <_|Nix|_> If the code is left entirely alone.
[05:46:42] <_|Nix|_> ... except for dropping in a new version.
[05:46:58] <uGoMobi> arschmitz: so how should one go when you want to change the default of something (in general)
[05:47:22] <arschmitz> themeroller
[05:47:32] <_|Nix|_> So far what we've done, IINM is render the place where that default is stored obsolete.
[05:47:42] <_|Nix|_> I'm thinking about things like minimum scroll.
[05:47:58] <_|Nix|_> Or something like that. We used to have it, but it's not irrelevant, so we set it to 0 before we removed it.
[05:48:06] <_|Nix|_> s/not/now/
[05:48:21] <_|Nix|_> I remember updating the API docs about that.
[05:48:27] <arschmitz> _|Nix|_: that was actually a bug though
[05:48:33] <uGoMobi> _|Nix|_: I did same with ui-shadow-icon
[05:48:38] <arschmitz> _|Nix|_: native is always 0
[05:48:53] <uGoMobi> we changed the default of that to false, before removing the option
[05:49:03] <uGoMobi> so in 1.4 you can simply add or not add the class
[05:49:37] <arschmitz> uGoMobi: yeah thats kinda not great but it was part of new theme so a LITTLE different
[05:50:05] <arschmitz> but i dont think the defaults should change for shadow or corners 
[05:50:11] <arschmitz> for 1.5 they stay the same
[05:50:20] <arschmitz> and in 1.6 they are just always added
[05:50:42] <arschmitz> or not added if the default was false 
[05:51:02] <_|Nix|_> Yeah, the default doesn't change, but the way you achieve non-default behaviour does change.
[05:51:24] <arschmitz> _|Nix|_: right but we are basicly no longer supporting non default behivor
[05:51:43] <uGoMobi> arschmitz: and with the classes options you can manage which classes are added?
[05:51:51] <arschmitz> uGoMobi: right
[05:52:16] <uGoMobi> arschmitz: ok, now I understand why it might be better to wait for the classes option
[05:52:25] <_|Nix|_> arschmitz: Well, we have to support achieving non-default behaviour for the deprecation period.
[05:52:36] <arschmitz> _|Nix|_: yeah you use the option
[05:52:43] <arschmitz> this is something thats being removed
[05:52:47] <arschmitz> there is no replacment
[05:52:55] <arschmitz> and wont be a direct one at any point
[05:53:09] <arschmitz> classes will eventually provide similar functionality
[05:53:20] <arschmitz> but is not a direct replacment
[05:53:35] <arschmitz> so if we want to wait for classes thats ok by me
[05:53:57] <arschmitz> but this is a removal not a replacement so we don't need to
[05:54:29] <_|Nix|_> arschmitz: can wrapperClass not cover our use cases until classes lands?
[05:54:52] <arschmitz> _|Nix|_: it can to add
[05:54:55] <arschmitz> not to remove
[05:55:12] <_|Nix|_> arschmitz: What if having an empty string for wrapperClass means add nothing.
[05:55:23] <_|Nix|_> arschmitz: Not even the ui-widgetname class.
[05:55:31] <uGoMobi> _|Nix|_: we can't do that
[05:55:35] <arschmitz> _|Nix|_: that could break things badly
[05:55:53] <_|Nix|_> arschmitz: No, because you don't have to use wrapperClass.
[05:55:59] <uGoMobi> _|Nix|_: then you can't use wrapperClass for anything else (my-custom-class) just because you want to remove a style class
[05:56:15] <arschmitz> _|Nix|_: wrapper class should just add whats in it
[05:56:27] <arschmitz> it should not effect other classes on the element
[05:56:28] <uGoMobi> yeah
[05:56:32] <_|Nix|_> uGoMobi: yes you can: data-wrapper-class="ui-input-text my-custom-class"
[05:56:53] <arschmitz> _|Nix|_: devs should not have to do that thats not the intention of the options
[05:56:55] <_|Nix|_> arschmitz: OK, that still works.
[05:57:04] <_|Nix|_> Wait a sec, that still works.
[05:57:25] <_|Nix|_> If data-wrapper-class is not undefined, then the value of the style options is irrelevant.
[05:57:29] <uGoMobi> yeah, that would be even more ugly than style options itself if you ask me
[05:57:51] <uGoMobi> I don't like to abuse a feature for something it was not designed for
[05:57:51] <_|Nix|_> The same thing will happen if ever style options and the classes option coexist.
[05:57:52] <arschmitz> _|Nix|_: if you want to remove you just add a class to null the values
[05:58:20] <arschmitz> ex add a no-corner class
[05:58:32] <arschmitz> that in your css has a higher specificity then the corner class
[05:59:19] <_|Nix|_> arschmitz: OK, so you provided the solution for removing yourself. This actually speaks in favour of not waiting for the classes option.
[05:59:34] <arschmitz> _|Nix|_: yeah i dont think we need to
[06:00:29] <arschmitz> _|Nix|_: there is also the ugly way of targeting the widgets parent in your css
[06:00:40] <arschmitz> without wrapperClass
[06:01:02] <_|Nix|_> OK. It's settled then. In the vast majority of cases (where there's no wrapper), you can apply the style classes directly to the outermost element. Whenever there is a wrapper, you can apply the style classes via the wrapper, including such custom classes that turn things off.
[06:01:08] <arschmitz> .parentofwidget .ui-button { border-radius:0; }
[06:01:54] <_|Nix|_> arschmitz: Yeah, if you wrap the widget in a div for the explicit reason that you need to affect its style.
[06:02:26] <arschmitz> _|Nix|_: yeah its ugly but it works im just saying there are many ways with and without js to do this
[06:02:38] <arschmitz> there is no need for us to support some special one
[06:02:50] <uGoMobi> I agree
[06:03:01] <_|Nix|_> I prefer without JS, but in the case of wrapperClass we have to go with JS, because of a lack of expressivity on the part of CSS.
[06:03:24] <arschmitz> _|Nix|_: you can fix that lack by wrapping your widget in your inital markup though
[06:03:32] <arschmitz> so its still possible 
[06:03:35] <uGoMobi> exactly
[06:03:46] <_|Nix|_> True, so, do we advocate that approach?
[06:03:53] <uGoMobi> of course
[06:04:00] <_|Nix|_> OK, so forget wrapperClass.
[06:04:01] <uGoMobi> best performance
[06:04:55] <_|Nix|_> Wait a sec ... I'm confused. Does that not mean that we can get rid of wrapperClass altogether?
[06:05:03] <uGoMobi> no
[06:05:07] <arschmitz> we can but we wont
[06:05:24] <arschmitz> because like most things we have its a convenience 
[06:05:41] <arschmitz> its there so people can use it but it does not mean they should
[06:05:55] <uGoMobi> if we remove wrapperClass then enhanced shouldn't be an option but just required
[06:06:03] <_|Nix|_> This really is ugly. We're already wrapping the widget so we achieve the styling, and now we're asking the dev to wrap the wrapper to turn off some of that styling.
[06:06:23] <arschmitz> _|Nix|_: no they should just use enhanced
[06:06:27] <uGoMobi> no, it's not like that
[06:06:54] <_|Nix|_> arschmitz: That's actually a great alternative. If you want to turn things off in the wrapper, just pre-render the damned thing already :)
[06:07:10] <arschmitz> _|Nix|_: yeah as i said many approaches to do the same thing
[06:07:39] <_|Nix|_> OK, but then we need to decide on one we want to document and recommend, right?
[06:07:39] <arschmitz> just depends on what makes the most sense to the dev and their needs and abilities
[06:07:58] <_|Nix|_> OK, then we should document the various alternative approaches.
[06:08:00] <arschmitz> _|Nix|_: we should document that you set them in your theme
[06:08:14] <uGoMobi> we have to document the things we discussed on the wiki page for removing style options
[06:08:19] <arschmitz> and dont change per instance
[06:08:50] <arschmitz> i honestly see very little use case to change per-instance
[06:09:06] <_|Nix|_> Yeah, I mean, we have these per-instance style options now - how many people actually make use of them?
[06:09:16] <_|Nix|_> It'd be good to find out.
[06:09:27] <uGoMobi> inset vs. non-inset
[06:09:32] <arschmitz> for the sake of their users i hope very few
[06:09:39] <arschmitz> uGoMobi: thats actually a good example
[06:09:55] <arschmitz> hmmm that one makes me think
[06:10:07] <arschmitz> both ways are VERY common and used together
[06:10:10] <uGoMobi> but I agree that other than that you want consistency
[06:10:26] <_|Nix|_> Fortunately, inset is solved without wrapperClass.
[06:10:35] <arschmitz> yup
[06:10:38] <arschmitz> so its a non issue
[06:10:50] <arschmitz> it should be non by default
[06:11:01] <arschmitz> and if you want inset you just add the class in your markup
[06:11:11] <uGoMobi> right
[06:11:30] <_|Nix|_> Well, that's not currently the case :/
[06:11:37] <uGoMobi> for collapsible set you have to add the wrapper in your markup anyway
[06:11:54] <arschmitz> _|Nix|_: what do you mean ?
[06:12:09] <_|Nix|_> arschmitz: the default for inset is currently true.
[06:12:40] <arschmitz> _|Nix|_: no its not
[06:12:46] <uGoMobi> it's a bit different in general because we don't have ui-inset class
[06:12:58] <uGoMobi> for collapsible inset is true
[06:13:03] <uGoMobi> for listview it is false
[06:13:10] <uGoMobi> the defaults that is
[06:13:11] <_|Nix|_> Right. I was talking about collapsible.
[06:13:20] <arschmitz> i was talking about listview 
[06:13:29] <uGoMobi> i was talking about both
[06:13:32] <uGoMobi> :D
[06:13:32] <arschmitz> collapsible widget will add the class
[06:13:37] <arschmitz> listview wont
[06:13:50] <_|Nix|_> Right.
[06:14:02] <_|Nix|_> So, that's another example of the default-value problem.
[06:14:23] <arschmitz> _|Nix|_: inset is not something you set in theme though
[06:14:27] <arschmitz> so its a little different
[06:14:43] <uGoMobi> yeah
[06:14:56] <uGoMobi> and it's not simple to negate the style
[06:15:00] <_|Nix|_> Nom but if you were to remove the style option, how would you turn it off?
[06:15:17] <arschmitz> i think this is a case where we should change the default to be false everywhere
[06:15:19] <uGoMobi> you really would have to toggle ui-listview / ui-listview-inset clas
[06:15:24] <uGoMobi> s/clas/class/
[06:15:46] <uGoMobi> arschmitz: but you said that is API break
[06:15:48] <arschmitz> uGoMobi: could we seperate out the inset rules to make a ui-inset class
[06:15:58] <uGoMobi> arschmitz: yes
[06:15:59] <arschmitz> uGoMobi: right we change default in 1.6 announce in 1.5
[06:16:29] <arschmitz> as long as the change is simple and wont be too much work i think its worth it
[06:16:52] <uGoMobi> arschmitz: actually I think it makes things more simple
[06:16:58] <arschmitz> then you just add ui-inset class 
[06:17:12] <uGoMobi> it was just that we already used ui-listview so we did same for collapsible for consistency
[06:17:46] <uGoMobi> ok I'll open a ticket for that and assign it to me
[06:17:47] <arschmitz> yeah
[06:19:25] <arschmitz> if there are other options similar to inset we will have to consider those on a case by case basis
[06:20:53] <jqmobilecommit> [13jquery-mobile] 15uGoMobi opened issue #7242: Add ui-inset class for listview and collapsible 02http://git.io/JqqnbA
[06:22:36] <_|Nix|_> I've commented about announcing that the value will change from true to false.
[06:23:22] <_|Nix|_> I think mini is good, right, because default is false.
[06:23:25] <_|Nix|_> ?
[06:23:41] <arschmitz> yeah
[06:23:51] <_|Nix|_> So, ummm ... if we're doing this for inset, what's wrong with doing the same for corners and shadow?
[06:23:52] <arschmitz> and you can put ui-mini on any parent and it inherits
[06:24:05] <_|Nix|_> Is it because corners and shadow are too big of a change?
[06:24:14] <arschmitz> _|Nix|_: because we dont want to change the theme
[06:24:29] <arschmitz> why would we just randomly change corners or shadow to false?
[06:25:06] <_|Nix|_> arschmitz: For the same reason that we change inset to false. We want people who want things with corners to add the class themselves. Just like they will have to add the class ui-inset themselves.
[06:25:18] <arschmitz> _|Nix|_: thats not why we change inset
[06:25:23] <arschmitz> we change inset for consistency
[06:25:49] <_|Nix|_> So it's the same as listview, eh?
[06:25:54] <_|Nix|_> OK.
[06:26:12] <arschmitz> _|Nix|_: for example if there was a good reason to make it true on listview by default id be ok with that instead of false on collapsible
[06:26:24] <arschmitz> as long as its consistent 
[06:26:52] <_|Nix|_> OK, so corners is consistent even now, right?
[06:27:07] <arschmitz> _|Nix|_: as far as i know
[06:27:13] <_|Nix|_> So, that's why it makes no sense to change the default, right?
[06:27:19] <arschmitz> right
[06:27:21] <_|Nix|_> Just making sure I get the gist of things.
[06:27:27] <arschmitz> and because that would be changing the theme
[06:27:34] <arschmitz> and we should not be changing the theme
[06:27:42] <arschmitz> inset is not part of theme thats structure
[06:27:52] <_|Nix|_> Yeah ...
[06:28:03] <arschmitz> its not a themeable thing
[06:28:10] <_|Nix|_> You know, we've already done this once.
[06:28:13] <arschmitz> corners and shadow are themeable
[06:28:22] <_|Nix|_> We got rid of ui-btn-corner-all ...
[06:28:41] <_|Nix|_> We've gotten rid of a class, while retaining different radii for buttons and other rounded things.
[06:28:52] <_|Nix|_> ... just by using selectors instead of a second class.
[06:29:07] <arschmitz> ok?
[06:29:47] <_|Nix|_> So, can we not get rid of ui-corner-all the same way? The theme itself says that things have corners, so we don't need the extra class that says so.
[06:29:58] <arschmitz> _|Nix|_: thats a theme change
[06:30:04] <arschmitz> we shouldnt be changing the theme
[06:30:11] <arschmitz> if we want to do that for new theme thats fine
[06:30:25] <_|Nix|_> OK, so we /can/ do that, just not within the scope of 1.5.0.
[06:30:33] <arschmitz> right
[06:31:01] <_|Nix|_> OK, so I guess I just found out that I'm in favour of the new theme not having a corners class :)
[06:31:10] <arschmitz> _|Nix|_: it will have one
[06:31:20] <arschmitz> it just wont be used by the widgets
[06:31:42] <arschmitz> it will be a utility class to be used by the developers elsewhere in page
[06:31:58] <_|Nix|_> ... to have corners identical to our widgets, right?
[06:32:02] <arschmitz> so that they can use the same classes in their own markup for consistency 
[06:32:05] <arschmitz> right
[06:32:17] <_|Nix|_> Convenience. Gotta love it. Hope devs will, too :)
[06:33:01] <_|Nix|_> OK ... My head is still not fully wrapped around the whole subject, but I think I'm getting a feel for it now.
[06:33:04] <arschmitz> most love it some will troll you to the end of the earth for providing it 
[06:33:27] <_|Nix|_> Nobody is forcing anyone to use it.
[06:33:41] <_|Nix|_> Wanna save bandwidth? Custom download.
[06:33:51] <_|Nix|_> ... unless the theme is not modular :/
[06:34:11] <arschmitz> its not
[06:34:16] <arschmitz> yet anyway
[06:34:31] <_|Nix|_> Well, at the point where you're doing a custom download, you're hosting/distributing the theme yourself, anyway, so custom download === Highlight + Delete
[06:35:40] <arschmitz> _|Nix|_: the query string issues never stop! https://github.com/jquery/jquery-mobile/issues/7239#issuecomment-37408055
[06:36:41] <_|Nix|_> uGoMobi: If, unlike my head, your head /is/ wrapped around this whole style options thing, can you please write the changes into the wiki and/or show up at tomorrows meeting?
[06:36:44] <_|Nix|_> I ask because I'm not sure I can convey the full message we've distilled during this impromptu meeting :)
[06:37:19] <_|Nix|_> arschmitz: I thought I had a demo for that.
[06:37:44] <uGoMobi> _|Nix|_: ok, I'll try to get to that tonight
[06:40:36] <_|Nix|_> uGoMobi: That would be awesome!
[06:41:19] <uGoMobi> _|Nix|_ arschmitz: do we want to provide classes like ui-corner-none to override?
[06:44:00] <arschmitz> uGoMobi: i dont think we NEED to but it would probably be nice
[06:44:35] <uGoMobi> arschmitz: ok
[06:45:08] <arschmitz> uGoMobi: i could go either way
[06:45:28] <arschmitz> because im not sure we should encourage per instance overrides 
[06:46:43] <arschmitz> _|Nix|_: for the issue with filterable and form submission you should look at ui autocomplete
[06:47:36] <uGoMobi> arschmitz: right, but I can imagine users want bit different styling for elements in toolbars and content for example
[06:48:02] <arschmitz> uGoMobi: yeah like i said i could go either way
[06:48:10] <arschmitz> so if you think we should add them im ok with that
[06:48:52] <uGoMobi> good thing we deprecated auto-enhancement of buttons inside toolbars otherwise we had to deal with the default inline and mini there
[06:48:59] <uGoMobi> arschmitz: ok cool
[06:53:28] <_|Nix|_> arschmitz: Looks like they're handling the keydown and supressing submit that way.
[06:54:10] <arschmitz> _|Nix|_: makes sense maybe we should do the same?
[06:54:38] <_|Nix|_> arschmitz: I dunno ... mobile doesn't really have an enter key, does it?
[06:55:20] <arschmitz> id have to test but more or less yes
[06:55:43] <arschmitz> at least on ios
[06:56:04] <_|Nix|_> arschmitz: Well, I suppose it would be one step towards preventing undesirable form submissions.
[06:56:12] <arschmitz> im just not sure exactly what events it triggers
[06:56:37] <arschmitz> _|Nix|_: and if there is no enter button how would this be an issue?
[06:56:39] <_|Nix|_> Exactly. I'd hate to go on an event-collecting spree and adding all possible cases under which I have to preventDefault()
[06:57:23] <arschmitz> _|Nix|_: im going to bet it acts as an enter button
[06:59:23] <_|Nix|_> arschmitz: OK. Can do, in that case.
[07:01:54] <scott_gonzalez> Is there a way to accomplish the opposite of `text-indent: 1em`?
[07:02:00] <scott_gonzalez> I want every line except the first to be indented.
[07:02:20] <arschmitz> scott_gonzalez: does a negative value work?
[07:02:24] <arschmitz> -1em?
[07:02:35] <scott_gonzalez> It does, but then my first line is too far back.
[07:02:50] <scott_gonzalez> And adding padding would work but it breaks the existing styling.
[07:03:00] <arschmitz> hmm not sure then
[07:03:14] <arschmitz> scott_gonzalez: use 2 elements
[07:03:45] <arschmitz> and only apply text indent to second
[07:04:53] <scott_gonzalez> I don't know where the lines will break.
[07:05:12] <scott_gonzalez> But using two elements is a good idea. I can just add a wrapper to deal with the fact that padding breaks the existing styles.
[07:05:18] <scott_gonzalez> Just put the padding on the new wrapper instead.
[07:05:19] <scott_gonzalez> Thanks.
[07:05:24] <arschmitz> there you go
[07:05:52] <arschmitz> _|Nix|_: so the go key on ios is just an enter key
[07:08:41] <arschmitz> _|Nix|_: same on android
[07:19:37] <scott_gonzalez> rxaviers_: Do you think DB should expose the raw directory for a build in addition to the zip or do you think we should just unzip the files when we need to update the jQuery CDN?
[07:20:56] <rxaviers_> can you give me a little more context?
[07:21:14] <scott_gonzalez> Sure. Right now we just get back a zip file.
[07:21:20] <scott_gonzalez> Which has worked well for us.
[07:21:27] <scott_gonzalez> We send that to Google and Microsoft.
[07:21:42] <scott_gonzalez> And I've just been unzipping it on the command line when updating our CDN.
[07:22:17] <scott_gonzalez> jzaefferer and I are working on the transition to jquery-release and we're wondering if we can just copy the files over instead of unzipping the generated zip.
[07:22:24] <scott_gonzalez> For the task where we update code.jquery.com.
[07:22:26] <arschmitz> mobile has the same usecase 
[07:22:40] <scott_gonzalez> Unzipping is probably pretty fast.
[07:22:59] <scott_gonzalez> Using a command line zip tool is certainly very fast.
[07:25:19] <rxaviers> Ah! Ok. The release script uses a DB method that generates the .zip (without exposing the unzipped files). It's possible to use another method that iterates through each file if you need the release script to write the files into the fs for you.
[07:26:49] <rxaviers> On the last release script source I have, this is where it creates the zip https://gist.github.com/jzaefferer/85ec1d2a4c1ee0871c99#file-test-cdn-release-js-L120-L126
[07:27:55] <scott_gonzalez> Ok, we'll just unzip it in the release script. That's probably the easiest.
[07:28:18] <rxaviers> I would pick that choice too.
[07:28:57] <rxaviers> I also think it's safer. I mean, you can check if the zip content is in good shape
[07:30:26] <rxaviers> (If we choose DB to exposes both: the zip and the files, we could run into an issue of having different zip vs. files)
[07:30:34] <rxaviers> (unlikely, but possible)
[07:38:32] <scott_gonzalez> Yeah, we'll just work with what we have. Thanks for the input.
[08:26:55] <jquicommit> [13jquery-ui] 15arschmitz pushed 5 new commits to 06button-icon-span: 02http://git.io/PXwWBA
[08:26:55] <jquicommit> 13jquery-ui/06button-icon-span 142875e6c 15Alexander Schmitz: squash: updating tests
[08:26:55] <jquicommit> 13jquery-ui/06button-icon-span 14755d0e5 15Alexander Schmitz: Button: changing option text to showLabel to avoid confusion...
[08:26:55] <jquicommit> 13jquery-ui/06button-icon-span 148378921 15Alexander Schmitz: Checkboxradio: use control.labels if defined...
[09:56:29] <rxaviers> gseguin, I understood you'll check if you can expose the API when you have some spare time and let me know. Do you want me to take any action in the meantime?
[10:23:18] <jquicommit> [13jquery-ui] 15arschmitz pushed 2 new commits to 06button-icon-span: 02http://git.io/2wKLzQ
[10:23:18] <jquicommit> 13jquery-ui/06button-icon-span 14377538c 15Alexander Schmitz: checkboxradio: fix label selection if control.labels length is 0...
[10:23:18] <jquicommit> 13jquery-ui/06button-icon-span 148319cc8 15Alexander Schmitz: Button: fixing missed instances of text option switching to showLabel
[11:43:13] <jquicommit> [13jquery-ui] 15jbryson3 opened pull request #1213: Add two guards against trying to remove null objects (06master...06sortable-guard-fix) 02http://git.io/fYk1Pg
[12:08:36] <jquicommit> [13download.jqueryui.com] 15HWinMT opened issue #199:  Unable to open jQuery-UI zip files from Download Builder 02http://git.io/V3yl3g
[12:34:11] <jquicommit> [13download.jqueryui.com] 15ivanhalen opened issue #200: Different background images on Themeroller preview and downloaded (or CDN) theme 02http://git.io/w0ueew
[12:37:52] <jquicommit> [13download.jqueryui.com] 15scottgonzalez closed issue #200: Different background images on Themeroller preview and downloaded (or CDN) theme 02http://git.io/w0ueew
[12:38:15] <_|Nix|_> arschmitz: Do you have time for a review?
[12:38:26] <arschmitz> _|Nix|_: sure
[12:38:37] <_|Nix|_> arschmitz: Excellent! https://github.com/jquery/jquery-mobile/pull/7196
[12:38:46] <arschmitz> _|Nix|_: so i decided not to make a page events demo 
[12:38:57] <_|Nix|_> arschmitz: Why not?
[12:38:58] <arschmitz> _|Nix|_: and instead a made a jqm event debugger utility
[12:39:08] <arschmitz> its tied right into the api docs
[12:39:12] <_|Nix|_> Ooooh! A utility?
[12:39:22] <arschmitz> and you can just tell it what events to listen to
[12:39:38] <arschmitz> and it will alert or log ( your choice ) the event object and ui object
[12:39:44] <arschmitz> and give a description of the event
[12:40:11] <arschmitz> you can turn on and of deprecated events too
[12:41:22] <arschmitz> _|Nix|_: and its set so you turn them on based on widget or category
[12:41:47] <arschmitz> and because it parses the api docs it knows what events are available to listen to based on that
[12:42:35] <arschmitz> _|Nix|_: this has made me realize 2 things 1) pagecontainer is missing a lot of events
[12:42:47] <arschmitz> 2) some of our events need more data passed to them
[12:43:44] <_|Nix|_> arschmitz: Yes, like, for example, https://github.com/jquery/jquery-mobile/issues/7176
[12:44:02] <arschmitz> _|Nix|_: yup
[12:44:44] <_|Nix|_> arschmitz: Not sure if that issue shouldn't be moved up to 1.4.x ...
[12:44:50] <_|Nix|_> actually ...
[12:45:15] <arschmitz> was it provided in the old event?
[12:45:29] <_|Nix|_> arschmitz: Of course. The old event was triggered /on/ the page in question.
[12:45:35] <arschmitz> ah true
[12:45:37] <_|Nix|_> arschmitz: So the page was event.target.
[12:45:53] <_|Nix|_> arschmitz: ... and it was this, if you listened without delegation.
[12:45:57] <arschmitz> _|Nix|_: has ui-page-active been applied yet at that point?
[12:46:00] <arschmitz> to the new page?
[12:46:02] <_|Nix|_> arschmitz: ... and without bubbling.
[12:46:17] <_|Nix|_> arschmitz: Not sure, but, IINM, that will only solve one of the cases.
[12:46:33] <_|Nix|_> arschmitz: and, in fact, there's a point where both pages are active, because they both need to be visible.
[12:46:35] <arschmitz> _|Nix|_: no i think we should add it 
[12:46:45] <_|Nix|_> arschmitz: I think so too.
[12:46:48] <arschmitz> im just trying to decide if it should be in 1.4.x or 1.5
[12:47:05] <_|Nix|_> arschmitz: Actually, it must be in 1.4.x.
[12:47:12] <arschmitz> why?
[12:47:17] <_|Nix|_> arschmitz: Because without it, there is no equivalent for that which we are deprecating.
[12:47:42] <arschmitz> unless ui-page-active is applied before
[12:47:56] <_|Nix|_> Well, let's find out ...
[12:47:58] <arschmitz> because then that tells them the to page
[12:49:03] <arschmitz> and the prepage is set in this case so in that case its covered
[12:49:13] <arschmitz> assuming page-active is already set
[12:49:57] <arschmitz> _|Nix|_: brb need to bring in groceries :) 
[12:50:24] <_|Nix|_> OK.
[12:52:31] <_|Nix|_> OK ... something's seriously fscked with our slide transition.
[12:52:35] <_|Nix|_> http://jsbin.com/IFolanOW/337
[12:52:38] <_|Nix|_> uGoMobi: ^
[12:52:42] <_|Nix|_> Can you please have a look.
[12:52:42] <_|Nix|_> ?
[12:53:02] <uGoMobi> _|Nix|_: sure
[12:53:11] <_|Nix|_> Both pages have a totally normal toolbar, nothing fixed, nothing external, and they don't line up perfectly.
[12:53:39] <_|Nix|_> And, in fact, at the midpoint of the transition, sometimes one flashes as if it were in place and then disappears.
[12:53:53] <_|Nix|_> Tested on Chrome.
[12:54:36] <_|Nix|_> Yeah. After the outgoing page is done going out, the incoming page briefly appears as if it were in place, and then it disappears and the incoming transition begins.
[12:54:43] <_|Nix|_> However, they should be simultaneous.
[12:55:10] <_|Nix|_> Anyway, I'll concentrate on the page events for now, but this looks bad.
[13:06:38] <uGoMobi> _|Nix|_: I don't see it
[13:06:54] <uGoMobi> _|Nix|_: http://jsbin.com/IFolanOW/339
[13:07:15] <uGoMobi> _|Nix|_: I changed the theme of the second page just for testing
[13:07:36] <uGoMobi> _|Nix|_: looks like a normal transition to me on Chrome
[13:07:40] <_|Nix|_> Well, I certainly see it. I'll try to video capture it.
[13:08:17] <uGoMobi> ok
[13:09:47] <_|Nix|_> uGoMobi: http://babulina.go-nix.ca/nix/slide-transition-bug.mpegf
[13:09:54] <_|Nix|_> I mean mpeg, not mpegf
[13:09:57] <_|Nix|_> uGoMobi: http://babulina.go-nix.ca/nix/slide-transition-bug.mpeg
[13:12:17] <jqmobilecommit> [13jquery-mobile] 15gabrielschulhof closed pull request #7196: Selectmenu: Correctly pass theme and overlayTheme to popup (06master...067195-overlayTheme-for-popup) 02http://git.io/MtxCjg
[13:12:28] <jqmobilecommit> [13jquery-mobile] 15gabrielschulhof pushed 1 new commit to 061.4-stable: 02http://git.io/QrdL8Q
[13:12:28] <jqmobilecommit> 13jquery-mobile/061.4-stable 1408cc012 15Gabriel Schulhof: Selectmenu: Correctly pass theme and overlayTheme to popup...
[13:12:43] <jqmobilecommit> [13jquery-mobile] 15gabrielschulhof 04deleted 067195-overlayTheme-for-popup at 14f8e150c: 02http://git.io/NeeLjA
[13:13:07] <_|Nix|_> uGoMobi: Were you able to open the file ... sometimes people have difficulties with xvidcap-generated mpegs.
[13:13:10] <_|Nix|_> ?
[13:13:44] <_|Nix|_> uGoMobi: Looks totally clean on FF.
[13:14:18] <_|Nix|_> uGoMobi: It's Chrome 33.0.1750.146
[13:16:24] <_|Nix|_> uGoMobi: Hmmm ... it's fine on Chrome/Windoze too ...
[13:16:31] <_|Nix|_> uGoMobi: I don't get it ...
[13:17:01] <_|Nix|_> It's super-totally-busted on Chrome/Linux ... 
[13:17:47] <_|Nix|_> I'll dismiss it as a fluke.
[13:18:33] <_|Nix|_> arschmitz: The results are in:
[13:18:35] <_|Nix|_> pagecontainerbeforehide: old page is active, new page is in data.nextPage
[13:18:35] <_|Nix|_> pagecontainerbeforeshow: old page is active, old page is in data.prevPage
[13:18:35] <_|Nix|_> pagecontainerhide: new page is active, new page is in data.nextPage
[13:18:36] <_|Nix|_> pagecontainershow: new page is active, old page is in data.prevPage
[13:19:22] <_|Nix|_> I think the middle two warrant the addition of the extra data parameter.
[13:27:16] <jqmobilecommit> [13jquery-mobile] 15gabrielschulhof closed issue #7231: Navigation - Browser Back button with QueryString 02http://git.io/yyvIgQ
[13:28:38] <uGoMobi> _|Nix|_: the vid doesn't open
[13:28:52] <uGoMobi> _|Nix|_: I'll try it Windows
[13:28:55] <_|Nix|_> uGoMobi: Argh ...
[13:29:04] <_|Nix|_> uGoMobi: mplayer should be able to handle it.
[13:29:08] <_|Nix|_> uGoMobi: On linux.
[13:29:52] <_|Nix|_> uGoMobi: Oops ... it might actually be an AVI with the wrong extension.
[13:33:19] <_|Nix|_> uGoMobi: Oops ... it /is/ an AVI ...
[13:33:27] <uGoMobi> _|Nix|_: I tested on Chrome 33.0.1750.146 on OS X by the way
[13:33:33] <uGoMobi> same version, other OS
[13:34:28] <_|Nix|_> uGoMobi: I renamed it: http://babulina.go-nix.ca/nix/slide-transition-bug.avi
[13:34:34] <_|Nix|_> See if you have more luck ...
[13:35:38] <uGoMobi> _|Nix|_: yeah I can see it now
[13:35:41] <_|Nix|_> OK, good.
[13:35:53] <_|Nix|_> So, totally weird.
[13:52:37] <travis-ci> [travis-ci] jquery/jquery-mobile#1505 (master - 4434822 : Gabriel Schulhof): The build passed.
[13:52:37] <travis-ci> [travis-ci] Change view : https://github.com/jquery/jquery-mobile/compare/9ff610de4790...4434822486ad
[13:52:37] <travis-ci> [travis-ci] Build details : http://travis-ci.org/jquery/jquery-mobile/builds/20636852
[16:07:39] <gthoma2> Hi, I need some help with jQuery mobile, is anyone available?
[16:10:05] <uGoMobi> gthoma2: #jquery is the channel for support, also for jQuery Mobile
[16:10:18] <gthoma2> Okay, thanks
[16:10:21] <uGoMobi> gthoma2: if you ask your question there, I can try to help you
[16:10:41] <uGoMobi> gthoma2: np
[16:11:10] <gthoma2> Well my employer has a problem with the speed at which a certain page loads via $.mobile.navigate("#pageID2")
[16:11:59] <gthoma2> I am developing a PhoneGap application which should take the user to one of two beginning pages, the first page should pop up if they are opening the applicaiton as normal
[16:12:14] <gthoma2> Either from resuming from background or opening app from the tray
[16:12:37] <gthoma2> and the second page should load instead of the first if the user clicks on a notification which is fired from the applicaiton
[16:13:23] <gthoma2> The problem is that opening the second page, right now, first opens the first page briefly and then opens the second page... in that time to switch to the second page, a user will be able to log in to the app via the first page
[16:13:56] <gthoma2> I need a quicker way of navigating to the second page upon a user tapping a notification, so that they won't see the first page load at all.
[16:14:53] <gthoma2> Here is the onclick() event listener from a localNotification plugin that I am using to navigate to the second page...
[16:15:00] <gthoma2>  window.plugin.notification.local.onclick = function(id, state, json){                  $.mobile.navigate('#delay'); ... }
[16:17:10] <uGoMobi> gthoma2: I meant that you can ask your question at the #jquery channel and I will try to answer it there :)
[16:17:18] <uGoMobi> gthoma2: let's move to that channel
[16:17:24] <gthoma2> Ohh, I am sorry
[16:17:32] <uGoMobi> np
[17:00:50] <uGoMobi> _|Nix|_ arschmitz : I think this covers what we discussed about removing style options: https://github.com/jquery/jquery-mobile/wiki/1.5-Style-options-removal#wiki-notes
