[00:04:31] <doesallmagic2> Project jQuery UI - 1.8.x core build #680: STILL UNSTABLE in 8 min 30 sec: http://jenkins.jquery.com/job/jQuery%20UI%20-%201.8.x%20core/680/
[03:32:23] <M4rius> So quite here, are you all in Oxford? Oo
[04:54:40] <scott_gonzalez> jzaefferer: Just want to make sure you see this: https://forum.jquery.com/topic/gsoc-2015-slider-rewrite
[05:43:01] <jzaefferer> scott_gonzalez: just responded
[05:47:31] <M4rius> jzaefferer, do possibly have time to talk about the interactions rewrite gsoc project?
[05:48:03] <jzaefferer> M4rius: yeah
[05:48:58] <M4rius> cool, so I read up on PEP, and have been wading through the interactions code
[05:49:09] <M4rius> I was wondering what kind of scope you had in mind for the project
[05:49:56] <jzaefferer> Well, the goal is to have interactions with nice APIs on top of PEP. Any progress towards that goal would be good
[05:50:21] <jzaefferer> How much can be accomplished heavily depends on who's doing the work, so we have to figure that out
[05:50:56] <jzaefferer> updating the base interaction widget to use pointer events would be useful by itself
[05:51:17] <jzaefferer> I don't know how long that would take...
[05:51:24] <scott_gonzalez> We also have progress to make on the PEP side.
[05:51:38] <M4rius> I see
[05:51:42] <scott_gonzalez> Re-introducing a way to hook in so we can build jquery-pointerevents.
[05:52:02] <jzaefferer> is that "just" for IE8?
[05:52:24] <scott_gonzalez> It's partly for IE8, but also for filesize.
[05:52:41] <scott_gonzalez> I think we get to cut out a decent chunk of code that duplicates the jQuery event system logic.
[05:53:00] <scott_gonzalez> But it's been a while since I looked at what we can actually cut out, so don't hold me to that :-P
[05:53:19] <scott_gonzalez> We can certainly start with just using PEP out of the box.
[05:53:20] <M4rius> Would that be for PEP or for jquery UI ?
[05:53:26] <scott_gonzalez> And only testing in browsers that it supports.
[05:53:40] <M4rius> *the jquery event system logic duplication
[05:53:47] <scott_gonzalez> It'd be for jquery-pointerevents, which is a step between the two.
[05:54:05] <scott_gonzalez> PEP is a standalone polyfill, so it needs logic on how to handle the event system.
[05:54:21] <scott_gonzalez> jQuery Core already has a bunch of logic around that.
[05:54:36] <M4rius> yeah.  that is jquery._event right?
[05:54:48] <scott_gonzalez> So the goal is to have a custom build of PEP that just replaces some of its internals with calls to jQuery code.
[05:55:15] <scott_gonzalez> jQuery.Event and jQuery.event.
[05:55:53] <jzaefferer> Starting with plain PEP in interactions.js, without IE8, seems fine
[05:56:13] <jzaefferer> In theory we'd later replace that pep.js with a jquery-pep.js and it would just work
[05:56:15] <scott_gonzalez> Yeah, we can work on optimizations and IE8 support after.
[05:56:16] <arschmitz> scott_gonzalez: jzaefferer: i did that already in mobile
[05:56:24] <scott_gonzalez> Getting working interactions with PEP is more important.
[05:56:28] <arschmitz> i have a branch using PEP
[05:56:41] <arschmitz> started as polymer pointer events
[05:56:48] <scott_gonzalez> jzaefferer: Yeah, a drop in replacement is definitely the goal.
[05:57:43] <jzaefferer> M4rius: so as a GSoC proposal, you could define several milestones that build on top of each other. 
[05:57:48] <arschmitz> who knows jquery-pep might even buy us a little in speed since cores event code is pretty optimized
[05:59:39] <M4rius> Just so I am still with you: first convert mouse events in interactions.js to pointer-events (which are triggered by pep) and later use a to be constructed pep-jquery to trigger the events?
[06:00:00] <jzaefferer> M4rius: yeah, that sounds right
[06:00:33] <jzaefferer> actually using PEP might uncover various issues with PEP itself, so contributing there should also be an option
[06:01:07] <M4rius> yeah good point
[06:03:24] <M4rius> tbh i have not quite figured out where native events and jquery events meet in jquery-ui. Are jquery-ui interactions triggered by jquery-events or by native events?
[06:05:22] <arschmitz> M4rius: when your listening with jQuery listeners they are essentially one in the same 
[06:06:12] <M4rius> ok
[06:06:20] * M4rius processing
[06:07:15] <scott_gonzalez> The technical answer is always jQuery events.
[06:07:23] <scott_gonzalez> jQuery UI never uses a native event handler.
[06:07:30] <scott_gonzalez> It only binds via jQuery.
[06:07:45] <scott_gonzalez> jQuery captures all native events and triggers its own event handlers.
[06:08:06] <scott_gonzalez> It does that by binding a single native event handler for every element that has at least one event handler.
[06:08:30] <scott_gonzalez> So if you have `element.on( "click", fn1 )` and `element.on( "click", fn2 )`
[06:09:22] <scott_gonzalez> jQuery will add one event handler via `element[0].addEventListener( "click", someHandler )`
[06:09:54] <scott_gonzalez> and someHandler() just walks through the array of event handlers (fn1, fn2) and triggers them with the appropriate parameters.
[06:10:26] <M4rius> aaah. I see.
[06:12:52] <M4rius> cool thanks. I will dive into the code again :)
[06:37:44] <shubhendras> Hi , i m interested in slider rewrite for this GSoC 2k15, I understood the basic idea but i m little bit confused, where do I start? It will be great if anyone can help me through this . THanks! :) 
[06:45:58] <jzaefferer> shubhendras: I responded to a similar question on the forum earlier today, take a look there: https://forum.jquery.com/topic/gsoc-2015-slider-rewrite
[06:48:00] <shubhendras> thanks :) 
[06:48:35] <apsdehal> For QUnit upgradation I think I should checkout a new branch, and start working on it for initial fixes (since it needs QUnit version upgrade in bower.json)
[06:49:18] <jzaefferer> apsdehal: what QUnit upgrade are you talking about? what project are you looking at?
[06:49:42] <apsdehal> The one mentioned in GSoC ideas list for jQuery Mobile
[06:50:46] <jzaefferer> ah, okay. That's more for arschmitz to respond to
[06:51:14] <arschmitz> apsdehal: Hi
[06:51:18] <apsdehal> Hi
[06:51:53] <arschmitz> so for that task there are a few parts
[06:54:13] <apsdehal> Yes, it will be finished in a series of commits, also a breaking change for all the tests
[06:54:38] <arschmitz> apsdehal: well i wouldnt say breaking change we dont have any guranteed api for our tests
[06:55:04] <arschmitz> So one part is to upgrade to qunit 2.0 and the new api
[06:55:29] <arschmitz> Second part is to cleanup our tests
[06:55:48] <arschmitz> some of them are a nightmare 
[06:55:57] <apsdehal> So for contributing initial patches, I should checkout a branch and do a little cleanup of tests
[06:56:15] <arschmitz> and to try to get them using promises where possible instead of timeouts
[06:56:30] <arschmitz> 3rd part is to get the tests passing in all supported browsers
[06:56:58] <arschmitz> some tests assume support levels that make them break on some supported browsers even though the code works properly
[06:57:27] <apsdehal> IE, most probably :p
[06:57:29] <arschmitz> to get started with this yes i would look at our current tests and perhaps any open issues we have for them and try to do some cleanup
[06:57:41] <arschmitz> apsdehal: likely a big chunk :-)
[06:58:28] <apsdehal> Also while we are at, I was also looking 'Prototype JavaScript transition module', Do we need something like angular-animate, support for both JS and CSS animations?
[06:58:54] <arschmitz> no
[06:59:08] <arschmitz> we are going to remove our current css based transitions
[06:59:31] <arschmitz> and replace with ones done fully with JS using the jquery animate and effects methods
[06:59:41] <apsdehal> But AFAIK css transitions are better and faster then JS ones
[06:59:48] <arschmitz> thats not true at all
[07:00:13] <arschmitz> infact js based are generally faster when done properly
[07:00:25] <arschmitz> they also provide many other advantages 
[07:01:06] <arschmitz> based on the outcome of other discussions you would also work on performance comparions using jquery core animate and velocity.js
[07:02:11] <apsdehal> So all proper animations that are supported with jQuery core animate have to be implemented for jQuery mobile
[07:02:40] <jquicommit> [13jquery-ui] 15jzaefferer opened pull request #1468: Fix missing wrappers (06master...06fix-missing-wrappers) 02http://git.io/xj25
[07:02:42] <arschmitz> apsdehal: jquery core is a dependency of jquery mobile 
[07:03:09] <arschmitz> apsdehal: we will just use it 
[07:03:15] <arschmitz> to create our transition module
[07:03:25] <jqmobilecommit> [13jquery-mobile] 15apsdehal opened pull request #7985: Bower: Fix the jquery version (06master...067872-fix-bower-jquery-version) 02http://git.io/xjas
[07:03:39] <apsdehal> So a wrapper upon jQuery core animate
[07:03:49] <arschmitz> we may be able to do much of this using jquery-ui's effects as well
[07:04:28] <arschmitz> i wouldnt say a wrapper it will be a module that replaces our current transitions module
[07:04:41] <arschmitz> theres a lot more to it then just a call to animate
[07:05:27] <apsdehal> Any implementation which I can refer to, like some animation that has already been implemented?
[07:05:53] <arschmitz> nope or it would not be a prototyping task :-)
[07:06:32] <apsdehal> Which one is more important at the moment Cleanup of tests or JS Animations module?
[07:06:57] <arschmitz> right now the test i would say
[07:12:54] <apsdehal> Cleanup for the current tests would be consider as prototype task? Since upgrading to 2.0 would require an altogether different branch.
[07:13:57] <arschmitz> apsdehal: no prototypeing would mean working on creating an implementation for a whole new thing. The qunit upgrade is something that could easily be done with pr's you can use the current and the new api at the same time
[07:16:40] <apsdehal> But Bower upgrade would break many tests as > Starting from version 1.16 QUnit.asyncTest(), QUnit.start(), and QUnit.stop() are deprecated. 
[07:17:09] <apsdehal> And tests use asyncTest at many places
[07:22:16] <arschmitz> deprecated !== to removed
[07:22:46] <arschmitz> they will not be removed until 2.0
[07:28:10] <jquicommit> [13jquery-ui] 15jzaefferer pushed 2 new commits to 06master: 02http://git.io/xjMk
[07:28:10] <jquicommit> 13jquery-ui/06master 149a28197 15Jörn Zaefferer: Tests: Fix missing wrappers in progressbar tests
[07:28:10] <jquicommit> 13jquery-ui/06master 14ac2a111 15Jörn Zaefferer: Tests: Fix missing wrapper in widget extend unit tests
[07:30:02] <apsdehal> I will open a pull request with bower version upgrade and then start working further on it
[07:30:22] <apsdehal> Thanks a lot arschmitz
[07:33:17] <doesallmagic2> Yippee, build fixed!
[07:33:18] <doesallmagic2> Project jQuery UI build #1544: FIXED in 5 min 20 sec: http://jenkins.jquery.com/job/jQuery%20UI/1544/
[07:33:18] <doesallmagic2> * joern.zaefferer: Tests: Fix missing wrappers in progressbar tests
[07:33:19] <doesallmagic2> * joern.zaefferer: Tests: Fix missing wrapper in widget extend unit tests
[07:41:13] <jquicommit> [13jquery-ui] 15jzaefferer opened pull request #1469: Build: Style fixes (06master...06build-style-fixes) 02http://git.io/xj7t
[08:09:52] <jzaefferer> scott_gonzalez: https://github.com/jquery/jquery-ui/pull/1469#issuecomment-77584498 - since you reviewed what's there, I'm going ahead with merging that branch
[08:33:07] <scott_gonzalez> jzaefferer: Sounds good.
[08:33:37] <jquicommit> [13jquery-ui] 15jzaefferer closed pull request #1469: Build: Style fixes (06master...06build-style-fixes) 02http://git.io/xj7t
[08:37:08] <doesallmagic2> Project jQuery UI build #1545: SUCCESS in 3 min 45 sec: http://jenkins.jquery.com/job/jQuery%20UI/1545/
[08:37:08] <doesallmagic2> joern.zaefferer: Build: Style fixes
[08:47:44] <jzaefferer> scott_gonzalez: here's a preview of running esformatter against ui/ and tests/unit: https://github.com/jquery/jquery-ui/compare/master...jzaefferer:fix-styles-preview - I excluded datepicker and some interactions though
[08:53:07] <scott_gonzalez> Does esformatter have a list of context-changing methods for jQueyr?
[08:53:13] <scott_gonzalez> s/jQueyr/jQuery/
[08:53:34] <scott_gonzalez> It's kinda amazing that it gets the indentation on that right.
[08:53:44] <jzaefferer> scott_gonzalez: that's part of my plugin: https://github.com/jzaefferer/esformatter-jquery-chain/blob/master/plugin.js#L35
[08:53:55] <scott_gonzalez> Ah, that makes sense.
[08:54:52] <scott_gonzalez> so many files...
[08:55:01] <scott_gonzalez> I'm up to tests/unit/button and so far everything seems right.
[08:55:42] <jzaefferer> I found an issue in ui/accordion.js
[08:56:38] <atomiomi> Hi, recently I posted a question on the forum about rewriting slider. I looked through bugs and as I understood some of them are already fixed in jQuery mobile. Now I want to understand use cases and there are couple of questions. First, Bug # 4388 states that it is necessary to use more than two handles in range slider. Two use cases came to my mind: intermediate handles or multiple ranges http://vk.com/doc267974059_371952682
[08:58:40] <arschmitz> atomiomi: another use case is constaints
[08:59:06] <arschmitz> constraints*
[08:59:55] <scott_gonzalez> I'd say those are two different types of sliders in that image.
[09:03:02] <arschmitz> atomiomi: there is also the case of just allowing the setting of multiple arbitrary values that don't define a range
[09:03:42] <arschmitz> we dont nessasarrily need to support these though
[09:04:17] <scott_gonzalez> jzaefferer: Yeah, the .attr() on 316 is wrong for accordion.
[09:04:41] <scott_gonzalez> Oh man and 337 is really whacky.
[09:04:52] <scott_gonzalez> The indentation level isn't being carried forward.
[09:05:12] <scott_gonzalez> I'll just stop looking now since I'll have to look through everything again anyway.
[09:06:59] <jzaefferer> scott_gonzalez: those .attr() calls seem to get messed up by my plugin
[09:07:48] <jzaefferer> scott_gonzalez: is this change correct? https://github.com/jquery/jquery-ui/compare/master...jzaefferer:fix-styles-preview#diff-312047f9a8fc4a32a6429caa4a07d9f3R313
[09:08:12] <scott_gonzalez> Give me a few hours for that to load ;-)
[09:08:29] <atomiomi> "here is also the case of just allowing the setting of multiple arbitrary values that don't define a range" is it included multiSlider?
[09:08:50] <scott_gonzalez> Seems right to me.
[09:09:27] <scott_gonzalez> jzaefferer: Heading out for lunch.
[09:11:50] <atomiomi> Can you send an example of slider constraints ?
[09:15:09] <arschmitz> i dont have one publicly available to show i dont think but think of a time range an outer range defines the available range and the inner range defines the ideal time within that range
[09:19:57] <atomiomi> arschmitz: something like this? http://vk.com/doc267974059_371974298
[09:20:13] <arschmitz> atomiomi: yes
[09:21:13] <arschmitz> atomiomi: here is an example of a plugin that implements that but there are no demos or anything its torn out of a great project https://github.com/arschmitz/jqslider
[09:21:35] <atomiomi> Does API redisgn should include all this 3 variants?
[09:21:52] <arschmitz> thats not been determined
[09:21:57] <arschmitz> i was just giving you examples
[09:22:07] <arschmitz> of usecases for multiple handles
[09:30:28] <atomiomi> Thank you, I will write you back as I will create a draft version
[10:36:45] <binora> arschmitz: ping
[10:37:03] <arschmitz> binora: hi
[10:39:39] <binora> arschmitz: i was curious about the 'new demos' project. So, you guys are going with the jsbin right ? 
[10:40:09] <arschmitz> yes
[10:41:10] <binora> arschmitz: Ok. so, how do i contribute code related to this project ?  I mean should i make some composite demos so as to give an idea what i have in mind about the project ? 
[10:41:51] <arschmitz> a good place to start would be a pr to improve one or more of the existing demos
[10:43:47] <binora> ok. thanks.
[11:16:44] <jqmobilecommit> [13jquery-mobile] 15apsdehal opened pull request #7986: Bower: Update QUnit version to ~1.17.0 (06master...06test-upgradation) 02http://git.io/pv5g
[11:58:44] <arschmitz> leobalter: Ping!
[12:14:53] <leobalter> arschmitz hey
[12:15:23] <arschmitz> leobalter: was just wondering https://github.com/jquery/qunit/pull/767 
[12:15:34] <arschmitz> leobalter: is that something jzaefferer talked to you about this week?
[12:16:03] <leobalter> It's more something I talked to him, but we didn't talk anything about the failing assertions
[12:16:46] <arschmitz> leobalter: because i pinged him about this exact thing last weekend and talked to him about it the begining of this week about how to test an intentional failure
[12:16:55] <arschmitz> leobalter: and thats the exact solution i came up with
[13:01:23] <apsdehal> On updating the QUnit version I ran `grunt test` locally to run all the test, and they passed but the CI build failed and I am unable to find any failing tests https://travis-ci.org/jquery/jquery-mobile/builds/53384310
[13:19:18] <arschmitz> apsdehal: those are failures in the demos and are unrelated
[13:31:12] <jquicommit> [13jquery-ui] 15scottgonzalez opened pull request #1470: Autocomplete: Restore focus after clicking a menu item, if necessary (06master...06autocomplete-ie8-clicks) 02http://git.io/pfjE
[13:51:04] <jquicommit> [13api.jqueryui.com] 15jaspermdegroot pushed 1 new commit to 06css-framework-update: 02http://git.io/pJLD
[13:51:05] <jquicommit> 13api.jqueryui.com/06css-framework-update 1467b8bad 15Jasper de Groot: CSS Framework: Updated section about overlay
[15:56:55] <jqmobilecommit> [13jquery-mobile] 15gabrielschulhof pushed 2 new commits to 06master: 02http://git.io/pJxK
[15:56:55] <jqmobilecommit> 13jquery-mobile/06master 14f6d4e37 15Gabriel Schulhof: Flipswitch: Use .nodeName and .toLowerCase()...
[15:56:55] <jqmobilecommit> 13jquery-mobile/06master 149e63a6f 15Gabriel Schulhof: Textinput: Use .nodeName and .toLowerCase()...
[16:27:19] <travis-ci> jquery/jquery-mobile#2334 (master - 9e63a6f : Gabriel Schulhof): The build is still failing.
[16:27:19] <travis-ci> Change view : https://github.com/jquery/jquery-mobile/compare/ab24dd41c0d8...9e63a6f43fe5
[16:27:19] <travis-ci> Build details : http://travis-ci.org/jquery/jquery-mobile/builds/53415002
[17:00:42] <cal2010> hey folks. I was talking with my dev friend about the page transitions ( http://demos.jquerymobile.com/1.3.0-beta.1/docs/pages/page-transitions.html ) and really liked the slide / slideup page transition, but just for within a div and not a whole page; he said that for the most part it is just setup to do pages and not solely a div. 
[17:00:43] <cal2010> could anyone comment on this?  he's right? ehh you could do it of course but it'd be a chunk of work. or he's misinformed and we could prob do it without much effort.
[17:23:40] <jqmobilecommit> [13jquery-mobile] 15kakul opened pull request #7987: Added fixed position styling to prevent panels from going out of view (06master...06master) 02http://git.io/pUGo
[19:23:47] <arschmitz> cal2010: it can be more generic
[19:24:30] <arschmitz> cal2010: i have examples somewhere using it on random content but i dont have time to find them right this moment
[19:25:15] <cal2010> arschmitz: ahh very cool though that it can be generic. I would expect so. and i understand that you don't have the time atm it is no problem. 
[19:25:53] <cal2010> arschmitz: do you think you'll have time anytime in the near future by chance? if so cool, if not, it is no worries, we can be big boys and code it ourself heh ;-)
[19:26:40] <cal2010> arschmitz: but I will be available for a while and over next few days so I could wait or email you or anything convenient for you. but just the tip is enough honestly :)
[19:27:17] <apsdehal> arschmitz: Would commits like https://github.com/jquery/jquery-mobile/pull/7986 suffice for a prototype?
[19:38:55] <scott_gonzalez> Wow, I just found a site that's loading jQuery UI four times.
[19:39:42] <scott_gonzalez> Heh, first 1.8.18, then 1.8.21, then individual files for 1.8.21, then 1.8.20
[19:41:53] <scott_gonzalez> And for good measure they load these versions of jQuery: 1.7.1, 1.11.1, 1.7.2, migrate 1.2.1
[21:08:15] <cal2010> scott_gonzalez: efficiency at its finest
[22:15:10] <jquicommit> [13jquery-ui] 15atomiomi opened pull request #1471: Slider: Test to check reaching max with min that less than step (06master...06bug-#10078) 02http://git.io/pUps
