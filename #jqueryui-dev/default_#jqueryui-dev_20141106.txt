[05:12:44] <jquicommit> [13jqueryui.com] 15scottgonzalez opened issue #97: 1.9.2 download contains bad minified theme 02http://git.io/IL1ZWA
[05:16:31] <jquicommit> [13jqueryui.com] 15scottgonzalez closed issue #97: 1.9.2 download contains bad minified theme 02http://git.io/IL1ZWA
[07:06:51] <scott_gonzalez> arschmitz: Why is this done? https://github.com/jquery/jquery-mobile/blob/master/js/widgets/collapsible.js#L98
[07:06:59] <scott_gonzalez> The real defaults should be the real defaults.
[07:07:17] <arschmitz> i know there is an open issue about this
[07:07:19] <scott_gonzalez> _getCreateOptions() shouldn't be assigning values as a fallback.
[07:07:39] <arschmitz> and this widget is deprecated in 1.5
[07:07:43] <scott_gonzalez> ok
[07:07:49] <scott_gonzalez> So this isn't a common pattern?
[07:07:53] <arschmitz> no
[07:08:56] <scott_gonzalez> Ok, seems fine then :-P
[07:09:00] <arschmitz> scott_gonzalez: lol
[07:09:19] <arschmitz> scott_gonzalez: its because collapsible and collapsible set inherit options 
[07:09:32] <arschmitz> in a terrible fashion 
[07:09:44] <scott_gonzalez> But even with inheriting, there's no reason to lie about the default.
[07:09:49] <scott_gonzalez> The default should just be inherit.
[07:10:00] <scott_gonzalez> Instead of null which gets transformed into inherit.
[07:11:10] <arschmitz> yeah there is an issue in the api repo about this
[07:11:20] <arschmitz> because agcolom noticed that we were lying about them
[07:11:40] <arschmitz> scott_gonzalez: https://github.com/jquery/jquery-mobile/blob/master/js/widgets/collapsible.js#L353-L364
[07:12:00] <arschmitz> the conversation we had about fixing this in both places was in irc but you get the idea
[07:12:13] <arschmitz> that they should be the actual defaults
[07:12:33] <arschmitz> not null
[07:13:22] <arschmitz> scott_gonzalez: but anyway its all crazy how these widgets work and so we are replacing it with accordion
[08:06:33] <jquicommit> [13api.jqueryui.com] 15scottgonzalez pushed 2 new commits to 06master: 02http://git.io/Fv6AiQ
[08:06:33] <jquicommit> 13api.jqueryui.com/06master 14e9dc95d 15Scott Gonz√°lez: Build: Upgrade to grunt-jquery-content 0.14.0
[08:06:34] <jquicommit> 13api.jqueryui.com/06master 140890a1c 15Scott Gonz√°lez: Dialog: Split buttons example on to multiple lines
[09:29:13] <jqmobilecommit> [13jquery-mobile] 15janey1986 opened issue #7828: JQuery Mobile 1.4.5 radio control group breaks after back button is pressed 02http://git.io/eNkxgg
[09:37:47] <jperrault> is there a jquery utility function for getting the padding as a number, rather than the text value returned by .css( "padding-top" )?
[09:41:10] <gabriel_schulhof> jperrault: If you don't need to break down the padding between top/bottom and left/right, you can always subtract .height() from .outerHeight() resp. .width() from .outerWidth()
[09:42:24] <gabriel_schulhof> jperrault: However, IIRC, there's no generic way to find out one of the four paddings. For the popup arrow, I had to add an extra div into the widget which fits inside the parent, and then I had to subtract the parent's .offset().top from the extra div's .offset().top to get the padding.
[09:42:46] <gabriel_schulhof> The top padding, I mean.
[09:44:28] <jperrault> gabriel_schulhof: thx, I think .outerHeight() - .height() will do it.
[09:44:57] <scott_gonzalez> If you want padding, you'd want innerHeight, not outerHeight.
[09:45:56] <scott_gonzalez> jQuery.css() can get you the answer, but it's internal.
[09:53:52] <gabriel_schulhof> Do OPs of github issues have permission to reopen those issues? I've seen situations where an OP commented on a closed issue asking one of us to reopen, or filing a new issue that intentionally duplicates the old issue.
[09:54:09] <gabriel_schulhof> s/filing/filed/
[09:56:12] <gabriel_schulhof> Well, anyway, I'll ask the OP to re-open or file a new issue referring to the old issue.
[09:57:43] <jasperdegroot> gabriel_schulhof: maybe the OP can only re-open the ticket if he/she is the one who closed it
[09:58:21] <jasperdegroot> gabriel_schulhof: I've seen enough examples of OPs closing a ticket by accident and then reopen again
[09:58:33] <jqmobilecommit> [13jquery-mobile] 15gabrielschulhof closed issue #7828: JQuery Mobile 1.4.5 radio control group breaks after back button is pressed 02http://git.io/eNkxgg
[09:59:22] <gabriel_schulhof> jasperdegroot: Aaaah, right. Hmm ... then, I guess, we'll get a new issue, although I doubt my suggested solution will not fix the issue reported.
[09:59:52] <gabriel_schulhof> jasperdegroot: It's the classic duplicate-checkbox-IDs-in-a-document-breaks-checkboxradio-widget problem.
[10:00:30] <jasperdegroot> gabriel_schulhof: ahh, that one
[10:01:20] <gabriel_schulhof> We've really overemphasized the page paradigm, even in our code. People forget that it's all one DOM, or maybe people never even learned that it's all one DOM, because they've lived with our page paradigm for as long as they've done anything on the Web :)
[10:03:59] <jtsage|ded> it's a problem of the HTML primers out there.  Everything gets an ID - very few of them even address the fact that perhaps that element might not even need one. (same with a fair number of jQuery primers - because $("#id") is just so easy to type.
[10:06:13] <gabriel_schulhof> jtsage|ded: Well, select-by-ID is also the fastest, so it's good for performance, but you can't use it blindly.
[10:06:33] <jtsage|ded> very true :)
[10:51:10] <jqcommit> [13jquerymobile.com] 15arschmitz closed pull request #107: All: Update to 1.4.5 (06master...061.4.5) 02http://git.io/9KJsoA
[11:08:47] <jquicommit> [13jqueryui.com] 15KellenBurns opened issue #98: jQuery Tabs appearing in bulleted list format 02http://git.io/TpukOA
[11:20:32] <jquicommit> [13jqueryui.com] 15scottgonzalez closed issue #98: jQuery Tabs appearing in bulleted list format 02http://git.io/TpukOA
[11:53:09] <gabriel_schulhof> arschmitz: So, what's the deal with checking .parentNode not being enough?
[11:53:33] <arschmitz> gabriel_schulhof: because most of the elements will still have a parentNode
[11:53:40] <arschmitz> that are ones that get removed
[11:53:45] <arschmitz> nearly all of them
[11:54:01] <gabriel_schulhof> arschmitz: Oh, wow, OK, so we always remove trees?
[11:54:08] <gabriel_schulhof> Or nearly always?
[11:54:23] <arschmitz> gabriel_schulhof: no but often
[11:54:39] <arschmitz> anything that generates more then like a single span for a icon is generally more complicated
[11:54:56] <gabriel_schulhof> Still, it must still be faster to go up the tree from the element than to search the whole body. The opposite is really counter-intuitive.
[11:54:58] <arschmitz> like for example datepicker or selectmenu
[11:55:26] <arschmitz> gabriel_schulhof: and contains is much faster then removing a class from a detached dom node
[11:55:49] <gabriel_schulhof> arschmitz: Yes, but is it faster than checking .parentNode until you hit null?
[11:56:16] <arschmitz> gabriel_schulhof: much harder to test because you cant predict how complicated that could get or how big a tree you will have
[11:56:58] <gabriel_schulhof> arschmitz: You could just .parents( "body" ).length > 0 && .removeClass() ... no?
[11:57:15] <gabriel_schulhof> ... or is that more expensive than checking via $.contains()?
[11:57:35] <gabriel_schulhof> Or rather .closest( "body" ).length ... sorry
[11:59:06] <arschmitz> contains is faster
[11:59:20] <arschmitz> by about 20% even if the element has no parents
[12:01:41] <gabriel_schulhof> arschmitz: When you remove classes during _destroy(), will you not have to call _elementsFromClassKey?
[12:02:09] <arschmitz> gabriel_schulhof: yes you will
[12:03:09] <gabriel_schulhof> arschmitz: OK, then you don't need to do any checking. Widgets can simply null out their variables during _destroy(), and when they chain up and the factory calls _elementsFromClassKey() during its implementation of _destroy(), it'll get $() for any class key that refers to an already-removed element.
[12:03:37] <gabriel_schulhof> arschmitz: So, you won't be doing any unnecessary .removeClass()ing.
[12:03:57] <gabriel_schulhof> arschmitz: ... and it's good practice to null out unused variables.
[12:04:23] <arschmitz> gabriel_schulhof: it does not matter the whole instance is getting removed in destroy
[12:04:35] <arschmitz> if you null them yourself your not really saving anything
[12:05:05] <arschmitz> gabriel_schulhof: at that point you might as well just do the removclass your self
[12:05:42] <gabriel_schulhof> arschmitz: Nono, because that's a bunch of .removeClass()es in a bunch of source files. If we can handle it with a single .removeClass() call in a single source file, that's better.
[12:05:57] <arschmitz> gabriel_schulhof: i dont think this is an issue
[12:06:03] <arschmitz> contains is fast
[12:06:05] <arschmitz> http://jsperf.com/contains-vs-removeclass
[12:06:28] <gabriel_schulhof> arschmitz: Yes, but fastest of all is iterating over an empty jQuery object.
[12:06:32] <arschmitz> and by adding 1 contains check you avoid having to null out a whole pile of stuff
[12:06:48] <arschmitz> and destroy is not a tight loop operation
[12:06:58] <arschmitz> its a very very very rarely used opteration
[12:07:20] <arschmitz> gabriel_schulhof: classes has already added over 1000 lines to the UI repo
[12:07:26] <gabriel_schulhof> arschmitz: Actually, I disagree. You get a lot of _destroy() when you remove a jQM page from the DOM.
[12:07:43] <gabriel_schulhof> ... unless the page has, like, 3 widgets.
[12:08:23] <gabriel_schulhof> arschmitz: Yeah, the buy-in necessary for _elementsFromClassKey() is huge.
[12:08:50] <arschmitz> gabriel_schulhof: im much more concerned with bloat due to classes then i am with microperf in destroy
[12:09:43] <gabriel_schulhof> Yeah, I guess it's of a different magnitude.
[12:11:47] <gabriel_schulhof> Well, it's a new feature, and, presumably, the benefits outweigh the costs.
[12:16:14] <gabriel_schulhof> arschmitz: You know, one of the things that creates this bloat is that we have to map instance-level variable names to class keys for _setOptions. One (ridiculous?) way around that is to rename all our instance-level variables from this.titleBar to this[ "ui-widgetname-title-bar" ] and always refer to that element like that in the code. That would obviate the need for _elementsFromClassKey, but it would make the code ridiculous(?) to 
[12:16:50] <gabriel_schulhof> arschmitz: More complicatedly, some of the switches in _elementsFromClassKey() actually run selectors and return the results.
[12:17:11] <arschmitz> gabriel_schulhof: also there is logic in many of the switches
[12:17:16] <arschmitz> to check option values
[12:18:52] <gabriel_schulhof> We could maybe store the result at the time we set the option and have an instance-level variable that way. But we should never have new instance-level variables solely for the sake of having something at hand during _setOptions( "classes", ... )
[12:19:28] <gabriel_schulhof> Nah ... I can't currently see a sensible way around the bloat :/
[12:22:03] <arschmitz> gabriel_schulhof: also back to the refrences and checking if its attached
[12:22:17] <arschmitz> checking parent nodes is essentially what contains does under the hood
[12:22:42] <gabriel_schulhof> arschmitz: Oh, good. That's probably why it's so fast.
[12:22:52] <arschmitz> gabriel_schulhof: there is litterally no performance difference in document.body.conaints $.contians or doing it in a while loop
[12:22:58] <arschmitz> gabriel_schulhof: http://jsperf.com/contains-vs-removeclass
[12:24:31] <gabriel_schulhof> Awesome!
[12:25:38] <arschmitz> gabriel_schulhof: thats every reasonable way i can think of to check if a node is attached to the dom or not
[12:25:58] <arschmitz> as well as just doing remove class regardless
[12:27:52] <arschmitz> actually in safari contains is much faster
[12:35:20] <Omar-> hi gabriel_schulhof arschmitz
[12:36:08] <Omar-> changing to an external page, jQM uses data-url (filename) even if the page has an ID (hash)
[12:36:09] <Omar-> right?
[12:36:49] <Omar-> However, it's possible to load a page, and then navigate to it using "#hash" instead of filename
[12:37:08] <Omar-> it works one time only. After that, filename should be used for navigation
[12:37:09] <Omar-> http://plnkr.co/edit/Gi2ZewT09YgoQZCSFWPi?p=preview
[12:37:35] <Omar-> it shouldn't allow navigating using hash for external pages
[12:37:50] <Omar-> am I mistaken?
[12:38:57] <arschmitz> yes
[12:39:03] <arschmitz> we never say that wont work
[12:39:19] <arschmitz> anything thats in the dom and a page can be navigated to by id 
[12:39:51] <Omar-> even if data-url doesn't match hash?
[12:39:59] <arschmitz> yes
[12:40:19] <Omar-> if you check the plunkr, load page and then use first two buttons
[12:40:28] <Omar-> to navigate programmatically
[12:41:09] <Omar-> hash works one time only
[12:41:13] <Omar-> oh, page is removed
[12:41:17] <Omar-> that's why
[12:41:41] <Omar-> my bad, i've missed that poiny
[12:41:58] <Omar-> point*
[12:42:17] <arschmitz> yes external pages are removed as soon as you navigate away
[12:43:11] <Omar-> yeah, I forgot about it
[23:04:27] <doesallmagic2> Project jQuery UI - git core build #773: STILL UNSTABLE in 3 min 26 sec: http://jenkins.jquery.com/job/jQuery%20UI%20-%20git%20core/773/
[23:35:27] <doesallmagic2> Project jQuery UI - 1.7.x core build #652: UNSTABLE in 29 min: http://jenkins.jquery.com/job/jQuery%20UI%20-%201.7.x%20core/652/
