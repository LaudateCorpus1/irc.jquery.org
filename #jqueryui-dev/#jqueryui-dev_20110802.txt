[06:23:40] <kborchers> scott_gonzalez: yt?
[06:24:12] <scott_gonzalez> kinda :-)
[06:24:25] <kborchers> heh ... i was doing some thinking on http://bugs.jqueryui.com/ticket/4333
[06:24:38] <scott_gonzalez> oh, so was I
[06:24:43] <kborchers> i think my old solution works with on small change
[06:24:53] <scott_gonzalez> a timeout?
[06:25:20] <kborchers> no, just changing the document bind of mousedown to mouseup. my testing seems to work here
[06:25:44] <scott_gonzalez> doesn't that have the same problem with someone stopping propagation of mouseup?
[06:26:08] <kborchers> oh crap ... maybe i'll test it real quick
[06:26:45] <scott_gonzalez> my thought was tracking based on the timestamp of the event
[06:26:58] <scott_gonzalez> and assuming we won't get two events with the same timestamp
[06:27:06] <scott_gonzalez> seems reasonable since it's milliseconds
[06:28:46] <kborchers> that does seem reasonable
[06:29:06] <kborchers> if you stop propagation on mouseup, you can't drop the draggable
[06:29:33] <scott_gonzalez> hmm...
[06:29:41] <scott_gonzalez> that might work then
[06:31:20] <kborchers> i'll throw a fiddle together with my mouseup solution based on his example in http://bugs.jqueryui.com/ticket/7544 then you can see that mousedown is no longer affected and if you stop prop on mouseup, you can't drop if that would help you decide
[06:35:12] <scott_gonzalez> cool
[06:35:27] <scott_gonzalez> would be great to get this fixed again in 1.8.16 :-)
[06:35:34] <scott_gonzalez> too bad I tagged 1.8.15 last night
[06:35:50] <kborchers> dang ... oh well
[06:48:11] <scott_gonzalez> ugh
[06:48:19] <scott_gonzalez> just ran `git pull origin master` in my 1-8-stable branch
[06:48:47] <scott_gonzalez> I want to run do `rm -rf *` now
[06:52:52] <kborchers> whenever i see rm -rf * it makes me cringe a little ... i just imagine my system dying a death of a thousand cuts
[06:55:00] <jquicommit> [jquery-ui] scottgonzalez pushed 1 new commit to 1-8-stable: https://github.com/jquery/jquery-ui/commit/67ff57a79db5e7d5c8b053a0271be4696b1e0f22
[06:55:00] <jquicommit> [jquery-ui/1-8-stable] Build: Updated release script. - Scott González
[06:55:26] <scott_gonzalez> heh, I ended up doing `rm -rf ui tests demos` and then `git reset --hard origin/1-8-stable`
[06:55:45] <scott_gonzalez> the problem was that it gained a ton of files from master, so just resetting wasn't good enough
[07:01:36] <kborchers> scott_gonzalez: http://jsfiddle.net/kborchers/3d32E/
[07:02:06] <kborchers> i added both the 7544 test which has the sortables and the 4333 test with the nested draggables. both work
[07:02:25] <kborchers> then you can change mousedown to mouseup to see the undroppable draggable
[07:04:11] <scott_gonzalez> kborchers: running out, back in 20-30 minutes
[07:04:18] <kborchers> cool
[07:42:08] <gnarf> is the wiki painfully slow for ayone else today?
[07:43:42] <gnarf> "In a mask that only allows letters, you should be able to type González or Jörn."
[07:44:15] <gnarf> anyone got an idea of how to implement the [^a-z] matches there?
[08:17:46] <jzaefferer> so apparently the way to do proper standalone view for jsfiddle is more like this: http://fiddle.jshell.net/kborchers/4MuUV/show/ gnarf kborchers scott_gonzalez
[08:18:29] <kborchers> huh
[08:18:30] <gnarf> yeah?
[08:18:41] <gnarf> i've known that for like since jsfiddle came out :)
[08:19:12] <gnarf> i use it to test on the phones
[08:19:49] <gnarf> you can use the standard jsfiddle domain /show too i'm pretty sure it still redirects to jshell
[08:20:19] <gnarf> I'm seeing something really strange here
[08:20:31] <gnarf> for some reason i can't tab/click between elements
[08:22:09] <gnarf> wtf
[08:22:10] <jzaefferer> gnarf, there's no character class in JS regexps for that - that's why the validation plugin ends up with this for emails: https://github.com/jzaefferer/jquery-validation/blob/master/jquery.validate.js#L1013
[08:22:17] <jzaefferer> dunno how close this gets you: [\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]
[08:23:18] <gnarf> i don't neccesarily need to use regexp
[08:23:22] <gnarf> i can also use a function
[08:23:34] <jzaefferer> see also http://projects.scottsplayground.com/iri/lib/iri.js
[08:23:36] <gnarf> this issue is bugging the shit out of me
[08:23:44] <jzaefferer> I think that above is var ucschar
[08:24:01] <jzaefferer> so "UTF-16 characters - unsupported in JavaScript"
[08:24:31] <jzaefferer> as digit is listed seperately, that shouldn't include any digits...
[08:25:52] <jzaefferer> kborchers, where are you with menu? seems like you need input on the todos? anything open in the comments?
[08:28:28] <gnarf> aha, traced it
[08:28:48] <kborchers> yep, input on todos only stuff in comments is structures other than UL/LI which we're holding off for now and autoCollapse which i saw your comment and am working on a better version now. i am going to answer and delete most of the comments from Dalia as they aren't really issues
[08:30:19] <scott_gonzalez> gnarf: we may need to dig through XRegExp to find what we want
[08:30:45] <scott_gonzalez> the character groups in the mail/iri regexes may be more than just letters
[08:30:56] <scott_gonzalez> though the RFCs may actually describe what they are
[08:33:02] <scott_gonzalez> kborchers: go ahead and send a pull request for the nested interaction stuff :-)
[08:33:14] <kborchers> will do :)
[08:33:57] <kborchers> https://github.com/jquery/jquery-ui/pull/413
[08:34:27] <kborchers> let's see if that one sticks ;)
[08:34:40] <jzaefferer> seems like https://github.com/jquery/jquery-ui/pull/190 is being worked on
[08:35:02] <jzaefferer> once resolved we can land the improved collision detection?
[08:35:35] <kborchers> yeah, i think any unit test that uses position has to be fixed though :(
[08:35:54] <jzaefferer> yeah, that's going to be a good opportunity to do some cleanup there ;)
[08:36:03] <jzaefferer> the within tests duplicate a lot of stuff...
[08:37:20] <jzaefferer> can you send a pull request for the navigation menu demo? what the jsfiddle is fine
[08:37:54] <gnarf> grrrr
[08:38:00] <kborchers> yep, so we are not going to worry about target="_blank" for now
[08:38:08] <gnarf> so, while debugging this error, it doesn't happen
[08:38:12] <jzaefferer> yeah
[08:38:17] <kborchers> ok
[08:38:48] <jzaefferer> as for the input menu, how about a placeholder demo that links to your extension? I don't want to get that lost, and right now we just don't have the plugins.jquery.com to list extensions
[08:39:22] <jzaefferer> once that is dealt with, you could check out Scott's tablecomplete and investigate non-ul/li menus
[08:39:28] <kborchers> https://github.com/jquery/jquery-ui/pull/414
[08:39:53] <jzaefferer> fast!
[08:40:21] <kborchers> i've got all of those changes in their own branches ready to go so when you so go, i go ;)
[08:41:01] <scott_gonzalez> hah, good thing kborchers doesn't manage code like I do
[08:41:14] <scott_gonzalez> he'd have tons of code written with no idea where any of it is :-P
[08:41:50] <kborchers> heh, instead i have a million branches
[08:41:59] <kborchers> i need to start deleting them
[08:42:41] <scott_gonzalez> it's better than 2 year old diffs sitting in random directories
[08:43:13] <kborchers> um, yeah :/
[08:44:27] <kborchers> jzaefferer: ok and for text inputs, that is another place i am struggling with focus since when you keyboard nav to the menu item, i think it should focus the text input but then how to get focus back to menu. probably need to take a look at autocomplete for ideas
[08:45:06] <kborchers> just handle up and down arrows in the text input
[08:45:30] <kborchers> but might cause other focus fun :p
[08:45:32] <jquicommit> [jquery-ui] gnarf37 pushed 2 new commits to mask: https://github.com/jquery/jquery-ui/compare/af2edfe...a84baa5
[08:45:32] <jquicommit> [jquery-ui/mask] Mask: Updating regexp to include ö and å (etc), also making sure inputs have focus in the tests to stop an odd sometimes bug - Corey Frang
[08:45:32] <jquicommit> [jquery-ui/mask] Mask: Visual Test - Corey Frang
[08:46:32] <gnarf> so apparently setting the caret position implies focusing :)
[08:46:37] <gnarf> (doh)
[08:47:08] <gnarf> http://view.jqueryui.com/mask/tests/visual/mask/mask.html
[08:47:29] <jzaefferer> gnarf: can haz visual test?
[08:47:56] <kborchers> gnarf: that's pretty ;)
[08:48:32] <jzaefferer> kborchers: check the OSX menubar Help menu
[08:48:50] <jzaefferer> if you move focus by keyboard to the input, you can't get out anymore with cursor keys
[08:49:06] <jzaefferer> need to hit escape to move focus back to menu
[08:49:13] <jzaefferer> seems reasonable
[08:49:38] <gnarf> up and down still nav past the help input
[08:49:56] <gnarf> jzaefferer: not on my osx
[08:50:08] <jzaefferer> gnarf: does the insert/replace behaviour reflect what Josh's plugin did?
[08:50:23] <gnarf> jzaefferer: yeah
[08:50:36] <kborchers> at work i have Win7 :( I looked at it this morning at home though so i know what you are talking about with the autoCollapse but can't look at the text input behavior. so just have to stopprop so escape doesn't close the menu right?
[08:50:36] <gnarf> afaik
[08:50:41] <jzaefferer> true, up/down still works, just left and right are captured
[08:50:49] <gnarf> i think there is some weirdness with overtyping a group of chars atm
[08:51:58] <jzaefferer> the eyescript thing is weird, took me a while to figure out what ~ stands for
[08:52:09] <gnarf> its a custom definition for +/-
[08:52:12] <gnarf> sry
[08:52:35] <jzaefferer> soo, this is done, right? /o\
[08:52:50] <gnarf> still some weirdness with overtyping
[08:53:06] <gnarf> and insert behavior
[08:53:55] <gnarf> and still those two open questions from me
[08:54:07] <gnarf> i.e. do we handle invalid input getting cleared?
[08:54:13] <kborchers> gnarf: just a cosmetic thing but it might be nice if the field is empty that the caret be moved to the beginning of the mask no matter where i click if possible since without the mask, clicking in anywhere in a empty text input puts it at the beginning and i can just start typing
[08:54:39] <gnarf> and or do we handle having a completely empty mask showing "" instead when not focus
[08:54:58] <gnarf> kborchers: I'm not really sure why that doesn't happen atm
[08:55:11] <gnarf> tab focusing always puts you at the first unfilled char
[08:55:17] <gnarf> clicking seems to put you wherever you clicked
[08:55:33] <kborchers> tab focusing selects the mask too which is kind of weird
[08:55:50] <gnarf> hrm
[08:55:56] <kborchers> at least in chrome on win7
[08:55:58] <gnarf> well the focus event is setting the caret position
[08:56:09] <gnarf> perhaps it needs to setTimeout(,0) that
[08:59:32] <gnarf> kborchers: pushing a commit now that should fix that
[08:59:33] <jquicommit> [jquery-ui] gnarf37 pushed 1 new commit to mask: https://github.com/jquery/jquery-ui/commit/548ccaed10c9def7f86124c068d810435a2a9d8c
[08:59:33] <jquicommit> [jquery-ui/mask] Mask: Adding a short delay to setting the caret position on focus - Corey Frang
[09:04:50] <kborchers> gnarf: cool, that looks much better
[09:05:22] <gnarf> I also want to try and solve using a mask like hh:mm:ss
[09:05:30] <gnarf> where hh only accepts 1-12
[09:05:54] <gnarf> and lets you type 3(right) and converts to 03
[09:06:26] <kborchers> jzaefferer: dalia's comment about the bad positioning of submenus when you scroll to the top is weird. for some reason the menus flip in the iframe on the wiki though they have enough space. i don't think the changes to collision detection will help there
[09:10:43] <kborchers> brb more coffee
[09:14:22] <scott_gonzalez> danheberden: can we get 1.8.15 on the CDN?
[09:14:57] <scott_gonzalez> also, while you're updating the index, I apparently swapped the compressed/uncompressed links....
[09:17:28] <danheberden> yeah, i can get it up there
[09:19:40] <jzaefferer> gnarf: for the invalid blur, could we show the state as a placeholder (via http://wiki.jqueryui.com/w/page/12138131/Watermark), so that .val() returns empty string (correct) but user still sees what he entered (good) and gets that restored on focus (even better, can continue fixing his mistake)?
[09:22:07] <gnarf> jzaefferer: prolly doable
[09:22:18] <gnarf> jzaefferer: what if it has its own watermark tho?
[09:22:36] <jzaefferer> replace?
[09:22:55] <jzaefferer> if the input is incomplete, removing it completely can't be the right thing to do, right?
[09:23:12] <gnarf> i agree, but josh seemed to think it was :)
[09:23:29] <gnarf> i was gonna make it an option
[09:23:43] <gnarf> that and the "empty" state showing "" when not focused
[09:31:48] <jquicommit> [jquery-ui] scottgonzalez pushed 1 new commit to master: https://github.com/jquery/jquery-ui/commit/8fe87e288544204925265a4e7f19b7dfa24deed6
[09:31:48] <jquicommit> [jquery-ui/master] Tests: Modified testsuites.js into a subsuiteRunner extension for QUnit. - Wesley Walser
[09:35:10] <jquicommit> [jquery-ui] gnarf37 pushed 1 new commit to mask: https://github.com/jquery/jquery-ui/commit/3ac0bb4243ad4cd6f086f4a8e7344acc5cc0e030
[09:35:10] <jquicommit> [jquery-ui/mask] Mask: Handling overtyping multiple values better - rewrote shiftRight function to make more sense - Corey Frang
[09:45:47] <gnarf> oh, and the "?
[09:45:53] <gnarf> optional mask points
[10:18:16] <gnarf> does the overtyping / empty typing feel better on http://view.jqueryui.com/mask/tests/visual/mask/mask.html
[10:18:17] <gnarf> ?
[10:29:05] <jquicommit> [jquery-ui] scottgonzalez pushed 2 new commits to 1-8-stable: https://github.com/jquery/jquery-ui/compare/67ff57a...4c57f36
[10:29:05] <jquicommit> [jquery-ui/1-8-stable] Backport of f9996682b5739661c21548f0de3d4c4883c5119d for 1-8-stable. - Andreas Pelme
[10:29:05] <jquicommit> [jquery-ui/1-8-stable] Merge pull request #415 from pelme/1-8-stable - Scott González
[10:32:11] <scott_gonzalez> yay, a user who doesn't just complain http://bugs.jqueryui.com/ticket/6966#comment:7
[10:38:30] <scott_gonzalez> oh boy, the view source bug is getting even better http://bugs.jqueryui.com/ticket/7592
[10:40:16] <kborchers> heh, love the respnse!
[10:40:20] <kborchers> response*
[10:40:46] <gnarf> lol
[10:40:49] <scott_gonzalez> I really don't know what he thinks is wrong
[10:40:51] <scott_gonzalez> I'm so confused
[10:40:55] <gnarf> heh
[10:41:18] <scott_gonzalez> I wrote JavaScript and when you view source, you can see it
[10:41:19] <gnarf> i think he's saying you shouldn't be able to see the options
[10:41:21] <scott_gonzalez> umm...yes
[10:41:29] <gnarf> heh
[10:41:58] <scott_gonzalez> heh, I'm going to show my users suggested responses, but they should have no way of knowing what those options are
[10:42:14] <gnarf> "use an ajax source" ?
[10:42:25] <scott_gonzalez> use rot13?
[10:42:27] <scott_gonzalez> :-P
[10:43:23] <gnarf> lolz
[11:54:00] <scott_gonzalez> danheberden: yt?
[11:56:05] <gnarf> rubyruy: your point about focus/blur is a decent one
[11:56:16] <gnarf> rubyruy: i'll think about it while i'm afk grabbing food
[11:56:22] <gnarf> http://bugs.jqueryui.com/ticket/7595
[11:56:37] <rubyruy> thx
[11:57:14] <rubyruy> like i was saying in #jq, solution i'd lean towards is official support for binding something as fist / capture
[11:58:03] <gnarf> solution i lean towards at this point is it's not worth solving the bug
[11:58:24] <gnarf> if its an issue that the element loses focus during a wrapper anim
[11:58:37] <gnarf> you can track the focus yourself and do it
[11:59:06] <gnarf> but i don't think there is gonna be any way to stop the focus/blur's from firing
[11:59:18] <gnarf> or bubbling
[12:00:19] <rubyruy> you can't track the focus though - there's no callback for beforeRemoveWrapper or anything
[12:00:39] <rubyruy> you can stop propagation during capture for sure though
[12:00:53] <rubyruy> why doesn't jquery support capture binding anyway?
[13:10:39] <gnarf> rubyruy: because not all browsers support it that we support?
[13:11:00] <rubyruy> still supporting ie6? :(
[13:12:29] <rubyruy> and some functionality isn't supported in certain browsers anyway isn't it?
[13:14:21] <gnarf> most everything has some sort of "back compat" or poly fill if not supported
[13:14:57] <gnarf> there is no way to polyfill capturing evens
[13:15:14] <gnarf> i don't think that stopping the duped focus/blurs is a good idea
[13:15:50] <rubyruy> what about refocusing?
[13:17:25] <rubyruy> there's no clean user-only solution to the focus problem as far as i can tell :/
[13:17:32] <rubyruy> double focus/blur you can deal with
[13:17:47] <rubyruy> (well, maybe, but at least it's more likely you can)
[13:17:58] <gnarf> the solution to solve it is the same as you used in the removeWrapper
[13:18:00] <rubyruy> i mean in the real world other externals might fuck up because of it and then you're kinda SOL
[13:18:38] <rubyruy> right so just refocus on create/removeWrapper but don't worry about the double trigger?
[13:18:55] <gnarf> var hadFocus = elem.find(*).filter(document.activeElement);  elem.effect({ effect: "explode" }, 500, function() { hadFocus.focus(); }); hadFocus.focus();
[13:19:24] <rubyruy> oh in user code
[13:19:31] <gnarf> usually when you are using a ui effect you are hiding / showing right?
[13:19:36] <rubyruy> yeah
[13:19:47] <gnarf> so, when hiding / showing - losing focus isn't really a bad thing
[13:19:47] <rubyruy> that's almost good  - BUT you still loose focus during the animation
[13:19:58] <rubyruy> is there a beforeAnimation callback?
[13:20:05] <gnarf> no
[13:20:34] <rubyruy> it is kind of a bad thing when the focused item is, say, a confirm button
[13:20:36] <gnarf> but, directly after running the effect ( if nothing else was queued ) you're already past it
[13:20:49] <rubyruy> eager users will hit enter to confirm it before the animation even finished i think
[13:21:04] <rubyruy> oh right right
[13:21:34] <rubyruy> so not worth fixing in the wrappers?
[13:21:44] <gnarf> toss up in my mind
[13:21:51] <gnarf> maybe someone else has an opinion
[13:22:11] <gnarf> its trading one "kinda expected" buggy behavior for another one
[13:22:59] <rubyruy> what about a jquery provided .bindFirst type method
[13:23:04] <gnarf> this makes me wonder though, if we use an effect to show a dialog, will the correct element gain focus?
[13:23:24] <rubyruy> which attempts to use capture if available, but otherwise simply inserts the handler as first in the callback chain
[13:23:27] <gnarf> rubyruy: then we are digging into monkey patching event handling because we don't want to propagate these events :)
[13:23:45] <gnarf> also, its not going to stop the element getting blurred
[13:24:22] <rubyruy> can't we stop that the same way?
[13:24:26] <gnarf> jzaefferer / scott_gonzalez / ajpiano / danheberden any thoughts here?
[13:24:38] <rubyruy> to my mind bindFirst has other worthwhile applications
[13:25:03] <rubyruy> at least i've ran into needing something like it twice now, usually when trying to define some sort of global behavior
[13:25:11] <ajpiano> bindFirst would be great... as would a generic tool for manipulating the events stack
[13:25:22] <gnarf> rubyruy: IMO - needing to inject an event to not propagate the focus/blur feels like horrbile use patterns
[13:25:45] <ajpiano> but the solution to jQuery UI bugs is rarely "propose a feature for jQuery Core and *maybe* have it land in at least 6 months"
[13:26:12] <rubyruy> well the altenative is to not fix it all and just let the user deal wtith it
[13:26:19] <rubyruy> so 6 months doesn't look so bad ;)
[13:26:39] <gnarf> i guess it makes it easier if the user deals with it
[13:27:01] <gnarf> either way, we should document the hell out of it
[13:27:04] <gnarf> and give some ways around it
[13:27:29] <gnarf> I could probably write a monkey patched .effect() method
[13:27:37] <gnarf> that handles it
[13:27:58] <rubyruy> create/remove wrapper is called in the individual effect methods afaik
[13:28:02] <jzaefferer> gnarf: whut?
[13:28:10] <gnarf> http://bugs.jqueryui.com/ticket/7595
[13:28:19] <rubyruy> oh nm that's fine
[13:28:45] <scott_gonzalez> ZOMG, so much to read
[13:28:50] <gnarf> jzaefferer: the debate atm - We could "focus" the element again after createWrapper/removeWrapper - but this will end up sending multiple focus/blur events as well - we have no way to stop it
[13:29:20] <rubyruy> tldr = create|removeWrapper during ui animations fucks up the focus of whatever you're animating, how to fix
[13:29:24] <gnarf> or we could just not care about the focus bug, and offer a monkey patched create/remove method
[13:29:58] <jzaefferer> mhm, animations, like I care :p
[13:30:12] <gnarf> i figured that was jörn's opinion
[13:30:14] <gnarf> ;)
[13:30:29] <rubyruy> well how about this
[13:30:34] <gnarf> Jörn sees "effects" and looks the other way
[13:30:35] <gnarf> ;)
[13:30:43] <rubyruy> leave it alone / document it for now
[13:31:00] <rubyruy> i'll fish for support for .bindFirst in jquery-core
[13:31:08] <rubyruy> and if that moves forward, revisit
[13:31:38] <gnarf> rubyruy: i don't think I'd want the "bindFirst" with stopProp anyway, binding and unbinding event handles is like just not "clean" practice
[13:32:24] <scott_gonzalez> I've implemented bindFirst before (pretty sure that was even the name I gave)
[13:32:43] <scott_gonzalez> I originally wrote it for modal dialogs, and I didn't use it for fear of people finding it and using it
[13:32:44] <rubyruy> it's bad day to day stuff no question about that
[13:32:55] <rubyruy> i also used it for dialogs!!
[13:32:55] <scott_gonzalez> anyway, rubyruy what's the actual use case right now?
[13:33:01] <rubyruy> dialogs :O
[13:33:04] <rubyruy> i want to stop the original event
[13:33:11] <rubyruy> save it somewhere
[13:33:18] <rubyruy> then retrigger it when the user confirms the dialog
[13:33:43] <rubyruy> it works quite well actually
[13:33:46] <rubyruy> very nice, very clean
[13:33:48] <scott_gonzalez> got a demo?
[13:33:56] <scott_gonzalez> wait, are you talking about bindFirst or the focus bug?
[13:34:03] <scott_gonzalez> I'm asking for the use case where you noticed the focus bug
[13:34:17] <rubyruy> oh - incidently it's both
[13:34:21] <scott_gonzalez> ok
[13:34:24] <rubyruy> there's a jsfiddle in the ticket
[13:34:29] <rubyruy> with a demo of the bug
[13:34:40] <rubyruy> http://jsfiddle.net/xrunt/14/
[13:35:22] <scott_gonzalez> heh, got a real use case?
[13:35:48] <scott_gonzalez> I gues something like bounce would show the problem
[13:36:02] <scott_gonzalez> just looking for something that's not I'm calling show on a visible element to show a bug
[13:36:05] <rubyruy> nothing i can easily show (internal site) - but it's just popping up a confirm dialog using a bounce animation yeah
[13:36:17] <rubyruy> since it's just a confirm dialog, users are likely to want to hit enter before the animation is even finished
[13:36:43] <rubyruy> but the animation breaks the focus and thus enter behavior
[13:37:01] <scott_gonzalez> http://jsfiddle.net/xrunt/15/
[13:37:36] <rubyruy> oh sure
[13:37:55] <scott_gonzalez> this shows it better (delayed focus): http://jsfiddle.net/xrunt/16/
[13:38:28] <scott_gonzalez> ok, so in a real use case the code would have to be .show( anim ).focus(), right?
[13:38:33] <rubyruy> gnarf: all .bindFirst uses would be to do something very global which should come with the usual alarms and whistles to begin with
[13:38:34] <scott_gonzalez> not .focus().show( anim )
[13:38:40] <scott_gonzalez> since you can't focus a hidden element?
[13:38:45] <rubyruy> yesh
[13:38:53] <rubyruy> it CAN be worked around from usercode alone
[13:39:02] <scott_gonzalez> ok, so the problem occurs in three scenarios
[13:39:13] <scott_gonzalez> on show during unwrap
[13:39:16] <scott_gonzalez> on hide during wrap
[13:39:24] <scott_gonzalez> on effect during both wrap and unwrap
[13:39:28] <rubyruy> correcto
[13:39:55] <scott_gonzalez> that's really unfortunate, we should talk to browser vendors about this
[13:39:58] <scott_gonzalez> but anyway
[13:40:03] <rubyruy> haha
[13:40:09] <scott_gonzalez> we should fix this in effects.core
[13:40:32] <rubyruy> it is very weird behavior - it's even weirder that no spec actually spells this out and yet all major browsers do it
[13:41:16] <scott_gonzalez> well, the internal implementation is probably detach from DOM, insert into DOM
[13:41:21] <scott_gonzalez> and during detach it's going to lose focus
[13:41:44] <scott_gonzalez> actually, is this a browser problem or a jQuery problem?
[13:44:08] <scott_gonzalez> ok, it's definitely the browser: http://jsfiddle.net/xrunt/17/
[13:44:17] <rubyruy> oh yes
[13:44:30] <gnarf> actually, .show(anim).focus() wouldn't work either
[13:44:31] <rubyruy> but i mean, jquery is all about patching up browser fuckups
[13:44:34] <gnarf> you'd have to focus on the callback
[13:45:03] <scott_gonzalez> gnarf: I was just saying that .focus().show( anim ) would be wrong even without this bug
[13:45:12] <gnarf> right...
[13:45:22] <rubyruy> man, all i wanted is to make a neatoh confirmdialog
[13:45:27] <gnarf> .show( anim, focuscb).focus()
[13:45:39] <gnarf> you want it right after anim starts, and right after anim finishes
[13:45:39] <rubyruy> now here i am submitting browser patches? hah
[13:45:49] <rubyruy> http://sethgodin.typepad.com/seths_blog/2005/03/dont_shave_that.html
[13:46:23] <rubyruy> graf: yeah so i could make a shitty $.fn like .showWithPreserveFocus
[13:46:37] <gnarf> scott_gonzalez: so, if we solve it (by copying focus) we end up generating 2 extra focus/blurs
[13:47:01] <scott_gonzalez> is that likely to be a problem?
[13:47:18] <gnarf> i say no
[13:47:20] <gnarf> but maybe
[13:47:28] <gnarf> thinking about it
[13:47:39] <rubyruy> it's non-obvious behavior
[13:47:41] <rubyruy> for sure
[13:47:47] <gnarf> focus/blurs are usually pretty benign events
[13:49:28] <gnarf> rubyruy: i think monkey patching create/removeWrapper is prolly easier
[13:50:50] <rubyruy> for now sure
[13:51:07] <rubyruy> i'm tempted to agree trading off surprise behavior isn't really worth fixing
[13:51:34] <gnarf> $.each([ "createWrapper", "removeWrapper" ], function(_, fn) { var orig = $.effects[ fn ]; $.effects[ fn ] = function( el ) { var hadFocus = el.find( "*" ).filter( document.activeElement ), ret = orig.apply( this, arguments ); hadFocus.focus(); return ret; }; });
[13:51:53] <rubyruy> blech
[13:52:03] <scott_gonzalez> there's gotta be a more efficient way
[13:52:15] <gnarf> scott_gonzalez: if we fix it raw in create/remove of course
[13:52:23] <gnarf> and yeah
[13:52:27] <scott_gonzalez> I mean better than el.find( "*" )
[13:52:31] <gnarf> you can get document.activeElement and check contains
[13:52:42] <gnarf> and if it is contained in the el then you keep it otherwise don't
[13:53:25] <gnarf> but i was aircoding in IRC
[13:53:30] <gnarf> so i went for short :)
[13:54:14] <gnarf> ?jQuery.contains
[13:54:15] <bot-t> jQuery.contains(container, contained): Check to see if a DOM node is within another DOM node. http://api.jquery.com/jQuery.contains/
[13:54:55] <rubyruy> why monkey patch the global fn though?
[13:54:59] <gnarf> scott_gonzalez: do you think we should fix it in effects.core? Causing the extra focus/blurs?
[13:55:18] <gnarf> rubyruy: easier than hacking it per effect
[13:55:24] <rubyruy> monkey patch is worse then simply handling it case by case using .show(..withcallback..).focus()
[13:55:49] <gnarf> or
[13:55:58] <gnarf> do you think we should push for core to fix it
[13:56:02] <rubyruy> if you do it per effect you have a chacne to think about the side effects of multiple focus/blur events
[13:56:09] <scott_gonzalez> it's not a bug in core
[13:56:12] <rubyruy> core can't really fix it
[13:56:19] <gnarf> that .append( focused ) should keep the elem focused?
[13:56:24] <scott_gonzalez> I'm torn on whether we should fix it in effects.core
[13:56:25] <rubyruy> it's DOM
[13:56:33] <rubyruy> DOM does it stupid
[13:56:48] <gnarf> i realize its a DOM bug, but we already patch "checked" DOM bugs in manip funcs in core
[13:57:06] <rubyruy> how would you fix it even?
[13:57:16] <gnarf> in jQuery.clean
[13:57:27] <gnarf> the same place we fixed the checked bug basically
[13:57:40] <gnarf> lemme find it
[13:57:49] <gnarf> timmywil: yt?
[13:58:11] <timmywil> gnarf: yo
[13:58:32] <gnarf> timmywil: can you read up some of this wall of text? tell me what you think about this bug? :)
[13:58:52] <rubyruy> is clean() called after all dom manipulations?
[13:59:32] <rubyruy> do you not still have to deal with mistery focus/blur events firing?
[14:00:06] <gnarf> the mystery events are still an issue
[14:00:59] <gnarf> https://github.com/jquery/jquery/commit/d274b7b9f7727e8bccd6906d954e4dc790404d23/ this was the fix for the checked attr
[14:01:14] <gnarf> http://bugs.jqueryui.com/ticket/3611 and the ui bug
[14:01:37] <scott_gonzalez> http://jsfiddle.net/xrunt/18/
[14:01:41] <rubyruy> similar issue there i assume
[14:01:51] <rubyruy> you'd have mistery change events wouldn't you?
[14:01:56] <rubyruy> i hate it when jq does that :p
[14:02:34] <rubyruy> i was actually arguing in my original pull request  that it's less of a problem for normal manipulation functions
[14:02:46] <rubyruy> because in that case jquery is simply doing the same (albeit shitty) thing the regular DOM does
[14:02:53] <rubyruy> you could argue the user should expect it to happen
[14:03:13] <rubyruy> but the fact that dom manipulation ends up happening during a simple animation is more of an unpleasant surprise
[14:03:44] <scott_gonzalez> right, the only reason I think we should look at fixing this is because it's completely unexpected
[14:04:00] <gnarf> timmywil: short version - Appending an element which has focus to another place in the DOM causes it to lose focus.
[14:04:09] <gnarf> happens in FF & Chrome
[14:04:12] <gnarf> maybe others?
[14:04:19] <rubyruy> everywhere
[14:04:19] <gnarf> maybe all?
[14:04:22] <gnarf> k
[14:04:24] <gnarf> so
[14:04:27] <gnarf> hrm
[14:04:29] <scott_gonzalez> here's the efficient fix: http://jsfiddle.net/xrunt/18/
[14:04:31] <timmywil> if it happens in all browsers, doesn't sounds like a bug
[14:04:39] <gnarf> agreed
[14:04:51] <gnarf> its only strange because calling .wrap() causes it to happen
[14:05:00] <timmywil> ah right
[14:05:08] <timmywil> hmm
[14:06:37] <timmywil> so if you refocus after the wrap, you'll fire a focus handler again
[14:07:04] <gnarf> yes - which is unexpected, but probably not a huge deal
[14:08:11] <gnarf> considering you already received a blur by wrapping it
[14:08:21] <gnarf> getting a focus again = not horrible
[14:08:41] <rubyruy> well getting the initial blur is surprising to begin with
[14:08:49] <rubyruy> but definitely less surprising then loosing focus
[14:15:57] <timmywil> I wonder if there is a more practical use case for this?  Does an input really need to be focused when it's bouncing around?
[14:17:01] <timmywil> I'm inclined to say that ensuring that focus/blur handlers fire an expected number of times is more important than the element holding focus during an effect.
[14:17:45] <timmywil> It's cool if both can be done, but if I had to make a choice...
[14:18:46] <rubyruy> timmywil: in my use case a confirm dialog is being .show('bounce')ed into the screen  with the accept button pre-focused
[14:18:57] <rubyruy> it makes sense that users will want to hit enter to confirm even before the animation completed
[14:21:23] <scott_gonzalez> timmywil: imagine a form with fields that shake on a validation error or something
[14:21:50] <scott_gonzalez> or opening a dialog using an animation and setting focus on a field immediately
[14:22:09] <scott_gonzalez> let's say you're using a screen reader, you don't know or care about the animatino
[14:22:27] <timmywil> yea, those are more practical
[14:22:29] <scott_gonzalez> all of a sudden the element loses focus when the animation completes
[14:22:57] <scott_gonzalez> even for a sighted user, if the focus is lost on the dialog as soon as the animation finishes, that's annoying
[14:23:01] <timmywil> in the screen reader's case, they'll get an extra focus notification
[14:27:55] <timmywil> scott_gonzalez: nevertheless, if it is going to be refocused, it shouldn't be in clean
[14:28:59] <timmywil> a direct call to .wrap() by the user should cause the element to lose focus
[14:31:18] <scott_gonzalez> yeah, the screen reader case can't be handled well
[14:31:25] <scott_gonzalez> but at least refocusing is better than completely losing focus
[14:31:37] <scott_gonzalez> FTR, I don't think this should be handled in core
[14:31:41] <gnarf> so then the debate becomes, do we fix the bug in effects.core or just add it to the docs with an "experience this problem? use this monkeypatch - or design around it"
[14:31:51] <scott_gonzalez> unless there's some magical workaround to avoid the blur altogether
[14:32:12] <gnarf> is blur cancelable?
[14:32:47] <scott_gonzalez> maybe, but not in the case where the element is gone from the DOM :-P
[14:33:22] <scott_gonzalez> I'm +1 on fixing in effects.core
[14:33:44] <scott_gonzalez> I bet there's even a dialog ticket for this :-P
[14:35:17] <gnarf> k, even with the "extra blur/focus" events then scott_gonzalez?
[14:36:22] <scott_gonzalez> yeah, that's probably better than completely losing focus
[14:36:35] <scott_gonzalez> things that are likely to happen:
[14:36:38] <scott_gonzalez> class manipulation
[14:36:40] <scott_gonzalez> field validation
[14:37:06] <scott_gonzalez> not sure what else might be common on focus/blur
[14:37:14] <scott_gonzalez> tooltips
[14:37:30] <scott_gonzalez> tooltips on animated elements sounds like an awesome idea :-)
[14:37:40] <gnarf> rubyruy: think you can take scott_gonzalez's http://jsfiddle.net/xrunt/18/ "efficient fix" and actually code it into create/removeWrapper and issue a pull?
[14:37:58] <gnarf> or i can just fix it
[14:38:06] <gnarf> whichever way you prefer ;)
[14:38:27] <rubyruy> i'm knee deep in my animation problem now so if it's easy enough for you to put up, please do :)
[14:38:32] <gnarf> k
[14:38:34] <gnarf> on it
[14:38:38] <rubyruy> just not having a good jquery day today!
[14:40:16] <gnarf> yeah, that animation/effects/stop issue is a bug already in the tracker
[14:41:42] <rubyruy> is there a way i can grab the last queue item or something?
[14:41:55] <rubyruy> oh nvm easy enough
[14:45:12] <gnarf> hrm - scott_gonzalez i think we can stop the testing of the active til after and use the positive case instead of the negated
[14:46:13] <gnarf> http://jsfiddle.net/gnarf/xrunt/19/
[14:47:18] <scott_gonzalez> yeah, I had originally referenced document.activeElement directly
[14:47:43] <scott_gonzalez> but if we're getting a reference to the element up front, that should be fine
[14:47:47] <scott_gonzalez> nice catch
[14:47:53] <scott_gonzalez> KILL THE BYTES
[14:55:14] <jquicommit> [jquery-ui] gnarf37 pushed 1 new commit to master: https://github.com/jquery/jquery-ui/commit/8108ec82dbc1c203893db18aac827b93d48cfc07
[14:55:14] <jquicommit> [jquery-ui/master] Effects: Adding a check to retain focused elements after wrapping and unwrapping in animations - Fixes #7595 - Wrapper-creating jquery-ui animations will discard any focus state during the animation - Thanks @rubyruy - Corey Frang
[14:55:41] <rubyruy> great success!
[14:59:04] <jquicommit> [jquery-ui] gnarf37 pushed 1 new commit to 1-8-stable: https://github.com/jquery/jquery-ui/commit/82df6924cbb0fa080590d83b4edc6183dd05ce93
[14:59:04] <jquicommit> [jquery-ui/1-8-stable] Effects: Backporting 8108ec8 - Fixes #7595 - Wrapper-creating jquery-ui animations will discard any focus state during the animation - Thanks @rubyruy - Corey Frang
[15:08:42] <paul_irish> scott_gonzalez: just submitted the commit. after approvals the deploy can start up.
[15:09:15] <scott_gonzalez> awesome
[15:16:45] <gnarf> hrm
[15:16:52] <gnarf> this masked input is failing on my android
[15:17:03] <gnarf> unit tests correct
[15:17:09] <gnarf> but the caret position seems wrong
[15:18:38] <gnarf> hrm
[15:18:52] <gnarf> is there an android os browser emulator?
[15:19:07] <gnarf> or can i run remote debugging port on it? :)
[15:20:01] <gnarf> http://view.jqueryui.com/mask/tests/visual/mask/mask.html anyone able to test these inputs on iOS?
[15:22:10] <gnarf> bbiab
[15:22:28] <jquicommit> [jquery-ui] scottgonzalez pushed 1 new commit to master: https://github.com/jquery/jquery-ui/commit/6ca310f49a010dc0c650da155dab378544f08363
[15:22:28] <jquicommit> [jquery-ui/master] Tabs: Better styling for bottom tabs demo. Partial fix for #4785 - Add a tabs demo with the tabs at the bottom. - Scott González
[15:22:52] <scott_gonzalez> anyone up for some CSS work in IE 6?
[16:24:39] <jquicommit> [jquery-ui] scottgonzalez pushed 1 new commit to master: https://github.com/jquery/jquery-ui/commit/e15c32d06763afd2376c61642397e7fc98338958
[16:24:39] <jquicommit> [jquery-ui/master] Merge pull request #413 from kborchers/bug_4333_3 - Scott González
[16:26:49] <jquicommit> [jquery-ui] scottgonzalez pushed 1 new commit to 1-8-stable: https://github.com/jquery/jquery-ui/commit/14ab4f4f374ddda1eaa552072e6e3a86a91db4bd
[16:26:49] <jquicommit> [jquery-ui/1-8-stable] Mouse: Changed mouseHandled check to a local var rather than using originalEvent. Fixed #4333 - Nested draggables problem in IE - kborchers
[16:40:48] <scott_gonzalez> anyone know of a site that uses an accordion?
[16:41:26] <scott_gonzalez> nevermind
[17:42:20] <jquicommit> [jquery-ui] scottgonzalez pushed 1 new commit to master: https://github.com/jquery/jquery-ui/commit/bea74f2ae733f0c092a88038c7d054712fbf88ee
[17:42:20] <jquicommit> [jquery-ui/master] Tests: Added test suites to run individual widget tests against all supported jQuery versions. - Scott González
