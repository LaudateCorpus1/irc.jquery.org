[04:52:30] <aaronmcadam> laerti I've got work to do I said, please don't pm me
[09:22:32] <gseguin> scottjehl, toddparker: I'm confused about https://github.com/jquery/jquery-mobile/issues/455
[09:22:53] <gseguin> is that about the address bar showing up when changing page
[09:23:07] <gseguin> or is it about transitions themselves?
[09:25:53] <toddparker> gseguin -
[09:25:58] <toddparker> i think this is a mix
[09:26:16] <toddparker> there was a lot of URL conversation but there is transition stuff in there too
[09:27:00] <gseguin> ok
[09:27:27] <gseguin> so I guess I'm less confused about what it is about now ;)
[09:31:33] <toddparker> anyone look at tigbro's pulls?
[09:31:37] <toddparker> scottjehl?
[09:33:42] <scottjehl> his pulls had Android UA sniffing but I worked around that one a different way
[09:34:10] <scottjehl> it was about scrollTo either 0 or 1 at load, depending on iOS or Android
[09:34:29] <gseguin> which you integrated in, right?
[09:34:43] <scottjehl> yes. Not using tigbro's pull though
[09:35:24] <scottjehl> but the flickering on Android is still present. We have a code sample to try out that'll change the transitions over to use css transitions rather than keyframe animations, and supposedly it fixes the blink
[09:35:37] <scottjehl> I had said I'd work on that one but haven't gotten to it yet
[09:38:10] <gseguin> do you want me to give it a shot or is there something else I should be looking into?
[09:39:41] <scottjehl> umm sure if you want to start a branch moving transitions over, that'd be awesome
[09:39:45] <scottjehl> :)
[09:40:06] <scottjehl> I'm not sure which ticket it's in, but someone did a large portion of the work already and said it was working well
[09:40:18] <scottjehl> not a pull, just code in the comments
[09:40:42] * gseguin is looking through the issues
[09:43:31] <gseguin> scottjehl: do you remember a keyword that would narrow my search results?
[09:44:04] <scottjehl> looking
[09:44:33] <scottjehl> https://github.com/jquery/jquery-mobile/issues/1445
[09:44:44] <gseguin> yep I just found that one
[09:44:46] <gseguin> thanks
[09:45:06] <scottjehl> sure! this may be a good time to get the other prefixes in to, if they didn't already.
[09:45:15] <scottjehl> opera, moz, etc
[09:45:20] <gseguin> yep
[09:47:48] <scottjehl> awesome thanks for jumping in on that one
[09:52:19] <gseguin> you're welcome
[11:00:07] <toddparker> i'll start up the meeting...
[11:00:42] * gseguin almost forgot about that
[11:00:45] <kinblas> toddparker: just an fyi, I'm in a meeting so I may be a bit distrated ... it's running a little long
[11:04:46] <toddparker> k
[11:39:07] <miketaylr> oh, i should mention opera mobile 11.1 came out today w/ the html5 history API (among other things)
[11:55:22] <kinblas> miketaylr: so with the new history api there is still no way to tell when the user navigates forwards/backwards in the history stack other than looking at the urls in the hashchange event? Which can still result in ambiguity?
[11:58:15] <miketaylr> kinblas: popstate gets fired
[11:58:59] <kinblas> heh I noticed I transposed 2 words that made it sound like a statement versus a question "there is" versus "is there"
[11:59:25] <miketaylr> ha
[11:59:39] <kinblas> so pushState and popState result in notificaitons?
[12:00:32] <miketaylr> not sure i follow
[12:00:39] <miketaylr> what kind of notifications?
[12:01:02] <kinblas> when I read (a while ago) the history api
[12:01:12] <kinblas> it was more of a way to manipulate programatically the history stack
[12:01:35] <kinblas> I was wondering if there was tie in to user actions that manipulate the stack
[12:01:43] <miketaylr> yeah, still is. you've got pushState and replaceState as a way to push (or replace) an entry into the history stack
[12:01:57] <miketaylr> and there's the 'popstate' event which gets fired on any history navigation
[12:02:11] <kinblas> ok that's what I was after
[12:02:17] <kinblas> so there's a push and pop state event?
[12:02:23] <miketaylr> no, just popstate
[12:02:39] <kinblas> ok so you can tell if they hit the back button
[12:02:47] <kinblas> but not when the hit the forward button?
[12:02:49] <miketaylr> yeah, or forward
[12:03:01] <miketaylr> it gets fired for both... don't blame me, i didn't name it :P
[12:03:06] <kinblas> lol
[12:03:25] <kinblas> hmmm ok
[12:03:37] <kinblas> so I guess it has a state in it that you can then run manually through the state list
[12:03:42] <kinblas> to figure out if you went forwards or backwards
[12:03:55] <miketaylr> and if you give it a state object, e.g. history.pushState({foo:"bar"}, '', '/whatever.html'), when popstate is triggered, the event object now has access to that
[12:04:07] <miketaylr> e.state
[12:04:12] <kinblas> ah ok that's better
[12:04:21] <kinblas> we maintain a paralell state stack
[12:04:25] <kinblas> just for transitions
[12:04:30] <kinblas> this would be much better
[12:04:45] <kinblas> because there are times in today's browsers where we can't figure out if they went forwards or back
[12:04:58] <kinblas> so we inevitably do the wrong transition direction
[12:05:07] <kinblas> which gets our stack out of sync
[12:05:18] <miketaylr> however, i'm not sure how the webkit browsers behave currently, the spec was changed a bit after their implementations
[12:05:43] <miketaylr> FF and Opera implemented the latest versions....but chrome for example doesn't have history.state
[12:06:07] <miketaylr> (which is another way to get at the state object of a popstate event... or something)
[12:06:31] <miketaylr> life in the fast lane, and all that
[12:06:36] <kinblas> ugh
[12:07:27] <miketaylr> i think webkit was (is?) firing popstate on load, rather than on backwards or forwards history traversal
[12:09:08] <kinblas> that is oh so wrongly named
[12:09:14] <kinblas> it should have been statechange
[12:09:16] <kinblas> or something
[12:09:21] <scottjehl> hey sorry I was in the meeting channel
[12:09:24] <scottjehl> will check this soon
[12:10:21] <miketaylr> (oh sorry, didn't realize you guys were meeting >_>)
[12:10:48] <kinblas> no no, we're meeting in #jquery-meeting
[12:10:52] <kinblas> not here
[12:10:56] <kinblas> so it's cool
[12:13:47] <kinblas> toddparker: I'll update the blog in a few ... I'm starving so I have to grab something before my 1pm meeting
[12:15:03] <scottjehl> hey there
[12:15:50] <scottjehl> miketaylr: yeah I'm working around the initial popstate fire by disabling my popstate handler until after window onload
[12:15:59] <miketaylr> ah, smart
[12:16:02] <scottjehl> not sure if that's the best way...
[12:17:18] <scottjehl> could be bad if onload fires long after someone clicks to leave the page
[12:17:25] <scottjehl> lots of images, etc
[12:18:15] <miketaylr> i always include at least 18 iframes in my mobile apps too
[12:18:27] <scottjehl> naturally
[12:22:13] <eddiemonge> miketaylr: you would
[12:22:56] <miketaylr> how else am i going to build the next facebook-twitter-google+ mashup?
[12:24:36] <scottjehl> is "Facebook-" out already?
[12:25:21] <gseguin> no but I hear "Google+=1" is in active development
[12:33:22] <todd__> can we use this kind of hashchange
[12:33:22] <todd__> http://probablyinteractive.com/url-hunter#  You killed 1 animal in 30 seconds! (Press ESC to play again)
[12:33:29] <todd__> hash = game
[13:42:43] <gseguin> kinblas: fix for XSS issue awaiting your review
[13:43:10] <kinblas> ok
[13:44:26] <gseguin> I just added the if https://github.com/jquery/jquery-mobile/pull/1993/files#L0R615
[13:44:43] <gseguin> and wrapped the existing .ajax() in the else
[13:45:47] <kinblas> gseguin: when I view the diffs I see a lot of changes ... but I think they are from the whitespace changes rwaldron did yesterday?
[13:47:04] <gseguin> they're the result of the new indentation following the wrapping in the else block
[13:47:16] <kinblas> doh ok
[13:47:32] <kinblas> I wish there were an -ignore-ws option for github diff
[13:47:42] <kinblas> so aside from the indent
[13:47:55] <kinblas> was it just the reject() check above it?
[13:48:13] <gseguin> yeah the if and the then part
[13:49:35] <gseguin> let me make sure unit tests still pass
[13:56:52] <gseguin> kinblas: all tests are green
[13:57:10] <gseguin> now I should add one for that one though
[13:57:36] <scottjehl> be sure to test this with the phonegap bb5 guy :)
[13:58:15] <kinblas> gseguin: looks good (sorry had someone in my cube)
[13:58:36] <kinblas> I just used the file link at the top of the diff to see the change in context
[13:58:41] <kinblas> minus the whitespace stuff
[13:58:49] <kinblas> simple yet effective change!
[13:58:56] <gseguin> ok I'll get a hold of adambiggs
[13:59:36] <kinblas> gseguin: basically you want someone using phonegap that uses links or a document base that is from their home server
[14:00:01] <kinblas> you have to be specific because some folks have all their pages in either a single document, or local files.
[14:00:27] <gseguin> ok
[14:13:38] <gseguin> kinblas: to be clear in should work for:
[14:13:43] <gseguin> -in document pages
[14:13:52] <gseguin> -external same domain links
[14:14:08] <gseguin> but NOT for file:// links
[14:14:15] <gseguin> is that what you're saying?
[14:20:38] <kinblas> ummm
[14:20:42] <kinblas> what I meant was this
[14:21:20] <kinblas> we should always be able to switch to emedded pages
[14:21:27] <kinblas> for external domain links
[14:21:49] <kinblas> aka cross-domain
[14:22:35] <kinblas> I originally put code in place ... for onclick ... that only allowed us to attempt to load a cross-domain when that config flag was set
[14:23:04] <kinblas> *AND* if the orgin (application document) was loaded via file:// as all phonegap applications are
[14:23:31] <kinblas> and if the page they were fetching was using an http/https scheme
[14:23:50] <kinblas> I was trying to enable just the minimum for phonegap folks to "phone home"
[14:24:02] <kinblas> Now that jQuery supports/allows cors
[14:24:24] <kinblas> folks may want to use it on desktop and other devices that support cors
[14:25:06] <kinblas> so all I was saying earlier was that most phone gap users are concerned with the case where their file:// document is trying to phone home via http so we need to make sure that is still allowed/enabled for them
[14:25:48] <gseguin> that probably wont work with the current check
[14:27:40] <kinblas> if they set allowCross
[14:27:46] <kinblas> allowCrossDomainPages()
[14:27:50] <kinblas> why wouldn't it?
[14:28:04] <gseguin> ok, that's where I was confused
[14:28:10] <kinblas> oh yeah
[14:28:12] <kinblas> they have to turn it on
[14:28:20] <kinblas> $.mobile.allowCrossDomainPages = true;
[14:28:28] <kinblas> otherwise they are restricted
[14:28:31] <kinblas> to file:// only
[14:28:33] <gseguin> I thought you wanted that to work with $.mobile.allowCrossDomainPages set to false
[14:28:39] <kinblas> oh no no
[14:28:43] <kinblas> I just wanted a single option
[14:28:46] <gseguin> alright it all makes sense now
[14:28:53] <kinblas> that worked with what we were already doing for phonegap folks
[14:29:07] <kinblas> so now I'm wondering if we need to do this logic or not:
[14:29:29] <gseguin> alright so let me ping adambiggs see if he can test that his stuff is still working with that patch
[14:30:15] <kinblas> 				// Some embedded browsers, like the web view in Phone Gap, allow cross-domain XHR
[14:30:16] <kinblas> 				// requests if the document doing the request was loaded via the file:// protocol.
[14:30:16] <kinblas> 				// This is usually to allow the application to "phone home" and fetch app specific
[14:30:16] <kinblas> 				// data. We normally let the browser handle external/cross-domain urls, but if the
[14:30:16] <kinblas> 				// allowCrossDomainPages option is true, we will allow cross-domain http/https
[14:30:16] <kinblas> 				// requests to go through our page loading logic.
[14:30:16] <kinblas> 				isCrossDomainPageLoad = ( $.mobile.allowCrossDomainPages && documentUrl.protocol === "file:" && href.search( /^https?:/ ) != -1 ),
[14:30:40] <kinblas> gseguin: What I'm wondering is if we wanted to relax that expression above
[14:30:58] <kinblas> and just make it all accessible or not based on the config flag
[14:31:10] <kinblas> I was trying to be conservative when I initially wrote that
[15:02:20] <gseguin> sorry kinblas, I'm back now
[15:13:41] <gseguin> kinblas: what do you think of a whitelist for cross domain?
[15:14:28] <gseguin> would that make sense? We let the application author decide which domains the app can crossdomain xhr to
