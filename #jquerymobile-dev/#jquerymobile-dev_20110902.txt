[08:46:17] <mrevd> hey all, i'm getting strange behavior on first pageTransition. the new page animates in, and then the first page is flashed and hidden. this only ever happens on the first page transition… any ideas how to fix?
[09:00:06] <kinblas> mrevd: what device/OS/browser?
[09:00:18] * kinblas guesses android
[09:01:23] <mrevd> it happens in ios
[09:31:45] <_nickel> kinblas: https://github.com/jquery/jquery-mobile/issues/2368
[09:31:46] <socialhapy> ★ Issue #2368 on jquery-mobile, reported by kirk911 (2d, 19m ago): pagecreate event fire multiple times
[09:31:48] <_nickel> I'm going to close that
[09:31:55] <_nickel> its working as expected
[09:32:02] <_nickel> slight face plam
[09:32:04] <_nickel> *palm
[09:37:46] <kinblas> _nickel: ok
[09:38:27] <kinblas> _nickel: that guy does no about domCache?
[09:38:36] <kinblas> s/no/know
[09:38:43] <_nickel> kinblas: yah thats the first thing I had him test
[09:38:50] <_nickel> but hes kind of doing it wrong
[09:39:38] <_nickel> or at least it appears so
[09:39:39] <_nickel> one sec
[09:59:22] <_nickel> kinblas: closed that but I'll keep an eye on it and try to help the guy out
[11:55:45] * kinblas sighs
[11:55:46] <kinblas> https://github.com/jquery/jquery-mobile/issues/1464
[11:55:46] <socialhapy> ★ Issue #1464 on jquery-mobile, reported by 22222 (4m, 2w ago): No way to stop a link from being followed with some custom event (tap, taphold)
[11:56:04] <kinblas> I have a fix for vclick and tap ... but it seems taphold needs some re-working.
[12:40:06] <kinblas> _nickel: ping
[12:46:04] <_nickel> kinblas: pong
[12:46:14] <_nickel> repositioned myself
[12:46:28] <kinblas> I was going to ask you what this is doing
[12:46:41] <kinblas> 			$.each(events, function(i, name){
[12:46:41] <kinblas> 				$.each([$("#qunit-fixture"),
[12:46:41] <kinblas> 					$($.event.special.scrollstart),
[12:46:41] <kinblas> 					$($.event.special.tap),
[12:46:41] <kinblas> 					$($.event.special.tap),
[12:46:42] <kinblas> 					$($.event.special.swipe)], function(j, obj){
[12:46:42] <kinblas> 						obj.unbind(name);
[12:46:43] <kinblas> 					});
[12:46:43] <kinblas> 			});
[12:47:22] <kinblas> _nickel: btw, that's from the unit test for event
[12:47:49] <kinblas> I'm asking because $.event.special.scrollstart etc are objects?
[12:50:06] <_nickel> kinblas: I'm assuming thats in setup/teardown?
[12:50:12] <kinblas> yeah
[12:50:36] <_nickel> that looks especially naive
[12:50:52] <_nickel> kinblas: I would image that the bindings for the tests are being removed there
[12:51:01] <_nickel> kinblas: they should probably just use .one
[12:51:58] <kinblas> _nickel: I guess what I'm not getting is why are we registering event handlers on non-DOM elements
[12:51:59] <kinblas> ??
[12:52:42] <_nickel> kinblas: I think my reading of the code was that those were the objects on which the events would be triggered regardless
[12:53:16] <_nickel> I don't think I quite understood what the events.js was doing
[12:53:22] <_nickel> and I was attempting to isolate the test
[12:53:35] <_nickel> basically I was reading the code and writing tests for it
[12:53:51] <kinblas> well
[12:53:59] <kinblas> what happens is
[12:54:14] <kinblas> the objects those special things point at
[12:54:24] <kinblas> are used as an api for the custom event
[12:54:31] <_nickel> figures
[12:54:32] <kinblas> the actual invocations are like this
[12:54:33] <kinblas> special.setup.call( elem, data, namespaces, eventHandle )
[12:54:52] <kinblas> where special is something like special = $.event.special["tap"];
[12:55:11] <_nickel> this is all just convention right?
[12:55:21] <kinblas> what do you mean?
[12:55:46] <_nickel> this is just the cannonical way to define new events in jquery
[12:56:01] <kinblas> right, but I guess what I'm saying
[12:56:09] <kinblas> is no binding is ever added on to the special object
[12:56:31] <kinblas> it's up to the implementation of the special methods (setup being one of the optional methods to define)
[12:56:42] <kinblas> to actually do bindings on the element it is given
[12:56:56] <kinblas> as the (this) reference when the api function is invoked
[12:58:30] <_nickel> kinblas: so the bindings that happen later in the tests are just non-sensical
[12:59:12] <_nickel> kinblas: tbh I haven't the slightest clue what i was thinking when I did: $($.event.special.scrollstart).bind("scrollstart",
[12:59:13] <kinblas> well, no ... I think you can bind a handler to an arbitrary JS object
[12:59:18] <_nickel> right
[12:59:23] <_nickel> but it doesn't make much sense
[12:59:33] <kinblas> but when you trigger for that object
[12:59:38] <kinblas> only that object gets an event
[13:00:07] <kinblas> basically we're doing tests of special events that assume they are on DOM elements ... on actual JS objects that are not in the DOM
[13:00:13] <kinblas> *AND*
[13:00:28] <kinblas> those objects happen to be the special implementations of those events you are testing
[13:01:00] <_nickel> an impressive failure
[13:01:15] <_nickel> kinblas: http://www.shipmentoffail.com/wp-content/uploads/2008/01/failboat.jpg
[13:01:59] <kinblas> _nickel: eh, it's not that bad, we can just substitute an element in there
[13:02:12] <kinblas> in each bind call
[13:02:16] <_nickel> kinblas: yah I'm trying that now with a quick find replace
[13:02:38] <kinblas> but we'll have to unbind off that same element at the end of each test
[13:02:53] <kinblas> to make sure we don't interfere with the next test
[13:03:02] <kinblas> ... or oh yeah ... we can just namespace what we register
[13:03:22] <kinblas> and then just unbind the namespace after each test
[13:03:30] <kinblas> that way we don't have to track every binding we're making
[13:03:39] <kinblas> just the elements we're registering them on
[13:04:41] <_nickel> kinblas: how would namespacing work in this case
[13:05:00] <_nickel> prefixing it with something would represent a different event wouldn't it?
[13:05:05] <kinblas> bind("tap.namespace")
[13:05:17] <kinblas> unbind(".namespace")
[13:05:22] <kinblas> I have to look it up
[13:05:30] <kinblas> to be honest :-)
[13:05:42] <kinblas> but I remember scott doing some trick like that for something
[13:05:49] <_nickel> kinblas: I thought it had to be reversed
[13:05:53] <_nickel> "foo.tap"
[13:05:55] <_nickel> unbind("foo"
[13:05:56] <_nickel> )
[13:06:02] * _nickel cannot hack in IRC
[13:06:36] * kinblas shrugs
[13:06:38] <kinblas> http://docs.jquery.com/Namespaced_Events
[13:07:06] <kinblas> _nickel: it's the way I mentioned it above, namespace comes after
[13:07:38] <_nickel> kinblas: maybe thats why its an underused feature :(
[13:07:45] <kinblas> LOL
[13:07:47] <_nickel> namespacing from right to left
[13:07:58] <kinblas> _nickel: I laughed because that's exactly what I thought
[13:08:10] * _nickel sighs
[13:08:10] <kinblas> and when I was wondering why bind("kin.click" )
[13:08:15] <kinblas> didn't work when I tried it
[13:08:24] <_nickel> kinblas: are you working in there right now or can I redo those tests?
[13:08:50] <kinblas> _nickel: you can redo them, I was poking around because I was going to try and add some taphold tests
[13:09:01] <kinblas> related to the bug I sighed about above
[13:09:11] <kinblas> https://github.com/jquery/jquery-mobile/issues/1464
[13:09:12] <socialhapy> ★ Issue #1464 on jquery-mobile, reported by 22222 (4m, 2w ago): No way to stop a link from being followed with some custom event (tap, taphold)
[13:09:25] <kinblas> we need to add tests regarding stopPropagation and stopImmediatePropagation
[13:09:31] <kinblas> but I can wait
[13:09:33] <kinblas> no biggie
[13:09:44] <kinblas> ... but can I check in my fixes anyways? :-D
[13:12:11] <_nickel> kk
[13:12:17] <_nickel> and I'll let you know when I get that sorted
[13:26:29] <_nickel> kinblas: so one immediate issue I'm running into is the triggering touchmove on a dom element requires that the .touches collection be available on the event
[13:27:02] <_nickel> no clue why it didn't matter for the js object
[13:27:05] <kinblas> _nickel: ah yes ... the problem with .trigger() is that it doesn't generate the expected fields
[13:27:11] <_nickel> yah :(
[13:27:22] <_nickel> I can monkeypatch event to have the stuf
[13:28:38] <kinblas> _nickel: Yeah if you really want to simulate and test the same code path, then we need to generate events that look like real ones.
[13:29:33] <_nickel> kinblas: one liner
[13:29:37] <_nickel> moving on :D
[13:30:04] <kinblas> ??
[13:30:06] <kinblas> punting?
[13:30:43] <kinblas> $.Event() gets you most of the way
[13:30:52] <kinblas> you just need to add the fake touches arrays
[13:31:18] <kinblas> oh, by one liner, you meant all it took was one line?
[13:32:43] <_nickel> yah
[13:33:02] <_nickel> its in the prototype so when testing on phones it should be fine
[13:33:18] <_nickel> err
[13:33:21] <_nickel> I take that back
[13:33:39] <_nickel> if its dependent on the actual pageX and pageY being a specific value then it may not :(
[13:33:47] <_nickel> I'll cross that bridge when I come it
[13:33:50] <_nickel> *come to it
[13:40:48] <_nickel> kinblas: done and pushed
[13:41:42] <kinblas> _nickel: so if I git stash my changes, so I can do a "git pull" to get your changes, and then restore the stash
[13:42:01] <kinblas> does it give me a chance to fix conflicts?
[13:42:56] <kinblas> _nickel: I can look it up, just curious if you had first-hand experience
[13:48:41] <_nickel> yes
[13:49:08] <_nickel> kinblas: yes, since you're not commiting the conflict delimiters will be in place in the file
[13:49:22] <_nickel> then you can sort them out and deal
[13:50:24] * kinblas gives it a whirl
[13:51:57] * _nickel loves git
[13:58:05] <_nickel> kinblas: I added a comment to the prototype addition so that its clear you'll have to rebase again before you push
[13:58:15] <_nickel> kinblas: or merge whichever workflow you may be using
[13:58:32] <_nickel> though it shouldn't conflict unless you're monkeying with it
[14:10:05] <_nickel> kinblas: gseguin: scottjehl: todd_: ^
[14:10:31] <_nickel> in leiu of having an smtp server for now
[14:10:33] <kinblas> hey-now
[14:10:42] <_nickel> I've been seeing intermitent failures as well
[14:10:44] <kinblas> realtime bot reporting?
[14:10:51] <_nickel> so I'll have to keep an eye on those
[14:11:16] <_nickel> kinblas: yah the breakages and return-to-normals will be reported herre
[14:11:19] <_nickel> *here
[14:11:28] <kinblas> so like:
[14:11:48] <kinblas> jqm-jenkinsbot says: jblas broke the build .. blame him
[14:11:59] <_nickel> a bit more detail
[14:12:03] <_nickel> but something like that :D
[14:12:19] <_nickel> once we get coverage numbers we should post them on the site too
[14:12:26] <kinblas> _nickel: does it make snide comments about coding abilities too?
[14:12:28] <_nickel> we need to shame ourselves into doing a better job testing :D
[14:12:34] <_nickel> kinblas: no i turned that off lol
[14:12:55] <kinblas> _nickel: heh, I haven't checked in my fix from 2hours ago because I'm trying to figure out how to test it.
[14:12:58] <kinblas> :-)
[14:39:26] <_nickel> anything I can help with?
[14:42:46] <_nickel> kinblas: ^
[14:44:51] <kinblas> you already did by fixing up the event test
[15:00:02] <_nickel> kinblas: alright then :D
[15:47:45] <kinblas> _nickel: ping
[15:47:50] <_nickel> kinblas: yessir
[15:48:24] <kinblas> _nickel: so how do you feel about me adding tests for completeness but temporarily commenting them out because I know the implementation is broken?
[15:48:59] <_nickel> kinblas: branch
[15:49:37] <_nickel> branches are so cheap with git you might as well just branch and do the work there
[15:49:40] <_nickel> merge back in when you're done
[15:49:59] <_nickel> that way everyone wins
[15:50:01] <kinblas> hmmm ok. by branch you mean "local" right?
[15:50:11] <_nickel> kinblas: you can push it to origin if you want
[15:50:18] <_nickel> doesn't bother me :D
[15:50:26] <kinblas> _nickel: heh it bothers some folks  :-)
[15:50:33] <_nickel> who?
[15:50:45] <kinblas> _nickel: the thing is that I don't know when I'm going to get around to fixing it
[15:50:50] <kinblas> so it may be around a while
[15:50:55] <_nickel> thats fine
[15:50:58] <_nickel> nothing wrong with that
[15:51:11] <_nickel> alternatively you could push it to your own fork of jqm like I sometimes do
[15:51:16] <kinblas> okie dokie
[15:51:17] <_nickel> then its "backed up"
[15:51:21] * kinblas backs out taphold tests
[15:51:28] <kinblas> _nickel: yeah that's the main thing I'm after
[15:51:44] <kinblas> I'm in the mode right now, might as well add it while the inner workings are fresh-in-mind
[15:51:56] <kinblas> I just don't want to lose things
[15:52:01] <kinblas> hence the commenting out question
[15:53:12] * kinblas wonders if he just bite the bullet and fix
[17:16:41] <_nickel> w00t doing a warmup for my talk at jqcon boston
[17:16:46] <_nickel> Thursday next week
[17:16:56] <_nickel> time to get those slides done
