[09:01:29] <DaveMethvin> anybody home?
[09:01:43] <gibson042> here
[09:01:48] <_markelog> hey-hey
[09:02:14] <DaveMethvin> timmywil rwaldron  m_gol  and other interested parties?
[09:02:59] <m_gol> present
[09:03:41] <DaveMethvin> so m_gol maybe Igor could reply on the ticket?
[09:03:51] <DaveMethvin> assuming Trac stays up long enough :)
[09:03:53] <m_gol> good idea
[09:04:04] <DaveMethvin> we also have the pull request
[09:05:40] <DaveMethvin> might be better to use the PR ... damn you trac!
[09:06:07] <DaveMethvin> i noted both in the meeting notes
[09:06:23] <m_gol> hahaha
[09:07:12] <DaveMethvin> i hope trac will be better soon
[09:07:25] <DaveMethvin> they have a test setup of the latest trac working
[09:07:30] <DaveMethvin> with the data quickly ported
[09:07:34] <DaveMethvin> and it seemed to be really fast
[09:07:49] <m_gol> k, I pinged him about that, we'll see
[09:07:57] <m_gol> what about the spam filter?
[09:08:15] <m_gol> that is, making Trac not think all comes through a local IP :-)
[09:08:22] <DaveMethvin> dunno if it was turned on or not
[09:08:39] <scott_gonzalez> We're hoping to enable email verification which should help.
[09:08:42] <DaveMethvin> the main thing i'd like to see is verificatoin of the email address for new registration
[09:08:49] <DaveMethvin> if that was done it would help a lot
[09:09:27] <m_gol> yeah
[09:09:30] <DaveMethvin> okay, $.xhr
[09:09:46] <DaveMethvin> so it sounds like people didn't like the idea of configuration via chaining
[09:09:58] <DaveMethvin> so we're back to a (simple!) options object
[09:10:36] <_markelog> they didn't?
[09:10:40] <DaveMethvin> so, regarding browser support
[09:10:55] <DaveMethvin> i was assuming this was 2.x only but we never said explicitly?
[09:11:17] <m_gol> jaubourg once said he doesn't see why it shouldn't work with 1.x
[09:11:24] <m_gol> but I wouldn't put that as a hard requirement :)
[09:11:47] <DaveMethvin> i pinged jaubourg again, since i haven't heard from him for a while
[09:11:55] <scott_gonzalez> I want it in 1.x
[09:12:19] <scott_gonzalez> Though I won't push too hard on that.
[09:12:26] <DaveMethvin> as i recall we had to use polling in 1.x because the events were'nt reliable
[09:12:37] <DaveMethvin> and that also means we can't depend on any XHR2 stuff
[09:12:42] <DaveMethvin> or cross-domain requests
[09:12:43] <_markelog> Did i miss some discussion about $.xhr?
[09:12:50] <_markelog> "General feedback was that people preferred an options object"
[09:12:50] <_markelog> ?
[09:12:56] <DaveMethvin> it was in the email thread
[09:13:01] <m_gol> _markelog: see mikesherov's reply
[09:13:08] <_markelog> i saw it
[09:13:16] <m_gol> there was sth on irc also IIRC
[09:13:22] <mikesherov_> hi
[09:13:29] <_markelog> i'm not sure how Mike came to that conclusions
[09:13:40] <mikesherov_> Let me clarify
[09:13:59] <mikesherov_> When I said understood the goals, I meant that was what I believed them to be
[09:14:08] <mikesherov_> Understood was probably the wrong word there
[09:14:11] <_markelog> in the email thread there was only remark from Scott
[09:14:32] <DaveMethvin> should be one from mike too
[09:14:59] <scott_gonzalez> me, Mike, Dave, Oleg, Mike
[09:15:01] <timmywil> ohai
[09:15:05] <mikesherov_> I hnad 2 replies. One saying I dislikes config methods especially for config that had to come in pairs (like username() and password())
[09:15:09] <_markelog> "While I personally like the proposed design"
[09:15:11] <scott_gonzalez> That was the order of all replies.
[09:15:13] <_markelog> that is from Mike :)
[09:15:29] <mikesherov_> Yes, I do like it on a personally level
[09:15:39] <mikesherov_> I like the visionmedia one too
[09:15:48] <DaveMethvin> if there was an existing api we could adopt that was minimal that would be great, but the visionmedia one is a a little feature laden for my taste and still doesn't provide promise support
[09:15:52] <_markelog> i don't think we should include username and password at all
[09:16:12] <DaveMethvin> if someone wants that interface it is availalbe to them on npm, so there's that
[09:16:55] <_markelog> so we're not gonna do it because there is similar design out there?
[09:17:12] <DaveMethvin> can't we just point people to it if they need it?
[09:17:31] <DaveMethvin> or will ours be different enough that it's not a subset?
[09:17:40] <timmywil> ok, I'm confused now. What's the point of $.xhr?
[09:17:44] <m_gol> :D
[09:17:51] <scott_gonzalez> DaveMethvin: Regarding the beforeSend() callback and being able to manually tweak stuff before sending, we could always have $.xhr().send()
[09:17:55] <mikesherov_> to clarify my position: I think jQuery.xhr should be as minimal as possible, and exhibit the following features: a promise API, a lack of options as much as possible, and a lack of deferred, and a lack of global state
[09:18:02] <_markelog> so we're not gonna do $.xhr but point to superagent?
[09:18:18] <DaveMethvin> if someone wanted superagent we could/should point them to it
[09:18:25] <DaveMethvin> but is that what we want to put into jQuery?
[09:18:36] <DaveMethvin> it seems too big for the monolithic file
[09:18:44] <_markelog> mikesherov_: it has everything you mentioned
[09:18:55] <timmywil> I don't want superagent. I just want something small for common ajax requests.
[09:18:59] <_markelog> it shouldn't be
[09:19:09] <_markelog> we could use same code-paths for ajax and xhr
[09:19:10] <DaveMethvin> that's what i want $.xhr to be as well timmywil
[09:19:11] <mikesherov_> right, Dave's point is this: We already have one API spcefiying everything. It's called $.ajax
[09:19:22] <mikesherov_> we shouldn't build a second large ajax impl
[09:19:30] <mikesherov_> just an imply to cover the basic xhr case
[09:19:30] <_markelog> agree
[09:19:39] <_markelog> that what it does
[09:19:40] <mikesherov_> 'just to simply*
[09:19:57] <_markelog> i'm confused
[09:20:24] <DaveMethvin> superagent does quite a bit more i think
[09:20:24] <mikesherov_> let's use your exmaples:
[09:20:32] <timmywil> then we're overthinking it. If we want it to be small, the impl won't cover everything. Let's start by defining the most common use cases, cover those with a clean API, then stop.
[09:20:48] <mikesherov_> `.username()`, `.password()`, `.promise()` seem unnecessary
[09:20:50] <_markelog> i'm not proposing to use superagent, i'm proposing similar design to superagent
[09:21:11] <_markelog> as i said: i woudn't include username and password methods
[09:21:34] <mikesherov_> are you saying then that your gist isn't what you're proposing, but rather just the style (and not the content) of the api?
[09:21:58] <DaveMethvin> i think one of the things about $.xhr is that it won't try to abstract out the raw XHR object, and instead let it be exposed (e.g. via beforeSend) so people can add what they need
[09:22:05] <_markelog> https://gist.github.com/markelog/5a5aec471886a863a136#file-gistfile1-js-L22
[09:22:08] <_markelog> please read it
[09:22:37] <timmywil> DaveMethvin: that's fine, but even that is beyond the common use case, right?
[09:22:43] <DaveMethvin> yes
[09:22:45] <mikesherov_> I read it. It's kind of confusing though, because it's in the same vein as `.method()`
[09:23:05] <DaveMethvin> i think that confusion comes from having a different object that is chainable
[09:23:41] <DaveMethvin> the chain would start with a chainable options object and then morph to a promise object
[09:23:46] <DaveMethvin> or a callback
[09:23:57] <gibson042> DaveMethvin: what do you mean?
[09:23:59] <mikesherov_> right, and that's one thing we want to avoid
[09:24:40] <mikesherov_> gibson, it turns into a promise through the use of the .promise() method.... like animations
[09:24:40] <gibson042> an object can be simultaneously chainable and thenable... that's what's in the gist
[09:24:52] <gibson042> oh, I must have missed that
[09:25:00] <gibson042> I thought it *was* a promise
[09:25:13] <m_gol> if we're aiming for a small options object then I don't think chaining options buys a lot
[09:25:16] <DaveMethvin> we have a similar confusion with our own api already today
[09:25:25] <mikesherov_> it's a deferred until it's specifiically a prmoise
[09:25:45] <timmywil> m_gol: exactly
[09:25:46] <_markelog> alright than, sounds its a no-go
[09:25:47] <DaveMethvin> $.ajax().then() returns a Deferred but $.ajax().done() returns a Deferred-enhanced jQXHR
[09:25:49] <m_gol> and it seems native interfaces will go into returning promises by default without any helper like .promise()?
[09:25:51] <_markelog> moving on?
[09:26:28] <DaveMethvin> alright
[09:27:07] <DaveMethvin> on browser support, I think $.xhr won't do a lot for 1.x if we don't wrap the raw object
[09:27:17] <DaveMethvin> and if we do that we're back to a lot of the $.ajax mess i think
[09:27:24] <DaveMethvin> trying to abstract away the differences
[09:27:25] <m_gol> btw, maybe we should look a little at http://fetch.spec.whatwg.org/
[09:27:32] <mikesherov_> question:
[09:27:41] <mikesherov_> when we say $.xhr, we mean XHR
[09:27:45] <mikesherov_> and not JSONP
[09:27:51] <scott_gonzalez> correct
[09:27:51] <mikesherov_> right?
[09:27:51] <m_gol> yup
[09:27:54] <mikesherov_> ok
[09:27:54] <DaveMethvin> right
[09:28:23] <mikesherov_> and we're removing synchronous support, even though xhr supports that?
[09:28:29] <DaveMethvin> m_gol: thanks for the reminder, i saw that and meant to see how it might fit
[09:28:34] <DaveMethvin> added to the notes
[09:28:47] <DaveMethvin> so on hide/show
[09:28:52] <DaveMethvin> i made a couple of notes about this
[09:29:12] <DaveMethvin> how badly do we want to break things? :)
[09:29:12] <mikesherov_> because I thought a lot of the "mess" in $.ajax was from incongruity in the options between XHR and JSONP, although I'm likely understating the problem
[09:29:51] <m_gol> yeah, async XHR with no JSONP or other weird hacks
[09:30:13] <DaveMethvin> i am very sure people do initially css-hidden elements they later .show() because i've done that a lot in the past
[09:30:15] <m_gol> I mean, you do have access to the native XHR so you can do various things but I wouldn't necessarily support it
[09:30:33] <m_gol> DaveMethvin: the meaning of "hidden"....
[09:30:55] <DaveMethvin> if i hide a table row then show it .... ?
[09:31:06] <DaveMethvin> this is how we got the mess we have today
[09:31:33] <m_gol> I don't think there's any way to avoid the mess unless we say: "no display: none = not hidden"
[09:31:44] <mikesherov_> well
[09:31:51] <mikesherov_> what about detached nodes
[09:32:12] <_markelog> what about parent nodes that are hidden
[09:32:24] <mikesherov_> and things that don't effect layout and have no opacity
[09:32:30] <mikesherov_> the list goes on and on
[09:32:39] <mikesherov_> the word "hidden" has no true meaning
[09:32:45] <DaveMethvin> we'd need to see if this element.style has display:none to be hidden
[09:32:51] <DaveMethvin> not cascade, iow
[09:32:54] <mikesherov_> and what about  elements with elem.hidden = true?
[09:33:18] <m_gol> if parent is hidden then show on a child won't help you anyway
[09:33:19] <DaveMethvin> elem.hidden postdates .show/.hide so i don't care :)
[09:33:39] <mikesherov_> we also do this crazy thing where you try to measure an element, jQuery makes it visible for a moment to catch a measurement
[09:33:41] <DaveMethvin> really the best thing is to tell people not to use them at all
[09:33:46] <mikesherov_> right
[09:33:52] <mikesherov_> deprecate :visible
[09:33:58] <m_gol> that's the problem, you can't just show an arbitrary node without affecting the rest
[09:34:07] <mikesherov_> m_gol: exactly
[09:34:24] <DaveMethvin> soooooo
[09:34:31] <mikesherov_> problem is that people will hide elements, do some measurements, modify the dom, then shopw
[09:34:37] <DaveMethvin> is there *anything* we can do here?
[09:34:37] <mikesherov_> as a performance hack
[09:34:44] <DaveMethvin> documentation for sure
[09:34:54] <mikesherov_> I think we can deprecate :visible
[09:35:18] <DaveMethvin> yep, deprecate :visible/:hidden explaining they cause perf issues for one
[09:35:24] <scott_gonzalez> I've always treated .show() and .hide() as the acceptable methods for modifying CSS properties via JS.
[09:35:26] <DaveMethvin> and that they are not that consistent
[09:35:30] <mikesherov_> also, we can deprecate the show/hide hack
[09:35:59] <mikesherov_> where we measure .width() on display:none elements
[09:36:05] <DaveMethvin> in reality tho i don't think we could remove those until some major release like 3.0
[09:36:18] <DaveMethvin> too much code depends on it
[09:36:21] <mikesherov_> remove vs. deprecate though, right?
[09:36:23] <gibson042> we're basically coming around to .show()/.hide() as analogs for .hidden=false/true on older clients...
[09:36:24] <DaveMethvin> right
[09:36:49] <gibson042> I consider this a good thing
[09:36:53] <DaveMethvin> who supports .hidden now?
[09:36:55] <mikesherov_> .show/.hide work though, no?
[09:37:10] <mikesherov_> .hidden is still not ready for primetime IIRC
[09:37:25] <DaveMethvin> caniuse doesn't help
[09:37:25] <gibson042> right, but it defines our behavior
[09:37:32] <mikesherov_> right
[09:37:37] <mikesherov_> well, there's two things
[09:37:39] <DaveMethvin> yeah, no monkeying with css
[09:37:42] <mikesherov_> there's .hidden
[09:37:48] <gibson042> the only special logic is that .show() needs to not screw up non-block display
[09:38:01] <mikesherov_> and there's that spec from Tab Atkins that separates display: none out from the other display modes
[09:38:22] <mikesherov_> specifically so the future us can remove the iframe hack and the default display stuff
[09:38:37] <DaveMethvin> gibson042: we still need to know the appropriate display type tho
[09:38:47] <DaveMethvin> display:not-hidden would be helpful
[09:38:51] <DaveMethvin> like that Tab spec
[09:38:54] <gibson042> DaveMethvin: not if we're only removing display: block
[09:38:55] <mikesherov_> http://dev.w3.org/csswg/css-display/
[09:39:08] <gibson042> and restoring any inline value that we overwrote
[09:39:10] <mikesherov_> I've done whatever I was capable of to move that spec forward
[09:39:16] <mikesherov_> but still lacking willing implementors
[09:39:17] <DaveMethvin> oh, or removing display: none
[09:39:36] <mikesherov_> in that spec, display: is a shorthand
[09:39:51] <DaveMethvin> the problem we ran into was that if it's disconnected we got the wrong display value
[09:40:09] <DaveMethvin> well, i guess the only way to know for sure would be to try it
[09:40:15] <gibson042> right, so we solve that by not caring if it's disconnected
[09:40:23] <m_gol> gibson042: +1
[09:40:40] <mikesherov_> DaveMethvin: sort of
[09:40:49] <DaveMethvin> but i'm pretty sure that there's a lot of css-based display:none where people show by expecting display:block
[09:41:00] <mikesherov_> DaveMethvin: the problem with disconnected nodes
[09:41:04] <gibson042> .hide(): .data( internalName, elem.style.display || "" )
[09:41:04] <gibson042> .show(): elem.style.display = .data( internalName )
[09:41:13] <mikesherov_> is that their values for everything is '' according to current spec
[09:41:15] <scott_gonzalez> I'm fine with .hide() on a disconnected node setting `display: none` and then .show() doing the wrong thing later.
[09:41:15] <scott_gonzalez> That can be documented.
[09:41:19] <mikesherov_> and at least chrome behaves that way
[09:41:22] <m_gol> gibson042: that's basically what I proposed last time ;)
[09:41:27] <gibson042> :D
[09:41:39] <DaveMethvin> who wants to make it so?
[09:41:44] <DaveMethvin> make it so!
[09:41:47] <mikesherov_> wait, what is the proposed solution?
[09:41:57] <m_gol> I believe gibson042 already has a two-line implementation :P
[09:42:05] <m_gol> with edge cases it may go to 10 lines
[09:42:13] <gibson042> sounds about right
[09:42:14] <DaveMethvin> by the time it lands it will be one line :)
[09:42:35] <gibson042> I'm willing to take it
[09:42:43] <DaveMethvin> that would be awesome
[09:42:51] <m_gol> I was wondering
[09:43:02] <mikesherov_> so the solution is that disconnected hiding will result in inability to later show?
[09:43:30] <gibson042> no
[09:43:48] <gibson042> solution is that .show() and .hide() operate on element-level inline styles, ignoring context entirely
[09:44:07] <mikesherov_> I see
[09:44:25] <mikesherov_> so effectively only undo each other
[09:44:36] <gibson042> .hide() always results in display: none; .show() results in display: "" unless there was a preexisting value, in which case it will use that
[09:44:55] <gibson042> (preexisting non-"none" value)
[09:44:57] <mikesherov_> so no more iframe hack
[09:45:01] <gibson042> correct
[09:45:04] <mikesherov_> no more checking for disconnected
[09:45:11] <gibson042> yep
[09:45:11] <DaveMethvin> YAY!
[09:45:25] <m_gol> no more
[09:45:35] <mikesherov_> why even bother restoring a previoous value though?
[09:45:54] <m_gol> because hide+show shouldn't suddenly make an element block
[09:46:06] <DaveMethvin> if we can avoid it :)
[09:46:06] <m_gol> and it's easy enough
[09:46:08] <DaveMethvin> yeah
[09:46:25] <mikesherov_> OK, what about importance
[09:46:34] <mikesherov_> just want to be thorough here
[09:46:39] <m_gol> you mean !important?
[09:46:43] <mikesherov_> Right
[09:46:48] <m_gol> we don't play nice with it even in CSS
[09:46:56] <m_gol> try overwriting !important with .css() in IE
[09:46:57] <gibson042> I'm tempted to ignore, but will look into it detail later
[09:47:02] <mikesherov_> what if a global style uses !important display: block
[09:47:03] <m_gol> or everything except Fx for that matter
[09:47:17] <m_gol> we had a hack for that once but it only caused more problems that it solved
[09:47:20] <mikesherov_> seems like the right thing to do would be to set important on the inline flag
[09:47:21] <m_gol> so it was reverted
[09:47:27] <DaveMethvin> if you have strange css etc then i think you shoudl avoid show/hide even more
[09:47:32] <m_gol> :)
[09:47:39] <DaveMethvin> they're meant to make life easier for the normal cases
[09:47:44] <m_gol> so, browsers are weird
[09:47:46] <mikesherov_> right
[09:47:50] <mikesherov_> fair enough
[09:47:56] <m_gol> and you can reset !important by resetting the value to an empty string
[09:48:05] <m_gol> but not by resetting to a regular value
[09:48:08] <m_gol> except in Fx
[09:48:14] <scott_gonzalez> Agreed, anyone using !important on display doesn't deserve nice things.
[09:48:19] <DaveMethvin> well definitely need some new docs for the cases, and more unit tests
[09:48:20] <m_gol> so we had a hack with going through an empty string
[09:48:34] <m_gol> which we came to regret later ;)
[09:48:45] <m_gol> and important life lesson: don't try too hard
[09:48:49] <m_gol> * an
[09:49:03] <DaveMethvin> yeah
[09:49:18] <DaveMethvin> as Homer Simpson said, let that be a lesson kids, don't even try
[09:49:19] <DaveMethvin> :)
[09:50:16] <m_gol> that was the attempt to repair the bug by being even more weird: https://github.com/jquery/jquery/pull/1532
[09:50:27] <DaveMethvin> btw if the previous value was display:none we prob don't want to save that :)
[09:50:36] <m_gol> the "don't do that at home" PR
[09:50:39] <m_gol> haha
[09:50:54] <gibson042> right DaveMethvin
[09:50:55] <m_gol> that's why I said about edge cases & 10 lines instead of 2 ;)
[09:51:00] <DaveMethvin> yeah
[09:51:39] <DaveMethvin> okay, so i see the one PR listed there
[09:51:46] <gibson042> the indented description is three lines in meeting notes... I'll see if the code can match ;)
[09:51:52] <DaveMethvin> seems like a good idea to give the runs a descriptive name
[09:52:03] <m_gol> ok, I'll change it back to the ISO string
[09:52:09] <m_gol> btw, I reported an issue
[09:52:13] <m_gol> there's some iOS7 problem
[09:52:21] <m_gol> https://github.com/jquery/sizzle/issues/277
[09:52:40] <gibson042> I don't know that we can do anything about that
[09:52:51] <m_gol> this looks very weird
[09:53:06] <DaveMethvin> yeah whatsup with that?
[09:53:20] <m_gol> QUnit is supposed to define the `setup` variable, right?
[09:53:53] <gibson042> https://github.com/jquery/sizzle/blob/master/test/data/testrunner.js#L16-L32
[09:54:06] <m_gol> hmm, ok
[09:54:37] <gibson042> this basically looks like "something in our automated QA stack sometimes doesn't do what it promises"
[09:54:45] <m_gol> I don't like this kind
[09:54:55] <m_gol> but it used to work
[09:55:01] <m_gol> and it fails only on iOS7
[09:55:05] <gibson042> consistently?
[09:55:06] <m_gol> even Android 2.3 is OK :P
[09:55:09] <m_gol> yes
[09:55:12] <gibson042> :\
[09:55:24] <m_gol> always on iOS7, never on others
[09:55:34] <m_gol> I've tried it, like, 10 times today
[09:55:37] <m_gol> locally & on Travis
[09:55:38] <DaveMethvin> the world is upside down
[09:56:07] <m_gol> ok, I'll try to console.log-debug it
[09:56:24] <DaveMethvin> other issues?
[09:56:47] <m_gol> that's this line basically: https://github.com/jquery/sizzle/blob/715c4be888a109b34bd5b1e66f0f25094875139c/test/data/testrunner.js#L19
[09:57:11] <m_gol> I need to look back to this AJAX script bug in Android 2.3
[09:57:28] <m_gol> apart from that, what do we do with manipulation bugs on 2.3?
[09:57:42] <m_gol> that's the only other thing to pass on this ancient browser
[09:57:57] <m_gol> http://swarm.jquery.org/job/3366
[09:58:23] <m_gol> (btw, not sure what's happened but after the last armageddon effects tests no longer timeout on Androids :D)
[09:58:41] <DaveMethvin> i forget, weren't these all due to the same issue m_gol ?
[09:58:57] <m_gol> we weren't fully sure what's causing the problem
[09:59:10] <m_gol> but it *should* be about incorrect setTimeout mocking causing race conditions
[09:59:14] <m_gol> but now it suddenly works
[09:59:18] <m_gol> scary
[09:59:37] <m_gol> look at the full picture: http://swarm.jquery.org/project/jqueryweekly
[09:59:57] <m_gol> oh well, I won't complain :-(
[09:59:59] <m_gol> * :-)
[10:00:05] <DaveMethvin> yeah, don't complain!
[10:00:31] <m_gol> so, this: http://swarm.jquery.org/result/1992038
[10:00:52] <DaveMethvin> i'm wondering if some of those radio ones are real, we may have broken some older fixes for those and just not noticed because nobody else needed them
[10:01:22] <m_gol> yeah, it basically all looks like the same issue
[10:01:36] <m_gol> repeated 16 times
[10:01:37] <gibson042> it looks like two issues total... mishandling of radio inputs, and <script> asynchronicity
[10:01:48] <gibson042> we can probably fix the former
[10:01:51] <m_gol> yup
[10:02:01] <m_gol> and blacklist the latter
[10:02:04] <gibson042> +1
[10:02:12] <DaveMethvin> m_gol: can you create a ticket for these?
[10:02:16] <m_gol> will do
[10:02:38] <DaveMethvin> i have to run ... see you guys later!
[10:02:39] <m_gol> I mean, there's already one for the latter
[10:04:19] <m_gol> k, close the channel then :-)
[10:04:24] <m_gol> cu
