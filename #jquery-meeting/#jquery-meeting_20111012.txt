[08:59:55] <rworth> hey all
[08:59:59] <gnarf> howdy
[09:02:05] <scott_gonzalez> hey
[09:05:28] <kborchers> hai
[09:05:32] <scott_gonzalez> danheberden: any infrastructure update?
[09:05:45] <danheberden> no, not particularly
[09:06:04] <gnarf> we have some infra updates with swarm, but i believe everyone was up to date on those @ the conf
[09:06:35] <scott_gonzalez> let's go over that now just so we get it in the update
[09:06:42] <gnarf> i asked scott to maybe add a jQuery team account to the browserstack wishlist - I think it would be pretty useful if the whole "team" could get at these test tools :)
[09:07:04] <gnarf> so like swarm itself got a pretty decent upgrade, using jenkins now to poll/create jobs
[09:07:11] <gnarf> there are still bugs we are ironing out
[09:07:19] <gnarf> but things seem to be running smooth
[09:07:30] <gnarf> and i added see ?swarm for some quick links
[09:07:30] <bot-t> Swarm Status: http://swarm.jquery.org/user/jquery/ http://swarm.jquery.org/user/jqueryui/ http://swarm.jquery.org/user/qunit/ http://swarm.jquery.org/user/jquerycolor/ -- Jenkins http://swarm.jquery.org:8080
[09:08:35] <gnarf> also
[09:08:42] <gnarf> i think we might be able to get some of our branches up
[09:08:52] <gnarf> like having a swarm for ui master & ui 1-8-stable
[09:08:59] <gnarf> but still looking into that
[09:09:47] <rworth> what's the status of branches on view?
[09:09:55] <gnarf> branches should work perfect
[09:09:58] <gnarf> tags aren't pulled tho
[09:10:06] <gnarf> will require some python hacking
[09:10:11] <gnarf> which is above me
[09:10:11] <rworth> how bout sha1s?
[09:10:25] <gnarf> shas could become a pain
[09:10:39] <gnarf> i mean - i could probably make it respond to unknown requests and automatically "pull" them
[09:11:08] <gnarf> but all it does right now is basically keeps an htdocs folder with a folder for each branch
[09:11:34] <gnarf> so - adding tags / shas just means more and more folders
[09:11:55] <scott_gonzalez> well, tags are pretty important
[09:12:23] <scott_gonzalez> shas are useful, but I wouldn't say they're necessary
[09:12:30] <gnarf> anyone know who wrote that python script?
[09:12:41] <scott_gonzalez> clarkbox?
[09:12:48] <gnarf> danheberden?
[09:12:57] <gnarf> i mean, i could prolly figure it out
[09:12:59] <danheberden> clarkbox did
[09:13:06] <gnarf> but adding tags would be something i know he needs to look at
[09:13:15] <danheberden> i'm sure he'd be happy to do it
[09:13:24] <gnarf> i just don't wanna have to teach myself python to implement it
[09:13:25] <gnarf> :)
[09:13:58] <gnarf> danheberden: can you get in touch with him - have him take a look / poke me about the git changes i made to that script?
[09:14:09] <danheberden> definitely
[09:14:11] <gnarf> coo
[09:15:27] <scott_gonzalez> so BrowserStack is going to provide dedicated clients for TestSwarm
[09:15:37] <scott_gonzalez> and they're adding support for mobile devices in about 2 months
[09:15:49] <gnarf> awesome
[09:15:54] <scott_gonzalez> they're aiming for the end of the month to have the clients connected
[09:16:45] <scott_gonzalez> on to docs
[09:16:58] <scott_gonzalez> i'm still working on cleaning stuff up
[09:17:03] <rworth> talked with Darcy at the conf
[09:17:05] <scott_gonzalez> did some work on various pages on the wiki today
[09:17:13] <scott_gonzalez> will continue working on widget factory docs in my repo as well
[09:17:14] <rworth> he and I are going to get together and work on finishing up the site design
[09:17:31] <scott_gonzalez> that'll be a big help
[09:17:52] <scott_gonzalez> what's the status of the XML format?
[09:18:00] <scott_gonzalez> are there any open issues?
[09:18:41] <gnarf> i don't see any
[09:18:51] <gnarf> i mean
[09:18:54] <gnarf> effects are so strange
[09:19:11] <gnarf> they aren't widgets, and they aren't methods
[09:19:36] <rworth> there's still an open issue about doing xml merging/inheritance
[09:19:50] <gnarf> rworth: "partials" ?
[09:19:53] <rworth> yeah
[09:20:14] <gnarf> would be useful
[09:20:21] <gnarf> because like so many effects have the same options :)
[09:20:40] <rworth> gnarf: maybe we just need to create an effect type like we have a widget type
[09:20:47] <rworth> all custom
[09:21:33] <gnarf> Also - I could use a little help on writing the actual docs for the effects
[09:21:44] <gnarf> some of this shit is hard to describe for me
[09:21:58] <gnarf> without being like "bounce" is the effect of bouncing
[09:21:59] <scott_gonzalez> gnarf: we can get a lot of help from the content team
[09:22:22] <scott_gonzalez> my big concern right now is that the XML/XSLT is defined and works
[09:22:29] <scott_gonzalez> filling in the content can happen whenever
[09:22:42] <scott_gonzalez> we've got plenty of people that can write :-)
[09:22:50] <gnarf> cool
[09:22:56] <gnarf> cuz i suck
[09:23:18] <gnarf> but i recognize i need to help it get done
[09:23:45] <gnarf> i had some sticky points with effects
[09:23:47] <gnarf> and docs
[09:23:55] <gnarf> but i tried to iron out my xslt
[09:24:04] <gnarf> and i think i improved it a bit
[09:24:13] <scott_gonzalez> yeah, the place you'll be most helpful right now is defining what the schema should be for effects docs
[09:25:36] <gnarf> hey
[09:25:40] <gnarf> i hate to bring this up
[09:25:43] <gnarf> but its on the agenda
[09:25:48] <gnarf> why do we need wordpress for this?
[09:26:12] <rworth> search, tags, categories
[09:26:36] <gnarf> ease of editing
[09:26:49] <scott_gonzalez> we initially weren't going to use WP, but there's actually a lot of functionality that we'd need to build ourselves if we didn't
[09:26:51] <gnarf> or are we still using github backend
[09:26:58] <rworth> both, yes
[09:27:07] <gnarf> search, tags, editing is pretty easy if we have a build process
[09:27:07] <scott_gonzalez> yeah, we'll write in XML in Git
[09:27:09] <rworth> WordPress for deployment, GitHub backed XML
[09:27:14] <scott_gonzalez> then we'll import into WP from there
[09:27:30] <gnarf> run make, it makes a .json cache
[09:27:41] <gnarf> builds a navigation
[09:27:43] <scott_gonzalez> gnarf: http://wiki.jqueryui.com/w/page/40995891/Docs2xml
[09:28:36] <gnarf> clean
[09:30:04] <gnarf> alright
[09:30:07] <gnarf> :)
[09:30:20] <gnarf> still
[09:31:10] <gnarf> we are close it seems
[09:32:00] <gnarf> demo
[09:32:06] <gnarf> thats whats missing in the effects
[09:32:13] <gnarf> :)
[09:32:22] <scott_gonzalez> kborchers: what's the status of position right now?
[09:32:33] <scott_gonzalez> pr 460 was closed
[09:32:48] <gnarf> http://swarm.jquery.org/user/jqueryui/
[09:32:54] <gnarf> off by a pixel in ie :/
[09:33:08] <kborchers> one sec
[09:33:36] <kborchers> https://github.com/jquery/jquery-ui/pull/470
[09:33:37] <socialhapy> â˜… Pull request on jquery-ui by kborchers (2w, 4d ago): Position: Added a check for fraction support in element positions
[09:34:15] <scott_gonzalez> so that pull is for jQuery core support, right?
[09:34:28] <scott_gonzalez> and the off-by-1 bug in master is separate?
[09:35:04] <kborchers> yes, that sounds right ... been a while since i looked at it
[09:35:23] <scott_gonzalez> ok, I'll check them out
[09:36:39] <scott_gonzalez> I also need to review Dave Stein's work on draggable
[09:38:18] <scott_gonzalez> jzaefferer: selectmenu update?
[09:38:20] <gnarf> scott_gonzalez: if i'm around whenever you decide to do that, i wouldn't mind also being in on that
[09:38:27] <scott_gonzalez> ok
[09:40:43] <jzaefferer> scott_gonzalez: selectmenu got good progress
[09:41:00] <jzaefferer> did an extensive code review few days ago, Felix already addressed most
[09:41:08] <jzaefferer> some demos are in place, unit tests are missing
[09:41:25] <gnarf> I can see what I can do about getting a unit template setup for it
[09:41:56] <gnarf> unless someone else beats me to it
[09:44:58] <scott_gonzalez> jzaefferer: did you ever schedule a call with Hans and Felix?
[09:45:09] <jzaefferer> Hans is pretty hard to reach these days
[09:45:44] <jzaefferer> Felix is usually around in the evenings, but Hans is very rare
[09:46:59] <jzaefferer> so no, no call scheduled, but I'll try that when I talk to Hans
[09:47:03] <scott_gonzalez> ok
[09:47:07] <jzaefferer> wanted to meet today, didn't work out
[09:48:03] <scott_gonzalez> I think that's everything
[09:48:36] <gnarf> hey, anyone going to that (mt) party?
[09:48:38] * gnarf smiles
[10:06:02] <gnarf> hey hey
[10:06:06] <rworth> hey
[10:06:18] <jzaefferer> hey hey hey
[10:07:01] <rworth> hey brado23
[10:07:04] <brado23> here now
[10:07:40] <dmarkland> apologies, question from a noob - where can i find status and expected delivery dates for the milestones in the grid project?
[10:07:59] <jzaefferer> dmarkland: http://wiki.jqueryui.com/Grid
[10:08:26] <jzaefferer> hey brado23
[10:08:50] <jzaefferer> haven't gotten to your bracketing update you
[10:08:50] <rworth> brado23: did you get a chance to look at the two discussion items I added to the Grid-Editing wiki page?
[10:09:24] <brado23> yes, I did.  Enough for knee-jerk reactions, at least.
[10:09:24] <jzaefferer> http://wiki.jqueryui.com/w/page/41891169/Grid-Editing-API
[10:09:44] <jzaefferer> brado23: go for it!
[10:09:49] <brado23> Oh, ok...
[10:10:24] <brado23> Re: remove as a pre-mutation event...
[10:10:32] <jzaefferer> I'm fine with the proposed changes, as it doesn't look like it would affect any existing grid code
[10:10:42] <jzaefferer> but figured you might see that differently
[10:10:56] <brado23> We can't do w/o a post-mutation event, as a key scenario is that a listener may want to do a full rerender...they need the post-mutated state.
[10:11:34] <brado23> Now, it may be that folks want a pre-mutation event...We've discussed this before.  I haven't grok'd Yahuda's scenario fully yet.  Need a re-read.
[10:11:40] <gnarf> jzaefferer: i don't like the triggerHandler
[10:11:44] <gnarf> jzaefferer: we can use $.Callbacks
[10:11:53] <jzaefferer> gnarf: in 1.6?
[10:12:01] <brado23> Re: abstracting array access...
[10:12:04] <gnarf> i thought we were using 1.7 for grid stuff
[10:12:13] <gnarf> either way, $.Deferred can still pull it off
[10:12:28] <gnarf> or would be
[10:12:33] <brado23> The downside of this abstracting is that it's something everyone will have to agree on...notably JsViews.  It'd be good to get Boris' reaction.
[10:12:35] <gnarf> i guess right now we are stuck in 1.6
[10:13:12] <jzaefferer> gnarf: if it doesn't change the observer, we're free to change the implementation
[10:13:18] <brado23> ...as things stand...Boris is expecting jQuery Data Model to yield simple arrays and simple objects...not wrappers overtop.
[10:14:01] <jzaefferer> brado23: right, but having support for array-wrappers seems useful, doesn't it?
[10:14:22] <rworth> and without it, we can't sit other systems under us
[10:14:24] <jzaefferer> in that the API allows you to implement it for an array-wrapper type
[10:14:30] <brado23> jzaefferer: yes, I see the value.  No doubt.
[10:14:44] <rworth> also, this doesn't prevent direct access
[10:15:09] <brado23> I'd just want to use Boris as a test case to see if this scares folks away from $.observable.
[10:15:10] <rworth> any more than the presence of .property(key) as a getter prevents you from accessing properties directly on an object
[10:15:52] <brado23> .property(key) was presented as a few-line helper method...not a means of abstracting the underlying data.
[10:16:13] <jzaefferer> yeah, that was the intention originally
[10:16:29] <jzaefferer> but it got Yehuda/Tom thinking...
[10:16:44] <rworth> my point is simply that you can do with simple objects and arrays and direct access
[10:17:05] <brado23> I think it's a worthwhile change.  I'm just saying that folks _consuming_ $.observable are the ones who we should listen to when judging the addtion of getAt.  I can totally see the value to those _extending_ observable like Yahuda and I would do.
[10:17:11] <rworth> but having the indirect methods support other object types, without changing what we pass around and how we access it
[10:17:27] <rworth> we're not passing around a wrapper, we're still passing around the object/object-like and array/array-like
[10:17:48] <brado23> yes, I see your point.
[10:18:02] <brado23> good way to think of it.
[10:18:12] <rworth> so we're only saying you have to use the method if you want its benifit
[10:18:22] <rworth> and providing it so that's a possibility
[10:18:39] <rworth> because otherwise we're incapable of supporting anything other than plain objects and plain arrays
[10:18:48] <brado23> yes, right.  well put.
[10:19:21] <jzaefferer> actually the difference is in how we use it: if grid uses .get or something to access the array, a SproutCore ArrayController can be passed to the grid, as long as they adapt observable for that
[10:19:35] <brado23> I'm fine with the change.  I'll touch base with Boris and get his reaction (as a library implementer on top of $.observable).
[10:19:42] <rworth> right, and so we would always use it
[10:19:45] <jzaefferer> so we'd make sure that all access in our components to an observable actually goes through observable
[10:19:52] <jzaefferer> *thourgh $.observable
[10:19:53] <brado23> yep
[10:20:02] <jzaefferer> *through
[10:20:02] <rworth> I was just saying that doesn't force necessarily any and all users of observable to use it
[10:20:02] <jzaefferer> gah
[10:20:33] <rworth> back to remove
[10:20:52] <brado23> yes, that's right.  If Boris _doesn't_ use property(key) and getAt(idx), then it just means that he'll only work with arrays/objects and not array-like/object-like.  He'll limit his audience.
[10:21:20] <rworth> perhaps we should have both beforeRemove and remove
[10:21:24] <brado23> give me a sec to see if I can grok the scenario quickly....
[10:22:27] <brado23> I guess I don't understand why the event args for a post-mutation event aren't sufficient for the scenario mentioned.
[10:22:47] <rworth> the problem Yehuda and Tom brought up is their objects aren't always materialized
[10:22:52] <brado23> In the event args, I'll be told of the items removed...I should be able to link back to UI this way.
[10:23:06] <rworth> and they don't want to materialize them just for the purpose of providing them in a remove event data
[10:23:21] <brado23> How are they in the UI if they're not materialized?
[10:23:25] <jzaefferer> what does "materialized" mean?
[10:23:38] <jzaefferer> how is that different from whatever is removed?
[10:23:55] <gnarf> if the removed items are also given
[10:23:55] <rworth> sorry, I was mixing the two
[10:24:01] <brado23> If they're expecting to say "remove at index 423432423
[10:24:05] <brado23> "...
[10:24:18] <brado23> and that directs the server to do the remove, I dont' think that's a scenario.
[10:24:36] <brado23> (at least not one that we've tried to cover)
[10:24:39] <rworth> they might have data but not an instantiated object
[10:25:02] <rworth> or they might not actually have the data, that is also a possibility
[10:25:35] <brado23> Yes, I guess an assumption is that the editing API covers your model...not your virtual model....if you follow.
[10:26:05] <rworth> but that's a separate issue from needing remove before instead of after
[10:26:19] <brado23> I mean, we can talk about an editing API which is a veneer over a server-side SQL statement...but that's a very different API.
[10:26:48] <rworth> if you only get the object after it has been removed, the only way to associate it with the dom element you want to remove is to search your dom elements
[10:27:12] <jzaefferer> rworth: how is that different from the beforeRemove event?
[10:27:24] <jzaefferer> or the afterRemove
[10:27:25] <brado23> yes, I see.  We've been using either O(n) searches or $.data for this.
[10:27:26] <jzaefferer> whatever
[10:27:32] <rworth> because post-mutation there's already inconsistency between the model and the view, beforeRemove gives the view a chance to do the remove with the indexes the same
[10:27:55] <rworth> for example, a drop-down
[10:28:04] <jzaefferer> don't we provide indexes for each removed item?
[10:28:16] <brado23> jzaefferer: yes, that's right
[10:28:38] <jzaefferer> actually the remove implementation is not complete, yet, but the spec has an index for each removed item
[10:28:50] <jzaefferer> referring to the before-removal index
[10:29:07] <brado23> I'm hopeful that we have enough info in the post-mutation event, so we don't have to answer the "are they cancelable?" question for pre-events.
[10:29:23] <rworth> no observable events are  cancelable
[10:29:26] <jzaefferer> yeah, seems like we chewed enough on this to give it back to Tomhuda
[10:29:37] <brado23> yes, but everyone thinks they are when they first see them :)
[10:29:47] <jzaefferer> point at the event data, contains all you should ever need
[10:29:55] <rworth> yes, we'd need to document that
[10:30:31] <jzaefferer> its in the events spec: http://wiki.jqueryui.com/w/page/40632995/Grid-Editing-Events
[10:30:36] <jzaefferer> remove(event, { items:Â [ { index, item }, ... ] })
[10:31:17] <brado23> This scenario (hopefully) is a good justification for the {index, item} aspect of these events.  I'd wondered whether we need this previously.
[10:31:56] <rworth> again, that would force them to materialize an object to provide it as having been removed
[10:32:24] <rworth> where beforeRemove would simply provide an index, and if an index is outside of a range currently in view, it's ignored
[10:32:34] <brado23> Do you feel strongly that folks will have DOM elements that don't have a peer object?
[10:32:48] <rworth> that's not the question
[10:32:56] <brado23> ...but the event _has_ the index.
[10:33:12] <brado23> (the post-mut event)
[10:34:05] <brado23> sorry, I guess I'd need more info on why "force them to materialize" is an issue.
[10:34:22] <brado23> a bit too abstract for me otherwise
[10:34:26] <gnarf> was there a use case where after remove was useful?
[10:34:52] <brado23> "my UI control wants to do a full rerender post-remove"
[10:35:12] <gnarf> brado23: so it ties into the automatic "end of batch" shit
[10:35:21] <gnarf> like i think that works
[10:35:33] <brado23> @gnarf:  no doesn't have to do with batching at all
[10:35:36] <gnarf> on the pre-remove, setup an event to be called at the end of the batch
[10:36:09] <gnarf> but shrug
[10:36:20] <gnarf> i mean, that makes sense i suppose
[10:36:26] <gnarf> the ui wants to know what it looks like after
[10:36:36] <brado23> yes, that's the scenario.
[10:36:57] <gnarf> were we at all considering making a "batch" implicit/
[10:37:34] <brado23> "batch/bracket" is another topic...and yes...jzaefferer and I were trending towards implicit
[10:37:44] <gnarf> so like, if we had implicit batching
[10:37:48] <rworth> back to "force them to materialize", imagine you search for email messages, 8500 results match the search, the first 100 are in view, so those are the ones you have data for. Now you want to remove all the ones beyond index 100
[10:37:51] <gnarf> pre-remove + batch end = post-remove right?
[10:38:21] <rworth> if the object has to be provided in the remove event, you have to get that data, materialize the object, and then provide it in the remove event
[10:38:47] <gnarf> nice explain there
[10:38:56] <brado23> rworth:  yes, I see the scenario.  I'll just admit that I haven't had it in mind at all that we'd be trying to remove/update data that isn't already cached locally.
[10:39:07] <gnarf> so like using after in that case actually hurts
[10:39:30] <rworth> the counter argument is we won't be able to handle data sets this large if we're forced to have all the data locally
[10:39:33] <brado23> I could say "yes" to the pre-mutation event you're looking for, but I wouldn't be convinced that we'd covered remove/update non-cached data adequately.
[10:39:59] <brado23> I guess I haven't seen this as bad.
[10:40:24] <brado23> Can you describe the UI that lets me "delete beyond index 100"?
[10:41:34] <brado23> (I have to admit...I just haven't see these scenarios as "in scope"...I could use more time to broaden my perspective).
[10:42:35] <brado23> I think I have a better understanding of what tomhuda want here.  Can we circle back in a couple days here?
[10:42:46] <rworth> yeah
[10:42:53] <gnarf> brado23: i think that this post-implicit-batch thing handles the "post-remove" too
[10:43:24] <rworth> anything else? Are we going to schedule a call to discuss bracketing?
[10:43:57] <gnarf> i'd try to be there
[10:44:16] <rworth> jzaefferer ?
[10:44:22] <brado23> Sure, if we need to.  I'm fine with scrapping explicit bracketing (and bracketing events) and just using debouncing....if others want to discuss more deeply, I can do SKype.
[10:45:41] <rworth> let's try that in the meantime
[10:46:06] <rworth> thanks everyone
[10:46:12] <brado23> thx all
[10:49:49] <jzaefferer> sorry, missed the last parts - can we show Yehuda the event data stuff and have him decide if that is good enough?
[10:50:59] <jzaefferer> regard bracketing and debouncing: we need to try out the debouncing, the todo-app demo would be a great candidate for that
[10:51:10] <jzaefferer> brado23: you mentioned in Boston that you'd be interested tackling that
