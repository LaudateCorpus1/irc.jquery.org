[10:00:57] <sfrisk> Meeting time!
[10:01:00] <geekman-rohit> yay
[10:01:01] <sfrisk> `chassisteam
[10:01:06] <sfrisk> still does work
[10:01:10] <geekman-rohit> still not working
[10:01:11] <geekman-rohit> :P
[10:01:15] <arschmitz> hi
[10:01:17] <arthurvr> heyyy
[10:01:23] <kristyjy> hello :)
[10:01:30] <sfrisk> arschmitz, arthurvr, geekman-rohit, michaelarestad
[10:01:41] <sfrisk> or you guys are here
[10:02:07] <sfrisk> https://docs.google.com/spreadsheets/d/1FUdRcAq2d8njs8KAcfQmEyoZL74SXLsLp1rtc7E9z_I/edit?usp=sharing
[10:02:29] <sfrisk> Okay so there are some issues on the agenda I want to discuss, that have kinda come up with more people paying attention to what we're doing here in Chassis land
[10:03:06] <sfrisk> First one is this issue: https://github.com/jquery/css-chassis/issues/84
[10:03:50] <sfrisk> I think that JimBobSquarePants made a good point about overwriting the default behavior of <a>, even if the slim line looks pretty
[10:04:02] <arschmitz> +1
[10:04:26] <sfrisk> also this led to a discussion with arschmitz about how it might be wise for stuff involving media querries, that we keep it in a seperate file
[10:04:52] <sfrisk> so _typography-responsive.scss (or whatever)
[10:05:37] <sfrisk> this way we could potentially have a build that easily removes all responsive aspects of Chassis, and makes finding media queries easier
[10:06:51] <geekman-rohit> makes sense
[10:07:39] <sfrisk> If people agree, we can add some notes regarding that to our SCSS style guide that kristyjy i working on
[10:07:51] <michaelarestad> I don't think thats wise.
[10:08:00] <michaelarestad> Media queries should remain with the component.
[10:08:26] <michaelarestad> There is no performance hit for having multiples of media queries.
[10:08:31] <michaelarestad> And it's much more maintainable.
[10:08:38] <arschmitz> michaelarestad: why media queries are hard to override
[10:08:43] <arschmitz> and they are application specific
[10:08:51] <michaelarestad> They're component-specific.
[10:09:06] <arschmitz> thats not nessasarrily true
[10:09:15] <arschmitz> and the one in typography for example
[10:09:16] <michaelarestad> And you just override with a media query.
[10:09:24] <michaelarestad> Build tools can combine them if that's even a concern.
[10:09:27] <arschmitz> changes your whole page
[10:09:39] <arschmitz> by changing the fontsize
[10:09:48] <michaelarestad> Yep.
[10:09:59] <arschmitz> thats not good i dont think most people will want this
[10:10:03] <michaelarestad> I'm actually thinking about removing all em references.
[10:10:14] <michaelarestad> Super nice for small sites with one maintainer.
[10:10:24] <michaelarestad> Not so great when in a component mindset.
[10:10:37] <arschmitz> super bad for frameworks which we intend to support
[10:10:41] <kristyjy> I agree with arschmitz if we use media queries that way it will be harder to use it as a light weight base for any project. I do like the idea of combining any media queries we do use though
[10:10:55] <michaelarestad> Why?
[10:10:59] <michaelarestad> What's the benefit?
[10:11:35] <michaelarestad> It often results in mystery code in large-ish media queries.
[10:11:39] <arschmitz> that generally media queeries and their pbreak points are application specific
[10:12:05] <arschmitz> we can guess at good common ones but there is no hard fast rule
[10:12:26] <arschmitz> its the same issue with wanting the grid to be flexible or excludeable
[10:12:47] <michaelarestad> As far as including media queries, I think we should use as few as possible in Chassis.
[10:13:07] <michaelarestad> And the breakpoints are app-specific
[10:13:09] <arschmitz> michaelarestad: more or less i agree and i think they should all be in their own files
[10:13:09] <kristyjy> Yeah I guess that was more of my point
[10:13:12] <michaelarestad> not the fact that there are queries
[10:13:22] <michaelarestad> We can make those trivial to change
[10:13:36] <arschmitz> its not about changing them
[10:13:42] <arschmitz> its about excluiding all media queries if you want
[10:14:19] <arschmitz> to use your own
[10:14:20] <michaelarestad> I don't think that's a strong enough point to combat maintainability.
[10:14:21] <arschmitz> or none at all
[10:14:40] <arschmitz> the fact that it will be 100% impossible to do a build of chassis without media queries?
[10:14:41] <michaelarestad> And almost all of chassis (minus the grid maybe) won't need breakpoints.
[10:14:47] <kristyjy> couldn't we use something similar to the grunt strip-mq library to pull the media queries out?
[10:15:08] <arschmitz> kristyjy: sure but why? why not just make them their own files
[10:15:13] <arschmitz> name spaced to the componenet
[10:15:31] <arschmitz> i dont see where maintainability is an issue?
[10:15:40] <sfrisk> I can see both ways
[10:15:53] <sfrisk> On while hand, having all the MQ lumped together can be nice
[10:16:17] <kristyjy> I guess that's more of a personal preference question. I don't really care if it's in one or two files.
[10:16:22] <sfrisk> on the other hand, it can be annoying to have to keep switching between files if you're developing a component, depending on what media query size you're working with
[10:17:05] <arschmitz> sfrisk: sure but if thats the argument then we sould not be modular
[10:17:17] <arschmitz> its easier to just put everything in one file
[10:17:18] <sfrisk> I've done development both ways, and I'll admit, I'm not entirely sure which one I prefer.
[10:17:39] <michaelarestad> Ugh. Internet went out briefly. I'd rather do something like use a tool to pull media queries out than up the difficulty of maintaining.
[10:17:45] <arschmitz> just put everything in one giant chassis.scss
[10:18:04] <arschmitz> switching files is just part of modular development
[10:18:43] <sfrisk> I don't know if typography is the best example for something like this
[10:19:06] <sfrisk> if we had a component that could possible change a lot on resize ( a menu for example)
[10:19:38] <arschmitz> even then the componenet should be built for a single layout
[10:19:41] <sfrisk> would it make more sense to have the regular/mobile/tablet/watch/whatever-apple-comes-out-with-next in one file
[10:19:46] <arschmitz> and that would be the base file
[10:19:57] <arschmitz> then ther would be a menu-responsive.scss
[10:19:59] <sfrisk> or would development be better to have the media querries in the same file
[10:20:00] <michaelarestad> Typography isn't a great example. We should probably remove those MQs.
[10:20:07] <arschmitz> that contains the media queries for modifying that base componenet
[10:20:33] <sfrisk> I think the discussion got fuzzy with typography, since typography really doesn't have a lot of media queries in it
[10:20:34] <michaelarestad> Maybe
[10:20:40] <michaelarestad> So are we writing mobile-first code
[10:20:45] <michaelarestad> or desktop-first?
[10:20:55] <michaelarestad> Currently everything I've written is desktop-first
[10:21:04] <arschmitz> michaelarestad: thats a great question
[10:21:08] <sfrisk> but I agree, for something that gets more complicated in different MQ, it is probably wise to have separate files
[10:21:15] <michaelarestad> And does responsive include print or light queries?
[10:21:16] <sfrisk> I'm personal pro mobile first
[10:21:29] <arschmitz> michaelarestad: another great question
[10:21:39] <sfrisk> personally*
[10:21:41] <arschmitz> so mobile first is kinda the standard these days
[10:21:47] <michaelarestad> All of this starts to get hairy when we break it into separate files
[10:21:54] <sfrisk> and it means we have a speedy initial load
[10:21:56] <arschmitz> which makes sense
[10:22:02] <michaelarestad> yep
[10:22:03] <kristyjy> mobile first is my preference as well but then this makes the base component more difficult to define
[10:22:06] <sfrisk> going mobile first also means that if we're going with a "I don't a responsive" build
[10:22:30] <sfrisk> we're going to have to strip out the media query surrounding bits, so we could have a desktop only build
[10:22:33] <kristyjy> for a menu you'd put the mobile as the base but if the site they are working on is not responsive it defeats the purpose
[10:23:03] <sfrisk> and you might potentially have a bunch of mobil code in there that will never be used
[10:23:10] <arschmitz> sure
[10:23:19] <arschmitz> thats always the arguement against either one
[10:23:23] <michaelarestad> Yep.
[10:23:31] <arschmitz> and you chose mobile
[10:23:33] <michaelarestad> I say we shoot for an optimistic route one way or the other.
[10:23:38] <arschmitz> because mobile has slower connections and processing speeds
[10:23:42] <michaelarestad> Decisions not options on V1 kinda thing.
[10:23:54] <arschmitz> so desktop always takes the hit
[10:23:59] <arschmitz> because its better able to deal with it
[10:24:17] <sfrisk> I mean, I am more like "Let's go Mobile First for this," mostly because more and more sites will need to develop a mobile solution
[10:24:45] <arschmitz> and its not that hard to make a desktop only build
[10:24:47] <sfrisk> also downside to mobile first: we will need JS for older browsers
[10:24:51] <arschmitz> just requires some processing
[10:25:02] <arschmitz> sfrisk: what do you mean?
[10:25:17] <sfrisk> IE8 doesn't understand media queries by default
[10:25:25] <arschmitz> right
[10:25:38] <kristyjy> yeah a non-responsive build is the way to go we won't use respond.js or anything like that
[10:25:39] <sfrisk> so there is some JS you need to get it to understand Media Queries
[10:25:40] <michaelarestad> I think that's not a problem
[10:25:54] <michaelarestad> It'll still be usable without MQs to make it look desktop-y.
[10:26:03] <arschmitz> i agree
[10:26:17] <arschmitz> on jquery mobile we have responsive stuff
[10:26:24] <arschmitz> and we dont include respond.js by default
[10:26:33] <arschmitz> and dont have multiple style sheets or builds for desktop vs mobile
[10:26:43] <arschmitz> ie8 just looks kinda mobile ish
[10:26:54] <sfrisk> yeah, I mean it's more just a download note
[10:26:55] <arschmitz> but its 100% functional
[10:27:04] <arschmitz> it just makes a little longer page
[10:27:16] <sfrisk> ("hey, if you're using IE8, you're either gonna get the mobile view, or you need to download respond.js and put it on your site)
[10:27:27] <arschmitz> yea
[10:27:37] <sfrisk> I was more like, "We'll need to add a note there"
[10:27:41] <kristyjy> yeah there is some unneeded styles that get complied in at times. But IE8 deserves it ;)
[10:27:49] <sfrisk> since I know for at least version one of this, we are supporting IE8
[10:27:56] <arschmitz> yea
[10:29:02] <michaelarestad> Yep.
[10:29:26] <michaelarestad> Okay, so initial reaction is mobile-first styles (means refactor-party, but not a huge deal).
[10:29:33] <michaelarestad> Back to MQ in separate files
[10:29:46] <michaelarestad> And things like print queries
[10:29:55] <michaelarestad> light queries
[10:30:05] <arschmitz> michaelarestad: those im not as sure one
[10:30:17] <michaelarestad> I think they're technically responsive.
[10:30:33] <arschmitz> yes
[10:30:39] <sfrisk> also for the responsive file
[10:30:50] <sfrisk> do we want the file to just be like "menu_responsive.scss
[10:30:52] <sfrisk> "
[10:30:59] <sfrisk> or do we want ones for different breakpoints?
[10:31:06] <arschmitz> i think just one
[10:31:18] <michaelarestad> I'm still pretty against it. It's really clear what is going on when the MQs are nested with each selector.
[10:31:30] <michaelarestad> And if we did one, it should just be one.
[10:31:33] <arschmitz> when you have one per breakpoint it will get crazy
[10:31:36] <michaelarestad> Yep.
[10:31:43] <sfrisk> figured I would check
[10:32:32] <sfrisk> I think the seperate files will make more sense/work once we get into the more complicated stuff in the summer
[10:32:41] <michaelarestad> So in terms of best practice, I think they should be with the selector still. Ease of our build should come second.
[10:32:48] <michaelarestad> (in priority)
[10:33:22] <michaelarestad> Example
[10:33:29] <michaelarestad> .thing {}
[10:33:35] <michaelarestad> It has 3 media queries
[10:33:41] <michaelarestad> They are all in a separate file
[10:33:46] <arschmitz> i actually think we are breaking best practice for a library by including them with no way to exclude them
[10:33:48] <michaelarestad> each media query is kinda long
[10:34:01] <michaelarestad> it's easy to miss updating one of thing's queries
[10:34:07] <michaelarestad> or remove it
[10:36:39] <kristyjy> yeah I've worked on projects that separated styles out that way before.. It can get a little messy still with mobile first the benefits I was thinking about originally don't exist so much anymore
[10:36:53] <kristyjy> benefits of separating
[10:37:17] <arschmitz> michaelarestad: and this is not just about the build
[10:37:26] <arschmitz> this is also about people consuming the actuall scss files
[10:37:30] <arschmitz> for their own builds
[10:37:34] <michaelarestad> Sure.
[10:37:43] <arschmitz> we are making this much harder for them
[10:37:52] <michaelarestad> I disagree.
[10:38:12] <arschmitz> you think we should force them to override all our media queries?
[10:38:20] <arschmitz> if they dont want them
[10:38:22] <michaelarestad> They would have to override anyway.
[10:38:28] <arschmitz> how?
[10:38:36] <arschmitz> they could just not include the responsive files
[10:38:42] <michaelarestad> And deleting a file and removing the import is just as hard as removing the media queries in the component file.
[10:39:09] <arschmitz> michaelarestad: there would be no @ import in the base file
[10:39:19] <arschmitz> the point is you should not modify source files from a library
[10:39:25] <sfrisk> to be fair, you could just have two scss files, one that imports all the responsive+ base
[10:39:29] <arschmitz> thats very not best practice
[10:39:29] <sfrisk> and one that just does the base stuff
[10:39:29] <michaelarestad> Hmm.
[10:39:44] <michaelarestad> I think we're diverging on functionality of this.
[10:39:45] <arschmitz> sfrisk: yes exactly
[10:39:53] <michaelarestad> I'm of the opinion that this library is a starter set.
[10:40:01] <michaelarestad> At no point should a user attempt to update the files
[10:40:08] <michaelarestad> they can modify to their heart's delight
[10:40:31] <michaelarestad> But if it's intention is a base library that shouldn't be altered too much...
[10:40:46] <sfrisk> I think there has been a lot of mixed feelings about that
[10:40:52] <arschmitz> michaelarestad: well we intend to have like a skeleton build for what your talking about
[10:41:00] <arschmitz> thats basicly empty files
[10:41:13] <arschmitz> but in general its bad to modify library files
[10:41:22] <arschmitz> it makes it so there is no real upgrade path
[10:41:22] <sfrisk> I mean, the way we've laid out the code, it definitely laid out in a way to encourage best practices when developing your project
[10:41:27] <michaelarestad> Sure, but I think those are two pretty diverging goals with different ways to write them.
[10:41:41] <michaelarestad> As we're kind of running into a little.
[10:42:08] <arschmitz> michaelarestad: remember one of our main goals is to be a frame work for js libraries
[10:42:12] <sfrisk> with what We're finishing in Phase one of this project, Chassis will be more of a starting point for your project, rather than a library
[10:42:19] <arschmitz> so like mobile and ui will pull in wholesale
[10:42:29] <arschmitz> not some minimal frame and modify it
[10:42:45] <arschmitz> most modification should be through a custom build
[10:42:57] <arschmitz> and use of variable files
[10:43:10] <sfrisk> I think there are aspects of the site that will go beyond just a variable file
[10:43:31] <sfrisk> aspects of site development*
[10:43:38] <arschmitz> yes
[10:43:46] <sfrisk> I mean, look at bootstrap - I definitely wouldn't use that as is for a prod site
[10:43:46] <arschmitz> but that normally is outside a framework
[10:44:02] <arschmitz> or library
[10:44:19] <sfrisk> I guess I'm working through in my head how best to do this
[10:44:40] <sfrisk> because they way we've laid out our scss files I feel helps follow a best practice we want to encourage other people to use
[10:44:48] <arschmitz> to me the best way to address concerns like this is better modularity
[10:45:01] <arschmitz> so you can have as minimal or full featured of a build as you want
[10:45:42] <arschmitz> and i mean people can always edit source files if they want
[10:45:51] <sfrisk> and I could someone easily having their own opinions of font sizes or whatever and wanting to redo parts of the typography file
[10:45:54] <arschmitz> but its generally not to be encouraged
[10:46:18] <michaelarestad> Yeah. That's where I'm a bit lost.
[10:46:19] <sfrisk> so any customization they're doing is in seperate files?
[10:46:23] <arschmitz> sfrisk: sure but that a) is just a varible and b) you could just exclude our typography if you wanted
[10:47:15] <sfrisk> because I always kinda saw it as "Use these classes we have here, and your styles will work with these JS frameworks"
[10:47:35] <sfrisk> because I might want to do something to an accordion, that isn't necessarily supported in a base theme roller
[10:47:47] <sfrisk> like crazy gradients, or a background image, or something
[10:47:59] <arschmitz> sure and you can easily do that either way
[10:49:28] <sfrisk> I guess I kinda saw Chassis as being more of a starting point, similar in the way Bones is a start theme for your wordpress project: https://github.com/eddiemachado/bones/tree/master/library/scss
[10:49:32] <michaelarestad> I'm going to have to chew on this. I'm not super thrilled with not encouraging direct modification of our files.
[10:49:57] <arschmitz> sfrisk: but how would that work for libraries
[10:50:05] <arschmitz> you expect them to still have their own theme?
[10:50:10] <arschmitz> js libraries
[10:50:32] <sfrisk> nope, I mean that Chassis as is is a base version of the site, all the functionality and styling is there
[10:50:35] <arschmitz> because something like bones seems way to minimal
[10:50:45] <sfrisk> bones has all the widgets styled out for you
[10:51:24] <sfrisk> but you're encouraged to go in and customize the css in a way that best works for your porject
[10:51:27] <sfrisk> project*
[10:51:59] <sfrisk> I guess here is the question, are we doing something like Bootstrap, that pretty much has a chunk of code that you don't ever really touch
[10:52:07] <sfrisk> and you just have you file that does all the overwrites on top of it
[10:52:14] <arschmitz> i can tell you thats not how most projects are set up bootstrap does not encourage you to change src files thats why that have the big customization page
[10:52:28] <arschmitz> ui and mobile very much discourage changing source files
[10:52:42] <arschmitz> basicly all libraries discourage changing source files
[10:52:52] <sfrisk> I think not touching the source files work well for someone just using css
[10:52:53] <arschmitz> becuase you have no upgrade path
[10:53:34] <sfrisk> but most upgrades are probably going to come from new files
[10:53:34] <arschmitz> encouraging modification of source files is like giving the finger to anyone that wants to stay up to date with the latest version of chassis
[10:53:37] <sfrisk> allow for new modules
[10:53:50] <arschmitz> you dont think we will ever fix bugs or make changes to existing files?
[10:54:11] <arschmitz> or move things around within files
[10:54:23] <arschmitz> or between files because we change our mind on the best organization for something
[10:55:07] <arschmitz> its like doing git conflict resoltuion with out a diff to go on
[10:55:29] <arschmitz> ok i have new file and old file WHATS CHANGED?!?!?!
[10:55:29] <sfrisk> so what, have a custom version of each file for the user's overwrite?
[10:55:35] <arschmitz> no
[10:55:46] <arschmitz> users if they want to over write have their own files for that
[10:55:58] <sfrisk> my guess is most users will want to overwrite
[10:56:03] <arschmitz> just like if you want to extend a widget
[10:56:10] <arschmitz> in a js frame work
[10:56:12] <arschmitz> you make a file
[10:56:21] <sfrisk> so have a custom file for modules
[10:56:24] <sfrisk> like I said
[10:56:24] <arschmitz> that extend the prototype or proxies the function or whatever
[10:56:30] <sfrisk> for the user changed styles
[10:56:39] <arschmitz> so that you can keep your custom changes seperate from the source
[10:56:48] <michaelarestad> I've worked a bit on a started thee called Underscores that is meant to be directly modified. Yes, bugs get fixed, but that shouldn't require someone to update the source files ever. It works really well as a starting point. Especially since backwards compat/support is a non-issue.
[10:56:56] <michaelarestad> s/thee/theme
[10:57:27] <arschmitz> "Yes, bugs get fixed, but that shouldn't require someone to update the source files ever" why and how?
[10:57:34] <sfrisk> I mean, JS libraries are going to be going off the class name
[10:57:37] <sfrisk> right?
[10:57:53] <arschmitz> sfrisk: well the js library has to GET chassis some how
[10:57:56] <michaelarestad> It doesn't sound like Chassis is going that route, but you're going to have a very hard time convincing someone to update directory structures/etc that could mess with the css in their build.
[10:58:11] <arschmitz> and they are not going to nessasarrily take the whole think only the pieces they use and support
[10:58:31] <arschmitz> michaelarestad: not sure what you mean?
[10:58:45] <michaelarestad> arschmitz: The next iteration of underscores gets the bugs fixed. They aren't pushed out to themes already developed or anything.
[10:58:58] <arschmitz> right
[10:59:00] <michaelarestad> If theme authors encounter the bug, there's a reference to them, but it's super rare.
[10:59:03] <sfrisk> Normally when you download a css library, in most cases I haven't seen people update
[10:59:11] <michaelarestad> And when they do
[10:59:15] <michaelarestad> It's a monumental task
[10:59:15] <arschmitz> but what about when an author wants to upgrade to latest version of underscore
[10:59:27] <michaelarestad> There's no reason to.
[10:59:36] <arschmitz> i think thats crazy
[10:59:38] <sfrisk> underscore is a starting point for your theme
[10:59:44] <arschmitz> to tell people dont ever update your css framework
[10:59:50] <arschmitz> once you make the site the first time
[10:59:53] <sfrisk> bootstrap doesn't tell people to do that
[11:00:00] <michaelarestad> That's where it diverges from being a framework
[11:00:04] <michaelarestad> It's a starting point.
[11:00:16] <michaelarestad> It's not jquery or a dependency you need to keep updated.
[11:00:30] <sfrisk> mostly because people start customizing bootstrap to fit the needs of their project, and never bother to update it again, because it works for how their site is supposed to look
[11:00:43] <arschmitz> sfrisk: and thats a problem
[11:00:49] <arschmitz> they never update it because its too hard
[11:00:53] <michaelarestad> And if I look at Chassis with jQuery mobile, etc in mind, it probably should be a dependency.
[11:00:54] <sfrisk> if they decided they wanted to redo the site, they might go for the newest versions, but most experiences I have had with css frameworks is that they don't update
[11:00:54] <arschmitz> because they have customized source files
[11:01:00] <arschmitz> yes
[11:01:04] <arschmitz> that is 100% the plam
[11:01:05] <sfrisk> not even that
[11:01:06] <michaelarestad> And if it is a dependency
[11:01:11] <arschmitz> it will be a hard dependency
[11:01:12] <michaelarestad> they should never ever see the source files
[11:01:15] <sfrisk> even with bootstrap, I just have the min css file in there
[11:01:18] <sfrisk> and never touch it
[11:01:21] <michaelarestad> But
[11:01:34] <michaelarestad> that said, messing with CSS in the future will break sites in unexpected ways
[11:01:41] <sfrisk> but I've never really seen anyone go "Hey, we should update that base bootstrap file with the latest version"
[11:01:54] <michaelarestad> I have
[11:01:57] <michaelarestad> and it's silly
[11:01:59] <arschmitz> for sure
[11:02:09] <arschmitz> one of the main complaints iv always heard about bootstrap
[11:02:12] <arschmitz> from people who use it
[11:02:24] <arschmitz> is that they hate thats its so hard to upgrade
[11:02:27] <arschmitz> to new versions
[11:02:33] <arschmitz> they make too many breaking changes
[11:02:36] <michaelarestad> I hate that it's even encouraging people to update
[11:03:00] <sfrisk> Okay, so if we go with the module approach with scss, then we should probably have the 'here is the super base framework' version of the module
[11:03:13] <sfrisk> like for an accordian "here is a title, and a box for the content" or something
[11:03:20] <sfrisk> and then the theme file, to make it look cool
[11:03:32] <sfrisk> that is considered the 'custom user' file
[11:03:41] <arschmitz> no
[11:03:48] <arschmitz> that would still be modifiying a source file
[11:03:57] <arschmitz> anything commited is a source file
[11:04:02] <sfrisk> well I think we should give them some file to work with
[11:04:22] <sfrisk> that is either generated or something
[11:04:22] <arschmitz> you can have templates
[11:04:26] <arschmitz> for creating your own file
[11:04:30] <sfrisk> to help encourage them to use our system
[11:04:38] <sfrisk> and our organization structure
[11:04:44] <arschmitz> but those should be templates and not used by the default build or anything
[11:05:02] <sfrisk> well, default build is just giving them a css or minified css file
[11:05:16] <arschmitz> i mean in the build process
[11:05:20] <sfrisk> maybe with a theme css file with it
[11:05:21] <arschmitz> not the output file it self
[11:05:50] <michaelarestad> So if we look at it as dependency, only the bare minimum CSS should be in the dependency files.
[11:05:58] <michaelarestad> No visual pretty stuff
[11:06:05] <arschmitz> i agree
[11:06:10] <michaelarestad> And the files should directly correlate with JS styles
[11:06:11] <michaelarestad> THEN
[11:06:26] <michaelarestad> we should have theme styles like sfrisk mentioned
[11:06:33] <arschmitz> yes
[11:06:34] <michaelarestad> and those should be encouraged to be hacked on
[11:06:40] <arschmitz> no
[11:06:44] <arschmitz> close
[11:06:54] <arschmitz> those should be the "Chassis Theme
[11:06:55] <arschmitz> "
[11:06:58] <arschmitz> and not changes
[11:07:06] <arschmitz> but we should have a basicly blank theme file
[11:07:16] <arschmitz> that people can use as a template to make their own theme
[11:07:45] <sfrisk> so have two files there, one that is is chassis.accordion.scss (or something)
[11:07:53] <sfrisk> and one that is yourTheme.accordion.scss
[11:08:17] <michaelarestad> I'd probably separate the output files
[11:08:20] <arschmitz> chassis.accordion.template.scss
[11:08:21] <sfrisk> could have a build thing in there to generate the ____Theme files for you, and create a compiled file for you
[11:08:31] <michaelarestad> chassis.css (all the functionality dependency stuff that never should be modified)
[11:08:45] <sfrisk> and chassis-theme.css for the theme stuff
[11:08:45] <michaelarestad> and style.css (whatever the heck they want)
[11:09:14] <arschmitz> so this is the fundamental seperation we have already in ui and mobile
[11:09:23] <arschmitz> structure is seperated from theme
[11:09:35] <arschmitz> jquery.mobile.css includes both
[11:09:45] <arschmitz> jquery.mobile.structure.css is structure only
[11:09:58] <arschmitz> and jquery.mobile.theme.css is theme pretty stuff
[11:10:01] <sfrisk> so I guess the question do we want a theme folder they hack from that is organized similar to the base structure we have now?
[11:10:19] <arschmitz> none of those would ever be changed by a user
[11:10:19] <sfrisk> or is theme theme files in the same folder as their corresponding structure?
[11:10:25] <arschmitz> however
[11:10:33] <arschmitz> there is a blank theme file
[11:10:40] <arschmitz> that you can basicly fill in the blanks on if you want
[11:10:55] <arschmitz> or make a custom one from the themeroller
[11:11:06] <sfrisk> well I was thinking you could use a generator to create all the _scss theme files you need, associated with your theme name
[11:11:13] <sfrisk> so if you want to have multiple themes, that's easy
[11:11:25] <arschmitz> sure but thats all just build stuff
[11:11:43] <arschmitz> we can do just about anything anyone can dream up in the build
[11:11:52] <sfrisk> yeah, this was kinda along the lines of "Do you get your custom theme files in your initial download, or after your first build"
[11:12:06] <arschmitz> depends
[11:12:11] <arschmitz> are you downloading a zip
[11:12:15] <arschmitz> cloning the repo
[11:12:23] <arschmitz> doing a custom build from the builder?
[11:13:12] <sfrisk> cloning the repo, since I said "after your first build"
[11:13:25] <sfrisk> themeroller would probably generate those files for you
[11:13:28] <arschmitz> cloning the repo i would say they would just be there
[11:13:32] <arschmitz> but blank
[11:13:52] <arschmitz> builder would put in any for componenets you select
[11:13:58] <sfrisk> but have a way you can easily add other theme files
[11:14:09] <arschmitz> sure
[11:14:29] <arschmitz> grunt build --theme=someOtherthemfile.scss
[11:14:34] <arschmitz> or similar
[11:14:55] <arschmitz> and it will build with what ever you specificy for theme files
[11:15:24] <sfrisk> what do you think, michaelarestad?
[11:16:11] <michaelarestad> I'm still thinking.
[11:16:40] <sfrisk> Well we've been going at this one topic for over an hour
[11:16:46] <michaelarestad> It's a doozie.
[11:16:47] <arschmitz> lol
[11:16:52] <sfrisk> we could go think about it, and continue the discussion later
[11:16:55] <michaelarestad> Stupid media queries.
[11:17:01] <sfrisk> either on the boards/#css-chassis
[11:17:04] <sfrisk> or here next week
[11:17:48] <michaelarestad> I'll be around in #css-chassis today or we can make an issue?
[11:18:06] <sfrisk> I could make the issue and we can put in stuff we discussed in there to keep track of it
[11:18:24] <sfrisk> but we could have a more informal discussion in #css-chassis to work out the details
[11:19:40] <sfrisk> but at least give us some time to think over it
[11:19:51] <sfrisk> to ourselves, before getting back into it
[11:20:22] <sfrisk> I was even thinking about using Google Draw to sketch out file structure and how we want to do things for a reference
[11:20:31] <sfrisk> since I'm more of a visual person anyway
[11:20:45] <sfrisk> If that works for everyone?
[11:20:47] <michaelarestad> Works for me.
[11:21:49] <sfrisk> Okay, so this chassis meeting is officially adjourned, continue the discussion more informally in #css-chassis/the boards later
[11:22:49] <arthurvr> bye
