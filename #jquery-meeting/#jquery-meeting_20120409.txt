[08:50:11] <DaveMethvin> .
[08:58:48] <gibson042> hey y'all
[09:01:31] <DaveMethvin> hey dere gibson042
[09:02:02] <DaveMethvin> just polishing up the agenda
[09:04:29] <timmywil> ahhhh
[09:04:42] <DaveMethvin> is that a good ahhh timmywil?
[09:04:58] <timmywil> I'm playing the super busy game
[09:05:02] <rwaldron> heeeeere
[09:05:22] <DaveMethvin> i have NO TIME to play the super busy game! :D
[09:06:26] <timmywil> me neither
[09:06:31] <DaveMethvin> hokay, lets get a move on then
[09:06:40] <DaveMethvin> so, 1.8 is starting to take form
[09:06:48] <DaveMethvin> there's a branch ... good start i guess
[09:06:57] <timmywil> I have a deadline this week. I'd love to get to sizzle, but it won't happen until this weekened.
[09:07:17] <DaveMethvin> this weekend would still be fine
[09:07:53] <DaveMethvin> there are two big pulls that need some discussion and also your input about direction for this release
[09:08:12] <DaveMethvin> gnarf has the animation one, which looks good from a design and cleanup standpoint
[09:08:18] <DaveMethvin> but it is bigger, which worries me
[09:08:23] <gnarf> :/
[09:08:27] <gnarf> me too
[09:09:02] <DaveMethvin> now, if it works well with closure compiler advanced opts that would take care of the size but i suspect people will need to give it hints
[09:09:22] <DaveMethvin> that is, animation can animate anything and we don't know in advanced what "anything" is, so we need all the code
[09:10:02] <DaveMethvin> i think we need 1.8 to definitely have the ability to leave stuff out if people want to do their own builds
[09:10:13] <DaveMethvin> and i suspect CCAO won't be enough
[09:10:27] <gnarf> well there was an interesting idea in that effects branch that got brought up
[09:10:51] <gnarf> im wondering if we need Tween Hooks in particular... or if cssHooks get/set would be enough
[09:11:10] <timmywil> gnarf: at first glance is looks like jQuery.fx is out and Animation objects are in?
[09:11:44] <gnarf> timmywil: most of the old .fx.prototype stuff is re-implemented as jQuery.Tween
[09:12:41] <gnarf> also, if you guys want an easier time reviewing that pull, but still able to comment in the diff view check out my blog post http://gnarf.net/2012/04/09/github-pro-tip-hide-red-lines-in-a-diff/
[09:13:01] <DaveMethvin> i also have the CCAO branch ready to merge but wanted to get some input on it: https://github.com/dmethvin/jquery/tree/ccao
[09:13:27] <DaveMethvin> the gzip gets about 200 bytes bigger, but the more important long-term thing is that we need to maintain all the type info
[09:13:40] <DaveMethvin> any new public interfaces need that
[09:14:02] <DaveMethvin> plus some private ones for that matter
[09:14:07] <rwaldron> ugh
[09:14:09] <gnarf> yeah
[09:14:15] <gnarf> so like
[09:14:33] <rwaldron> its also two paths to maintain for building
[09:14:47] <rwaldron> and everything that got added to the makefile will have to be ported to grunt
[09:14:51] <DaveMethvin> yeah rwaldron notice i didn't land the grunt stuff yet, lots of impacts there
[09:14:54] <rwaldron> which is not an issue for me
[09:15:04] <rwaldron> it's just like... ugh.
[09:15:17] <gnarf> i guess we have to do it...
[09:15:28] <gnarf> I'm gonna hate polluting our definitions with /** */
[09:15:31] <rwaldron> we don't have to do anything... but yeah
[09:15:45] <DaveMethvin> yeah, thinking the same thing
[09:16:14] <gnarf> just out of curiosity
[09:16:15] <timmywil> agreed, ugh
[09:16:18] <DaveMethvin> but also, the file size that people judge us by, the whole ballowax gzip, is a lot bigger
[09:16:38] <timmywil> would be great if that could be smaller in 1.8
[09:16:40] <rwaldron> that's not ok
[09:16:50] <gnarf> I think if we should pick up those jsdoc type hints, we should go a little broader with it
[09:17:09] <DaveMethvin> i think it's SUPER IMPORTANT that we give people who are worried about size lots of options to build a smaller one
[09:17:19] <gnarf> perhaps using @private and link doc blocks up to their respective api pages
[09:17:32] <DaveMethvin> like, leaving out $.ajax and replacing with jaubourg's jsonp plugin for example
[09:17:56] <DaveMethvin> or leaving out animations if you only care about css animatinos
[09:18:03] <rwaldron> maybe I don't "get it"
[09:18:09] <rwaldron> does jQuery.expandedEach get exposed?
[09:18:19] <DaveMethvin> i didn't think so
[09:18:20] <gnarf> jQuery.expandedEach = jQuery.each
[09:18:22] <gnarf> afaik
[09:18:26] <rwaldron> but...
[09:18:33] <DaveMethvin> it's just a more explicity way to tell CCAO what it's doing
[09:18:35] <gnarf> its just the name that clues CC to expand it
[09:18:56] <rwaldron> i dont see delete jQuery["expandedEach"]
[09:18:57] <timmywil> generally jQuery will continue to get loaded from cdn's. Shouldn't we be able to say that 1.8 is smaller than previous releases? It seems to me this is what people want to hear.
[09:19:11] <DaveMethvin> i would love to timmywil
[09:19:19] <DaveMethvin> now, how? :P
[09:19:28] <timmywil> given a choice, that seems more important than ccao
[09:19:43] <gnarf> I'd love to as well, but there are some things that I've noticed now that I've been mucking around in effects code for a bit with my code rulers running
[09:19:44] <timmywil> but maybe that's just me
[09:19:44] <DaveMethvin> we had a list of things to be deprecated for 1.8 but those can't be removed until 1.9
[09:19:50] <gnarf> for instance
[09:19:59] <DaveMethvin> and even at that, i didn't get the feeling ppl wanted to deprecate everything
[09:20:47] <gnarf> Moving some code around the other day, i ended up with a -20 minified, but +18 gziped optimization
[09:20:55] <rwaldron> f5u12 the line endings are all changed
[09:21:10] <rwaldron> rather, the new files dont match
[09:21:24] <rwaldron> fixable
[09:21:26] <rwaldron> but annoying
[09:21:53] <DaveMethvin> i don't see a way to make the overall code much smaller but unless we a) deprecate/remove stuff and/or b) use ccao
[09:22:00] <timmywil> as in crlf or something?
[09:22:24] <rwaldron> DaveMethvin did you try updating the submodules on that branch?
[09:22:27] <rwaldron> im getting errors
[09:22:35] <rwaldron> fatal: '3e9dae5632e118e4f1b59c089ae1dcb5e0f03408' does not point to a commit
[09:22:35] <rwaldron> Unable to merge '3e9dae5632e118e4f1b59c089ae1dcb5e0f03408' in submodule path 'src/sizzle'
[09:22:35] <rwaldron> make: *** [update_submodules] Error 2
[09:22:39] <DaveMethvin> yes, i have an uncommitted sizzle
[09:22:40] <DaveMethvin> sorry
[09:22:50] <rwaldron> ok no worries
[09:23:41] <DaveMethvin>  but basically we're already growing a lot here
[09:23:45] <DaveMethvin> which saddens me
[09:23:56] <DaveMethvin> i kinda expected a bit of growth from CCAO
[09:23:57] <rwaldron> ok, i see
[09:23:58] <timmywil> Is there anything we can do to reduce the size of the effects changes? gnarf, you mentioned using cssHooks in favor of tween hooks?
[09:24:07] <rwaldron> RE: does jQuery.expandedEach get exposed?
[09:24:13] <rwaldron> it gets removed in a build step
[09:24:29] <timmywil> rwaldron: good
[09:24:29] <rwaldron> which is funny, i was thinking about something like that for testing our internal APIs
[09:24:34] <rwaldron> like...
[09:25:04] <rwaldron> s/jQuery.testable.vendorPropName = function/function vendorPropName/
[09:25:22] <rwaldron> b/w valid syntax of course
[09:25:28] <rwaldron> anywwwwayaaaa
[09:26:42] <DaveMethvin> since the CCAO stuff is so global as far as its effects we kinda need to land it asap
[09:26:51] <gnarf> timmywil: I'm sure there are other ways... cssHooks > Tween.propHooks is a little scary to me, but if it works, it should work
[09:27:18] <gnarf> I just fear that someone might write a Tween propHook some day that really has no business as a cssHook
[09:27:44] <rwaldron> what is the syntax for wrapping output?
[09:27:47] <gnarf> right now the only ones we define by default are ... width/height/padding*/border*Width can't go below 0
[09:28:44] <timmywil> DaveMethvin: agreed'
[09:29:12] <rwaldron> found it...
[09:29:13] <rwaldron> --output_wrapper "(function() {%output%})();"
[09:29:18] <gnarf> timmywil: also, with the new effects stuff - I was hoping for less of an impact out of the gate...
[09:29:25] <rwaldron> shouldn't that be in the makefile instructions?
[09:29:52] <timmywil> gnarf: makes sense, I just want to get it in the negative.
[09:30:16] <gnarf> timmywil: I'd love to as well, feel free to suggest any optimizations you can think of... I'm getting them as I can come up with them
[09:30:28] <DaveMethvin> so one thing that has yet to be proven is whether CCAO is really going to lead to significant size reductions when users combine it with their own files
[09:30:28] <gnarf> the only strange part is when i do like a -20 min +18 gzip
[09:30:35] <timmywil> gnarf: has jaubourg taken a look too?
[09:30:38] <rwaldron> jQuery.AjaxSettings?
[09:30:46] <timmywil> gnarf: heh yea
[09:30:52] <DaveMethvin> jaubourg is off getting fried this week
[09:30:56] <DaveMethvin> sounded painful
[09:31:04] <gnarf> timmywil: jaubourg has shitty internet connection/sunburn on vacation
[09:31:15] <gnarf> he promises to look "soon" in the PR
[09:31:16] <timmywil> ah right
[09:31:28] <DaveMethvin> ok so i think i will land the CCAO stuff then
[09:32:11] <timmywil> I think I'd need to stare it a while
[09:32:14] <DaveMethvin> chad k put a lot of time into getting this to work on jquery so i think we need to either show it works or prove it doesn't
[09:32:23] <timmywil> referring to effects
[09:32:35] <rwaldron> I want it on record that I'm very much -1 to CCAO
[09:32:36] <gnarf> I also haven't done any heavy perf/mem leak tests
[09:32:47] <gnarf> I'm +0 on CCAO
[09:33:07] <gnarf> It's gonna be a whole new realm of bugs/support - but it might prove useful
[09:33:09] <rwaldron> I don't like that the output isn't even wrapped in an IIFE
[09:33:26] <rwaldron> when the option to do so is definitely available
[09:33:29] <timmywil> rwaldron: oh it's not?
[09:33:32] <rwaldron> no
[09:33:34] <rwaldron> its all leaks
[09:33:39] <timmywil> eek
[09:34:22] <gnarf> timmywil: if you have the time - I'm really interested in anyone's feedback on the branch :)
[09:34:25] <timmywil> that would make it unusable until the user wraps it manually
[09:34:39] <DaveMethvin> hmm
[09:34:55] <DaveMethvin> why wouldn't it  have an IIFE?
[09:34:56] <gnarf> well a lot of the "reduction" in closure is unrolling things like IIFE's in "safe" ways
[09:35:02] <DaveMethvin> oh
[09:35:13] <rwaldron> https://gist.github.com/06d968407b41fa8aa093
[09:35:18] <timmywil> how to unroll private var?
[09:35:37] <rwaldron> DaveMethvin it can be wrapped, with this:
[09:35:37] <rwaldron> --output_wrapper "(function() {%output%})();"
[09:35:49] <rwaldron> but why didnt chad do so?
[09:35:53] <gnarf> when you run ALL the code (including the end result) through CCAO - you get code that did what it did before, only with horrible 1/2 letter property names and less scopes
[09:35:55] <DaveMethvin> yeah, not sure
[09:35:56] <rwaldron> that gist is the output
[09:36:30] <rwaldron> the jQuery object api surface is massive
[09:36:31] <rwaldron> jQuery.AnimationOptions
[09:36:51] <rwaldron> jQuery.AjaxSettings
[09:37:27] <rwaldron> jQuery.callbacks (should be Callbacks)
[09:37:31] <timmywil> what does this mean? and why is duration mispelled? /** @suppress {uselessCode} */
[09:37:31] <timmywil> (function(){
[09:37:31] <timmywil> jQuery.AnimationOptions.prototype.duartion;
[09:37:31] <timmywil> jQuery.AnimationOptions.prototype.easing;
[09:37:32] <timmywil> jQuery.AnimationOptions.prototype.queue;
[09:37:33] <timmywil> jQuery.AnimationOptions.prototype.specialEasing;
[09:37:34] <timmywil> })();
[09:37:37] <timmywil> heh
[09:37:46] <rwaldron> jQuery.jqXHR
[09:37:51] <gnarf> he needed a type definition for animation options
[09:38:01] <gnarf> or it couldn't munge property names
[09:38:26] <rwaldron> it looks like a lot of plain objects have been redfined as constructors w/ prototypes
[09:39:02] <gibson042> what exactly is the claimed benefit from all that mess?
[09:39:04] <rwaldron> jQuery.event.EventData
[09:39:12] <timmywil> aight, I need to get back to work, but <3 you guys
[09:39:22] <DaveMethvin> thanks timmywil
[09:39:26] <gnarf> gibson042: mix it up with your scripts and run it against CCAO and it will reduce every one of those property names to "zx"
[09:39:30] <gnarf> or something similar
[09:39:47] <gnarf> a generally much larger impact against the entire code
[09:39:48] <DaveMethvin> right although it does look like there is some spelling errors
[09:39:51] <rwaldron> here's the thing...
[09:40:08] <rwaldron> WHO is going to mix in jQuery's build system with their own?
[09:40:16] <gnarf> it won't be jQuery.hide anymore - it will be jq.hi
[09:40:32] <DaveMethvin> rwaldron: i think that is part of the puzzle here
[09:40:54] <rwaldron> DaveMethvin I'm begging you to hold off on this
[09:41:03] <gnarf> rwaldron: you don't need the jQuery build, just the CCAO optimized version distributed
[09:41:03] <rwaldron> at least until later this week
[09:41:10] <rwaldron> when we can all discuss at the face-to-face
[09:41:33] <DaveMethvin> well only some faces will be there, but since build comes into play big time that seems to make sense
[09:41:52] <gnarf> rwaldron: all you need is the output (that you put in that gist) and your scripts
[09:42:01] <gibson042> it looks to me like a 55 gallon drum of worms
[09:42:09] <gibson042> I agree with rwaldron
[09:42:14] <gnarf> CCAO tucks them up into a neat little ball with most of the unused code paths removed
[09:42:18] <rwaldron> gnarf ok, and then you need to CCAO all that together?
[09:42:27] <DaveMethvin> yes
[09:42:44] <DaveMethvin> you put your stuff together with jQuery, and it looks at what is actuallly being used
[09:42:51] <DaveMethvin> then it removes what isn't needed
[09:42:57] <DaveMethvin> and it smashes the names of what's left
[09:43:20] <DaveMethvin> so that jQuery.ajaxOptions.traditional becomes for example $.op.t4
[09:43:32] <DaveMethvin> or whatever it chose for htose one or two letters
[09:43:50] <DaveMethvin> it can only do such a good job b/c it knows a lot about the whole picture
[09:44:47] <gnarf> more like the call to ajax using traditional becomes j.aj({ ur: "url", t4: true, su: function() { }});
[09:45:05] <DaveMethvin> there are problems though in that it will rename jQuery.ajaxSettings.traditional but not jQuery.ajaxSettings["traditional"]
[09:45:07] <gnarf> or something equally dirty looking
[09:45:32] <DaveMethvin> and that is a whole nother learning experience pple will need to encounter
[09:45:57] <rwaldron> jQuery.AjaxSettings.traditional
[09:46:04] <gnarf> out of curiosity, do the other big frameworks/libs support CCAO ?
[09:46:06] <rwaldron> "Ajax"? not "ajax"
[09:46:26] <gnarf> rwaldron: its a type definition, hence capper at front
[09:46:49] <DaveMethvin> it would be great to make jQuery CCAO clean but i don't want us to be the people trying to explain this stuff to devs and taking the blame when it doesn't work
[09:46:56] <DaveMethvin> that part concerns me
[09:47:02] <rwaldron> DaveMethvin yes, me too
[09:47:04] <rwaldron> greatly
[09:47:04] <gnarf> jQuery.ajaxSettings = /** @type jQuery.AjaxSettings */ {};
[09:47:21] <rwaldron> gnarf yeah, I'm trying to make heads/tails of all of this
[09:47:24] <gnarf> DaveMethvin: thats my big concern too
[09:48:01] <rwaldron> so, building jQuery "Classic" seems not much different then we expect
[09:48:08] <rwaldron> aside from a bunch of comments
[09:48:19] <rwaldron> and weird in-line "types"
[09:48:28] <DaveMethvin> and we could strip those if needed/desired
[09:48:42] <DaveMethvin> also, if it's this difficult for us to get our heads around i doubt that most jquery users who can barely manage to include the script correctly will have any hope of using CCAO
[09:48:46] <rwaldron> of course, not present in minified jQuery
[09:48:52] <DaveMethvin> right
[09:49:01] <rwaldron> DaveMethvin also a good point
[09:49:08] <rwaldron> but one that I made months ago
[09:49:09] <DaveMethvin> i meant for an "uncompressed but non-CCAO-friendly" version
[09:49:18] <rwaldron> average user = not smart enough to figure this out
[09:49:20] <DaveMethvin> the type annotations are used only by CC
[09:49:24] <gnarf> DaveMethvin: i would agree that CCAO is going to be a 5% if that thing
[09:49:27] <DaveMethvin> hell i'm not smart enough
[09:49:29] <rwaldron> we'll be a call center
[09:49:51] <rwaldron> DaveMethvin but we'll have no choice
[09:49:55] <rwaldron> we must get smart
[09:50:04] <rwaldron> but everyone else, i doubt it
[09:50:22] <gnarf> everyone else will probably not notice anything other than the +200 bytes
[09:50:27] <DaveMethvin> well, now that i have this branch I won't have as much problem rebasing it
[09:50:30] <DaveMethvin> so i can hold off
[09:50:32] <rwaldron> gnarf +9001
[09:50:36] <gnarf> they probably wont ever try CCAO
[09:50:48] <DaveMethvin> no they won't unless we coudl give them a tool
[09:50:55] <gnarf> but there will be a few people who might be like "Nice - it works with CCAO now!"
[09:51:01] <DaveMethvin> and if their own code is CCAO-friendly
[09:51:05] <DaveMethvin> which it may not be
[09:51:24] <gnarf> right - coding for CCAO is like taking a step backwards in a lot of ways
[09:51:32] <DaveMethvin> if they interchange  obj.prop and obj["prop"] they are screwed
[09:51:38] <DaveMethvin> even if by accident etc
[09:51:42] <gibson042> "attrFn: { val: true, css: true, ... }" => "attrFn: {}" + "if ( !attrFnInitialized ) { intializeAttrFn(); }"
[09:51:51] <DaveMethvin> and tryna figure out why it broked could be difficult
[09:51:56] <rwaldron> I also don't really like changes in the tests that look like... "i want it my way"
[09:52:11] <rwaldron> like... what did this benefit?
[09:52:12] <rwaldron> https://github.com/dmethvin/jquery/commit/39a1e5c12f1e7ba4359d70e3da2d193db4af72ed#L65L64
[09:52:13] <socialhapy> ★ Commit on jquery by dmethvin (1d, 18h ago): Initial merge of the Closure Compiler changes from https://github.com/ChadKillingsworth/jquery  Conflicts: 	src/css.js 	src/effects.js 	src/event.js 	src/manipulation.js 	src/offset.js 	test/unit/ajax.js 	test/unit/data.js 	test/unit/dimensions.js
[09:52:50] <rwaldron> or...
[09:52:50] <rwaldron> https://github.com/dmethvin/jquery/commit/39a1e5c12f1e7ba4359d70e3da2d193db4af72ed#L63R452
[09:52:52] <socialhapy> ★ Commit on jquery by dmethvin (1d, 18h ago): Initial merge of the Closure Compiler changes from https://github.com/ChadKillingsworth/jquery  Conflicts: 	src/css.js 	src/effects.js 	src/event.js 	src/manipulation.js 	src/offset.js 	test/unit/ajax.js 	test/unit/data.js 	test/unit/dimensions.js
[09:53:00] <rwaldron> he did a lot of that
[09:53:05] <DaveMethvin> yeah that one doesn't seem to make sense rwaldron
[09:53:10] <rwaldron> in some places, he removed the quotes around properties
[09:53:15] <rwaldron> in some places he added them
[09:53:24] <DaveMethvin> some were related to quotes, but that's ccao needed
[09:53:30] <rwaldron> in tests?
[09:53:46] <gnarf> the tests are compiled with CCAO against the CCAO version
[09:53:48] <gnarf> then tested
[09:53:50] <DaveMethvin> right
[09:53:55] <gnarf> thats how it "tests" the output of CCAO
[09:53:58] <DaveMethvin> so yeah the quotes matter in that case
[09:54:11] <rwaldron> so... why then are some removed, but some added?
[09:54:22] <DaveMethvin> because sometimes you want ccao to optimize, other times not
[09:54:46] <DaveMethvin> if you don't want ccao to mess with it  you can quote the property
[09:54:57] <gnarf> sometimes you need to force the object to retain its full name you use ["property"] instead of .property
[09:55:42] <rwaldron> https://github.com/dmethvin/jquery/commit/39a1e5c12f1e7ba4359d70e3da2d193db4af72ed#L63L54
[09:55:43] <rwaldron> ?
[09:55:44] <socialhapy> ★ Commit on jquery by dmethvin (1d, 18h ago): Initial merge of the Closure Compiler changes from https://github.com/ChadKillingsworth/jquery  Conflicts: 	src/css.js 	src/effects.js 	src/event.js 	src/manipulation.js 	src/offset.js 	test/unit/ajax.js 	test/unit/data.js 	test/unit/dimensions.js
[09:56:00] <rwaldron> gnarf DaveMethvin i'm aware of the techniques
[09:56:10] <rwaldron> I wasnt aware that he was compiling the tests
[09:56:22] <rwaldron> makes sense now
[09:56:24] <rwaldron> sort of.
[09:56:26] <gnarf> the $ - *shrug* - the "top" and "left" are probably clues to the CCAO to not munge
[09:56:40] <DaveMethvin> certainly true for the id property
[09:56:45] <DaveMethvin> don't want to munge that
[09:56:46] <rwaldron> oh, i see
[09:57:01] <DaveMethvin> in some ways, naive devs may have an easier time b/c they don't think of prop.val and prop["val"] as interchangeable
[09:57:09] <DaveMethvin> ignorance FTW!
[09:57:21] <rwaldron> he explicitly passes jQuery with a new Identifier name "$"
[09:57:24] <rwaldron> great.
[09:57:38] <rwaldron> that's going to be awesome to explain to contributors
[09:57:59] <gnarf> I think that could probably be unrolled back to "jQuery"
[09:58:02] <gnarf> and still pass
[09:58:04] <rwaldron> "no, sorry, you can only use $ where we've confusingly specified it, otherwise always use jQuery"
[09:58:39] <rwaldron> I wonder what the running time on oldIEs is
[09:58:58] <gnarf> honestly - probably less considering what CCAO does to the code :)
[09:59:04] <DaveMethvin> true
[09:59:05] <rwaldron> with all of this string property access
[09:59:23] <gnarf> rwaldron: it doesn't leave them as string property names in its output
[09:59:27] <DaveMethvin> and really the unit tests are a worst case of size since they come close to exercising everything
[09:59:28] <rwaldron> less? running the test suites in regular source mode?
[09:59:34] <rwaldron> i think you've misunderstoof
[09:59:40] <rwaldron> stood*
[09:59:41] <rwaldron> me*
[09:59:42] <rwaldron> ugh
[09:59:52] <gnarf> rwaldron: i meant the output, but yeah - the uncompiled will probably be a tad slower
[10:00:48] <gnarf> either way, its a scary scary merge
[10:01:15] <gnarf> DaveMethvin: you said it was like +200 ?
[10:01:16] <rwaldron> All of the ["prop"] code is mega noisy
[10:01:31] <DaveMethvin> yeah like +193
[10:01:36] <DaveMethvin> and i agree it's ugly
[10:01:38] <gnarf> rwaldron: im pretty sure uglify optimizes that case
[10:02:03] <DaveMethvin> and we could potentially still use uglify for the cdn versions
[10:02:04] <rwaldron> gnarf I mean... for me to look at
[10:02:07] <rwaldron> and maintain
[10:02:10] <rwaldron> and fix bugs
[10:02:12] <gnarf> rwaldron: agree
[10:02:14] <rwaldron> it sucks to look at
[10:02:16] <rwaldron> alot
[10:02:29] <DaveMethvin> well .prop and ["prop"] now mean very different things
[10:02:39] <rwaldron> which I also don't like
[10:02:45] <gnarf> which will surely be the introduction of CCAO related bugs
[10:02:48] <DaveMethvin> yeah it will be hard to get used to
[10:02:58] <DaveMethvin> especially for things like elem.id
[10:03:21] <ajpiano> this kind of seems like a crazy crazy crazy step to take
[10:03:24] <DaveMethvin> but the unit tests compiled for ccao should help find a lot of those
[10:03:32] <ajpiano> to make happy the small group of people who actually want and have asked for this
[10:04:02] <rwaldron> I can't really tell, but are these changes that actually benefit CCAO or like, changes for the sake of changes
[10:04:04] <rwaldron> https://github.com/dmethvin/jquery/commit/39a1e5c12f1e7ba4359d70e3da2d193db4af72ed#L12L35
[10:04:05] <socialhapy> ★ Commit on jquery by dmethvin (1d, 18h ago): Initial merge of the Closure Compiler changes from https://github.com/ChadKillingsworth/jquery  Conflicts: 	src/css.js 	src/effects.js 	src/event.js 	src/manipulation.js 	src/offset.js 	test/unit/ajax.js 	test/unit/data.js 	test/unit/dimensions.js
[10:04:12] <gnarf> agreed - i need to head into work tho... see you guys ~30 in -dev ?
[10:04:29] <rwaldron> ajpiano +1
[10:04:45] <rwaldron> so drastic for maybe 10 loudmouth users
[10:04:48] <gnarf> rwaldron: looks like its for the benefit of CC
[10:05:13] <DaveMethvin> yes, it keeps the *With from being renamed
[10:05:28] <gnarf> CC can't precom... what DaveMethvin
[10:05:30] <gnarf> sid
[10:05:32] <gnarf> said
[10:05:40] <DaveMethvin> ok, how about we sit on this for a while
[10:05:52] <DaveMethvin> poor chad, we kind of put  him through the wringer for this
[10:05:56] <ajpiano> i think there will be a tonne of people who were like "yeah, i wanted a smaller jquery, but i didn't want *this*
[10:06:15] <ajpiano> granted, those folks were just hoping for "magic"
[10:06:20] <DaveMethvin> well we can certainly give them a smaller jquery
[10:06:24] <DaveMethvin> with less stuff in it
[10:06:40] <DaveMethvin> i have my deprecation list, ready to write it up
[10:07:02] <DaveMethvin> and we can make it so submodules like ajax and effects are removable
[10:07:18] <DaveMethvin> so that it woudl fit into other ppl's simple build processes
[10:07:41] <DaveMethvin> but if we go with CCAO, the only way ppl will get the benefit is if they use CCAO in their own codebases and build processes
[10:07:50] <DaveMethvin> which does seem like quite a restriction
[10:08:24] <DaveMethvin> anyway, we're over on time, i'll wait on landing this and we can talk later in the week
[10:09:01] <rwaldron> gotcha
[10:09:01] <rwaldron> https://github.com/dmethvin/jquery/commit/39a1e5c12f1e7ba4359d70e3da2d193db4af72ed#L14L111
[10:09:03] <socialhapy> ★ Commit on jquery by dmethvin (1d, 18h ago): Initial merge of the Closure Compiler changes from https://github.com/ChadKillingsworth/jquery  Conflicts: 	src/css.js 	src/effects.js 	src/event.js 	src/manipulation.js 	src/offset.js 	test/unit/ajax.js 	test/unit/data.js 	test/unit/dimensions.js
[10:09:50] <DaveMethvin> rwaldron: yep, another one since the public jQuery.show() may be renamed in CCAO
[10:09:57] * gibson042 shudders
[10:10:01] <DaveMethvin> lol
[10:10:19] <DaveMethvin> jQuery.fn.show()  correction of course
[10:10:47] <DaveMethvin> coulda used fn there ... unless that gets renamed, ugh
[10:10:53] <DaveMethvin> no that would still work
[10:11:02] <ajpiano> can i also just say that like
[10:11:15] <rwaldron> I'm with gibson042 on that shudder
[10:11:17] <ajpiano> it's only "big app" people who are likely to really start using CCAO
[10:11:22] <ajpiano> and the larger your app is
[10:11:40] <ajpiano> the less likely you are going to save space by avoiding dead code paths in a low level lib like jquery
[10:11:53] <ajpiano> or at leats, that's my read on the situation
[10:12:15] <DaveMethvin> well  ccao would make everything smaller, our code and yours, but i dunno if most people care enough to do that
[10:12:44] <DaveMethvin> i think it could be very common for example that you only use jsonp but are dragging all of ajax around for example
[10:13:02] <DaveMethvin> i have apps where that is the case
[10:13:11] <gnarf> also - the reduction from property munging is significant ajpiano
[10:13:26] <DaveMethvin> and with effects, you might only be using add/removeclass and css animations/transitions
[10:13:40] <gnarf> the fact that $().show() is now $().s2()
[10:13:44] <gnarf> everywhere....
[10:14:44] <rwaldron> i can't wait
[10:14:47] <rwaldron> to debug that
[10:14:50] <rwaldron> ....
[10:14:51] <rwaldron> console:
[10:14:54] <DaveMethvin> source maps
[10:14:58] <DaveMethvin> but yeah
[10:15:02] <rwaldron> $(selector).show()? nothing???
[10:15:06] <rwaldron> oh right
[10:15:14] <rwaldron> $(selector).s2()
[10:15:15] <rwaldron> lame.
[10:15:27] <DaveMethvin> whether ccao support lands or not, we need to be thinking about how people can leave out stuff they don't need
[10:15:38] <DaveMethvin> we still have some dumb dependencies that need to go
[10:16:26] <DaveMethvin> ok, i have to run, ttyl
[10:16:27] <ajpiano> ya
[10:16:37] <gibson042> effort addressing module separation would be better spent than integrating wacky new syntax rules
[10:16:40] <ajpiano> i think doing it in a way that anyone who wants it can get it, not just ppl using a specific toolchain
[10:16:46] <ajpiano> but yeah, we can discuss later in the week
[10:16:58] <gnarf> most of us will be @ dev days right?
[10:17:04] <ajpiano> +1 gibson042
[10:17:34] <rwaldron> gnarf yes indeed
[10:17:47] <rwaldron> and gibson042 +1 thats looking far more attractive at this point
[10:18:00] <rwaldron> also... gibson042 can you take a look at gnarf's effects re-write?
[10:18:05] <gnarf> please
[10:18:09] <rwaldron> you have a nack for code crunchin'
[10:18:21] <gibson042> yeah, do we have a target for landing it?
[10:18:23] <rwaldron> I think if you both worked together, it could come out beautifully
[10:18:32] <rwaldron> gibson042 it's a 1.8 jam
[10:18:32] <gnarf> i'm a little upset with myself that it came up ~+300 right now
[10:18:37] <gibson042> I'm planning to examine it this week
[10:18:46] <rwaldron> ok, i'll leave you two
[10:18:59] <rwaldron> laterrrrr
[10:19:16] <gnarf> eh - take it to -dev in 30 min? im shutting this thing off
