[09:01:58] <DaveMethvin> dunno how many people will be here, it's a holiday in the US
[09:02:01] <DaveMethvin> but i'm here
[09:02:07] <DaveMethvin> and isn't that all that matters? :)
[09:02:13] <DaveMethvin> who else?
[09:02:53] <markelog> hey-hey
[09:02:54] <b-ot> markelog: You have 2 new messages, use `read when you wish to read them.
[09:03:01] <markelog> read
[09:03:14] <DaveMethvin> yay!
[09:03:16] <markelog> mmm, don't these commands (
[09:03:25] <markelog> don't know
[09:03:29] <markelog> these commands
[09:03:29] <DaveMethvin> it's `read
[09:03:33] <markelog> `read
[09:03:33] <b-ot> markelog: From scott_gonzalez, 3d 3h ago: I saw a comment from you on https://github.com/jscs-dev/node-jscs/pull/606, but I can't reply because the comment seems to be gone.
[09:03:38] <b-ot> markelog: From scott_gonzalez, 3d 3h ago: read the channel history start at my first message
[09:03:53] <DaveMethvin> darn bots
[09:04:07] <markelog> these parens is nightmare
[09:04:24] <markelog> hey gibson042!
[09:04:28] <gibson042> hey there
[09:04:49] <DaveMethvin> let me start an agenda
[09:05:00] <DaveMethvin> timmy's out
[09:05:51] <DaveMethvin> still holding out hope with Trac, since one of the Trac contributors answered the call for help
[09:06:00] <DaveMethvin> he should know how to fix this
[09:06:07] <DaveMethvin> it's moving, just moving slowly
[09:06:58] <DaveMethvin> so gibson042 i like your idea
[09:07:05] <DaveMethvin> seems relatively simple to do
[09:07:11] <DaveMethvin> doesn't require a huge shim
[09:07:36] <gibson042> that's the hope
[09:07:52] <DaveMethvin> haven't heard from jauborg, was hoping to get him to do that code
[09:08:10] <DaveMethvin> but it solves the dilemma for $.xhr and lets us move ahead
[09:08:15] <gibson042> right; I didn't want to swipe the ticket from him if he's working on it
[09:08:45] <DaveMethvin> i'll email him and copy you, let's see if we can get that moving
[09:08:57] <DaveMethvin> if you have time and energy i'd hate to waste it!
[09:09:04] <gibson042> :)
[09:09:22] <markelog> could you cc me too?
[09:09:23] <markelog> just want to be aware of the progress
[09:09:49] <DaveMethvin> sure!
[09:10:18] <DaveMethvin> maybe you guys could split the promise and xhr parts if julian can't do any of it?
[09:11:12] <markelog> what did we decide on xhr interface?
[09:12:54] <DaveMethvin> whynotboth.gif :)
[09:13:06] <gibson042> I don't think we settled anything other than "it returns a thenable"
[09:13:15] <markelog> )
[09:13:25] <DaveMethvin> scott's had a promise as the input chaining but i don't think that's a common use of promise
[09:14:12] <DaveMethvin> i would like to do an options input, but that could easily be converted into a chaining api as well
[09:14:30] <markelog> yeah, that is what i proposed too btw
[09:14:52] <DaveMethvin> so you define the options input, but have a lower level api that "hides" the chaining api but you can use that if you want
[09:15:32] <markelog> it might not work for setRequestHeader method
[09:15:37] <markelog> or "header"
[09:16:00] <markelog> since then in options that would be an array of objects?
[09:16:16] <markelog> if you would want to set two headers
[09:16:20] <markelog> or more
[09:16:26] <DaveMethvin> markelog: you had the one where it just called a function with the xhr, that pretty much allows anything so i think we have it covered
[09:16:30] <DaveMethvin> i wouldn't overcomplicate it
[09:16:52] <markelog> so no header method?
[09:17:12] <markelog> it just might be pretty popular method to use
[09:17:26] <DaveMethvin> well if you do have it i wouldn't do an object
[09:17:38] <DaveMethvin> it's not really more expressive
[09:18:18] <DaveMethvin> really just .header("name", "value") and repeat as many times as you have headers
[09:19:06] <markelog> okay
[09:19:16] <markelog> i guess i understood )
[09:19:43] <markelog> another thing
[09:19:45] <DaveMethvin> we can always play with that stuff and add/remove
[09:20:07] <markelog> send() will return a promise object
[09:20:27] <DaveMethvin> yes
[09:20:37] <gibson042> we should have a promise before send(), though
[09:20:38] <markelog> pending on what jaubourg and gibson will come up with
[09:21:07] <markelog> how so?
[09:21:17] <markelog> like then/catch methods?
[09:21:20] <gibson042> send() should be chainable like any other method, returning the promise from the constructor
[09:21:35] <markelog> and what then method will return?
[09:21:45] <gibson042> then always returns a new promise
[09:21:48] <DaveMethvin> oh that was scott's thought too but it seemed pretty un-promiselike
[09:21:48] <gibson042> per spec
[09:22:17] <DaveMethvin> i think we need two apis here, one that encapsulate all the pre-send stuff and one that does not
[09:22:34] <DaveMethvin> so $.xhr({ args }).then()  is one api
[09:22:43] <markelog> mmm, so there wouldn't be a send() method in object that returned by then?
[09:22:47] <gibson042> var xhr = $.xhr(...); xhr.then(function(){ /*fulfilled*/ }, function(){ /* rejected */ }); xhr.header(...); xhr.send(); xhr.then(...)
[09:23:01] <DaveMethvin> and the other is $.xhrWithSettings().header( .. ).send().then()
[09:23:03] <gibson042> yetAnotherPromise = xhr.then(...)
[09:23:06] <DaveMethvin> or whatever
[09:23:17] <gibson042> that's what I have
[09:23:28] <gibson042> it's a chainable thenable
[09:23:40] <DaveMethvin> i'm just not enough of a promise user to know whether that is ever done
[09:23:54] <DaveMethvin> it's basically a promise that isn't kept until something "actuates" it in the future
[09:24:15] <gibson042> just like jQuery.Deferred ;)
[09:24:38] <DaveMethvin> right but look at the usage of Promise, it's encapsulated the action
[09:24:45] <DaveMethvin> and we're breaking it out of the encapsulation basically
[09:24:48] <gibson042> only if you need it to
[09:24:52] <DaveMethvin> at least i THINK we are
[09:25:11] <DaveMethvin> well that's why i'm not sure we should expose that as the way people always have to interact with $.xhr
[09:25:20] <gibson042> `new Promise(fn)` gives `fn` the resolve and reject functions for it to do with as it pleases
[09:25:41] <markelog> will we allow use of other promise impl to use with our new api?
[09:25:45] <gibson042> in our case, we'll call one of them after .send/.abort/etc.
[09:25:50] <gibson042> yes
[09:26:00] <gibson042> but that is entirely around behavior of .then
[09:26:13] <markelog> example?
[09:26:21] <markelog> a small one, if you can )
[09:26:23] <DaveMethvin> anything that shimmed window.Promise, we'd use that i think
[09:26:36] <DaveMethvin> or the real Promise of course
[09:26:37] <gibson042> Promise.resolve( $.xhr(...).send() )
[09:27:06] <markelog> sec
[09:27:34] <markelog> got it
[09:27:45] <gibson042> or equivalently: xhr = $.xhr(...); native = Promise.resolve( xhr ); xhr.send()
[09:28:02] <markelog> right
[09:28:13] <markelog> and since xhr will always have then method
[09:28:16] <markelog> it will follows it
[09:28:20] <gibson042> bingo
[09:29:03] <markelog> what props our returned promise will have?
[09:29:09] <markelog> aside from then/catch
[09:29:26] <markelog> abort?
[09:29:34] <gibson042> send and abort
[09:29:43] <gibson042> and whatever we decide to do for setting options
[09:29:57] <DaveMethvin> if you abort i assume it fails the promise?
[09:30:07] <gibson042> right
[09:30:14] <markelog> not sure if that per spec
[09:30:32] <markelog> since you can only add callbacks to it
[09:30:33] <gibson042> everything except then and catch are orthogonal to the spec
[09:30:39] <gibson042> it's our API
[09:30:53] <gibson042> we define when resolve/reject happen
[09:31:15] <DaveMethvin> i think it's more a question of whether the API would defy the traditional uses of Promise to the point where it confuses poeple
[09:31:16] <markelog> that logic is encapsulated in the spec
[09:31:20] <markelog> since its not a deferred
[09:31:45] <gibson042> no, the spec covers what happens upon resolve/reject
[09:31:52] <gibson042> but *when* to resolve/reject is open
[09:32:27] <gibson042> abort is not necessary
[09:32:32] <DaveMethvin> i've just never seen a situation where some external force (.send) needs to act on an existing promise in order for it to ever transition to resolve/rejected state
[09:32:36] <markelog> i mean - new Promise(...).there-is-no-method-that-could-reject-resolve-with
[09:32:55] <markelog> but it seems we would have one
[09:33:28] <gibson042> the canonical toy example is `new Promise(function(resolve) { setTimeout( resolve, 1000 ); })`
[09:33:39] <markelog> right
[09:33:51] <gibson042> that one resolves after a second
[09:34:09] <gibson042> jQuery.xhr(...) resolves after server response (or failure thereof)
[09:34:33] <markelog> or at abort call?
[09:34:43] <gibson042> if we include such a method
[09:35:16] <markelog> hmmm
[09:35:19] <DaveMethvin> jQuery.xhr(...) resolves after you call .send() and receive server response (or failure thereof)
[09:35:23] <DaveMethvin> ?
[09:35:57] <markelog> i guess we need to be careful here, since we had a lot of critics with our Deferred
[09:36:22] <markelog> if we do promise compact, should we follow the rules to the letter?
[09:36:40] <DaveMethvin> i think that was the goal
[09:36:54] <DaveMethvin> i just don't know how hard/big that will be
[09:36:56] <gibson042> right... the thenable returned by jQuery.xhr will remain unsettled until the HTTP request is fired and answered/timed-out/etc., or aborted
[09:37:30] <DaveMethvin> the chaining settings api can be done separately, i would prefer that we first define $.xhr({ settings and it sends automatically }).then()
[09:37:32] <gibson042> I think so, markelog, in the sense of forced asynchronicity and single-valued settlement
[09:37:50] <DaveMethvin> otherwise we expose more complexity in the api right off the bat
[09:37:58] <DaveMethvin> it would have to be $.xhr().send().then()
[09:38:02] <markelog> abort() might be considered as breakage of the spec
[09:38:03] <DaveMethvin> even for the simplest case
[09:38:05] <gibson042> the spec also _recommends_ rejection to always be with an Exception
[09:38:12] <markelog> that was i afraid of
[09:38:33] <gibson042> DaveMethvin: I think automatically sending is too restrictive for future expansion
[09:38:48] <gibson042> because it doesn't leave a gap to make changes
[09:38:59] <DaveMethvin> that's why there would be a lower level api, or simply a callback in the options
[09:38:59] <gibson042> between creation and server communication
[09:39:50] <DaveMethvin> this is so frustrating ... people use xhr as one of the simple examples of promise yet they always seem to gloss over these issues like abort and pre-send changes
[09:40:37] <markelog> another question, so we will not have promise() method in object that send() returns?
[09:40:46] <DaveMethvin> just looking at how people use $.ajax tho i think there is a justificatoin for the simple case being kept simple
[09:40:57] <DaveMethvin> and it accepting a small set of options and automatically sending
[09:41:03] <DaveMethvin> but having a way to do fancier things
[09:41:14] <gibson042> I don't see a need for .promise, the use case is covered by `.then()`
[09:41:15] <DaveMethvin> the majority of the time people just want to make a simple request
[09:42:32] <markelog> we could return an object with abort() and .xhr and promise() that would solve our problem
[09:42:40] <markelog> just a thought though
[09:42:44] <DaveMethvin> you don't need .promise() if the pre-send() object is a Promise that isn't ready to go yet
[09:42:54] <DaveMethvin> but again i dunno if that is considered kosher
[09:43:04] <DaveMethvin> i have never seen a Promise example doing that
[09:43:23] <gibson042> DaveMethvin: I guess it's controlled by options either way, and comes down to the default value of an autosend option
[09:44:13] <DaveMethvin> if the default is to auto-send then it's straightforward, you return a Promise that will resolve eventually
[09:44:46] <DaveMethvin> actually we don't need the abort method do we? you can call xhr.abort if we expose xhr
[09:44:57] <DaveMethvin> unless we need to hook it for our own needs
[09:45:06] <DaveMethvin> hmmm, which we may
[09:45:16] <DaveMethvin> since there's no onabort handler as i recall
[09:45:34] <gibson042> I think it's just in the same vein as .header
[09:45:50] <DaveMethvin> more a convenience than a necessity then
[09:45:55] <gibson042> I think so
[09:46:15] <gibson042> actually, it looks like the biggest question is the nature of fulfillment vs. rejection
[09:46:30] <gibson042> do we *ever* reject?
[09:46:39] <DaveMethvin> on errors, yes
[09:46:45] <DaveMethvin> but not on 404 for example
[09:46:59] <gibson042> is timeout an error?
[09:47:01] <DaveMethvin> a 404 is a successful transaction with a sad answer :)
[09:47:04] <gibson042> or abort?
[09:47:06] <DaveMethvin> timeout is an error
[09:47:12] <DaveMethvin> abort, i think that's an error
[09:47:26] <DaveMethvin> the transaction didn't complete
[09:48:01] <DaveMethvin> since we aren't doing data conversion inside $.xhr we don't need to worry about that
[09:48:04] <gibson042> so fulfillment means "I got a complete response from the server", then?
[09:48:10] <DaveMethvin> i think so
[09:48:16] <gibson042> and rejection means "I'm not going to"
[09:48:22] <DaveMethvin> yeah
[09:48:24] <gibson042> yeah, that works
[09:48:27] <markelog> so only on abort() or timeout?
[09:48:34] <DaveMethvin> yeah
[09:48:41] <gibson042> or interrupted transfer
[09:48:57] <DaveMethvin> and if you want to chain the result to do data conversion, THAT promise would fail due to conversion issues
[09:48:58] <gibson042> I guess that's just timeout
[09:49:03] <gibson042> right
[09:49:16] <markelog> right
[09:49:35] <markelog> why would we don't want to reject at 404 again?
[09:49:37] <gibson042> e.g., $.xhr().then( $.parseJSON )
[09:49:53] <markelog> i remember we had problems with it
[09:50:04] <markelog> but i don't remember what was they
[09:50:11] <DaveMethvin> because it gets you back into the value judgement area, where you're trying to make guesses about what is good and bad
[09:50:24] <gibson042> the problems with it and $.ajax were because people still wanted access to the data, which might be valid JSON for example
[09:50:36] <DaveMethvin> that can be done on the next promise
[09:50:48] <gibson042> and basically, APIs are different but $.ajax ignores that
[09:50:55] <markelog> why we don't want to give them a valid json at error callback?
[09:51:16] <markelog> at xhr() i mean?
[09:51:25] <gibson042> some 404s will be of the requested data type; some won't
[09:51:38] <gibson042> we want to let users handle that and make it easy for them to do so
[09:52:03] <markelog> can we parse them anyways?
[09:52:12] <markelog> $.xhr().catch( $.parseJSON ) like so?
[09:52:19] <DaveMethvin> yes, the caller can chain whatever conversion they want
[09:52:19] <gibson042> yep
[09:52:36] <DaveMethvin> that's nice also because it doesn't hide what is going on
[09:52:38] <DaveMethvin> simplifies the docs
[09:52:45] <markelog> so it solves second issue
[09:52:51] <DaveMethvin> and makes the dependency (here on $.parseJSON) explicit
[09:52:59] <markelog> but we don't want to judje what response is succeful?
[09:53:09] <gibson042> I really like the simplicity of saying "resolution happens with a complete response from the server, rejection happens with a reason why we know that to be impossible"
[09:53:18] <DaveMethvin> right, because even a 204 isn't successful if you're expecting JSON
[09:53:42] <DaveMethvin> people get confused about that all the time
[09:53:57] <DaveMethvin> when they get a successful 2xx response in http but then something bad happens later
[09:54:05] <DaveMethvin> because we've wrapped several steps into one
[09:54:11] <DaveMethvin> and put them all inside $.ajax
[09:54:25] <markelog> sec
[09:54:40] <DaveMethvin> lessee if there's anything else
[09:55:03] <gibson042> so it may not be `$.xhr(...).then( $.parseJSON )`, but rather `$.xhr(...).then( $.xhr.responseToJSON )`—since fulfillment is a single value, it needs to represent the entire response rather than just the data
[09:55:35] <DaveMethvin> the fulfilled value would be the xhr, right?
[09:55:36] <markelog> so no content for 204, it will fail $.xhr().then( $.parseJSON )
[09:55:38] <markelog> right?
[09:55:41] <gibson042> where responseToJSON is something like `function( response ) { return jQuery.parseJSON(response.data); }`
[09:55:53] <gibson042> markelog: right
[09:56:22] <DaveMethvin> yeah, we get a failure, it's just a lot clearer where/why the fail occurred since the user spells out the steps
[09:56:41] <DaveMethvin> and it's not any more verbose than { dataType: "json" }
[09:56:42] <markelog> then why we can't judje succefulness of the request on http codes?
[09:57:21] <DaveMethvin> oh you mean 204 is success but the later chain would catch the problem?
[09:57:26] <markelog> yeah
[09:57:52] <DaveMethvin> well if you call it a failure you get one value ... that would be an Error object
[09:58:00] <DaveMethvin> i suppose we could augment that someohw
[09:58:02] <DaveMethvin> how
[09:58:10] <markelog> sec
[09:58:14] <gibson042> it seems like that's assuming more adherence to HTTP RFCs than actually exists in the wild
[09:58:20] <DaveMethvin> that would mean 4xx and 5xx would be errors
[09:58:33] <DaveMethvin> and unknown responses would be ... errors?
[09:58:41] <markelog> unknown response?
[09:58:48] <DaveMethvin> like http 743
[09:58:58] <markelog> no a success i guess
[09:59:09] <markelog> since transaction is complete )
[09:59:12] <DaveMethvin> we would have to decide which ranges are success and which are failure
[09:59:22] <DaveMethvin> and whether we use a whitelist or blacklist
[09:59:26] <markelog> http 2616 already did that?
[09:59:40] <gibson042> and then let an individual request override our defaults :\
[09:59:45] <DaveMethvin> NOOO
[09:59:53] <markelog> why? no
[10:00:13] <DaveMethvin> well then we start to install all the internal "override the defaults" plumbing we had in $.ajax
[10:00:24] <markelog> what for?
[10:00:34] <markelog> we don't
[10:00:49] <markelog> they should use catch method
[10:01:09] <markelog> since in the spec it said that this is a error
[10:01:10] <DaveMethvin> so if it's 4xx or 5xx its a failure?
[10:01:25] <markelog> 5xx Server Error and 4xx Client Error
[10:01:30] <markelog> so yes
[10:01:33] <DaveMethvin> we've had people who get 4xx responses and want to process them
[10:01:35] <markelog> those are errors
[10:01:42] <markelog> they can
[10:01:45] <markelog> through catch method?
[10:02:41] <gibson042> if we ignore response code, people will have to put logic in their fulfillment handlers to throw exceptions per their needs
[10:02:47] <DaveMethvin> i think we should look at the use cases and determine what is going to make it easier to use, it might be useful to have 4xx/5xx always fail but i don't want to head too far down this road
[10:03:04] <DaveMethvin> otherwise we end up in $.ajax-land
[10:03:05] <gibson042> if we don't, people will still have to do that, but will *also* need similar logic in their rejection handlers
[10:03:06] <markelog> we need to be very careful
[10:03:24] <markelog> gibson042: that is what i'm afraid of
[10:03:41] <DaveMethvin> and i don't mind making people duplicate code for rare cases, but would like the common case to be easy
[10:04:08] <markelog> for rare yes, but they might not be rare
[10:04:10] <DaveMethvin> so if catching 4xx in the error handler does the job, i'm okay with that as long as we don't run into hassles
[10:04:26] <markelog> right
[10:04:36] <gibson042> I'd rather see `$.xhr(...).then( requireCode(/^2\d\d/) )` than us making assumptions
[10:04:56] <markelog> we could referer to spec, it says its a error we reject it
[10:05:01] <DaveMethvin> well the good thing is that it's not a lot of difference in the code
[10:05:04] <markelog> seems logical
[10:05:36] <DaveMethvin> it's mainly a question of whether the most common case gets simpler, and whether the other cases can be done without a lot of extra work
[10:05:56] <DaveMethvin> the problem with $.ajax is that every exception means another option to override internal behavor
[10:05:59] <DaveMethvin> and we don't want that
[10:06:05] <markelog> don't, no-no
[10:06:13] <markelog> no rewriting of the default
[10:06:15] <DaveMethvin> okay we're on the same page
[10:06:22] <markelog> cool )
[10:06:28] <DaveMethvin> ok just to wrap up
[10:06:41] <DaveMethvin> we have a bunch of pull requests that are ready to land ... does anyone want to do that?
[10:06:53] <DaveMethvin> i can probalby get to them tomorrow
[10:07:15] <gibson042> tomorrow is my timeframe as well
[10:07:26] <markelog> can land couple today
[10:07:42] <markelog> so i'm waiting on the letter about promises and waiting its implementation?
[10:07:46] <DaveMethvin> ok we'll let markelog lead off and then gibson042 and i can do some tomorrow
[10:08:07] <DaveMethvin> if we don't hear from jauborg by tomorrow let's forge ahead without him
[10:08:17] <gibson042> ok
[10:08:19] <markelog> ok
[10:08:26] <DaveMethvin> sweet, thanks guys!
