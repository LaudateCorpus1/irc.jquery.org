[09:07:06] <DaveMethvin> okay
[09:07:08] <DaveMethvin> thanks timmywil
[09:07:19] <DaveMethvin> nickserv doesn't like me
[09:07:27] * jaubourg like DaveMEt
[09:07:52] * jaubourg like DaveMethvin
[09:07:52] <jaubourg> olol²
[09:07:52] <timmywil> you mean chanserv?
[09:07:52] <DaveMethvin> +1 would like again
[09:08:03] <timmywil> ;)
[09:08:22] <DaveMethvin> no it won't auth me so chanserv thinks i'm not me
[09:08:36] <timmywil> oh i see
[09:08:36] <orkel> hey
[09:08:36] <DaveMethvin> this happened once before, something about the bouncer
[09:08:36] <DaveMethvin> hey orkel
[09:08:44] <DaveMethvin> who else is here?
[09:09:13] <DaveMethvin> looks like gibson042 gnarf rwaldron are on
[09:09:13] <gibson042> I'm around
[09:09:35] <jaubourg> gibson042 is arONd
[09:10:08] <DaveMethvin> okay, so https://docs.google.com/document/d/1oQ966Lq9szqP41BehdlmAJV33lgNcrE0C0tktLvIz5s/edit
[09:10:39] <rwaldron> howdy
[09:10:50] <DaveMethvin> hey rwaldron
[09:11:50] <DaveMethvin> so several of the topics relate to the build process, with/without AMD, and whether we'll have alternate implementations
[09:12:01] <DaveMethvin> so we could tackle those kind of together
[09:12:19] <DaveMethvin> in general i think custom builds are an advanced thing
[09:12:43] <DaveMethvin> since people need to know that the result won't work as documented or at least as expected (e.g., rAF)
[09:13:01] <DaveMethvin> it's a nice way for us to experiment with things though
[09:13:22] <DaveMethvin> we can create something we think is an improvement and daring people can use it
[09:14:07] <DaveMethvin> so, like, on rAF, if we reintroduce it are we likely to get a bunch of "it doesn't work right" bug reports?
[09:14:23] <DaveMethvin> probably
[09:15:40] <DaveMethvin> so we should leave rAF out then?
[09:16:08] <gibson042> I don't see much promise from it
[09:16:17] <orkel> i think either as build option or leave it be
[09:16:27] <timmywil> could be a duck-punch plugin at least
[09:16:39] <DaveMethvin> gnarf has a plugin for it already i think
[09:16:48] <timmywil> ah, cool
[09:17:07] <timmywil> well, maybe we could reassess after AMD anyway
[09:17:27] <DaveMethvin> I think AMD will make us rethink some of these deps
[09:17:30] <orkel> rAF should provide smoother animation and should better on battery live, right?
[09:17:49] <timmywil> orkel: yes, but users need to know the differences in behavior
[09:17:51] <DaveMethvin> yeah, it just breaks (bad) assumptions about animations in jQuery
[09:18:19] <orkel> how much better?
[09:18:32] <DaveMethvin> the classic is that someone wants a slide show to auto-advance every 10 secs so they use setInterval to fire off a 1sec animation
[09:18:48] <DaveMethvin> when using rAF and the window is out of view they all stack up
[09:18:59] <DaveMethvin> and then the page goes crazy when it comes back into view
[09:19:07] <jaubourg> the problem is that jQuery should promote the use of anything that saves battery.I just wish rAF wasn't a all or nothing kinda deal. It is fundamentally not compatible with how $.animate works. And I disagree that all assumprions made regarding $.animate are unreasonable. It's not unreasonable to expect a 1 sec anim not to take 3 hours to complete.
[09:19:56] <jaubourg> we'd need a cleanup setTimeout( _, 1 ) thingy at the very least
[09:20:10] <jaubourg> but it all points to separating scheduling and actual animating
[09:20:16] <DaveMethvin> i am really comfortable with having rAF be a plugin :)
[09:20:29] <jaubourg> which, as I pointed at the conf is a nightmare with the element-centric nature of $.animate
[09:20:30] <timmywil> agreed
[09:20:44] <timmywil> and custom builds -effects
[09:21:01] <orkel> +1
[09:21:18] <DaveMethvin> which is to the other point, whether there are better ways to do animation and whether it might be useful to have an alternate experimental API to try it out
[09:22:04] <DaveMethvin> if nobody has an itch to do it, I'm fine with leaving that one for now
[09:22:07] <jaubourg> CSS animations works by 1) defining an animation 2) applying it to one or several elements. That's how a new API should work if we wanted to successfully introduce rAF
[09:22:10] <timmywil> DaveMethvin: possibly, if someone has the desire to experiment with that
[09:22:18] <mikesherov> hi
[09:22:25] <DaveMethvin> jaubourg, agreed
[09:22:34] <DaveMethvin> we want something that maps well to what browsers can do
[09:22:38] <jaubourg> hey mike
[09:22:41] <orkel> does someone have that desire?
[09:22:44] <DaveMethvin> hey mikesherov
[09:22:52] <timmywil> maybe mikesherov
[09:22:58] <timmywil> DO EET MIKE
[09:23:03] <DaveMethvin> mikesherov, desire? :)
[09:23:04] <mikesherov> do what?
[09:23:10] <DaveMethvin> a new animation api
[09:23:17] <mikesherov> I'm about to go on paternity leave, so…. MAYBE?!
[09:23:24] <DaveMethvin> doesn't have to be ready until Friday
[09:23:27] <mikesherov> HAHA
[09:23:29] <timmywil> "CSS animations works by 1) defining an animation 2) applying it to one or several elements. That's how a new API should work if we wanted to successfully introduce rAF"
[09:23:33] <jaubourg> orkel: I'm not sure but I think the project (jQuery as a whole) should participate in this because it is very important and we shouldn't let it take dust... but heh
[09:24:13] <orkel> jaubourg: hmm, okey i see your point
[09:24:31] <DaveMethvin> we can also let third-party plugins fill this need, that's fine, but if we have some ideas they'll get a bit more showcasing if we do them
[09:24:35] <jaubourg> I personally don't have time to lead a new animation API thingy... also, it could be interesting to wait for the W3C animation API
[09:24:43] <mikesherov> So, the goal is to get it to a point where it can work with rAF? or is the goal to get it to emulate transitions?
[09:24:47] <DaveMethvin> and participate in that too
[09:25:13] <timmywil> mikesherov: whichever is reasonable
[09:25:26] <DaveMethvin> yeah it's brainstorming at this point
[09:25:33] <jaubourg> DaveMethvin; yeah, though I dunno what the timetable for this is
[09:25:41] <DaveMethvin> it's no hurry
[09:25:57] <DaveMethvin> mainly tryna decide what things we might want to remake
[09:26:06] <DaveMethvin> things that need work
[09:26:06] <mikesherov> 1.x or 2.x?
[09:26:11] <mikesherov> or both?
[09:26:13] <DaveMethvin> both, potentially
[09:26:23] <orkel> mikesherov: i say, it should use css-animations as much as possible
[09:26:24] <DaveMethvin> but if it's a plugin it could be just 2.x for now
[09:26:38] <DaveMethvin> it's not part of the formal API
[09:26:54] <DaveMethvin> definitely should start this stuff as plugins
[09:27:10] <DaveMethvin> and the AMD setup helps us with letting ppl do custom builds to include it
[09:27:18] <DaveMethvin> somehow... :D
[09:27:39] * mikesherov waves hands
[09:27:42] <mikesherov> AMD
[09:27:45] <mikesherov> MAGIC
[09:27:47] <DaveMethvin> so, anyway, animation is out there if someone wants it
[09:27:59] <DaveMethvin> let's talk about ajax
[09:27:59] <mikesherov> Well, I'm actually more interesting in $.fn.css
[09:28:11] <DaveMethvin> its down here somewhere
[09:28:18] <mikesherov> inerested*, but I'll poke around with animations in my non-existent spare time
[09:28:43] <DaveMethvin> so the ajax api has the biggest surface area b/c we have a single call with a huge options object
[09:29:06] <DaveMethvin> is there a way we can simplify that?
[09:29:23] <DaveMethvin> either a proper subset or some other rewrite with a new API
[09:29:53] <jaubourg> well...
[09:30:11] <jaubourg> the single entry point was always supposed to simplify things
[09:30:33] <timmywil> DaveMethvin: actually, I'm not sure what you have in mind
[09:30:37] <jaubourg> the problem is that the xhr object is getting one new option/method/peculiarity each month
[09:30:47] <jaubourg> which always translates into a new option needed in $.ajax
[09:30:49] <mikesherov> So, I gave this some thought, too
[09:30:54] <jaubourg> that doen't make sense for other transports
[09:31:31] <mikesherov> and I'm not saying I have the answer, but perhaps a way to approach this is to deprecate "options" that have incompatibilities with other options
[09:31:32] <DaveMethvin> right, i think it might work better if xhr and script weren't trying to look the same
[09:31:40] <mikesherov> DaveMethvin: exactly
[09:31:55] <jaubourg> so, it's tempting to say, "scratch that", let's have several entry points
[09:32:01] <jaubourg> but you still have common behaviour
[09:32:27] <jaubourg> so you'd probably need to pass from the monolithic system we have to a factory based one
[09:32:35] <mikesherov> jaubourg: sure
[09:32:41] <jaubourg> where you provide the transport/whatever to the ajax factory
[09:32:49] <jaubourg> to create your ajax helper
[09:33:01] <jaubourg> keeping all the common logic in place
[09:33:14] <jaubourg> you can scratch the conversion logic (not needed with promises)
[09:33:37] <jaubourg> you can have specific options for each transport that do not collide
[09:33:46] <jaubourg> but it's a massive inversion in the approach
[09:34:14] <DaveMethvin> yeah i agree it's an inversion
[09:34:15] <jaubourg> tell me if that makes sense guys
[09:34:24] <mikesherov> right, but I think jquery has in general seen that our initial approach NEEDS inversion
[09:34:43] <mikesherov> whenever we pave over too much, there's often a scaling back that needs to happen
[09:34:54] <jaubourg> I can look into this, but thet bottom line is: no more ajaxTransport, ajaxPrefilters, etc
[09:35:04] <mikesherov> *cough* $() -> $.parseHTML() *cough*
[09:35:12] <DaveMethvin> i just see people struggle with the complexity of the ajax sub-api all the time and it usually takes me a while to figure out what is going on
[09:35:28] <mikesherov> well, I think it's more than just ajaxTransport, etc...
[09:35:30] <jaubourg> not that they are used that much but the effort made to have the 1.4.x API being maintainable goes away
[09:35:38] <mikesherov> it's also about incompatible option
[09:35:45] <mikesherov> for example, "crossDomain"
[09:35:55] <DaveMethvin> I don't think the outcome needs to be a fully compatible $.ajax() API
[09:36:01] <mikesherov> which turns everything into jsonp in old browsers
[09:36:18] <DaveMethvin> if it IS there it possibly might be layered on whatever makes more sense
[09:36:32] <jaubourg> you won't prevent people from saying: "but I have a headers option for xhr, why don't I have it for jsonp", new API won't solve this, especially if it tries to minimize code duplication
[09:36:32] <DaveMethvin> that is, $.xhr and $.jsonp or something
[09:36:46] <mikesherov> jaubourg: no, you won't prevent them at all.
[09:36:57] <mikesherov> But don't provide the footgun
[09:37:10] <DaveMethvin> the docs can do a better job of explaining $.jsonp separately and what its limits are
[09:37:21] <jaubourg> well, is it a footgun? It's not like it's actually trying to send the headers if you see what I mean
[09:37:41] <mikesherov> I'd rather have people complain "why is there no async for jsonp?", rather thsan "why doesn't async work" (10 hours pass) "oh, it's jsonp!!!!"
[09:37:58] <jaubourg> got you
[09:37:59] <DaveMethvin> lol yeah
[09:38:25] <jaubourg> we're talking making the transport implicit
[09:38:33] <DaveMethvin> basically yeah
[09:38:45] <DaveMethvin> which also makes a bunch of other things clear in the process
[09:38:52] <jaubourg> so it's pretty much $.xhr and $.injectScript
[09:38:53] <DaveMethvin> like no POST or headers for jsonp
[09:38:55] <jaubourg> maybe $.xdr
[09:38:59] <mikesherov> jaubourg: sure
[09:39:04] <mikesherov> each with specific options
[09:39:19] <mikesherov> if you look at ajax docs now, each option has a set of caveats
[09:39:19] <DaveMethvin> yeah so the challenge is to refactor in a way that we prevent those from having a bunch of dup code
[09:39:21] <jaubourg> and some common
[09:39:58] <DaveMethvin> but also, if we are defining new apis for those they may not have all the options anyway so perhaps not so much dup code anyway
[09:40:27] <DaveMethvin> like, $.xhr may have progress but $.injectScript not
[09:40:31] <jaubourg> I really doubt we can make this and use it as a fundation for a backward compatible $.ajax... so it's probably good to start as a plugin, without trying and refactoring existing ajax code
[09:41:07] <DaveMethvin> yeah, and i wouldn't want backcompat to be a guiding principle for the new api anway
[09:41:11] <mikesherov> jaubourg: exactly
[09:41:17] <mikesherov> like we did in 1.9
[09:41:30] <mikesherov> free ourselves from backcompat issues with a compat library
[09:41:50] <jaubourg> DaveMethvin: the progress thingy is interesting, because it depends if you're doing an upload, or just a standard request. "progress" is high level a concept. I honestly dunno how to handle it properly
[09:41:53] <DaveMethvin> or, by just including the real $.ajax with all its code if they want that
[09:42:05] <mikesherov> DaveMethvin: right
[09:42:32] <DaveMethvin> so jaubourg are you up for doing a bit of design on this?
[09:43:13] <jaubourg> point is, the fact some options in ajax will dramatically change what happens is not random... that's how the native XHR object always worked by using low-level thingies in order to specify high-level differencies :/
[09:43:29] <mikesherov> jaubourg: point well taken
[09:43:34] <DaveMethvin> and thats cool
[09:43:50] <mikesherov> right, jQuery's job is make it APPARENT it's not random
[09:43:50] <jaubourg> yeah, I think I've taken enough room away from ajax to have a fresh perspective now
[09:43:59] <jaubourg> like I hate my code now, which is a good thing
[09:44:09] <DaveMethvin> we all hate our code
[09:44:16] <jaubourg> you scared me there ;)
[09:44:17] <mikesherov> if you don't hate your code a year after you wrote it, you're doing the wrong thing
[09:44:32] <jaubourg> or the code is a very good tradeoff
[09:44:38] <jaubourg> and you need 2 years
[09:44:45] <DaveMethvin> okay, i'll move to the next item, we're running out of time
[09:44:56] <DaveMethvin> Deferreds and Callbacks optoinal
[09:45:05] <DaveMethvin> the only use right now is in core for .ready()
[09:45:13] <mikesherov> and effects?
[09:45:21] <DaveMethvin> right effects/ajax too
[09:45:24] <jaubourg> all over effects and ajax
[09:45:26] <DaveMethvin> but those are optional modules themselves
[09:45:42] <jaubourg> crazy idea, let's make $.ready optional
[09:45:45] <mikesherov> I hate $.ready being a promise, btw
[09:45:53] <DaveMethvin> we never documented it :D
[09:46:00] <mikesherov> SOLD
[09:46:08] <DaveMethvin> people are generally misusing ready
[09:46:08] <jaubourg> mikesherov: $.when( $.ajax(...), $.ready ) is nice
[09:46:13] <jaubourg> I use it everywhere now
[09:46:21] <mikesherov> O_o oh man
[09:46:24] <mikesherov> that's awesome
[09:46:29] <jaubourg> exactly
[09:46:33] <DaveMethvin> if Deferred is included we can still have ready promise
[09:47:10] <DaveMethvin> but when timmywil goes to refactor for AMD these dependencies are gonna mess up the module deps
[09:47:12] <jaubourg> key here is that advanced user that do custom build will almost all include scripts at the end of the body
[09:47:14] <jaubourg> hint hint
[09:47:14] <mikesherov> What I dislike though is the fact that ready theoretically can be synchronous
[09:47:19] <jaubourg> maybe they don't need ready
[09:48:00] <mikesherov> when I tried to get ready to fire on readyState == interactive, it sometimes ran synchronously, and broke the web
[09:48:21] <DaveMethvin> just seems that SOOO much code uses ready that only completely custom code would work
[09:48:32] <jaubourg> mikesherov: it was always so even before using deferreds. We can always setTimeout() the hell out of it
[09:48:40] <mikesherov> jaubourg: agreed
[09:49:00] <timmywil> maybe ready should be its own module
[09:49:03] <mikesherov> I'm +1 on making $.ready.promise optional along with deferred and callbacks
[09:49:09] <mikesherov> timmywil: +1
[09:49:13] <DaveMethvin> timmywil yeah could do it that way
[09:49:29] <jaubourg> I think the best solution is to make ready itself optional
[09:49:34] <jaubourg> liek timmywil says
[09:49:37] <jaubourg> like even
[09:49:51] <mikesherov> jquip did that
[09:49:55] <timmywil> I can integrate that into AMD-fiying
[09:50:04] <DaveMethvin> ok cool
[09:50:29] <DaveMethvin> imma keep moving ... will clean up the meeting notes later
[09:50:39] <jaubourg> we can provide an alternative readyness code for when Deferred is not there, without torturing the hell out of the current logic to inverse the way the Deferred is integrated if you get my grip
[09:50:41] <timmywil> do we have a ticket for AMD yet?
[09:50:53] <timmywil> i never actually created one
[09:51:01] <DaveMethvin> timmywil oh then i'm not sure
[09:51:15] <timmywil> Ok, I'll ad one
[09:51:17] <timmywil> add
[09:51:47] <DaveMethvin> jaubourg yeah i was concerned about that, i could come up with a few simple changes to make deferred optional but they changed the order of the callbacks being called
[09:52:03] <DaveMethvin> and of course there should't be any code that depends on that ... HAHAHAHAH
[09:52:13] <DaveMethvin> users do the funniest things
[09:52:26] <DaveMethvin> alrighty then so on jquery.support
[09:52:45] <DaveMethvin> oleg asked about the perf impact
[09:52:52] <jaubourg> well, the Deferred code ensures ordering (callbacks will always be executed in the order they are provided). WHat you shouldn't rely on is shoddy "it should be asynchronous" code.
[09:53:01] <mikesherov> yeah, we should remove jQuery.support
[09:53:09] <mikesherov> Modernizr exists for that
[09:53:10] <jaubourg> surprisingly, perf impact is minimal
[09:53:21] <DaveMethvin> it just seems like it will simplify AMD if the feature test is in the same module as where it's needed
[09:53:26] <jaubourg> when I tested $.newInstance, it was faster than $.sub
[09:53:26] <mikesherov> DaveMethvin: +1
[09:53:34] <jaubourg> yet re-executing all support tests
[09:53:47] <jaubourg> iirc
[09:53:53] <DaveMethvin> i'm more worried about mobile phones
[09:53:57] <DaveMethvin> prob a lot slower there
[09:54:02] <DaveMethvin> but it's sooo hard to measure
[09:54:16] <DaveMethvin> so i'll go with the "cleaner code" argument :D
[09:54:24] <jaubourg> true, but I'm only concerned about what requires dom readyness
[09:54:34] <jaubourg> (another problem with making ready optional btw)
[09:54:45] <DaveMethvin> damn
[09:54:59] <jaubourg> sorry
[09:55:02] * jaubourg hides
[09:55:16] <DaveMethvin> well it's not a problem unless someone asks for something where we need a detect that can't run until the page is ready
[09:55:21] <jaubourg> I liked my secondare body so much, gotta hate IE8
[09:55:26] <DaveMethvin> and as we saw from that recent ticket, we're kinda screwed there
[09:56:01] <mikesherov> well, the thing is
[09:56:04] <DaveMethvin> but at least we could KNOW were are screwed for that case if we know the user is calling the API and we don't have the ability to do the feature detect yet
[09:56:18] <mikesherov> that we can do support tests lazily if we undocument them
[09:56:29] <orkel> can we?
[09:56:38] <timmywil> what about lazy support tests per-module that still attach to the object on jQuery.support?
[09:56:42] <mikesherov> in fact, just moving the tests into the modules is the first step
[09:56:59] <mikesherov> second step is make them only fire when needed
[09:57:07] <DaveMethvin> timmywil sure that sounds like a good first step
[09:57:22] <jaubourg> what I'm concerned about is the penalty of testing if support tests has been performed in a generic fashion (probably by generating methods to avoid code duplication and if ( suuportWasPerformed ) {} nightmares)
[09:57:47] <timmywil> so, jQuery.support is initialized to {} on load, but runs little to no tests
[09:57:51] <jaubourg> we're adding function calls
[09:57:55] <timmywil> tests are run as needed
[09:58:06] <DaveMethvin> i think we'll have to see what it looks like once we get there
[09:58:06] <timmywil> $.newInstance is still fine because support is simply cleared
[09:58:25] <jaubourg> so we need to make sure those "was support test done" code are bypassed as soon as we're inside jQuery
[09:58:31] <jaubourg> if that makes sense
[09:58:46] <mikesherov> yes, jaubourg
[09:58:57] <jaubourg> once I'm in core and I know support test has been controlled, let's not control it anymore
[09:59:15] <jaubourg> (I'm not talking performing it but just controlling it has been performed)
[09:59:30] <jaubourg> mikesherov: thank god, I don't even understand what I write myself :/
[09:59:39] <jaubourg> so difficult to explain simply
[09:59:48] <timmywil> jaubourg: I'm actually confused :P
[10:00:02] <DaveMethvin> once we get to the code i think it will be clearer :D
[10:00:24] <DaveMethvin> have folks got a few more minutes to run over?
[10:00:28] <timmywil> isn't keeping track of whether it was performed just a matter of checking if there is a value on jQuery.support?
[10:00:32] <DaveMethvin> we've got some more stuff here
[10:00:45] <mikesherov> jaubourg is worried about the overhead of  if ( !("supportTestName" in jQuery.support) ) { runTest(); }
[10:01:04] <jaubourg> no, I'm worried about the overhead of doing that generically
[10:01:08] <mikesherov> right
[10:01:11] <jaubourg> to avoid code duplication
[10:01:39] <jaubourg> something like $.myMethod = withSupport( runTest, runMethod );
[10:01:51] <jaubourg> to avoid having "name" in jQuery.support everywhere
[10:02:12] <timmywil> gotcha
[10:02:12] <DaveMethvin> right, although we'd probably bundle all the support tests for a single module into a single init function
[10:02:26] <timmywil> we'll get tehre
[10:02:30] <orkel> do we want to remove jQuery.support or do we want to make lazy? Or both?
[10:02:35] <jaubourg> yes, but you'd have to test for it for each method ;)
[10:02:49] <jaubourg> I'm just saying, let's be careful
[10:03:00] <mikesherov> I'm in favor of timmywil's suggestion
[10:03:01] <DaveMethvin> for now i think the plan was to make it lazy, then yell louder about how nobody should be using it anyway :D
[10:03:16] <DaveMethvin> since we won't be setting those values unless WE need them
[10:03:27] <orkel> how much code can we add to make this happen?
[10:03:45] <DaveMethvin> let's find out how much it takes and then decide if it's too much
[10:03:45] <orkel> what's the limit?
[10:03:54] <orkel> okey :-)
[10:03:59] <DaveMethvin> we're gonna grow for sure
[10:04:11] <DaveMethvin> amd will grow us a bit even if the wrappers go away
[10:04:24] <jaubourg> well, the clear advantage is that, if you know a method cannot be called before the document is ready, there is no need to test for dom readyness is support tests... so they can be performed synchronouly
[10:04:35] <jaubourg> s/is/in
[10:04:41] <mikesherov> shall we move on?
[10:04:45] <DaveMethvin> okay, next is our "visible" checks
[10:04:58] <mikesherov> FUN
[10:05:02] <DaveMethvin> i feel like i'm smoking crack for even mentioning this
[10:05:10] <timmywil> yea, I don't see a way around the reflow and make it work as expected
[10:05:20] <mikesherov> so, is the goal here to get rid of offsetWidth/offsetHeight?
[10:05:33] <DaveMethvin> yes, among other things
[10:05:40] <DaveMethvin> since they cause reflows
[10:05:49] <DaveMethvin> whereas display:none does not
[10:05:58] <mikesherov> and gCBR doesn't solve it either
[10:06:01] <timmywil> width: 0; height: 0; display: block; is still hidden to me
[10:06:21] <DaveMethvin> yeah, i know :(
[10:06:27] <mikesherov> well, can we short circuit this?
[10:06:42] <mikesherov> I mean, we already defer the reflow as long as possible, right?
[10:06:47] <DaveMethvin> i think we already do, if you mean checking display:none
[10:07:02] <DaveMethvin> the code checks that first
[10:07:11] <DaveMethvin> to avoid a reflow
[10:07:16] <timmywil> it's not so much defaultDisplay as accessing the .offsetWidth/Height property
[10:07:25] <DaveMethvin> yeah
[10:07:25] <mikesherov> right
[10:07:36] <mikesherov> although defaultDisplay can be a shit show too
[10:07:48] <mikesherov> it has the possibility of creating an IFRAME
[10:08:07] <DaveMethvin> okay, i am probably just crazy for mentioning this one
[10:08:17] <timmywil> true, but the offset property access is both a reflow and a sync layout calc
[10:08:22] <jaubourg> why is reading a value causing a reflow? Is it CSS level or are WE doing something weird?
[10:08:26] <timmywil> ok, I don't know what I'm arguing
[10:08:30] <timmywil> I don't see a solution
[10:08:35] <mikesherov> me neither
[10:08:51] <DaveMethvin> jaubourg when you ask for the width of an element it recalcs the dimensions
[10:08:52] <jaubourg> (<= stupid inside)
[10:08:57] <DaveMethvin> so let's move to te next one since we have mikesherov
[10:09:07] <jaubourg> k
[10:09:08] <DaveMethvin> our old pals offsetHeight/Width again
[10:09:15] <jaubourg> I can get up to speed later
[10:09:25] <timmywil> jaubourg: we replace the display to get a proper value in some cases (reflow) and accessing the property before other layouts are completed causes it to synchronously calculate the layout (also bad)
[10:10:18] <DaveMethvin> so i *think* we might actually solve a bunch of these "bad dims when page is zoomed" problems if we avoided offsetHeight
[10:10:25] <DaveMethvin> since it's rounding
[10:10:38] <mikesherov> DaveMethvin: yes
[10:10:42] <jaubourg> timmywil: thanks, I see now
[10:11:03] <mikesherov> we should be using gBCR.width and gBCR.height
[10:11:06] <timmywil> DaveMethvin: so retrieve a rect?
[10:11:12] <timmywil> mikesherov: gotcha
[10:11:20] <timmywil> ok, I'm fine with that
[10:11:23] <DaveMethvin> so what's the downside mikesherov? i guess people will not expect floats
[10:11:35] <mikesherov> right
[10:11:37] <DaveMethvin> WELL THEY"RE GONNA GET FLOATS
[10:11:44] <mikesherov> except we already have subpixels in some cases
[10:11:51] <timmywil> hmmm, our tests may not expect floats either
[10:11:54] <DaveMethvin> yeah, just inconsistently
[10:11:56] <timmywil> that could be fun
[10:12:19] <mikesherov> and actually, we should eventually migrate to .usedStyle
[10:12:20] <DaveMethvin> subpizzle is the shizzle now
[10:12:25] <mikesherov> which exists now
[10:12:31] <mikesherov> but that's another story
[10:12:46] <timmywil> mikesherov: didn't I just see some argument in the mailing lists about removing that?
[10:12:55] <DaveMethvin> so is it as easy as switching to gBCR mikesherov?
[10:13:09] <mikesherov> timmywil: it was just added
[10:13:29] <timmywil> ah, I must have seen the wrong side of the argument
[10:13:40] <DaveMethvin> yeah some loudmouth talked them into it
[10:13:41] <DaveMethvin> :D
[10:13:46] <mikesherov> https://dvcs.w3.org/hg/csswg/rev/7e12087e6188
[10:13:52] <mikesherov> SOME LOUDMOUTH
[10:14:20] <DaveMethvin> "look at me, i can't figure out dimensions!"
[10:14:49] <DaveMethvin> alright, getting towards the end
[10:15:10] <mikesherov> I can take that on
[10:15:19] <mikesherov> if there's a ticket you can assign me, that'd be awesome
[10:16:04] <DaveMethvin> you already own it mikesherov 9628
[10:16:09] <mikesherov> OH YEAH
[10:16:19] <DaveMethvin> rwaldron mentioned he already has a branch to try attaching data directly to elements, i want to experiment with that
[10:16:36] <DaveMethvin> so i'll take a look
[10:16:43] <DaveMethvin> still a couple of tricky issues
[10:16:55] <DaveMethvin> but if we could do that, at least for 2.x, that would be awesome
[10:17:06] <DaveMethvin> FINAL  item
[10:17:19] <DaveMethvin> courtesy of m_gol
[10:17:49] <DaveMethvin> will the usedStyle stuff fix this as well mikesherov?
[10:18:02] <mikesherov> DaveMethvin: theoretically
[10:18:14] <DaveMethvin> i saw you'd filed a bug on webkit for this
[10:18:30] <mikesherov> right now, jQuery tries to get resolved style
[10:18:36] <timmywil> I've found the thread to which I was referring. I don't we should count on usedStyle yet, but I think there will be something we can use eventually.
[10:18:39] <DaveMethvin> sounded like they planned to do it the "right" way even though that wasn't the way the spec said
[10:19:04] <mikesherov> which is "used" for width height margin padding border
[10:19:19] <mikesherov> and is used for positioned elements for top right left bottom
[10:19:28] <DaveMethvin> in the meantime do we just leave this as-is?
[10:19:40] <jaubourg> sorry guys, I have to go :/
[10:19:50] <DaveMethvin> thanks jaubourg sorry about the overrun
[10:19:59] <jaubourg> half of it is probably my fault :P
[10:20:03] <timmywil> as for which unit to return, the spec writers are talking about a Values API that will return the value in whatever unit you want
[10:20:06] * jaubourg vanishes
[10:20:09] <timmywil> that's probably the direction things are going
[10:20:38] <DaveMethvin> and then people will be upset that we always "convert to pixels" :)
[10:20:42] <timmywil> I vote we leave it as whatever value gets returned.
[10:20:57] <DaveMethvin> that's what we're doing now
[10:21:00] <mikesherov> timmywil: we should return resolved value
[10:21:03] <DaveMethvin> it's just that we think its pixels
[10:21:06] <mikesherov> DaveMethvin: no
[10:21:07] <DaveMethvin> when it's not
[10:21:24] <mikesherov> there are cases where "auto" and "em" or "%" are returned
[10:21:30] <mikesherov> which are clearly not "used value"
[10:21:32] <mikesherov> and are bugs
[10:21:39] <timmywil> oh, true enough. you're talking about .width()/.height()/etc
[10:21:44] <mikesherov> which I think we should pave over
[10:21:54] <mikesherov> no, even .css("width")
[10:21:56] <DaveMethvin> do we have a ticket for thos?
[10:22:00] <mikesherov> DaveMethvin: yes
[10:22:11] <mikesherov> they are all filed with the vendors
[10:22:49] <timmywil> mikesherov: right, but I'm not sure it's much better to normalize everything to pixels in .css
[10:22:56] <DaveMethvin> it sounds like we may want to wait that out, or are you suggesting we try workarounds in the meantime?
[10:23:27] <mikesherov> timmywil: I respectfully disagree
[10:23:41] <mikesherov> the spec says used value is an absolute value after resolving layout
[10:24:36] <mikesherov> .getComputedStyle is supposed to return "resolved value"
[10:24:42] <DaveMethvin> so the basic problem is that we WANT to return used value, but we're not getting used value?
[10:25:03] <DaveMethvin> s/used/resolved/
[10:25:24] <mikesherov> right, in some cases
[10:25:49] <timmywil> I agree what it's doing now is wrong, but universally converting to pixels ignores other valid units (and we'll have to know all properties that actually can be converted to pixels)
[10:25:52] <mikesherov> the other problem is that internally, we need computed value sometimes
[10:26:50] <timmywil> also, there's an argument to be made that it's less code to return 'auto' and file a browser bug
[10:27:04] <mikesherov> well, there are cases when we need both
[10:27:56] <timmywil> OK, having said all that, I wouldn't be opposed to seeing what converting to pixels looks like
[10:28:05] <DaveMethvin> well the clear bug cases are where the value is "1%" and we return "1px"
[10:28:12] <mikesherov> DaveMethvin: sure
[10:28:14] <timmywil> DaveMethvin: true enough
[10:28:24] <DaveMethvin> but i dunno if we can detect those situations and fix them anyway
[10:28:47] <DaveMethvin> which cases are we looking to fix here? "auto" to the actual pixels?
[10:29:05] <timmywil> the only options I see are either return as-is or do a blanket sweep like mike is suggesting
[10:29:33] <DaveMethvin> "blanket sweep" sounds big, or slow, or both :)
[10:29:58] <mikesherov> one sec
[10:30:09] <timmywil> those are my concerns, but it would be more accurate and probably more useful
[10:30:34] <timmywil> so it probably needs more investigation
[10:30:36] <mikesherov> right, I mean, ideally I'd want $.fn.css to match "resolved value" from the spec
[10:30:52] <mikesherov> and the problem there is that there is loss of information in some old browsers
[10:30:55] <mikesherov> that return auto
[10:30:59] <DaveMethvin> ugh
[10:31:00] <mikesherov> that's one issue
[10:31:03] <DaveMethvin> like ie
[10:31:27] <DaveMethvin> well if the browser is broken there is only so much we can do
[10:31:37] <mikesherov> the other issue is that ideally I'd want a secondary $.fn.css-like API that returns .computedStyle
[10:31:49] <timmywil> there's a lot we CAN do. hehe
[10:31:52] <mikesherov> like the real "computed value", so that we can get back auto when we WANT to!
[10:31:57] <DaveMethvin> yeah a second api may be needed at some point
[10:32:05] <DaveMethvin> both for users and for us
[10:32:10] <DaveMethvin> anyway i've kept you guys a while here
[10:32:14] <mikesherov> that is already needed if we ever want to really do transitions involving auto
[10:32:20] <timmywil> yea, I need some food
[10:32:23] <DaveMethvin> i'll clean up the notes here and add them to the agenda
[10:32:27] <DaveMethvin> thanks!
[10:32:27] <mikesherov> bye!
