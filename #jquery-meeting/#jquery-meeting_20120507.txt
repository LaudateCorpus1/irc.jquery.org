[09:00:37] <DaveMethvin> .
[09:00:38] <bot-t> (5 hours 40 mins ago) <jzaefferer> tell davemethvin jq-jenkins is back, but there's still plenty work to do: http://swarm.jquery.org/job/40
[09:01:25] <mikesherov> here
[09:04:47] <DaveMethvin> hey everyone
[09:05:02] <DaveMethvin> sorry, my cat walked on the kbd and wiped  out half the april 25 meeting agenda
[09:05:08] <DaveMethvin> i have to get it back later
[09:06:00] <DaveMethvin> who's here? rwaldron maybe?
[09:06:06] <DaveMethvin> looks like a slow day
[09:06:16] <mikesherov> me
[09:06:19] <mikesherov> I'm here
[09:06:26] <DaveMethvin> hey mikesherov what's your thought on the quirks mode issue?
[09:06:29] <DaveMethvin> hey jaubourg
[09:06:34] <jaubourg> hey Dave, hey all
[09:06:56] <DaveMethvin> really, jQuery.support.boxModel is a lie
[09:07:10] <mikesherov> So, there are times when we rely on "CSS1Compat" not as boxModel
[09:07:20] <mikesherov> it's my fault really
[09:07:40] <DaveMethvin> well as important as blame is, i prefer solutions :P
[09:07:58] <jaubourg> pfff, blaming is so much more fun
[09:08:01] <jaubourg> :/
[09:08:04] <DaveMethvin> no matter what it's kind of flakey once people can make their box model anything they want
[09:08:18] <DaveMethvin> on an element-by-element basis
[09:08:37] <jaubourg> what a wonderful idea that was btw
[09:09:00] <DaveMethvin> if they had just admitted microsoft was right in the first place, this never would have happened
[09:09:10] <DaveMethvin> i guess it was hard to imagine  that being the case
[09:09:15] <jaubourg> hehe
[09:09:26] <DaveMethvin> i mean, who would OPT IN to the stupid w3c box model?
[09:09:52] <jaubourg> question is: how are we supposed to handle the situation, no matter how we detect stuff it's what we assume to be true once we feature detected that is important
[09:10:15] <jaubourg> what do we want to achieve?
[09:10:24] <DaveMethvin> measuring the element properly :P
[09:10:42] <jaubourg> and we're sure nobody will come with a third model?
[09:10:55] <DaveMethvin> box-model: cardboard
[09:11:08] <mikesherov> I just converged things that were there for different purposes
[09:11:21] <jaubourg> jeez
[09:11:38] <jaubourg> what a mess they gave us... AGAIN
[09:11:42] * jaubourg hugs mike
[09:11:44] <mikesherov> I like border-box
[09:11:50] <gibson042> hello
[09:11:53] <mikesherov> it's really not bad, but that's besides the point
[09:11:54] <jaubourg> hey gibson
[09:11:54] <rwaldron> Here!
[09:11:57] <rwaldron> Sorry I'm late
[09:12:05] <jaubourg> hey rwaldron
[09:12:08] <DaveMethvin> whose line is it anyway?
[09:12:24] <jaubourg> who's in first base?
[09:12:28] * jaubourg hides
[09:12:30] <mikesherov> the question is, we call it "quirks mode"
[09:12:45] <mikesherov> but what we really mean is "oldIE specific quirks mode"
[09:12:51] <DaveMethvin> but most likely, people were using jQuery.support.boxModel to assume every element used the same box measuring scheme
[09:12:51] <jaubourg> exactly
[09:13:06] <DaveMethvin> werent' they?
[09:13:09] <jaubourg> because that was the case before the standard body went nuts
[09:13:25] <DaveMethvin> and we can't guarantee that to be the case anymore
[09:13:28] <jaubourg> and yes, I know I did
[09:13:44] <jaubourg> yes again
[09:13:49] <mikesherov> Oh, I have no idea why people were using jQuery.support.boxModel
[09:13:54] <mikesherov> I just know why we were using it
[09:13:59] <DaveMethvin> so any code that depended on that is broken code
[09:14:04] <jaubourg> mikesherov: as a weak IE sniff
[09:14:05] <mikesherov> no, it isn't
[09:14:44] <mikesherov> oh, yeah, right
[09:14:45] <DaveMethvin> i meant any user code that used jQuery.support.boxModel to assume a global box model measurement
[09:15:01] <mikesherov> Right, I don't know what the users expected out of that
[09:15:07] <jaubourg> when the community switched from browser sniffing to feature detection, people started make all weird feature INFERENCES in their code
[09:15:24] <jaubourg> I guess support.boxModel was at the party
[09:15:25] <mikesherov> inferences are dumb though
[09:15:29] <DaveMethvin> it's just that the features got a lot more specific
[09:15:31] <jaubourg> indeed they are
[09:15:38] <DaveMethvin> so now it's not one rule for the whole page
[09:15:48] <DaveMethvin> and i KNOW that breaks a lot of code
[09:16:00] <jaubourg> how do we want to EXPOSE this from an API point of view, that's the question
[09:16:06] <DaveMethvin> but again there isn't much we can do
[09:16:07] <jaubourg> then we can look into backcompat
[09:16:10] <mikesherov> right, I mean, we NEED to remove boxModel as an expectation in userland
[09:16:36] <jaubourg> do we add a $.fn.boxModel?
[09:16:39] <mikesherov> NO
[09:16:41] <DaveMethvin> no
[09:16:50] <jaubourg> (just asking guys :P)
[09:16:51] <mikesherov> we need to just remove jQuery.support as a public interface
[09:16:57] <DaveMethvin> internally we should be measuring it all right
[09:17:04] <mikesherov> and anything that is a proxy for that as well
[09:17:04] <DaveMethvin> agreed, it's deprecated as of 1.8
[09:17:12] <jaubourg> all of support?
[09:17:24] <mikesherov> Yeah
[09:17:34] <jaubourg> ><
[09:17:37] <mikesherov> I mean, we should remove support tests when they aren't useful to the internals
[09:17:41] <DaveMethvin> yes
[09:17:42] <jaubourg> that will so byte us in the ass
[09:17:48] <mikesherov> having a public interface requires weird deprecation windows
[09:18:01] <mikesherov> we can make a plugin
[09:18:12] <jaubourg> I'm all for not having to handle support on the surface of the API
[09:18:14] <rwaldron> Hm
[09:18:15] <DaveMethvin> right so if the current .support has something we don't need, but it's public, we have to drag it around and run it on ready anyway
[09:18:18] <rwaldron> this is documented stuff
[09:18:22] <jaubourg> but some of these support thingies are used by users
[09:18:31] <mikesherov> right, it's currently documented
[09:18:41] <DaveMethvin> yes, so the goal is to deprecate it
[09:18:47] <rwaldron> ok
[09:18:54] <mikesherov> I already removed 4 support tests though in 1.8
[09:18:57] <jaubourg> hmmm, not sure I'm 100% behind you guys on this one
[09:18:59] <DaveMethvin> as a warning that we aren't going to give people a full version for change at least
[09:19:03] <rwaldron> I think that will result in a lot of negative response
[09:19:13] <rwaldron> yeah, I'm with jaubourg here
[09:19:18] <DaveMethvin> the api is really badly thought out
[09:19:23] <rwaldron> users are gonna be pissed.
[09:19:26] <jaubourg> it is, so let's make a good one
[09:19:35] <mikesherov> 4 tests specifically to prop up the old offset code that was removed for 1.8
[09:20:01] <DaveMethvin> and for ones like jQuery.support.boxModel the implication of the variable no longer even applies
[09:20:05] <jaubourg> I know there are support tests for cors in ajax that people will want to read and/or modified on non-compliant browsers
[09:20:10] <DaveMethvin> every element on the page can have its own boxModel
[09:20:11] <rwaldron> Louis Tully: Boy, the superintendent's gonna be pissed!
[09:20:17] <rwaldron> http://www.imdb.com/character/ch0000564/quotes
[09:20:44] <DaveMethvin> hold on here for a second
[09:21:23] <DaveMethvin> the main point of deprecation is that we don't have the same formal requirement to provide long lead times for removing stuff and may not be fixing things identified as "bugs"
[09:21:31] <DaveMethvin> it doesnt' mean it HAS to be removed
[09:21:41] <jaubourg> yeah, but it's a slippery slope
[09:21:51] <rwaldron> I know
[09:21:57] <jaubourg> I prefer undocumented to deprecated
[09:21:58] <rwaldron> but it was fun to quote Ghostbusters
[09:22:18] <DaveMethvin> in mikesherov's case we definitely want deprecated
[09:22:27] <DaveMethvin> those support tests were for stuff we don't need anymore
[09:22:35] <jaubourg> yes, but let's not get over our heads and throw the baby with the bath water so to speak
[09:22:46] <mikesherov> I mean, really, support tests get added explicitly when we internall need them
[09:22:49] <timmywil> weird, irc said I was on
[09:22:55] <mikesherov> why should they get removed when we no longer do?
[09:23:04] <mikesherov> why shouldn't*
[09:23:10] <DaveMethvin> each support test is a separate baby though,  this analogy makes me nervous
[09:23:21] <DaveMethvin> some babies deserve to be thrown out
[09:23:26] <jaubourg> ouch
[09:23:43] <jaubourg> you'll be misquoted on this one Dave, you realize that
[09:23:48] <jaubourg> :P
[09:24:08] <DaveMethvin> waaahh!
[09:24:23] <mikesherov> well, sure. sure they do. So we deprecate the whole set, and say that they can be removed when the internals no longer need them, if we see fit
[09:24:40] <DaveMethvin> right, so ppl can still use them but we're not obligated to provide long lead times
[09:24:55] <jaubourg> mikesherov: the problem with purely internal stuff is that it's completely not adaptable... for instance, we don't wanna support widget environment and stuff, but effectively, people can make jQuery work in them by tweaking support test results
[09:24:57] <DaveMethvin> and for stuff like .boxModel we won't take shit when ppl realize it can be fooled
[09:25:47] <jaubourg> now, let's deprecate it and see the uproar
[09:25:57] * jaubourg takes some pop-corn
[09:25:58] <DaveMethvin> anyway i think we need the flexibility to remove individual properties from jQuery.support
[09:25:59] <jaubourg> ;)
[09:26:12] <mikesherov> sorry, but we can't deprecate things we already removed
[09:26:20] <mikesherov> I for example, already removed 4 tests
[09:26:33] <jaubourg> mikesherov: i was talking about support as a whole
[09:26:39] <DaveMethvin> people  have asked for almost a complete frickin moderniz in jQuery.support and our policy has always been it only contains things WE need
[09:27:00] <jaubourg> and I feel like we're removing stuff from the lib as if our life depended on it and I'm not sure I'm that ecstatic about it
[09:27:03] <DaveMethvin> so if WE don't need it we should be able to take it out
[09:27:10] <timmywil> DaveMethvin: +1
[09:27:14] <DaveMethvin> which properties in particular jaubourg?
[09:27:39] <jaubourg> I'm talking about pushing for removing features... not support in particular
[09:27:40] <mikesherov> ok, I'm just dense here, I'm not sure what we're reccomending to do about the properties I already removed?
[09:27:50] <DaveMethvin> leave em out mikesherov
[09:27:54] <mikesherov> OK
[09:28:09] <DaveMethvin> jaubourg, for example jquery.support.cors?
[09:28:29] <jaubourg> look, we only have documented/undocumented and deprecated... I feel like we need some "support" levels so to speak
[09:28:38] <jaubourg> people need stuff documented that we need to be able to change
[09:28:39] <mikesherov> pun intended?
[09:28:56] <jaubourg> we don't have a right model that's all I'm saying
[09:29:04] <jaubourg> it's all or nothing for now
[09:29:26] <jaubourg> "you can count on it" / "you can't" or "one version warning"
[09:29:56] <DaveMethvin> i think we need some concrete examles
[09:30:06] <mikesherov> Here's a concrete example:
[09:30:13] <timmywil> I have to run to a lunch, but I'll stay on mobile so you can ping me. Work has been crazy busy. I'm at a startup and we just got the app mostly done last Friday. I should have more time for Sizzle this week. It could actually be pushed now, but there are no added features yet.
[09:30:27] <DaveMethvin> k thanks timmywil
[09:30:36] <jaubourg> well, support is: we removed properties from it and we're talking about deprecating the whole thing to be able to do so on a regular basis
[09:30:45] <jaubourg> does not compute
[09:31:02] <jaubourg> deprecating and unstable are two different things
[09:31:09] <DaveMethvin> jaubourg: is it the word "deprecated" that bothers you or the ability to remove stuff on a regular basis?
[09:31:27] <mikesherov> jquery.support.pixelMargin: I added it because Safari 5.0 and chrome <17 uses percentages on rigth margin for getComputedStyle
[09:31:44] <jaubourg> deprecated mostly
[09:31:51] <DaveMethvin> i don't have a problem tagging jQuery.support as "WARNING: the stuff here can change on a version-to-version basis, even minor versions, as needed"
[09:31:57] <jaubourg> I feel we need something for these parts on the surface we want to keep unstable
[09:32:00] <DaveMethvin> and not using the "d" word
[09:32:09] <mikesherov> now, when we no longer support either of those browsers, should we not be able to remove those tests without having to have a whole MAJOR release before removing it?
[09:32:21] <jaubourg> deprecated sound like "near-dead" to me and I'm sure to a lot of users
[09:32:25] <DaveMethvin> it sounds like we're just talking about nomenclature then
[09:32:35] <jaubourg> yep, but it's damn important
[09:32:52] <DaveMethvin> sure, let's call jQuery.support "unstable" and try to avoid documenting stuff we want to change
[09:33:02] <jaubourg> I'd say document nothing
[09:33:10] <jaubourg> but that's just me
[09:33:20] <rwaldron> Right
[09:33:27] <timmywil__> +1
[09:33:30] <rwaldron> I don't like the idea of users relying on support.*
[09:33:35] <DaveMethvin> well we've already let that cat out of the bag jaubourg but going forward I'd say lets do not document
[09:33:36] <mikesherov> so then we should just in plain english tell users what we're doing: don't rely on this stuff because we reserve the right to remove it whenever we deem it not useful for internals
[09:33:37] <rwaldron> at all
[09:33:40] <jaubourg> we really need a site with tutorials and tricks to feel the gap between API doc and this kind of stuff
[09:33:45] <DaveMethvin> mikesherov: +1
[09:33:51] <rwaldron> mikesherov +1
[09:34:02] <jaubourg> +1
[09:34:08] <timmywil__> 901
[09:34:48] <DaveMethvin> ok then
[09:35:03] <DaveMethvin> thoughts about needed changes to jQuery.support.boxModel then?
[09:35:29] <DaveMethvin> as long as people use the built-in jQuery methods for dimensions they should get the right answer
[09:35:37] <mikesherov> right, so here's the question that's relevant, when we say quirks mode, do we mean oldIE quirks mode, or any quirks mode?
[09:35:37] <jaubourg> I guess the document has a default box model?
[09:35:59] <DaveMethvin> mikesherov i think jaubourg's answer
[09:36:03] <mikesherov> because right now, boxModel is a proxy for any quirks mode
[09:36:32] <jaubourg> yep
[09:36:55] <DaveMethvin> JUST PUT IN A DAMNED DOCTYPE PEOPLE
[09:36:59] <mikesherov> OK, I can change it back to do measurements and determine the box model in use, but is that useful?
[09:37:00] <jaubourg> except we only handle old IEs properly in the else close
[09:37:30] <mikesherov> I don't think it's useful, and the other places it's used are inferences
[09:37:35] <DaveMethvin> not if someone does div { box-model: border-box }
[09:37:56] <mikesherov> right, I can check for that though
[09:38:04] <jaubourg> well, most pages will have a single box model, the default one of the whole document
[09:38:07] <mikesherov> I can check for all that stuff, if we determine it's useful
[09:38:20] <mikesherov> I pretty already have the code
[09:38:25] <mikesherov> pretty much*
[09:38:36] <mikesherov> again, the question is, why? why is it useful?
[09:38:53] <DaveMethvin> it's useful for backcompat if ppl are using that to determine dimensions
[09:38:54] <DaveMethvin> that's it
[09:39:09] <DaveMethvin> but internally we don't care
[09:39:17] <mikesherov> ok, but that doesn't make sense
[09:39:22] <DaveMethvin> lol
[09:39:31] <DaveMethvin> you mean the part about people using it?
[09:39:46] <mikesherov> determining the width of an element we arbitrarily add to the page and strip of all modifications says nothing
[09:40:05] <mikesherov> it's a meaningless variable in the truest sense of the word
[09:40:19] <jaubourg> then set it to true and be done with it ;)
[09:40:24] <DaveMethvin> lol
[09:40:27] <mikesherov> HAHAAH
[09:40:45] <DaveMethvin> cmon jaubourg you can do better than that, random numbers
[09:40:47] <mikesherov> The only way in which it was useful was to determine if we're in quirks mode
[09:40:47] <gibson042> ^5 jaubourg
[09:41:08] <jaubourg> $.support.boxModel = "makeaguess";
[09:41:13] <mikesherov> which we're telling people not to do, and we don't support
[09:41:30] <DaveMethvin> and there are lots of reasons not to use quirks mode
[09:41:36] <mikesherov> I think personally, we should take a stand and say, for real, no more quirks mode
[09:41:44] <DaveMethvin> i am totally good with that
[09:41:59] <DaveMethvin> mainly i brought up the topic to be sure it wasn't just me
[09:42:00] <mikesherov> in fact, we're so against it, that our code breaks right in your face if you use quirks mode
[09:42:07] <jaubourg> well, if we can remove this and have internals working, lets actually put it to true so that existing code doesn't crash... I'm being serious
[09:42:26] <jaubourg> the worse that can happen is people doing weird stuff getting weird results
[09:42:26] <mikesherov> just the same way we don't play nice with those who mess with object prototype
[09:42:30] <jaubourg> they can adjust their code
[09:42:45] <DaveMethvin> jaubourg: i'm good with that
[09:42:46] <mikesherov> OK, So there are 3 things here:
[09:43:27] <mikesherov> 1. always return true. 2. stop using it in our code. 3. evaluate all uses to see if it was really a proxy for something else
[09:43:37] <jaubourg> exactly
[09:43:56] <DaveMethvin> yay
[09:44:01] <jaubourg> I'm confident we can deal with #3 when it comes to the bug tracker
[09:44:07] <mikesherov> right
[09:44:20] <mikesherov> and 1.8 requires a doctype
[09:44:28] <jaubourg> right
[09:44:37] <mikesherov> for example, in effects: iframeDoc.write( ( jQuery.support.boxModel ? "<!doctype html>" : "" ) + "<html><body>" );
[09:45:08] <mikesherov> becomes: iframeDoc.write( <!doctype html><html><body>" );
[09:45:13] <mikesherov> oops, missing quotes
[09:45:24] <mikesherov> ok, anyone feel otherwise?
[09:45:28] <jaubourg> OMG MISSING QUOTES!!!1111
[09:45:32] <jaubourg> ahem
[09:45:40] <timmywil__> So offenses
[09:45:41] <jaubourg> you have my +1
[09:45:50] <DaveMethvin> nope, that sounds good to me ... and noted in the agenda
[09:45:54] <mikesherov> k, cool
[09:46:08] <mikesherov> and that's good for 1.8? If so, I'll have a PR tongiht
[09:46:15] <DaveMethvin> yes
[09:46:41] <DaveMethvin> mikesherov: make a ticket as well
[09:46:57] <mikesherov> will do.
[09:47:26] <DaveMethvin> btw jaubourg thanks for your bustling activity the past few days
[09:47:41] <jaubourg> pff, I just did one or two things, no biggy
[09:47:42] <rwaldron> mikesherov +1
[09:47:49] <DaveMethvin> i am in the process of creating trac tickets for the deprecations
[09:48:05] <DaveMethvin> so if you see any and would like to comment please do
[09:48:15] <DaveMethvin> they are taken from that big spreadsheet
[09:48:34] <mikesherov> http://bugs.jquery.com/ticket/11721
[09:48:35] <DaveMethvin> i have the blog post in progress as well
[09:48:47] <DaveMethvin> so i planned on writing a blog post with some highlights
[09:48:58] <DaveMethvin> then link to the tickets so people could bitch there
[09:49:30] <jaubourg> k
[09:50:06] <DaveMethvin> the new swarm stuff looks really pretty
[09:50:13] <DaveMethvin> i have a link to one in the minutes
[09:51:06] <DaveMethvin> i need to get the ccao branch back into shape so it can be tested
[09:51:22] <DaveMethvin> but i wanted to also explore a custom build process
[09:51:40] <DaveMethvin> so, with some options someone could build a version without effects
[09:51:52] <DaveMethvin> and test the subset
[09:52:05] <jaubourg> +1
[09:52:09] <DaveMethvin> i just got grunt running smoothly on windows this weekend
[09:52:32] <DaveMethvin> not sure what it will take but it seems like effects in particular shoudln't be too hard
[09:52:48] <DaveMethvin> perhaps the unit test could just check for the presence of the .animate() api
[09:52:53] <DaveMethvin> and skip if it's not there
[09:53:15] <DaveMethvin> thoughts?
[09:53:20] <mikesherov> right, what's nice too is that we moved a lot of stuff to css from effects
[09:53:44] <mikesherov> so the dependencies aren't as heavy
[09:53:47] <jaubourg> can we hide()/show() without effects (no args)?
[09:53:58] <mikesherov> hide/show are effects
[09:53:58] <DaveMethvin> i would say not
[09:53:58] <jaubourg> we can't right?
[09:54:06] <mikesherov> can not
[09:54:19] <jaubourg> that's a pity really
[09:54:21] <DaveMethvin> really, it's class names all the way baby
[09:54:30] <DaveMethvin> oh that was another thought, would it be even thinkable to remove .css()?
[09:54:32] <jaubourg> lol
[09:54:39] <DaveMethvin> if someone used just classes
[09:54:50] <DaveMethvin> i haven't looked for internal uses
[09:54:57] <timmywil__> I think so
[09:55:08] <DaveMethvin> that would be a huge win size wise
[09:55:23] <mikesherov> effects needs css obviously, but you can strip out css too
[09:55:29] <DaveMethvin> it would still be useful to have position and offset
[09:55:32] <jaubourg> I tried to handle the dependencies extractor but fell short on callbacks in unit tests joining stuff that shouldn't be dependant
[09:55:35] <timmywil__> Most of css is correcting computed values, but effects...right
[09:56:04] <DaveMethvin> yeah there needs to be some refactoring of the unit tests
[09:56:10] <mikesherov> css also supplies some sizzle filters
[09:56:11] <DaveMethvin> and of the source files no doubt
[09:56:19] <jaubourg> oh, it's not the unit tests fault
[09:56:25] <jaubourg> it's just that $
[09:56:27] <DaveMethvin> but it doesn't seem too awful
[09:56:37] <jaubourg> $.each(function() { /* jquery code */ }
[09:56:48] <jaubourg> could have created dependencies between each and the code inside :P
[09:56:58] <jaubourg> so I need to parse jQuery to do it properly
[09:57:10] <jaubourg> (in order to remove false positives)
[09:57:34] <mikesherov> dimensions relies on css as well
[09:57:42] <mikesherov> css is pretty central
[09:58:35] <DaveMethvin> oh well, if we could make animations optional i think that would be a plus for mobile-focused apps
[09:58:49] <DaveMethvin> but if we could do more, even better
[09:59:02] <DaveMethvin> i think that will be a lot easier for most people compared to ccao
[09:59:10] <mikesherov> exactly
[09:59:11] <DaveMethvin> and something that even we can figure out
[09:59:18] <jaubourg> if we "protected" domManip's dependency on ajax, we could remove it too
[09:59:31] <jaubourg> like if ( !jQuery.ajax ) { throw "no ajax" ; }
[09:59:35] <DaveMethvin> yeah
[09:59:57] <DaveMethvin> i never liked the idea that jquery will eagerly run scripts wherever they are placed
[10:00:10] <jaubourg> you could even remove such or such transport
[10:00:11] <mikesherov> right, and we can just mention that as well.
[10:00:31] <DaveMethvin> and i don't think that is something ccao can do, can it?
[10:00:35] <DaveMethvin> i mean, it's referenced
[10:00:38] <mikesherov> if you don't include ajax, you can't inject scripts in html
[10:01:06] <jaubourg> Dave: removing transports? it's a no go in ccao
[10:01:13] <jaubourg> a lot of stuff is a no-go in ccao
[10:01:24] <DaveMethvin> yeah it doesn't have knowledge of the dynamic paths
[10:01:42] <DaveMethvin> or, we could have an alternate "bare ajax" plugin that implemented a really small subset of ajax perhaps
[10:01:51] <mikesherov> yeah
[10:02:11] <DaveMethvin> or they could just use that jsonp plugin some guy write
[10:02:13] <DaveMethvin> wrote*
[10:02:19] <jaubourg> haha
[10:02:33] <jaubourg> I use $.params in there :P
[10:03:10] <DaveMethvin> $.param would be small if it wasn't for $.ajaxSettings.traditional=true
[10:03:31] <DaveMethvin> oh well
[10:03:41] <jaubourg> yeah, these kind of coupling is the real problem
[10:03:48] <jaubourg> no way closure will optimize that
[10:04:12] <DaveMethvin> that kind of analysis works really well for static compiled languages
[10:04:16] <DaveMethvin> not so well for stuff like ours
[10:04:32] <jaubourg> well, I have yet to see a compiler removing part of a data structure
[10:04:41] <DaveMethvin> yeah good example
[10:04:56] <DaveMethvin> i jumped around a little bit in the agenda but i think we covered it all
[10:04:59] <DaveMethvin> anything else?
[10:05:05] <jaubourg> we love you Dave
[10:05:09] <DaveMethvin> you're late bot-t
[10:05:10] <bot-t> DaveMethvin, Is that a question?
[10:05:11] <jaubourg> apart from that, nothing
[10:05:15] <DaveMethvin> awwww
[10:05:28] <DaveMethvin> ok guys, thanks a lot!
[10:05:39] <mikesherov> later!
[10:05:46] <jaubourg> later guys, I gotta fly
