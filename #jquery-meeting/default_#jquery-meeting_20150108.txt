[11:02:02] <arschmitz> agcolom: cgack: gabriel_schulhof: ianmaffett: jasperdegroot: sfrisk: Meeting Time!
[11:02:14] <sfrisk> yo
[11:02:18] <jasperdegroot> hi all
[11:02:27] <cgack> howdy
[11:02:39] <ianmaffett> hello
[11:03:20] <arschmitz> new agenda https://docs.google.com/spreadsheets/d/1xGEVtftLDEHAA37YYlA23J_EZwIRyMUaseBY790byPM/edit#gid=0
[11:03:37] <lisa_deluca> howdy
[11:03:46] <arschmitz> lisa_deluca: sorry
[11:03:49] <arschmitz> Hi!
[11:03:56] <lisa_deluca> arschmitz: no problemo
[11:03:57] <arthurvr> btw, donâ€™t forget to update the agenda on meetings.jquery.org :-)
[11:04:15] <arschmitz> lisa_deluca: glad you were paying attention
[11:04:19] <arschmitz> arthurvr: already on it
[11:06:14] <arschmitz> ok so lets get started
[11:06:41] <arschmitz> Next round of updates have landed for Classes and Button
[11:07:27] <arschmitz> Looks like once again the api has stabilized. So iv pulled the changes into ui-1-12 and am currently merging in jasperdegroot css updates
[11:07:38] <jasperdegroot> cool
[11:07:57] <jasperdegroot> I will look into the demo pages that need attention after you've merged
[11:08:06] <arschmitz> jasperdegroot: sounds good
[11:09:20] <arschmitz> So that means gabriel_schulhof and cgack we can start on the classes pr's again
[11:09:36] <gabriel_schulhof> Sorry I'm late!
[11:09:44] <cgack> \o/
[11:09:52] <gabriel_schulhof> *whew*
[11:11:50] <arschmitz> gabriel_schulhof: ok so i was saying updates have landed upstream in ui
[11:12:08] <gabriel_schulhof> Yeah. Read that. The "*whew*" was for that :)
[11:12:40] <arschmitz> awesome
[11:12:52] <gabriel_schulhof> Can't wait to get started on that.
[11:13:06] <arschmitz> one thing to be mindful of i ran into
[11:13:21] <arschmitz> never do toggleClass on the same element twice in a row
[11:13:32] <arschmitz> even with different arguments
[11:13:37] <gabriel_schulhof> ... because?
[11:13:46] <arschmitz> you must always remove classesthen add them
[11:13:57] <arschmitz> or if someone sets the same value for a classes on both keys
[11:14:05] <arschmitz> you will remove the theme class after you add it
[11:15:20] <arschmitz> Another thing not sure if this is an issue anywhere in mobile
[11:15:42] <gabriel_schulhof> arschmitz: So, what separation is required between two subsequent toggleClass calls? I mean, what if two option values change at the same time and they both affect the same element?
[11:16:30] <arschmitz> gabriel_schulhof: its up to you to ensure you dont remove classes that should be there
[11:16:43] <arschmitz> its just the nature of having a classes hash
[11:17:07] <gabriel_schulhof> Well, OK, but if the new API works in non-obvious ways, that could lead to bugs.
[11:17:36] <gabriel_schulhof> I guess we'll see it in action soon enough.
[11:17:41] <arschmitz> we should have tests checking the effects of classes changes
[11:18:00] <arschmitz> This has only come up in one place in all of ui and tests caught it instantly
[11:18:08] <gabriel_schulhof> Oh, boy! Should we ever. That'll be a d00zy of a task getting all those tests in.
[11:18:44] * gabriel_schulhof cracks his knuckles ...
[11:18:51] <arschmitz> classes it self you dont need to test
[11:19:01] <arschmitz> just test setting the other options
[11:19:28] <arschmitz> and make sure the classes on the element are correct after each option change
[11:19:42] <arschmitz> there was some talk of making an automated test for this in ui this morning
[11:19:55] <cgack> I assume we'll just check out your changes in UI to figure out the new api, or is there a doc/issue we can read through?
[11:20:06] <gabriel_schulhof> Well, we need to make sure that this._(add|remove|toggle)Class gets called at all the right times. That's up to the widget.
[11:20:28] <gabriel_schulhof> cgack: I think it's a lot like ._on() and ._off()
[11:20:33] <arschmitz> cgack: you can check out the pr or just ask me
[11:20:48] <gabriel_schulhof> cgack: Only the second argument is classes, not handlers.
[11:20:48] <arschmitz> Ill be doing a pr for the api docs shortly
[11:21:05] <arschmitz> the api is
[11:21:20] <cgack> cool, sounds good
[11:21:22] <gabriel_schulhof> Right, the API, sorry.
[11:21:29] <arschmitz> this._addClass( elements, keys, extra )
[11:21:42] <arschmitz> this._removeClass( elements, keys, extra )
[11:21:55] <arschmitz> this._toggleClass( elements, keys, extra, bool )
[11:22:02] <arschmitz> elements is optional in all 3
[11:22:08] <arschmitz> and defaults to this.element
[11:22:36] <arschmitz> keys is not optional if you are not passing any pass null
[11:22:46] <arschmitz> extra is only optional in add and remove
[11:22:52] <arschmitz> its required in toggle and so is bool
[11:23:49] <arschmitz> another thing to be mindful of
[11:24:00] <arschmitz> is we now cant change classes on one widget from another
[11:24:17] <arschmitz> with out going through that widgets classes option
[11:24:47] <arschmitz> you can also get an instance and use the methods on that
[11:25:04] <arschmitz> but we want to avoid this unless its the same widget tyoe
[11:25:12] <gabriel_schulhof> We don't have a lot of that ... custom select at most, I guess ...
[11:25:13] <arschmitz> like panel on another panel or something
[11:25:22] <arschmitz> Yeah im hoping we dont
[11:25:30] <arschmitz> the only cases in ui were radio buttons
[11:25:46] <arschmitz> and controlgroup does lots of classes option setting
[11:26:27] <gabriel_schulhof> How fortunate then that we get all that free from UI :)
[11:27:59] <arschmitz> ok unless there is something else related to classes / button lets move on
[11:28:06] <jasperdegroot> how about slider and rangeslider?
[11:28:14] <jasperdegroot> re: changing classes on another widget
[11:28:41] <arschmitz> jasperdegroot: they will have to do that
[11:29:49] <gabriel_schulhof> I just hope this isn't going to bring startup performance waaay down :/
[11:30:03] <gabriel_schulhof> I suppose people can always pre-render.
[11:30:21] <arschmitz> it should not make a real difference
[11:30:36] <arschmitz> browsers cache re-flows
[11:30:51] <arschmitz> unless you query something requireing the dom to be re-rendered
[11:31:53] <arschmitz> and the function call overhead is minimal since we should be saving instances and its just some array itteration basicly
[11:32:32] <arschmitz> gabriel_schulhof: if you recall when the college did the tests on enhanced option it didnt make nearly as much difference as expected
[11:33:17] <gabriel_schulhof> arschmitz: It made a pretty big difference in the demos when I pre-remdered all the collapsibles in the main menu.
[11:34:05] <gabriel_schulhof> So, it starts to add up when you have, like, 30-40 widgets.
[11:34:24] <arschmitz> gabriel_schulhof: our demos are a terrible example
[11:34:43] <arschmitz> you should never be making individual pages so complex and with some many widgets on a single page in real practice
[11:35:41] <arschmitz> if you put enough of anything on a page its going to start adding up
[11:36:25] <gabriel_schulhof> arschmitz: Right, but there aren't too many ways of doing a two-level tree structure other than a UL + collapsibles, and ULs can get large fast.
[11:36:36] <gabriel_schulhof> But yeah, generally, I totally agree.
[11:36:46] <arschmitz> like our search in the demos is TERRIBLE that should be querying remote data not rending the whole thing in the dom and just hining elements
[11:37:20] <gabriel_schulhof> I guess we should make an issue, because our demos are never expected to run without Ajax, right?
[11:37:33] <arschmitz> gabriel_schulhof: as far as multi level tree structures http://jqueryui.com/menu/
[11:37:48] <arschmitz> single widget
[11:38:20] <jasperdegroot> gabriel_schulhof: I think it shows a warning when you run demos without Ajax
[11:39:15] <arschmitz> gabriel_schulhof: and menu is on our list of widgets to merge next
[11:39:21] <arschmitz> because its used by selectmenu
[11:40:04] <gabriel_schulhof> ... and speaking of which: Did you get my message? It's super-easy to make UI's selectmenu alternately show a native/non-native menu!
[11:40:14] <jasperdegroot> gabriel_schulhof: we can switch to remote data for the search and if Ajax isn't working you won't have autocomplete but search still works
[11:40:18] <arschmitz> gabriel_schulhof: theres already a branch of that
[11:40:37] <arschmitz> gabriel_schulhof: but there are many accessability issues that are yet to be solved
[11:40:40] <arschmitz> you should look at that
[11:41:18] <gabriel_schulhof> Oh, is there? In what repo? I did a git remote update origin and I haven't found any branches that seem related.
[11:41:19] <arschmitz> The issue has never been making it "work" its making it work correctly
[11:41:34] <arschmitz> its probably on fnagles fork
[11:41:41] <gabriel_schulhof> Aaaah, OK.
[11:43:18] <arschmitz> ok lets move on to RTL
[11:43:27] <arschmitz> this has come up over and over and over again
[11:43:28] <gabriel_schulhof> arschmitz: Even if we do it in mobile to continue to support native/non-native it's gonna be at least as good as what we have now.
[11:43:33] <arschmitz> in both ui and movile
[11:44:08] <gabriel_schulhof> Right. RTL.
[11:44:19] <arschmitz> most recently its been brought up by some folks at IBM and by Ariya in chicago
[11:44:21] <gabriel_schulhof> I know: clearButton!
[11:44:34] <arschmitz> gabriel_schulhof: huh?
[11:44:36] <gabriel_schulhof> That's an RTL-sensitive widget.
[11:44:43] <arschmitz> we have many of them
[11:44:48] <arschmitz> but we dont support it at all
[11:44:58] <arschmitz> same thing in jQuery UI
[11:45:05] <jasperdegroot> right
[11:45:14] <gabriel_schulhof> How does one write CSS conditional on whether the locale is RTL or LTR?
[11:45:20] <arschmitz> the main problem with support in both cases is we dont have a native speaker or anyone who actually uses it
[11:45:28] <jasperdegroot> dir="rtl"
[11:45:30] <arschmitz> gabriel_schulhof: there is a built in css prop
[11:45:38] <arschmitz> as well as an html attribute
[11:46:12] <arschmitz> some of the works is done auto magicly by the browser when you do these
[11:46:20] <gabriel_schulhof> arschmitz: Do we actually need a native speaker? I mean, to actually implement RTL? You can just launch LANG=il_IL firefox http://localhost/path/to/jquery-mobile/demos/ &
[11:46:38] <arschmitz> but some things in widgets need to be handled
[11:46:51] <arschmitz> gabriel_schulhof: yes becaue we dont know the common issues
[11:47:02] <arschmitz> have you ever actually used rtl ?
[11:47:07] <gabriel_schulhof> Do we have any open issues?
[11:47:20] <arschmitz> no they have all been closed as feature requests
[11:47:31] <arschmitz> anyway
[11:47:40] <arschmitz> so we are going to be organizing a call
[11:47:51] <arschmitz> with people who actually use and are familier with the issues involved
[11:48:03] <arschmitz> we have pinged a few people and are waiting on responses
[11:48:45] <gabriel_schulhof> http://www.intlaqa.com/jquery-mobile-rtl/ from https://github.com/jquery/jquery-mobile/issues/5167
[11:49:08] <gabriel_schulhof> That's from the 1.1.0 era.
[11:49:27] <arschmitz> they updated as recently as 1.4.0
[11:49:35] <arschmitz> but there is no saying they are actually doing it right
[11:49:51] <arschmitz> but we should ping them
[11:51:49] <arschmitz> I push a branch of the enhancer module
[11:52:14] <arschmitz> its working in the demos but i need to fix some tests that look for deprecated code which is removed
[11:52:27] <gabriel_schulhof> Very, very cool!
[11:53:00] <arschmitz> https://github.com/jquery/jquery-mobile/blob/enhancer/js/widgets/enhancer.js
[11:53:37] <arschmitz> Biggest things to see here from previous gist is addition of a hooks prop
[11:53:43] <gabriel_schulhof> Oooh, do we update all our AMD modules to do that little if ( typeof define === "function" ... thing?
[11:53:50] <arschmitz> yes we do
[11:53:52] <gabriel_schulhof> OK.
[11:54:09] <gabriel_schulhof> That should render js/jquery.mobile.define.js useless.
[11:54:10] <arschmitz> that will make it so individual files can be included via script tag as well
[11:54:17] <arschmitz> yup thats the idea
[11:54:17] <gabriel_schulhof> ... or rather unnecessary.
[11:55:07] <arschmitz> so a little work needed there but you can play with it its working
[11:55:44] <arschmitz> pretty neat overall i think
[11:55:58] <arschmitz> no updates on removing the data-attribute namespace
[11:56:10] <arschmitz> Pointer events
[11:56:25] <arschmitz> Will be having our first call since the transfer next week
[11:56:29] <arschmitz> and deciding on a team lead
[11:57:25] <arschmitz> hopefully soon we will be able to pull into mobile
[11:57:30] <arschmitz> likely 1.6
[11:57:48] <arschmitz> chassis work is continueing well lots of discussion
[11:57:52] <gabriel_schulhof> Are there any major outstanding issues with pointer-events?
[11:57:59] <arschmitz> adding tests
[11:58:07] <arschmitz> removing the polymer build system
[11:58:16] <gabriel_schulhof> *whew*
[11:58:21] <arschmitz> removing es5 stuff
[11:58:38] <arschmitz> updating the jQuery wrapper once the polyfill it self is stable
[11:58:59] <arschmitz> you can see it working in mobile already though ( ie10+ )
[11:59:05] <arschmitz> in the polymer branch
[12:00:36] <arschmitz> ok i think we are down to things gabriel_schulhof added want to run through them?
[12:01:31] <gabriel_schulhof> Yeah, so I guess it boils down to two things.
[12:02:16] <gabriel_schulhof> If we get rid of blur-upon-change from select, we lose fixed toolbar reappearance, but we gain better support for navigating forms on iOS (#6028)
[12:02:21] <gabriel_schulhof> I mean, re-gain,
[12:02:56] <arschmitz> native or custom?
[12:02:58] <gabriel_schulhof> ... and we can also claim to have fixes https://github.com/jquery/jquery-mobile/issues/3184 (better keyboard navigation for select), because there's no way we can get type-letter-to-select-option for custom select.
[12:03:05] <jasperdegroot> did we already discuss deprecating hideDuringfocus?
[12:03:15] <gabriel_schulhof> arschmitz: Native.
[12:03:33] <arschmitz> jasperdegroot: we did a month or so ago
[12:03:50] <arschmitz> and decided to drop it for at least selects since its not actually possible
[12:03:50] <gabriel_schulhof> arschmitz: ... That is, the blur-upon-change is in the native select, but of course, the custom select also uses it by extension.
[12:03:58] <gabriel_schulhof> Yeah.
[12:03:59] <jasperdegroot> right
[12:04:22] <gabriel_schulhof> So, I made two fixes.
[12:05:02] <gabriel_schulhof> One (#7902) fixes the way the fixed toolbar implements hide() and show(), because they can interfere with each other, if one animation is started before the other completes.
[12:05:18] <gabriel_schulhof> The other fix (#7903) remove the blur-upon-change.
[12:06:02] <gabriel_schulhof> removes
[12:06:44] <gabriel_schulhof> So, I guess https://github.com/jquery/jquery-mobile/issues/7903 removes support for hideDuringFocus in the case of a select.
[12:06:48] <arschmitz> gabriel_schulhof: the blur upon change whats the original motivitaiton?
[12:07:01] <gabriel_schulhof> arschmitz: To inform the fixed toolbar that it is time to show itself again.
[12:07:18] <gabriel_schulhof> arschmitz: It was assumed that, if the select has changed, the user was done interacting with it.
[12:07:20] <arschmitz> ok yeah that does not seem like a valid use at all
[12:07:26] <gabriel_schulhof> arschmitz: Which is, of course, not true in the case of multiple selects.
[12:07:58] <arschmitz> yup
[12:08:07] <gabriel_schulhof> ... and if you recall, the blur-upon-change also uncovered that nasty iOS crash :)
[12:08:08] <arschmitz> Yeah that logic is not correct for sure
[12:08:13] <arschmitz> yup
[12:08:21] <arschmitz> gabriel_schulhof: ok so this makes sense
[12:08:30] <gabriel_schulhof> Yep.
[12:08:31] <arschmitz> i did have some comments on those pr's already i believe
[12:08:48] <arschmitz> mostly about there being no tests i think
[12:09:20] <gabriel_schulhof> Right. I guess I have to add some.
[12:09:34] <arschmitz> gabriel_schulhof: i reviewed all but one of your pr's
[12:09:40] <arschmitz> the build one i didnt get to
[12:10:12] <gabriel_schulhof> arschmitz: I'm not sure what I can test with the blur-upon-focus removal. I mean, should I test that the select continues to have the focus?
[12:10:30] <arschmitz> gabriel_schulhof: comment on the pr and il lthink about it
[12:10:41] <arschmitz> anyone have anything else to discuss?
[12:10:47] <arschmitz> we are running late
[12:11:29] <jasperdegroot> we could consider using a media query to make a fixed toolbar position absolute when the viewport is less than a certain amount of pixels
[12:11:56] <arschmitz> jasperdegroot: pretty sure the keyboard does not change the view port size
[12:11:59] <jasperdegroot> when the keyboard pops up the viewport height changes
[12:12:05] <jasperdegroot> on Android it does
[12:12:16] <jasperdegroot> but we can look into this and discuss another time
[12:12:20] <arschmitz> ok on ios i dont"think" it does but could be wrong
[12:12:31] <jasperdegroot> I am not sure about iOS either
[12:12:46] <gabriel_schulhof> arschmitz: Actually, the appearance of the keyboard does cause resize events.
[12:12:58] <gabriel_schulhof> arschmitz: It used to be only on iOS, but now it's happening on Android too.
[12:13:03] <arschmitz> ok
[12:13:16] <gabriel_schulhof> It's throwing the popup repositioning logic out of whack when a popup contains a textinput.
[12:13:37] <arschmitz> this actually might make more sense for hiding logic
[12:13:39] <gabriel_schulhof> And the worst is, it resizes from x times y to x times y :/
[12:13:47] <jasperdegroot> yeah
[12:13:52] <arschmitz> we could listen for throtteled resize
[12:14:00] <gabriel_schulhof> arschmitz: Doesn't help. I've tried.
[12:14:04] <arschmitz> and if the viewport has changed based on some heuristic
[12:14:11] <arschmitz> hide
[12:14:22] <arschmitz> like if the width has not changed
[12:14:22] <gabriel_schulhof> arschmitz: There can be a huge break between two resize events, because the browser is busy re-rendering :(
[12:14:32] <gabriel_schulhof> arschmitz: I'm already doing that.
[12:14:42] <gabriel_schulhof> arschmitz: Sometimes it changes by one pixel.
[12:14:45] <gabriel_schulhof> It's terrible.
[12:14:55] <arschmitz> and the hight gets smaller by > 100px  hide toolbar
[12:15:07] <arschmitz> if it gets bigger show toolbar
[12:15:35] <arschmitz> gabriel_schulhof: thoughts? then we dont listen for focus or blur at all
[12:15:42] <gabriel_schulhof> I suppose we could study the problem ad nauseam and come up with a good heuristic ... and then the next version of <OS> breaks it again.
[12:16:01] <arschmitz> gabriel_schulhof: well we just need to find the smallest popup keyboard we can
[12:16:10] <arschmitz> and make it like 30 px smaller for the change amoutnt
[12:16:24] <gabriel_schulhof> arschmitz: Well, sometimes the virtual keyboard does not cause a resize, because it appears "above" the browser window. Yet the area that's effectively visible is much smaller.
[12:16:48] <arschmitz> gabriel_schulhof: thats what i asked about you said that the viewport changes?
[12:17:07] <gabriel_schulhof> arschmitz: It appears to change, but the difference is at most, like 1px of height.
[12:17:18] <gabriel_schulhof> arschmitz: The browser fires unnecessary resize events.
[12:17:24] <arschmitz> ok well thats nor actually getting smaller
[12:17:31] <gabriel_schulhof> Yes, exactly.
[12:17:35] <arschmitz> i was asking if the view port actually gets smaller by the size of the keyboard
[12:17:52] <gabriel_schulhof> No.
[12:17:55] <arschmitz> ok
[12:18:07] <gabriel_schulhof> arschmitz: OK. To be clear.
[12:18:10] <arschmitz> then thats not usefull
[12:18:23] <gabriel_schulhof> The user sees a substantially smaller portion of the window when the keyboard is up.
[12:18:30] <gabriel_schulhof> However, the window is not actually resized.
[12:18:32] <arschmitz> right im not concenred with what they see
[12:18:38] <arschmitz> im concenred with the viewport sizr
[12:18:40] <arschmitz> size
[12:18:51] <gabriel_schulhof> That does not change.
[12:18:52] <arschmitz> ( not guranteed to be the same )
[12:19:00] <arschmitz> ok
[12:19:07] <arschmitz> lets move this to the issue
[12:19:25] <arschmitz> but personally im inclined to remove all hide on focus logic
[12:19:28] <arschmitz> regardless of the element
[12:19:45] <arschmitz> and maybe show how to add yourself for your specific use case
[12:20:02] <gabriel_schulhof> That does not change.
[12:20:10] <gabriel_schulhof> WTF?!
[12:20:14] <gabriel_schulhof> That's not what I wrote.
[12:20:17] <gabriel_schulhof> Weird.
[12:20:19] <jasperdegroot> lol
[12:20:26] <arschmitz> huh?
[12:20:30] <gabriel_schulhof> I meant to say +1, because it should be done per-application.
[12:20:46] <arschmitz> ITs very possible to do right depending on your use case
[12:20:47] <gabriel_schulhof> arschmitz: I accidentally pasted an earlier response of mine: "That does not change."
[12:20:51] <arschmitz> but its not possible in general
[12:20:55] <arschmitz> oh ok
[12:20:56] <gabriel_schulhof> Exactly.
[12:21:14] <arschmitz> these are cases we should just not support
[12:21:25] <arschmitz> as a library if we cant make it work consistent we should not do it
[12:21:30] <gabriel_schulhof> arschmitz: Do you want me to yank the hideDuringFocus logic?
[12:21:41] <gabriel_schulhof> arschmitz: We can keep the option around but it will have no effect.
[12:21:44] <arschmitz> put it in the issue and let it sit a few days
[12:21:48] <arschmitz> see if any one freaks out
[12:21:58] <gabriel_schulhof> OK.
[12:22:17] <gabriel_schulhof> Well, wait a sec ... which issue?
[12:22:32] <gabriel_schulhof>  https://github.com/jquery/jquery-mobile/issues/6028 is about the select losing focus in iOS.
[12:22:39] <gabriel_schulhof> ... and https://github.com/jquery/jquery-mobile/issues/3184 is also about the select.
[12:22:54] <jasperdegroot> I have another call... later all
[12:23:09] <gabriel_schulhof> OK. I'll re-open https://github.com/jquery/jquery-mobile/issues/5514 and I'll put it there, and the fix will be to remove the logic.
[12:23:27] <arschmitz> gabriel_schulhof: that souns good
[12:23:34] <arschmitz> jasperdegroot: ok thanks i think we are done anyway
[12:25:22] <arschmitz> anything from the community?
[12:26:52] <arschmitz> ok see everyone back in -dev
