[09:00:39] <DaveMethvin> sup?
[09:01:34] <DaveMethvin> ping gibson042 m_gol  markelog timmywil gnarf and all interested parties
[09:02:22] <DaveMethvin> the agenda: https://docs.google.com/document/d/1su2ZTFZbnp_DD-LGZleuEudTFRJT_g4zf7UfGOMQvco/edit
[09:02:40] <markelog> hey-hey
[09:04:06] <DaveMethvin> hey!
[09:04:39] <m_gol> present
[09:06:09] <DaveMethvin> so between my travel and laziness I haven't been moving things along very quickly
[09:06:21] <DaveMethvin> i think a lot of these PRs are ready to land
[09:06:31] <DaveMethvin> a few need more discussion, like the ajax ones
[09:06:58] <m_gol> testswarm broke, no browsers are scheduled
[09:07:09] <m_gol> I restarted the server, let's see what happens
[09:07:18] <DaveMethvin> ok thanks for keeping an eye on that m_gol
[09:07:32] <DaveMethvin> i saw the error on the weekly job and didn't check why
[09:08:20] <m_gol> try migrate
[09:08:24] <m_gol> http://swarm.jquery.org/project/jquerymigrate
[09:08:32] <m_gol> two last jobs have no response
[09:09:55] <markelog> i can merge https://github.com/jquery/jquery/pull/1600, https://github.com/jquery/jquery/pull/1597 and https://github.com/jquery/jquery/pull/1605
[09:10:01] <markelog> and also add test for 1600, 1597
[09:10:39] <markelog> after that i was planning to finish up with https://github.com/jquery/jquery/pull/1590
[09:10:50] <markelog> do the same for 1.x-master and sizzle
[09:11:09] <DaveMethvin> that would be awesome markelog
[09:11:54] <markelog> improve jscs to support parentheses for our preset and create PRs to fix up these code style issues for core and sizzle
[09:12:03] <markelog> after that karma and all that
[09:12:24] <m_gol> :)
[09:12:35] <m_gol> these testswarm-browserstack failures don't look good...
[09:12:43] <m_gol> action=warning {"message":"Spawn error for browser","info":{"browser":{"browser_version":"7.0","browser":"safari","os_version":"Mavericks","device":null,"os":"OS X"},"err":{}}}
[09:13:01] <DaveMethvin> browserstack, love to hate it
[09:13:21] <markelog> sad face
[09:13:33] <DaveMethvin> looks kinda broken
[09:14:08] <mikesherov_> hi
[09:14:15] <markelog> hey Mike
[09:14:25] <m_gol> https://github.com/jquery/infrastructure/issues/279
[09:15:32] <DaveMethvin> oh great my system is getting flakey
[09:15:46] <DaveMethvin> anyway
[09:16:27] <DaveMethvin> so should we finally bite the bullet and do a download builder? maybe the world is ready for it
[09:17:13] <markelog> sounds like it, i wonder how we could test it
[09:17:29] <m_gol> +1
[09:17:37] <m_gol> well, it won't be as comprehensive as the grunt task
[09:17:44] <DaveMethvin> testing is definitely hard
[09:17:46] <m_gol> so we don't have to test gazillion of cases
[09:17:46] <markelog> we're not testing special builds right now
[09:17:52] <m_gol> but even 5-6 is a lot of overhead
[09:17:55] <markelog> how ui team do it?
[09:18:13] <DaveMethvin> their widgets don't have cross dependencies
[09:18:47] <DaveMethvin> if we got the deps right we shoudln't have a lot of trouble
[09:18:48] <markelog> still, we probably should look at what they have
[09:18:58] <DaveMethvin> but i would bet there are a few sneak dependencies
[09:19:07] <DaveMethvin> like the ones tj_vantoll  found a while back
[09:19:09] <m_gol> ideally we'd be able to test every single module without others
[09:19:26] <mikesherov_> There is a dep or two
[09:19:28] <DaveMethvin> except that manipulation needs core etc
[09:19:28] <m_gol> and we'd test them individually and with the build file
[09:19:33] <mikesherov_> Selectemenu relies on Menu for example
[09:19:40] <m_gol> at least it'd be two runs and not gazillion
[09:20:06] <m_gol> DaveMethvin: I mean every dep with only what it requires
[09:20:10] <m_gol> explicitly
[09:20:11] <markelog> weekly job sufficient for it i suppose
[09:20:13] <DaveMethvin> yeah, it should be possible
[09:20:18] <m_gol> markeog: +1
[09:20:28] <m_gol> * markelog: +`
[09:20:31] <m_gol> dammit :)
[09:20:32] <markelog> )
[09:20:34] <mikesherov_> Well, it might be best to keep stats on the combinations people select and then test the popular choices
[09:20:45] <DaveMethvin> so, who wants to tackle this?
[09:21:17] <markelog> good question that is :)
[09:21:24] <m_gol> so let's see what's needed
[09:21:38] <m_gol> I assume we don't want Grunt tasks to run on the site ;)
[09:22:01] <DaveMethvin> i would guess this should go into a different repo since it needs a UI
[09:22:12] <markelog> gh-pages?
[09:22:13] <m_gol> so we either need to prebuild some choices or rewrite a significant part of what we do
[09:22:20] <DaveMethvin> yeah, gh-pages is prob all we need
[09:22:21] <mikesherov_> DaveMethvin: yeah. Just like UI's
[09:22:38] <DaveMethvin> right, we can prob steal a bunch of stuff from UI's builder
[09:22:51] <mikesherov_> Or collaborate?
[09:23:00] <DaveMethvin> WAT?
[09:23:00] <b-ot> DaveMethvin: i have noticed there are many plugins that sometime i could need
[09:23:05] <markelog> that would be interesting
[09:23:18] <markelog> generic solutions always are i suppose
[09:23:27] <m_gol> jquery-builder
[09:23:28] <mikesherov_> UI's DB doesn't do prebuilding.
[09:23:43] <m_gol> scott_gonzalez likes such repositories ;-)
[09:24:31] <mikesherov_> Might be We could always ask rxaviers his opinion as well
[09:24:36] <DaveMethvin> ok i'll create a ticket
[09:24:42] <mikesherov_> considered he rewrote the whole thing recently
[09:25:01] <DaveMethvin> good idea mikesherov
[09:25:20] <DaveMethvin> next thing we need to do is rewrite the bug tracker
[09:25:23] <scott_gonzalez> I believe there's a minimal amount of pre-building (I think all named themes are built on deploy).
[09:25:35] <DaveMethvin> oh wait, debt!
[09:25:36] <mikesherov_> Oh god. If we could bail on Trac, that would be amazing
[09:25:41] <scott_gonzalez> I'm not positive about that though.
[09:25:59] <DaveMethvin> well i don't think trac is bad, just that we don't maintain it
[09:25:59] <mikesherov_> If only I knew someone who was writing his own bug tracker.....
[09:26:05] <scott_gonzalez> But we've been making progress on getting the buidler to be more generic (still a lot of work to do).
[09:26:15] <DaveMethvin> nNOBODY is that crazy mikesherov
[09:26:25] <markelog> i'm never tired to suggesting github as a bug tracker )
[09:26:33] <DaveMethvin> http://bugs.jquery.com/ticket/15180
[09:27:02] <DaveMethvin> there are a lot of good things about gh issue tracker but it is still pretty weak
[09:27:20] <DaveMethvin> i dunno though, at this point it's starting to look better and better
[09:27:32] <DaveMethvin> so tired of trac spam
[09:27:44] <scott_gonzalez> GitHub is terrible for bug tracking.
[09:27:44] <markelog> maybe we should try to evaluate it?
[09:27:53] <mikesherov_> GH has no graphing, super weird UI (as in it's terribly easy to assign everything to one person accidentally), no dupe detection, none of the autoclose stuff from snover
[09:28:00] <markelog> oh, we already did i see )
[09:28:01] <DaveMethvin> i don't think we can move the old bugs either
[09:28:16] <mikesherov_> Right, no porting of old bugs making the annotations in the source meaningless
[09:28:45] <mikesherov_> although someone crazy could make those all redirect I suppose
[09:29:01] <DaveMethvin> we'd just need the ticket numbers to match somehow
[09:29:03] <scott_gonzalez> I really don't think you want to make the switch.
[09:29:06] <mikesherov_> but anyway, Trac has warts, but not as many as GH
[09:29:13] <scott_gonzalez> This is a grass is always greener situation.
[09:29:14] <DaveMethvin> like, start new tix at 30,000 or something
[09:29:21] <mikesherov_> Like DaveMethvin said, just need to maintain it
[09:29:44] <mikesherov_> like upgrade to 1.0 if we haven't yet.... are we still on 0.12?
[09:29:51] <DaveMethvin> yes
[09:30:00] <mikesherov_> boy
[09:30:03] <mikesherov_> fun
[09:30:05] <mikesherov_> too much to do
[09:30:09] <DaveMethvin> the registration process doesn't support email validation at this point
[09:30:13] <DaveMethvin> maybe 1.0 does
[09:30:26] <markelog> i personally don't like that disperse of discussions between github and trac
[09:30:47] <DaveMethvin> neither do I, but you'd still get that if you had both a PR and an issue right?
[09:30:55] <mikesherov_> markelog: yeah, that's github's only feature over Trac.... it's where everyone expects it to be
[09:31:26] <DaveMethvin> also i think you still can't tag things in PRs unless you enable issues
[09:31:52] <mikesherov_> right
[09:31:54] <markelog> DaveMethvin: hm, right, but it's not seem that weird
[09:32:22] <mikesherov_> the other thing is "Help Wanted". We miss out on that considering we're not using their issues
[09:32:37] <DaveMethvin> yeah
[09:33:01] <DaveMethvin> if there was some way to move issues we could do a redirector at bugs.jquery.com to point to the migrated issue
[09:33:15] <DaveMethvin> there's just too much important stuff in the trac tickets
[09:33:22] <mikesherov_> right
[09:33:26] <markelog> i could write to github about it
[09:33:39] <markelog> maybe they have something hidden feature there
[09:33:50] <DaveMethvin> can you create issues via the API?
[09:33:51] <mikesherov_> markelog: and tell them also that the entire issue tracker needs to be better too. KTHXBAI
[09:33:56] <DaveMethvin> lol
[09:34:01] <markelog> ))
[09:34:09] <mikesherov_> https://developer.github.com/v3/issues/#create-an-issue
[09:34:12] <DaveMethvin> if so i guess you could make a script to migrate issues
[09:34:33] <mikesherov_> I dunno though
[09:34:35] <m_gol> DaveMethvin: what about issue numbers?
[09:34:40] <scott_gonzalez> You'll lose a ton of info.
[09:34:41] <mikesherov_> Autoclose is super helpfu;l
[09:34:49] <markelog> m_gol: that was my question also )
[09:34:49] <scott_gonzalez> Like all 'author' info
[09:34:50] <DaveMethvin> bugs.jquery.com/ticket/1234 could redirect
[09:35:03] <scott_gonzalez> And you'll lose the ability to put text on pages.
[09:35:44] <mikesherov_> right
[09:36:00] <DaveMethvin> yeah about the best we could do re the author info is to add a line above the comment entry with the trac name etc
[09:36:22] <DaveMethvin> although for the top 20 or so we could make a mapping table
[09:36:28] <scott_gonzalez> Core has dozens of Trac reports too, I bet a fair amount of them can't be done in GitHub.
[09:36:54] <mikesherov_> but also, we could NOT port old issues
[09:37:05] <mikesherov_> and just start with new issues in GH
[09:37:11] <mikesherov_> but again, GH issues suck
[09:37:15] <mikesherov_> that's the real problem
[09:37:15] <DaveMethvin> https://github.com/trustmaster/trac2github
[09:37:33] <DaveMethvin> dunno if it works but someone has done it
[09:37:53] <mikesherov_> we'll need to host some crons perhaps to do things like auto-close
[09:38:13] <mikesherov_> although, maybe "github-issues-enhanced" would be a repo we could maintain?
[09:39:22] <DaveMethvin> if we just had someone who made trac work better we could see if it could be salvaged
[09:39:33] <DaveMethvin> at minimum i'd like working back links to github commits
[09:39:43] <DaveMethvin> and not hanging every day or so
[09:40:26] <mikesherov_> Well, all this issues are tracked in infra?
[09:40:27] <scott_gonzalez> Why not just do a blog post asking for help?
[09:40:34] <mikesherov_> Exactly
[09:40:40] <mikesherov_> that's what I was about to say
[09:40:57] <scott_gonzalez> Fixing Trac seems a hundred times better than switching to GitHub.
[09:41:05] <DaveMethvin> probably
[09:41:06] <mikesherov_> infra is interesting because it's private, but there are public aspects that need / could use help
[09:41:47] <DaveMethvin> if we do a blog post asking for help, i suspect the majority will suggest moving to gh issues :P
[09:41:56] <markelog> ))
[09:41:59] <DaveMethvin> just like when we say "don't use jquery-latest"
[09:42:04] <mikesherov_> Yo dawg, if only we had bug tracking software so we could list the bugs with the bug tracker somewhere
[09:42:10] <DaveMethvin> people suggest ripping it out from under the internet
[09:42:21] <scott_gonzalez> Ignore them.
[09:42:25] <mikesherov_> Right
[09:42:31] <DaveMethvin> definitely
[09:42:34] <mikesherov_> HHWWGT
[09:42:39] <scott_gonzalez> :-)
[09:42:42] <DaveMethvin> it's just that what we need is a person who knows Trac and will help
[09:42:50] <mikesherov_> From Ember: How Hard Would We Get Trolled
[09:42:53] <scott_gonzalez> And a blog post will help us find that person.
[09:43:03] <mikesherov_> Right
[09:43:12] <DaveMethvin> sure I will do one
[09:43:18] <DaveMethvin> hell I'll do that today!
[09:43:23] <mikesherov_> WOAH
[09:43:40] <DaveMethvin> no time to waste
[09:43:52] <DaveMethvin> ok where are we in this agenda
[09:44:13] <DaveMethvin> imma ask a few others directly for input on $.xhr
[09:44:27] <DaveMethvin> jaubourg hasn't been responsive
[09:44:46] <markelog> so we will start with it without him?
[09:44:57] <DaveMethvin> yeah i think so, we need to move ahead
[09:45:07] <DaveMethvin> he can add his input later
[09:45:51] <DaveMethvin> i think $.xhr shoud return a jQuery Deferred if not passed a callback, period
[09:46:13] <DaveMethvin> if someone wants a standard Promise they can use promisify via the callback form
[09:46:15] <m_gol> with the option to switching to Promise
[09:46:20] <mikesherov_> community seems concerned about changing return types
[09:46:23] <scott_gonzalez> I think the differing return values is terrible
[09:46:24] <DaveMethvin> otherwise we have an api that returns an unknown thing
[09:46:29] <DaveMethvin> mikesherov exactly
[09:46:54] <DaveMethvin> so if you want to not include Deferred, always use the callback form which you can promisify
[09:47:11] <DaveMethvin> and you can do that within your own module
[09:48:00] <m_gol> I guess an advice in text is cheaper than building sth into the code ;)
[09:48:03] <scott_gonzalez> :-(
[09:48:11] <scott_gonzalez> Proxying $.xhr() isn't nearly as simple as you think.
[09:48:18] <DaveMethvin> why?
[09:48:56] <mikesherov_> You can promisify the deferred version too... but then we're required to include deferred with xhr...
[09:49:15] <scott_gonzalez> Oh, well, I guess if you're proxying to a function which only ever accepts one paratmer, then it's fine.
[09:49:19] <DaveMethvin> mikesherov: not sure why you'd do it that way
[09:49:32] <DaveMethvin> scott_gonzalez: yes, if they want standard Promise that would be the constraint they choose
[09:50:03] <DaveMethvin> same with no progress handler
[09:50:07] <mikesherov_> Well, we do it at my job currently because we want everything to have the standard promise interface
[09:50:29] <mikesherov_> even though that gimps xhr a bit
[09:50:35] <DaveMethvin> and that's fine, it's just that we don't want our apis to have variable outputs that affect code globally
[09:50:43] <mikesherov_> Right, I agree
[09:51:08] <mikesherov_> so why not always have xhr return a deferred, and drop the callback form?
[09:51:31] <mikesherov_> unless I'm completely misunderstanding, in which case, I'll shut up
[09:51:33] <DaveMethvin> then you'd need to have Deferred always there
[09:51:38] <mikesherov_> right
[09:51:46] <DaveMethvin> this way you can use Promise and leave out Deferred
[09:51:49] <gibson042> or stubbed in with a simple Promise-based implementation
[09:52:03] <scott_gonzalez> FWIW, I think it's really bad that our goal is "If you want to use standards, do it yourself"
[09:52:30] <DaveMethvin> so, if no callback is passed in, $.xhr needs to return some promisy thing
[09:52:43] <DaveMethvin> and it shoudl be of known behavior
[09:52:46] <DaveMethvin> globally
[09:52:56] <DaveMethvin> Deferred and Promise aren't that similar
[09:53:08] <DaveMethvin> so returning one or the other without the caller knowing which seems bad
[09:53:10] <scott_gonzalez> $.xhr() and $.ajax() aren't that similar either.
[09:53:16] <DaveMethvin> not at all
[09:53:19] <scott_gonzalez> But we're planning on making the switch.
[09:53:34] <DaveMethvin> so are you advocating always returning Promise and requiring a shim?
[09:53:38] <scott_gonzalez> yes
[09:53:56] <DaveMethvin> i can see people trying to shim with Deferred, which would be bad
[09:54:06] <scott_gonzalez> And working toward removing deferreds over time.
[09:54:13] <mikesherov_> Right
[09:54:31] <scott_gonzalez> We can bless a shim.
[09:54:37] <mikesherov_> RSVP?
[09:54:39] <scott_gonzalez> And include it as a module.
[09:54:44] <DaveMethvin> the concern i have with Promise shims is they all suck for debugging afaict
[09:54:50] <scott_gonzalez> RSVP has its own API, right?
[09:54:56] <mikesherov_> nvm, yeah
[09:54:59] <scott_gonzalez> I don't think we'd want that.
[09:55:18] <mikesherov_> Well, the great thing is, if $.xhr returns an actual Promise
[09:55:19] <m_gol> jQuery's reliance on Deferreds makes it harder for external libs to rely on jQuery
[09:55:29] <m_gol> when they already have their own Promises/A+ implementation
[09:55:37] <mikesherov_> then the shim itself can even internally defer to native promises
[09:55:57] <mikesherov_> $.xhr is our chance to break away from Deferred and towards actual Promises
[09:56:01] <scott_gonzalez> https://github.com/getify/native-promise-only
[09:56:17] <scott_gonzalez> But I think the choice of which shim to use isn't the important thing right now.
[09:56:25] <DaveMethvin> agreed
[09:56:29] <scott_gonzalez> The important thing is finally making the decision to move to standards.
[09:56:34] <DaveMethvin> move to Promise, and requiring it to be there, is a big step
[09:56:49] <mikesherov_> Right, but as Scott says, a step towards standards
[09:56:50] <DaveMethvin> if it's not there, which it won't be for several years to come, there will need to be a shim
[09:57:01] <DaveMethvin> and the shim needs to support debugging in a reasonable way
[09:57:06] <DaveMethvin> is there such a thing?
[09:57:16] <DaveMethvin> most just swallow errors
[09:57:17] <mikesherov_> and finally the jQuery community gets to weigh in on the problems with native promises, if we uncover new stuff
[09:57:29] <scott_gonzalez> That's honestly an easily solvable problem in at least one browser.
[09:57:39] <DaveMethvin> i suppose we could just tell people that the Promise shim isn't our fault
[09:57:40] <mikesherov_> Well, TBH, Chrome makes it dead simple
[09:57:44] <DaveMethvin> yes, Chrome
[09:57:47] <mikesherov_> Pause on Caught Exceptions
[09:57:54] <m_gol> https://github.com/petkaantonov/bluebird?
[09:58:03] <DaveMethvin> the problem is when people test on non-Chrome
[09:58:04] <mikesherov_> bluebird is fairly sugary
[09:58:10] <mikesherov_> DaveMethvin, yeah
[09:58:11] <DaveMethvin> which, to make it worse, it probably where they are not testing right now
[09:58:21] <mikesherov_> but again, this becomes us meeting halfway
[09:58:35] <DaveMethvin> bluebird does a better job of dealing with errors agreed, but it does it in a non-standard way
[09:58:42] <scott_gonzalez> The community can deal with this in browser extensions.
[09:58:45] <mikesherov_> we're going to move towards standard promises as a way to nudge FF and IE towards providing better debuggers
[09:58:47] <DaveMethvin> okay, so anyway
[09:58:56] <scott_gonzalez> Just like the Ember dev tools handle RSVP.
[09:59:00] <m_gol> mikesherov_: you mean that bluebird has too broad API?
[09:59:00] <DaveMethvin> $.xhr should return Promise if not passed a callback
[09:59:05] <DaveMethvin> Yes, or No?
[09:59:10] <scott_gonzalez> yes and no
[09:59:11] <mikesherov_> m_gol: yes, more than just promises
[09:59:17] <scott_gonzalez> $.xhr should return Promise.
[09:59:18] <DaveMethvin> damn you scott_gonzalez !!! :)
[09:59:22] <mikesherov_> scott_gonzalez: +1
[09:59:25] <markelog> +1
[09:59:32] <scott_gonzalez> "if not passed a callback" is the bad part of that sentence.
[09:59:36] <m_gol> there should be sth that has sane debugging like bluebird and doesn't have such a broad API...
[09:59:37] <mikesherov_> $.xhr should have one return type, a Promise
[09:59:47] <DaveMethvin> so, require a Promise shim even if you would prefer a callback?
[09:59:52] <scott_gonzalez> yes
[09:59:58] <gibson042> why a full Promise instead of just a thenable?
[10:00:22] <DaveMethvin> gibson042: the semantics could differ a lot
[10:00:26] <DaveMethvin> depending on what people used
[10:00:28] <mikesherov_> gibson042: future compat
[10:00:36] <scott_gonzalez> Yeah, let's not invent even more wheels.
[10:00:39] <DaveMethvin> which is why i think we wanted to go either Deferred or Promise
[10:00:42] <gibson042> right, but Promise can always accommodate
[10:00:49] <mikesherov_> would be nice to be future proof to the actual spec so one glorious future day, no shim matters
[10:01:08] <mikesherov_> gibson042: good point
[10:01:51] <DaveMethvin> the problem is that $.xhr needs to return something, and it should consistently return something
[10:02:04] <DaveMethvin> as much as possible, not based on some global thing
[10:02:05] <mikesherov_> but the promises spec defines the interop point
[10:02:09] <mikesherov_> a thenable
[10:02:12] <DaveMethvin> right
[10:02:30] <DaveMethvin> but is that the guarantee we want $.xhr to give, is that the object has a .then() ?
[10:02:36] <scott_gonzalez> no
[10:02:40] <scott_gonzalez> We should stick to standards.
[10:02:41] <DaveMethvin> i dont' think so either
[10:03:08] <m_gol> I'm leaning towards what scott_gonzalez says
[10:03:22] <DaveMethvin> i just am sorry for people who will have to debug a Promise-shimmed xhr
[10:03:47] <m_gol> future is bigger than the past; we have to care about current situation but we should aim to reduce the friction in a few years when Promise will be everywhere
[10:03:54] <DaveMethvin> and would prefer to have a callback as well in case someone doesn't want to include a Promise shim
[10:03:54] <mikesherov_> right
[10:04:20] <m_gol> and it's not that people will massively switch to $.xhr, it'll be gradual, a lot of time for debuggers to advance
[10:04:35] <m_gol> whatever we thing about the way the standard finalized, it's there and it's not going away
[10:04:40] <scott_gonzalez> So, I think we could handle this DaveMethvin.
[10:04:56] <scott_gonzalez> We can say that $.xhr() has a consistent return type, but it depends on whether Promise exists.
[10:05:07] <DaveMethvin> so here would be my preference, $.xhr(options, callback) returns the xhr, $.xhr(options) returns Promise
[10:05:07] <scott_gonzalez> If it does, it returns promises, if it doesn't, it returns nothing.
[10:05:53] <m_gol> most of our APIs don't have consistent return types :P
[10:05:59] <DaveMethvin> tru dat
[10:06:03] <mikesherov_> LOL
[10:06:12] <mikesherov_> so, scott_gonzalez what about a slight mod to that
[10:06:24] <m_gol> .css('left') vs .css('left', '10px') anyone? :P
[10:06:30] <mikesherov_> how about, if Promise (or shim) exists, no callback version
[10:06:32] <DaveMethvin> we could always have a $.xhrp for promise if we want consistent
[10:06:39] <mikesherov_> if no promise imp, callback version exists
[10:06:53] <mikesherov_> m_gol: that's different
[10:07:05] <mikesherov_> getter, setter fluent apis is another discussion altogether
[10:07:06] <DaveMethvin> think about a bunch of third-party code thrown together on a site
[10:07:19] <DaveMethvin> globally affected behavior is bad
[10:07:23] <mikesherov_> DaveMethvin: I think about and deal with that every day
[10:07:30] <DaveMethvin> so at the point where you read the code you should know what it does
[10:07:42] <mikesherov_> fair point
[10:07:51] <DaveMethvin> that's why having $.xhr return something inconsistent bugs me
[10:07:55] <mikesherov_> but can't we console.log (warn) in that case
[10:07:58] <m_gol> mikesherov_: I wouldn't say it's a different discussion, I'd say it's a subset of this one. After all, it matches the premise: the same function returns differently typed things based on what's passed
[10:08:09] <m_gol> I get that this situation is way different, though
[10:08:23] <scott_gonzalez> m_gol: It's definitely different. You're talking about copletely different behavior of the method itself.
[10:08:28] <DaveMethvin> i just don't want the current $.ajax() behavior where options can affect it too much
[10:08:35] <mikesherov_> but one is an actual convention, where as the other is just an attempt to get around an optimization issue
[10:08:36] <scott_gonzalez> There's no difference in behavior based on whether a callback is provided.
[10:08:42] <m_gol> ok
[10:08:51] <gibson0421> this still feels in line with http://bugs.jquery.com/ticket/14510#comment:17 ... if we only guarantee that a thenable is returned, then standard Promise implementations can happily assimilate it and we're free to change the particulars of our actual returned values when the time comes
[10:09:09] <DaveMethvin> but where do we get the thenable gibson0421
[10:09:12] <scott_gonzalez> Again, our stance shouldn't be "if you want standards, do it yourself"
[10:09:16] <DaveMethvin> probably Deferred
[10:09:23] <gibson0421> yes, probably
[10:09:30] <DaveMethvin> which means we pull in Deferred, Callbacks, ugh
[10:09:33] <markelog> have couple ideas on the matter, it's different that we're discussing right now, would like to prototype it to the next meeting, which would also solve this callback dilemma
[10:09:38] <mikesherov_> but deferred thenable is very different semantically as well
[10:09:38] <gibson0421> but maybe that's subject to included modules
[10:09:43] <markelog> how is that sounds?
[10:09:50] <gibson0421> not as of 2.2
[10:09:56] <DaveMethvin> markelog: that would be great
[10:10:00] <markelog> cool
[10:10:20] <DaveMethvin> i definitely think we shoudl be flexible about what we are doing here and allow breaking from the past
[10:10:42] <DaveMethvin> so if we want to require XHR2 and not work in IE9 i am ok with that
[10:10:47] <DaveMethvin> that kind of thing
[10:10:50] <mikesherov_> <3
[10:11:10] <scott_gonzalez> :-/
[10:11:18] <DaveMethvin> mainly i just think we need to be careful about creating something that breaks b/c conflicting expectations in different third party code
[10:11:25] <scott_gonzalez> I want $.xhr() to be something people can use on day 1.
[10:11:39] <DaveMethvin> let's see what markelog comes up with
[10:11:49] <markelog> with a lot of stuff :)
[10:12:05] <DaveMethvin> ok, well since we're over let's call it a meeting
[10:12:16] <markelog> see ya!
[10:12:19] <DaveMethvin> but i think we had a good discussion on this, thanks
