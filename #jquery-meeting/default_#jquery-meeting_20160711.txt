[08:05:38] <flore77> we can start
[08:05:55] <flore77> sorry I was on #jquery-dev
[08:05:59] <jzaefferer> alright
[08:06:08] <jzaefferer> agenda/minutes: https://docs.google.com/document/d/1dq_2Asse7r7598WV2khJnbXf1KQ2tkEWtJiuBhzJ63Q/edit#
[08:06:25] <jzaefferer> Could you start with a summary of last week?
[08:06:57] <flore77> yes
[08:07:28] <flore77> the main goal was to finish the pr with browerstack
[08:08:37] <flore77> we have replaced the old adapters with new ones based on js-reportwrs adapters
[08:09:12] <jzaefferer> Its not quite working yet with loading from node_modules, right?
[08:09:17] <flore77> then merged all in one file where we are instantiating the needed adapter
[08:09:46] <flore77> by checking which adapter is available
[08:09:55] <flore77> yes
[08:10:18] <flore77> we have also released the first js-reporters on npm
[08:11:15] <flore77> and trying to require the version from npm in browserstack
[08:11:40] <jzaefferer> Okay, so making that work is the next task, right?
[08:11:51] <flore77> yes
[08:12:10] <flore77> I looked over the browerstack how it is dealing with the files
[08:12:13] <jzaefferer> I think the QUnit team is working on a bug fix for the issue you reported
[08:12:25] <flore77> but I didn't get it yet
[08:12:33] <flore77> yes?
[08:12:48] <flore77> I have seen that I received only one comment at that issue
[08:13:38] <flore77> I thought it has not generated so much interest
[08:14:27] <jzaefferer> Oh, I think I misunderstood a PR
[08:14:39] <jzaefferer> This sounded like its addressing the issue you reported: https://github.com/jquery/qunit/pull/1020
[08:15:22] <jzaefferer> nevermind
[08:15:51] <jzaefferer> So once we got the loading from node_modules working, we can open a PR and I can ping my contact there to take a look
[08:15:54] <flore77> yeah
[08:16:06] <flore77> but gibson answered on the issue too
[08:16:21] <flore77> hmm not quite
[08:16:38] <flore77> we shoukd investigate also the Mocha problem with the runtime
[08:17:13] <flore77> I think now we the fix done also in the last week at the MochaAdapter
[08:17:27] <flore77> to run also Mocha-s default reporter
[08:17:48] <flore77> I can do more debugging to discovsr which is the issue
[08:18:58] <jzaefferer> If you're not getting anywhere, a summary of the issue, how to reproduce it and what you tried would be good. Makes it easier to help
[08:20:11] <jzaefferer> Once the browserstack-runner PR is ready, what would you work on next?
[08:20:30] <jzaefferer> We had 3 items on the "later" list at the last meeting
[08:20:32] <flore77> ok. I will try until tomorrow to fix the issues of this pull request, if not I will make a summary and ask for some help
[08:22:21] <flore77> from the later list, we should adress the 2 issue: nested and suites names
[08:22:27] <flore77> issues*
[08:23:06] <flore77> and then I think we can proceed to implement js-reporters directly into Qunit
[08:23:52] <flore77> to reboot communication with Mocha we should wait until we finish the pr with browserstack
[08:24:30] <flore77> so that we have a poc
[08:25:07] <flore77> that our adapters are working and there is also some interest im this
[08:25:15] <flore77> what do you think?
[08:25:30] <jzaefferer> Hm, that acronym is used for proof of concept, but also person/people of color. Probably better to write proof of concept...
[08:25:35] <jzaefferer> sounds good!
[08:25:45] <flore77> ok, sorry!
[08:26:25] <jzaefferer> No response from searls on teenytest, but it also took us quite long to respond. Let's wait a little longer...
[08:26:59] <flore77> Yes, I think he will answer
[08:27:49] <flore77> we must address this: https://github.com/jquery/qunit/issues/1019
[08:29:23] <flore77> sorry, I got disconnected
[08:30:47] <jzaefferer> Is this blocking something?
[08:31:09] <flore77> hmm, yes, because we have that set of tests with mocha 2.4.5
[08:31:18] <flore77> on the browserstack runner
[08:32:01] <flore77> and I don't know how to deal with it
[08:32:50] <jzaefferer> the ones you commented out here? https://github.com/flore77/browserstack-runner/commit/0a18c5a143eddbb9c97cbd918ff7734cd4c7fa9c
[08:33:10] <flore77> yes
[08:35:04] <jzaefferer> can we replace that with a different repo with a regular mocha tests?
[08:35:29] <jzaefferer> or a different version/tag?
[08:35:37] <jzaefferer> it seems to work for 1.21.5
[08:36:18] <flore77> yes, because there are no tests with mutiple done callbacks
[08:36:36] <flore77> sure, we can change
[08:37:04] <flore77> I will look to other Mocha versions
[08:37:12] <jzaefferer> it seems too much of an edge case (a bug in a test!) too spend too much time on this
[08:37:37] <jzaefferer> let's work around or ignore the issue in the test and move on
[08:38:45] <flore77> ok, I can update the expected results and the tests will pass
[08:38:51] <flore77> maybe adding there a comment
[08:39:11] <flore77> and after we set a standard for this in js-reporters
[08:39:16] <flore77> updating it
[08:39:25] <jzaefferer> ok
[08:39:32] <jzaefferer> that sounds good
[08:40:00] <flore77> also for loading js-reporters from node_modules
[08:40:05] <flore77> a quick fix would be
[08:40:23] <flore77> to read the file and add it'a contentto the patch in place
[08:40:54] <flore77> its content to the*
[08:40:55] <jzaefferer> I don't understand that one
[08:41:00] <flore77> sorry :))
[08:41:26] <jzaefferer> well, give it a try
[08:41:53] <flore77> in browserstack we are giving only the path to a file, but we can write directly the content of the fie into a script tag
[08:42:05] <flore77> I will give it a try
[08:42:28] <flore77> and maybe someone from browserstack will give us hand
[08:42:36] <flore77> when reviewing the pr
[08:43:30] <jzaefferer> ok
[08:44:04] <jzaefferer> anything else?
[08:45:15] <flore77> no
[08:45:44] <jzaefferer> alright, thank you. We'll keep in touch
[08:46:11] <flore77> ok. Thanks. Have a nice week
[08:49:28] <jzaefferer> Closing the door here...
[12:00:56] <timmywil> DaveMethvin, m_gol, markelog https://docs.google.com/document/d/1uhcW9_TlSwD8JnO1_HNnSYJAriTK9WYZ8uQNDvtAAhA/edit
[12:01:01] <timmywil> j_bedard
[12:01:32] <markelog> hey-hey
[12:01:37] <m_gol> hi
[12:02:25] <timmywil> https://github.com/jquery/jquery/issues/3214 I propose this is a docs issue.
[12:02:36] <j_bedard> hey - something else I mentioned early (not sure if everyone saw it on -dev): https://github.com/jbedard/jquery/commit/0e99ac270adb53edc6396a54a09ded814c784626
[12:03:15] <j_bedard> as a solution to the ready-after-load, if we are still interested in discussing that
[12:03:17] <DaveMethvin> here
[12:03:53] <markelog> deprecation is a doc issue?
[12:04:13] <markelog> i meant it always was in the nutshell
[12:04:28] <timmywil> markelog: well, yes, but I would say deprecation involves more while "discouraging" doe snot
[12:04:44] <timmywil> as in, we don't move it to deprecated.js
[12:04:57] <DaveMethvin> well if we ever want to remove it, even in 5 years, we'll need to deprecate it
[12:05:08] <timmywil> j_bedard: we'll get to that
[12:05:14] <DaveMethvin> so the longer the runway the fewer people who will be using it later
[12:05:26] <DaveMethvin> i did have a question about that tho
[12:05:33] <DaveMethvin> for the slim build
[12:05:42] <m_gol> j_bedard: would you add it to agenda?
[12:05:47] <DaveMethvin> are we allowing breaking changes to slim in a minor version?
[12:05:51] <markelog> yeah, same here, timmywil you want to leave it in slim build?
[12:05:52] <timmywil> m_gol: I just did
[12:06:03] <DaveMethvin> moving something to deprecated would take it out of slim
[12:06:22] <markelog> DaveMethvin: i'd say is just variation of a jQuery version
[12:06:24] <timmywil> DaveMethvin: yes, slim is on the cutting-edge
[12:06:28] <markelog> otherwise we would have to version it
[12:06:29] <DaveMethvin> ok
[12:06:31] <gibson042> deprecations have to take place in a minor bump
[12:06:51] <DaveMethvin> right but normally breaking changes are only in a major
[12:07:10] <DaveMethvin> slim will take breaking changes in a minor when things are moved to deprecated.js which slim doesn't include
[12:07:11] <timmywil> alright, it sounds like I'm alone
[12:07:28] <markelog> that's what i mean, slim build - it is not a real source
[12:07:45] <DaveMethvin> i'm fine with it as long as we document that
[12:07:52] <markelog> it is like a custom build
[12:07:59] <DaveMethvin> it's a build, not a version :)
[12:08:06] <m_gol> I'm in favor of deprecating stuff we want to remove, even if in 10 years
[12:08:21] <markelog> like jquery ui build if they would move one module under the umbrella of another module
[12:08:22] <DaveMethvin> yeah me too, look how long it took to get rid of $.browser
[12:08:36] <timmywil> DaveMethvin: it's in the blog post, but it could also go in the download index
[12:08:59] <markelog> in any case, we could see how people would react
[12:09:16] <timmywil> alright, deprecation then
[12:09:21] <DaveMethvin> people who either like those apis or don't want to change their own code will always complain
[12:09:38] <timmywil> it's going to be a tough sell. I'm saying that now.
[12:09:50] <DaveMethvin> but we have always given them lots of options, including Migrate
[12:10:03] <DaveMethvin> we don't need to pull it any time soon
[12:10:11] <markelog> we can always reflect on community opinion, like we always do
[12:10:25] <timmywil> fair enough
[12:10:26] <markelog> like if they would say - "NOOOOOOO!!!!!1111"
[12:10:30] <markelog> or something :)
[12:10:39] <timmywil> we've gotten a couple of those already
[12:10:56] <DaveMethvin> right but it seems like they're complaining on behalf of others
[12:11:01] <j_bedard> Would a plugin that adds the shorthands satisfy those?
[12:11:09] <timmywil> probably not
[12:11:11] <DaveMethvin> i don't see where the pain is in deprecating something we don't remove
[12:11:15] <markelog> jquery-migrate should take care of that
[12:11:33] <timmywil> DaveMethvin: real pain? none. perceived pain? lots.
[12:11:40] <DaveMethvin> they can complain if we decide to remove it in jQuery 5 or whatever
[12:11:45] <markelog> right now, it seems just as confusion with the term "deprecating"
[12:12:08] <DaveMethvin> even the upgrade guide makes it clear that stuff we deprecated in 3 is still there
[12:12:31] <timmywil> markelog: the term deprecation is inherently ambiguous. that is my issue.
[12:12:47] <timmywil> ambiguous because it just means it "might" be removed.
[12:12:53] <DaveMethvin> which it might
[12:13:04] <timmywil> and I'd rather have a specific term
[12:13:15] <DaveMethvin> it just won't be removed until we're sure it's not going to cause a lot of pain
[12:13:25] <timmywil> but I recognize that deprecation is much too common
[12:13:33] <timmywil> so I'm not fighting anymore
[12:13:33] <DaveMethvin> using the same term is actually useful because it says "we might do this"
[12:13:35] <m_gol> well, it's true, it might be removed
[12:13:41] <m_gol> in 5 or 10 years
[12:13:44] <DaveMethvin> otherwise it's like, "oh ignore that"
[12:13:54] <markelog> yeah
[12:14:07] <timmywil> we'll be saying that a lot on this one. lol
[12:14:28] <markelog> like, if we not planning to remove it in foreseeable future, then we should be good
[12:14:44] <timmywil> alright, https://github.com/jquery/jquery/issues/3222
[12:14:55] <timmywil> I would like to continue support for 0.x
[12:15:04] <timmywil> but I don't care if we can't lint on 0.x
[12:15:15] <markelog> we can lint, but on older versions
[12:15:25] <m_gol> it may mean more PRs with unlinted stuff if someone builds on 0.x
[12:15:29] <markelog> in any case we probably will have to drop it in the end of the year
[12:15:30] <m_gol> but that may be ok
[12:15:40] <DaveMethvin> this is just until the end of this year, right?
[12:15:48] <markelog> m_gol: right?
[12:15:51] <m_gol> support for Node 0.10 ends at the end of September, 0.12 at the end of 2016
[12:16:00] <markelog> i remember you always have those dates :)
[12:16:09] <m_gol> can't wait for them to pass :P
[12:16:09] <timmywil> alright, well, maybe something for 4.0 then
[12:16:31] <DaveMethvin> do we get ppl wanting to submit prs who are hurt by this?
[12:16:33] <markelog> we can check the stats for custom builds
[12:16:51] <m_gol> timmywil: this is only about building
[12:16:58] <DaveMethvin> ahok
[12:16:58] <m_gol> so I don't think semver matters here
[12:17:04] <DaveMethvin> agreed
[12:17:08] <m_gol> because we don't test it *working* on these Node versions at all
[12:17:15] <m_gol> they may very well not work at all
[12:17:15] <timmywil> m_gol: I mean the 4.0 timeline might line up
[12:17:19] <m_gol> k
[12:18:20] <timmywil> m_gol: true, we'd have to run the whole suite with jsdom or something
[12:18:34] <m_gol> yup, and jsdom has dropped Node <4 long ago
[12:18:48] <m_gol> before Node 4 even got released (it only supported io.js for a while)
[12:18:50] <timmywil> ok, so we just drop those versions from travis?
[12:18:58] <m_gol> I'd just skip ESLint there
[12:19:02] <m_gol> and keep running it on Travis
[12:19:07] <timmywil> fine with me
[12:19:09] <markelog> why?
[12:19:10] <m_gol> just to make sure the `grunt` command succeeds
[12:19:21] <markelog> we would have introduce couple hacks to make it work
[12:19:26] <timmywil> one less barrier to contribute
[12:19:37] <timmywil> markelog: we do? sounds like a matter of skipping a task.
[12:19:49] <markelog> well, yeah, we would have check env
[12:19:51] <m_gol> markelog: we already do things like that: https://github.com/jquery/jquery/blob/02c5e2908c2d99f191f5ec9e365ef2a3d357d1eb/Gruntfile.js#L18-L19
[12:19:56] <markelog> then choose different set of tasks
[12:20:21] <timmywil> was gonna say, thought we already had that check
[12:20:39] <m_gol> grunt.registerTask('eslintOrNothing', oldNode ? [] : ['eslint']);
[12:20:40] <m_gol> etc.
[12:20:47] <markelog> yeah, not pretty :)
[12:20:53] <m_gol> but works ;)
[12:20:56] <timmywil> heh
[12:21:02] <timmywil> avert your eyes
[12:21:03] <markelog> so you want to wait until september right?
[12:21:17] <m_gol> until December, 0.10 & 0.12 are almost equally terrible
[12:21:18] <markelog> it seems i did, since i didn't notice it :)
[12:21:32] <markelog> could we add this to the roadmap?
[12:21:34] <timmywil> nah, that might as well be done at any time. won't be prettier later.
[12:21:49] <markelog> i mean, introduce the hack now
[12:21:57] <markelog> wait until september/december
[12:21:58] <m_gol> timmywil: I mean wait for removing support for building jQuery on Node<4
[12:22:00] <markelog> and remove the hacks
[12:22:03] <timmywil> oh sure
[12:22:03] <m_gol> yup
[12:22:12] <timmywil> yea, that can be a roadmap item
[12:22:17] <m_gol> +1
[12:22:19] <markelog> cool, will you add it?
[12:22:28] <timmywil> got it
[12:23:10] <m_gol> added
[12:23:27] <timmywil> ok thanks
[12:23:32] <markelog> thanks
[12:23:40] <timmywil> https://github.com/jquery/jquery/issues/3193
[12:23:46] <timmywil> dimensions
[12:24:20] <timmywil> I think the only difference between offsetWidth/Height and bounding is transforms.
[12:24:31] <m_gol> I think it's actually needed to be able to retrieve real final dimensions, including transforms
[12:24:31] <timmywil> unfortunately, I don't see a way to get these dimensions without offsetWidth/Height
[12:24:43] <m_gol> browsers changed the output of gBCR
[12:24:56] <m_gol> to take them into account
[12:24:59] <m_gol> etc.
[12:25:13] <timmywil> you mean, they ruled it was more useful?
[12:25:16] <DaveMethvin> i'm still not clear on the use cases and whether ppl want a different value for .css(width) vs .width()
[12:25:22] <m_gol> the real problem is that our .css('width') now really doesn't return what's the computed style for width
[12:25:31] <DaveMethvin> right that seemed to be one issu
[12:25:35] <m_gol> because we have hooks for that
[12:25:52] <DaveMethvin> for width and height, .css(x) is not .getComputedStyle(x)
[12:25:59] <m_gol> I was actually surprised to see these hooks a few years ago when I started contributing to jQuery :-)
[12:26:09] <j_bedard> Shouldn't .css('width') return the css 'width' property though? And .width() should return the element width (often different then the css prop)
[12:26:23] <DaveMethvin> and of course many times they don't even want the COMPUTED style
[12:26:34] <DaveMethvin> j_bedard: yes i think that's what many ppl expect
[12:26:35] <timmywil> j_bedard: no, .css returns computed css
[12:26:42] <markelog> haha
[12:26:43] <timmywil> not just style values
[12:26:46] <j_bedard> yes or no? :P
[12:26:55] <DaveMethvin> what they expect and what they get are often not the same
[12:26:56] <m_gol> j_bedard: I think that would be best. The main problem is we've been doing a different thing for ages
[12:27:18] <timmywil> .css has always been computed, tho
[12:27:36] <timmywil> I agree it's confusing when box-sizing comes into play
[12:27:39] <m_gol> timmywil: yes but .css('width') is not the computed style for width
[12:27:42] <DaveMethvin> like there's width as specified in the sheet, maybe 22em, and computed value, 145px, and transformed value, maybe 250px
[12:27:51] <m_gol> it's always used offsetWidth and now gBCR().width
[12:28:37] <m_gol> so I think it's expected & desirable that .width() now includes transforms etc.
[12:28:44] <timmywil> to be fair, both of those are computed
[12:28:51] <m_gol> the problem is that .css('width') now does, too
[12:28:57] <DaveMethvin> oldIE didn't have computed styles so this was the workaround since width/height were so important to get right
[12:29:10] <timmywil> ^^
[12:29:13] <m_gol> timmywil: "computed style" has concrete meaning in the spec :)
[12:29:25] <markelog> so it seems, css("width") should return computed style of "width"?
[12:29:31] <markelog> style property
[12:29:31] <m_gol> although getComputedStyle() doesn't return the computed style but the resolved style (oh boy)
[12:29:55] <DaveMethvin> this is why i'm not clear :)
[12:30:02] <timmywil> m_gol: lol, what
[12:30:16] <timmywil> srsly?
[12:30:29] <timmywil> alright
[12:30:34] <timmywil> then idk
[12:30:45] <DaveMethvin> yeah how do we resolve this
[12:30:46] <m_gol> https://drafts.csswg.org/cssom/#resolved-values
[12:30:52] <DaveMethvin> wihtout making more of a mess
[12:31:00] <gibson042> I'd like to get to a point where .css("width") uses values only from gCS, and .width() et al. are free to diverge
[12:31:10] <m_gol> gibson042: +9001
[12:31:11] <timmywil> ah, the concept of computed changed
[12:31:19] <j_bedard> gibson042: +1
[12:31:30] <DaveMethvin> gibson042: that seems like the reasonable thing
[12:31:33] <markelog> so css() method wouldn't return css value?
[12:31:41] <markelog> oh, sorry
[12:31:46] <markelog> yeah, i agree
[12:31:52] <markelog> that's what i proposed earlier
[12:31:54] <DaveMethvin> so we just don't have that special case in .css anymore
[12:32:01] <markelog> whatever gCS returns we should return
[12:32:05] <gibson042> as it is, .css appears to have an "extra" parameter solely for the width/height functions
[12:32:05] <timmywil> what's the difference between gCS and offsetWidth, specifically?
[12:32:06] <markelog> for css() method
[12:32:41] <m_gol> timmywil: gCS returns fractional output
[12:32:57] <DaveMethvin> but it's before any transforms?
[12:32:57] <m_gol> and nothing for disconnected nodes, I think
[12:33:06] <timmywil> do they respect border-box differently, or transforms?
[12:33:24] <DaveMethvin> they should respect  border-box
[12:33:36] <m_gol> border-box should be ignored there, you're getting the computed value for width, not the size of the box on the screen
[12:33:39] <timmywil> well, I thought offsetWidth ignores it
[12:33:42] <markelog> m_go: it should differ in different browsers
[12:33:44] <DaveMethvin> which i think means our docs are wrong
[12:33:47] <markelog> don't think that is speced
[12:33:55] <gibson042> gCS is for the `width` CSS property, so ignores transforms and includes/excludes other properties per box-sizing
[12:34:15] <DaveMethvin> the .css("width") will include the border if it's border-box, won't it?
[12:34:27] <gibson042> offsetWidth always includes border and padding IIRC
[12:35:02] <timmywil> ok, then gibson042: +1
[12:35:03] <gibson042> and I don't know if offsetWidth–transform interactions are specified
[12:35:20] <markelog> offsetWidth and alike props should ignore all the new stuff
[12:35:36] <markelog> so it should ignore it
[12:35:57] <timmywil> but I do think we need a way to provide dimensions sans transforms
[12:35:57] <markelog> browser treating those props as deprecated
[12:37:02] <timmywil> as that's what I would need in my panzoom plugin
[12:37:15] <timmywil> I could subtract the transforms myself I suppose
[12:37:57] <timmywil> is that what we want to recommend tho?
[12:38:40] <gibson042> timmywil: you're asking about .width() et al. now, right?
[12:38:50] <timmywil> yea
[12:38:51] <markelog> amm, isn't Richard said it will ignore it?
[12:38:57] <markelog> transforms i mean
[12:39:10] <gibson042> I haven't come to an opinion on that yet
[12:39:19] <m_gol> https://jsfiddle.net/ftkyjg1b/6/
[12:39:19] <markelog> i mean
[12:39:22] <timmywil> offsetWidth ignores it, but bounding box does not
[12:39:24] <markelog> gCS is for the `width` CSS property, so ignores transforms and includes/excludes other properties per box-sizing
[12:39:24] <markelog> DaveMethvin
[12:39:25] <gibson042> but remember, rotations are valid transforms too
[12:39:35] <markelog> sorry, weird copy/paste
[12:39:41] <timmywil> gCS would be used in .css
[12:39:49] <markelog> yeah, so it would ignore it
[12:40:20] <DaveMethvin> i like the idea of css("width") giving the computed style, since the others work that way
[12:40:32] <DaveMethvin> and .width() can include transforms?
[12:40:43] <m_gol> yeah, that'd be ideal
[12:40:45] <DaveMethvin> so we don't need offsetWidth?
[12:40:50] <m_gol> yes
[12:40:56] <m_gol> we should never need it
[12:41:03] <DaveMethvin> NEVER
[12:41:03] <m_gol> it doesn't do fractional values
[12:41:03] <timmywil> we're talking about .width(), not .css('width') tho. Since we switched to use getBoundingClientRect(), our dimensions are including transforms.
[12:41:05] <markelog> yes!
[12:41:10] <m_gol> so it's useless
[12:41:12] <gibson042> I don't think .width() should include transforms
[12:41:27] <m_gol> gibson042: why? that's what gBCR() does...
[12:41:30] <DaveMethvin> is there some measure we should expose that DOES use transforms?
[12:41:38] <markelog> yeah, so .width() is getBoundingClientRect().width and css("width") is gCS("width")
[12:41:49] <gibson042> if .width() includes transforms, then what the hell should innerWidth do?
[12:42:17] <DaveMethvin> lol
[12:42:19] <m_gol> good question
[12:42:38] <DaveMethvin> stop asking hard questions
[12:43:04] <markelog> i guess we can table this?
[12:43:23] <m_gol> I don't think there is a Web API that does all that we want
[12:43:29] <gibson042> well, can we come to consensus that existing width/height methods should ignore transforms?
[12:43:37] <DaveMethvin> can we try to discuss on the ticket? it would be good to know how ppl are using this
[12:43:44] <timmywil> gibson042: +1
[12:43:47] <markelog> sounds good to me
[12:43:48] <m_gol> gibson042: but how?
[12:43:53] <gibson042> then we could consider _new_ surface area that factors them in using gBCR
[12:43:56] <timmywil> m_gol: heh, that's the part we can table
[12:44:00] <m_gol> ok
[12:44:02] <gibson042> and maybe the current stuff gets deprecated
[12:44:04] <DaveMethvin> yeah the hard part :)
[12:44:16] <gibson042> but as long as we have them, they should ignore transforms
[12:44:29] <m_gol> which may mean no fractional values again
[12:44:35] <markelog> can someone outline in some ticket, what questions do we want to answer?
[12:44:43] <markelog> i think we should be as clear as possible
[12:44:50] <markelog> so everyone would be on the same page
[12:45:31] <DaveMethvin> gibson042 could you outline it?
[12:45:43] <gibson042> yes
[12:45:45] <markelog> also like what staff can we include - transforms, box-sizing, border-width; etc
[12:45:50] <markelog> or substract
[12:46:06] <timmywil> I foresee a table incoming
[12:46:11] <DaveMethvin> :)
[12:46:16] <markelog> i think if we do this point by point it will be very clear :)
[12:46:21] <DaveMethvin> inner, outer
[12:46:38] <gibson042> if I can do it clearly without a table, I will
[12:46:41] <DaveMethvin> thinking about things i can see why gibson042 was proposing we ignore transforms for the currant api
[12:46:42] <gibson042> but no promises :)
[12:46:51] <markelog> maybe would be a good skeleton for future documentation
[12:46:51] <m_gol> :)
[12:46:53] * DaveMethvin inserts Deferred joke
[12:47:01] <timmywil> ok, more to cover. https://github.com/jbedard/jquery/commit/0e99ac270adb53edc6396a54a09ded814c784626
[12:47:02] <m_gol> I worry this might be impossible before 4.0, heh
[12:47:04] <markelog> couple promises :)
[12:47:08] <markelog> only couple though!
[12:47:35] <timmywil> this is interesting
[12:48:07] <j_bedard> m_gol: you can see this is similar to $q :P
[12:48:11] <timmywil> reminds me of rAF
[12:48:12] <m_gol> :)
[12:48:34] <m_gol> j_bedard: are most promise implementations doing sth like that?
[12:48:39] <m_gol> the performant ones, I mean ;-)
[12:48:50] <j_bedard> Note that before this commit the aplus tests often fail for me with a "timeout of 200ms exceeded" error, this commit seems to remove that
[12:49:03] <j_bedard> I know $q does in angular, otherwise I really have no idea!
[12:49:07] <m_gol> interesting, I've never seem this error
[12:49:12] <markelog> tick() is one thing, but how we use it to solve load issue is weird to me
[12:49:12] <m_gol> * seen
[12:49:27] <markelog> do you use node 0.10? :)
[12:49:39] <j_bedard> v6.2.1
[12:49:41] <m_gol> I'd mostly treat it as a perf optimization
[12:49:58] <m_gol> and one of the side effects might be that some code stops being broken for people
[12:50:18] <m_gol> I don't see us guaranteeing ready-load order via a commit like that, too indirect IMO
[12:50:20] <j_bedard> This can be thought of as 2 separate issues though, perf by avoiding many timeouts, fixing ready-before-load by using this new tick method
[12:51:00] <timmywil> both of those could probably use issues. I'm not sure about the latter, but this looks good for the former.
[12:51:35] <j_bedard> It seems to always fix ready-before-load on empty documents for me, without it on the same doc I always get load-before-ready
[12:52:08] <m_gol> Ah, this is fixing the issue in this way; I didn't notice.
[12:53:14] <j_bedard> I think this fixes https://github.com/jquery/jquery/issues/3197 and https://github.com/jquery/jquery/issues/3194
[12:53:27] <markelog> it is introduces a memory leak, right?
[12:53:43] <gibson042> I'm not sure, but I think there are cases where this will result in invoking callbacks too fast
[12:54:03] <m_gol> won't it cause any problems by force-firing the callbacks when the load event happens?
[12:54:30] <gibson042> it could
[12:54:42] <gibson042> but I'm thinking about just the stuff in deferred
[12:55:34] <j_bedard> gibson042: I was wondering the same thing, but it doesn't seem to break any of the aplus tests
[12:55:45] <timmywil> j_bedard: it probably would, but we'd want to make sure there were not unforeseen side effects
[12:55:59] <gibson042> j_bedard: it wouldn't; those are all isolated unit tests
[12:56:36] <gibson042> so first resolution of any promise queues something that should be async, but then if a secondary resolution happens we invoke sync
[12:57:54] <gibson042> so something like dfd.resolve( fakePromise ) might trip it if fakePromise invokes callbacks more than once
[12:58:06] <j_bedard> and invoking tick() currently overrides that, but only in this one load/ready use case which is a DOM event that is async anyway
[12:58:16] <j_bedard> (overrides the first resolution being async)
[12:58:38] <j_bedard> I need to leave now though. Should I open a PR to discuss this further?
[12:58:46] <gibson042> I think so
[12:58:57] <timmywil> and issue
[12:58:59] <j_bedard> Would be great to get more examples of potential breaks like the fakePromise one, I'll have to try it...
[12:59:27] <timmywil> alright, I'll cut it off here. Anything we didn't get to will be added to the top of the agenda for next week.
[12:59:39] <timmywil> Have a look at the raf PR https://github.com/jquery/jquery/pull/3151
[12:59:49] <timmywil> thanks everybody!
[12:59:49] <markelog> aah, again i couldn't talk about my staff :)
[13:00:11] <markelog> *stuff
[13:00:16] <timmywil> lol
[13:00:21] <markelog> :)
[13:00:59] <timmywil> markelog: put it on the agenda for 18th
