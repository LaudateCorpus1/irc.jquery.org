[09:00:40] <timmywil> gibson042, m_gol, markelog_, DaveMethvin, arthurvr MEAT
[09:00:48] <DaveMethvin> Here!
[09:00:50] <arthurvr> hey everybody
[09:00:50] <gibson042> Oi!
[09:01:07] <timmywil> oh, and gnarf ?
[09:01:14] <arthurvr> The electricity just went off over here so I'm on my phone with like 5% battery :(
[09:01:36] <DaveMethvin> whoa! you should have paid the bill arthurvr ! :)
[09:01:49] <gnarf> yup
[09:01:53] <arthurvr> haha DaveMethvin
[09:02:27] <timmywil> So, our first two issues have to do with documenting low-level effects apis and whether to deprecate plain objects across the board
[09:03:13] <gnarf> So like - there are people using those low level apis - I've seen examples, I've given talks about them, I kind of feel like we should document them -- Even if we plan to deprecate them
[09:03:14] <timmywil> gnarf: I mostly wanted to ask you and DaveMethvin about those 2. First, do you think we should document things like Tween?
[09:03:18] <gnarf> especially if we plan to deprecate them
[09:04:29] <timmywil> yea, if there are enough people using it already, that seems like a strong argument to document
[09:04:56] <timmywil> I don't think it's going anywhere for a while
[09:05:09] <DaveMethvin> what level of docs are we talking about?
[09:05:20] <timmywil> I assumed api.jquery.com
[09:05:30] <arthurvr> yup
[09:05:30] <DaveMethvin> it seems like a lot of effort to create entries for all those objects at api.jquery.com
[09:05:46] <DaveMethvin> there's some old docs gnarf put together already
[09:06:04] <timmywil> https://gist.github.com/gnarf/54829d408993526fe475
[09:06:09] <arthurvr> Yeah also kswedberg has some work started in a branch
[09:06:37] <timmywil> looks like the big ones are jQuery.Animation and jQuery.Tween
[09:07:17] <markelog__> aaam, we want to deprecate low-level apis?
[09:07:21] <markelog__> why?
[09:07:32] <DaveMethvin> if someone wants to do the work, we could document them
[09:07:40] <DaveMethvin> assuming we want to support them and add unit tests, etc
[09:07:47] <DaveMethvin> there aren't any unit tests atm
[09:07:50] <timmywil> markelog__: I don't think we do want to depreate them
[09:08:01] <DaveMethvin> has someone signed up to do the docs and unit tests?
[09:08:11] <markelog__> there was a comment from gnarf
[09:08:13] <markelog__> "So like - there are people using those low level apis - I've seen examples, I've given talks about them, I kind of feel like we should document them -- Even if we plan to deprecate them"
[09:08:13] <gnarf> DaveMethvin: I could write units
[09:08:57] <markelog__> i don't think we want to deprecate those apis
[09:08:59] <DaveMethvin> if someone is going to do the work that would definitely be a vote in favor of supporting them
[09:09:00] <markelog__> right?
[09:09:09] <timmywil> markelog__: yes, I read that as a hypothetical. Like, even in the event that we deprecate them, they should still be documented.
[09:09:25] <markelog__> oh, okay )
[09:10:02] <gnarf> what timmywil said
[09:10:08] <markelog__> does anyone uses those apis in the plugins?
[09:10:14] <markelog__> do we have an example of that use?
[09:10:29] <markelog__> do we want people to use them?
[09:11:16] <DaveMethvin> if you do want people to use them, you need to document, unit test, and support them
[09:11:38] <DaveMethvin> some of this is chicken and egg, they're not widely used because they're not well documented
[09:11:45] <timmywil> ^^
[09:11:45] <gnarf> what dave said
[09:11:53] <DaveMethvin> but it also means we haven't had problems with people using them or finding bugs
[09:11:58] <timmywil> and I don't think it's bad to use them
[09:12:01] <DaveMethvin> which we will if we document them
[09:12:06] <markelog__> DaveMethvin: i assumed if gnarf give couple talks about them, there might some buzz about them
[09:12:26] <gnarf> I created most of those APIs so we could one day fix problems in how jQuery UI effects needed to do their work
[09:12:51] <markelog__> cool
[09:13:02] <gnarf> I drafted a huge chunk of documentation on them, kswedberg and I sat down and started to work on some of it.
[09:13:16] <markelog__> does ui team start using them or planning to do so?
[09:13:20] <DaveMethvin> so i suggested deprecating them mainly because they add a lot of api surface and they would need to be documented, tested, supported
[09:13:22] <gnarf> cc mikesherov
[09:13:33] <DaveMethvin> if you want to do that work then it's fine with me
[09:13:55] <DaveMethvin> deprecating doesn't mean removed, just means not emphasized
[09:14:20] <gnarf> I don't mind adding additional units on those APIs
[09:14:41] <markelog__> if ui team needed those apis, it seems we would need to support it, right?
[09:14:42] <gnarf> They are in effect, all tested by using the old animation suite
[09:14:59] <DaveMethvin> honestly i'm good either way, we just need someone to do the work and that's been a problem up to now
[09:15:37] <arthurvr> Well I *could* give documenting it further a try (but I probably won’t be the right guy, I wasn’t even around back then)
[09:15:41] <timmywil> That brings up a meta issue. I'd like to move away from deprecating things we don't plan to remove. If it's there and we discourage use, it should probably be private.
[09:16:15] <DaveMethvin> i think we just need to be really careful about creating new apis! :)
[09:16:23] <markelog__> )
[09:16:27] <timmywil> fair enough
[09:16:42] <gnarf> I'll make myself available to assist in docs - but I feel like I did a huge chunk of "drafting" bits about it
[09:16:47] <DaveMethvin> yeah, normally deprecation is on the road to removal
[09:17:22] <markelog__> if we would make them private would that be equvivalent of removal?
[09:17:26] <arthurvr> gnarf: yeah your draft is quite great work already.
[09:17:31] <markelog__> for the user at least
[09:17:37] <gnarf> DaveMethvin: are they really "new" APIs if I created it like 2.5 yrs ago?
[09:17:49] <gnarf> and wrote draft docs
[09:17:56] <timmywil> I haven't seen kswedberg's work, but I imagine he's already started the process of creating pages for .Animation and .Tween
[09:18:02] <gnarf> and noone said "hey we need tests on this"
[09:18:05] <timmywil> that's probably where I would start
[09:18:13] <DaveMethvin> gnarf: no they are not new, i'm just saying that we probably shouldn't have made them public back then
[09:18:20] <DaveMethvin> i feel the same way about Callbacks
[09:18:35] <DaveMethvin> we needed some internal use of them before immediately exposing them
[09:18:52] <markelog__> for me, callbacks module, even look as needless abstraction
[09:19:12] <DaveMethvin> but since we've exposed and documented them it's kind of hard to take back!
[09:19:25] <kswedberg> Hey all. I don't think I did much at all on that.
[09:19:26] <DaveMethvin> and now they're not even a good abstraction for our Deferreds
[09:19:51] <markelog__> DaveMethvin: if no one uses them, it might be not that hard :-)
[09:20:04] <markelog__> or not that painful at least
[09:20:06] <arthurvr> this is what’s done already https://github.com/jquery/api.jquery.com/commit/c06c6b6c6b7ffcd9bc1a53217092210e6b037355
[09:20:26] <arthurvr> and this https://github.com/jquery/api.jquery.com/commit/de03e271a067b210495fbc4cba5b6b8d41f78874
[09:20:49] <DaveMethvin> so it sounds like the easy part of this decision is "don't deprecate Animation and Tween" then?
[09:21:08] <DaveMethvin> the hard part is the work to make them official
[09:21:16] <markelog__> btw, it might be good to document it, even for ourselfs
[09:21:23] <DaveMethvin> true
[09:21:28] <markelog__> not just by looking at code and stuff
[09:21:31] <timmywil> yes, unless we plan to remove or make private, but I actually like these APIs
[09:21:32] <DaveMethvin> the docs gnarf has are pretty good for that
[09:22:00] <gnarf> I will add some additional units to cover these "more advanced" uses of the API
[09:22:00] <arthurvr> yeah for ourselves only gnarfs docs are good
[09:23:15] <gnarf> I mean we started this ball rolling in 2012, a couple of us worked on it, and then the pressure to work on it just stopped / fell off the radar: https://github.com/jquery/api.jquery.com/issues/61
[09:23:41] * DaveMethvin raises guilty hand
[09:23:43] <DaveMethvin> :)
[09:23:44] <gnarf> everyone liked the APIs - and Dave's request in 2015 for units is the first I realized there weren't even units on those APIs yet, I thought I wrote them
[09:24:47] <timmywil> the effects tests we have may actually be sufficient to ensure they work correctly, but it would be nice to have tests that mirror the examples we'll put in the docs.
[09:25:28] <timmywil> just to be safe
[09:25:37] <DaveMethvin> also i'm concerned that there may be Animation or Tween usages that are not covered by our own uses in .animate
[09:25:44] <DaveMethvin> units would help there
[09:26:13] <DaveMethvin> would it make sense to break those out into separate files?
[09:26:21] <DaveMethvin> not sure of their dependencies
[09:26:28] <timmywil> Tween already is
[09:26:36] <markelog__> everything is )
[09:27:04] <DaveMethvin> oh yeah!
[09:27:47] <timmywil> .Animation is in effects, but it uses some private stuff we have in that module
[09:28:14] <gnarf> fxNow?
[09:29:21] <timmywil> and createTween, the prefilters and propFilter
[09:29:49] <timmywil> but it could probably be split off if we want
[09:29:54] <gnarf> so most of that could be private to .Animate
[09:30:14] <gnarf> all the stuff up front just calls into it via $.fn.animate anyway
[09:30:21] <timmywil> yea, looks that way
[09:30:51] <gnarf> none of the "exposed apis" for animation should know about anything other than $.Animate
[09:31:07] <gnarf> the toggly stuff i think even gets handled in there
[09:31:43] <gibson042> yeah, that's in the default prefilter
[09:32:01] <gibson042> because you can toggle a collection that includes both hidden and visible elements
[09:32:33] <gnarf> I'll try to take a look at that code again and do some organizational / add additional units
[09:32:53] <timmywil> ok, so if gnarf adds tests, I think that's a good first step.
[09:33:05] <timmywil> What about plain objects?
[09:33:27] <timmywil> are there legitimate use cases for plain objects in events or effects?
[09:33:31] <markelog__> you know, what i'm gonna say :-)
[09:33:46] <gnarf> I've used it
[09:33:49] <gnarf> in effects
[09:33:50] <gnarf> queues
[09:33:52] <gnarf> etc
[09:33:56] <gnarf> but
[09:34:56] <DaveMethvin> i dunno, maybe it's easy to ensure that we're not assuming DOM elements everywhere, but is there a legit use case?
[09:35:12] <timmywil> DaveMethvin, I'm looking at you for events :)
[09:35:16] <DaveMethvin> i can't recall if we had a unit test for that one either
[09:35:30] <gibson042> "legit" is tricky... the fact that we support both makes it easy to transition to react-style programming
[09:35:30] <gnarf> I also know about it... I've seen / shared http://jsbin.com/odocid/2222/edit?html,css,js,output around a lot
[09:35:53] <gibson042> of which that is a perfect example :)
[09:35:56] <gnarf> that wasn't even written by me
[09:35:56] <DaveMethvin> on events, people use the jquery event system for pub/sub types of work
[09:36:10] <DaveMethvin> so i think the basic .on() and .trigger() is legit
[09:36:23] <DaveMethvin> but i have always said people need to avoid event names with semantic meaning to browsers
[09:36:38] <DaveMethvin> we don't try to make "focus" events work nicely on plain objects
[09:37:06] <DaveMethvin> i think there's a brief mention of that in the "on" docs
[09:37:41] <markelog__> DaveMethvin: what is use case?
[09:37:49] <gnarf> also, the person who originally wrote it used jQuery.Animation: http://jsbin.com/odocid/2/edit?html,css,js,output
[09:38:16] <DaveMethvin> markelog__: https://gist.github.com/cowboy/661855
[09:38:36] <gnarf> ^^^ that demo was built against my "draft docs" from the 1.8 release
[09:39:03] <markelog__> DaveMethvin: looks weird
[09:39:10] <DaveMethvin> markelog__: it is! :)
[09:39:36] <timmywil> Ok, so it sounds like the answer is we should support it, but documenting the gotchas is the hard part.
[09:40:08] <markelog__> timmywil: well, people obviously used, since we support them
[09:40:23] <markelog__> but should we continue to support them?
[09:40:43] <DaveMethvin> i say we wait until people report specific problems, then decide what to do
[09:40:54] <timmywil> DaveMethvin: +1
[09:40:56] <DaveMethvin> most of this is edge caeses
[09:41:32] <DaveMethvin> "just-in-time bug fixes"
[09:42:07] <markelog__> so want to remove it and wait for people to file a bugs?
[09:42:45] <DaveMethvin> no, keep what we have and wait for people to file bugs if they run into something
[09:43:13] <markelog__> oh, so document it and wait when people will file a bugs :-)
[09:43:44] <DaveMethvin> here's what the entry for `jQuery` says: At present, the only operations supported on plain JavaScript objects wrapped in jQuery are: .data(),.prop(),.on(), .off(), .trigger() and .triggerHandler(). The use of .data() (or any method requiring .data()) on a plain object will result in a new property on the object called jQuery{randomNumber} (eg. jQuery123456789).
[09:44:14] <markelog__> yeah, why would anyone would use data() on plain objects?
[09:44:23] <DaveMethvin> if you used events on plain objects :)
[09:44:38] <markelog__> like, for what?
[09:44:50] <timmywil> pub/sub for example
[09:44:51] <markelog__> pub/sub thing?
[09:44:57] <DaveMethvin> $({}).on("special", fn).trigger("special")
[09:45:08] <markelog__> it seems it should be done in another way
[09:45:22] <DaveMethvin> oh i agree it's misuse of jquery, but it's out there
[09:45:30] <markelog__> why not just ({ special: fn }).fn()
[09:45:31] <DaveMethvin> was even encouraged many years ago
[09:46:10] <DaveMethvin> in any case you can see there aren't a lot of methods documented to accept plain objects so it's not too bad
[09:46:26] <DaveMethvin> and there are unit tests for events and plain objects
[09:46:35] <gnarf> DaveMethvin: ^^^ I think it was a yayquery/benalman suggestion which led me to start using $({}).queue()
[09:46:46] <DaveMethvin> damn those guys! :)
[09:46:52] <markelog__> DaveMethvin: meaning it might be not that hard to remove them
[09:47:04] <markelog__> or at least look at the reaction of the people
[09:47:07] <DaveMethvin> except that benalman's plugins live on
[09:47:37] <timmywil> Last thing I wanted to fit in was about the patch. https://github.com/jquery/jquery/pull/2185
[09:47:46] <timmywil> I'm using the Object constructor
[09:47:48] <DaveMethvin> anyway, i'm okay with deprecating plain objects if you really wanted, but they work and are unit tested right now so there's not a lot of reason to change it
[09:48:22] <markelog__> i'd say byte size and code complexity
[09:48:43] <DaveMethvin> timmywil: on that patch, you're concerned about using Object()?
[09:49:03] <timmywil> my concern mostly has to do with style. We don't do this often.
[09:49:11] <markelog__> i just really hate https://github.com/jquery/jquery/pull/2125/files#diff-031bb62d959e7e4949d1847c82507f33R635
[09:49:12] <markelog__> )
[09:49:22] <timmywil> the other option is something like typeof obj === "object" && obj !== null or something
[09:49:25] <markelog__> okay, next item, i'm quit now
[09:50:01] <timmywil> I like how terse it is, but wanted to make sure we were cool with this exception
[09:50:20] <DaveMethvin> either way is okay with me, as long as Object() works everywhere
[09:50:24] <gibson042> timmywil: I don't think we need that
[09:50:36] <gibson042> isArraylike is only called on objects
[09:50:51] <gibson042> the old implementation just did `length = obj.length` directly
[09:51:07] <gibson042> so we're fine to say `"length" in obj`
[09:51:13] <timmywil> and very occassionally strings
[09:51:54] <gibson042> sure, but irrelevant
[09:52:57] <gibson042> it was ok to do obj.length, so it's ok to do "length" in obj
[09:53:24] <timmywil> I'm not saying it's a big case, but it's supported by native forEach and it's always worked
[09:53:45] <timmywil> "supported" is too strong a word. It works with native.
[09:54:11] <DaveMethvin> is it needed to avoid the JIT bug?
[09:54:23] <timmywil> Object? no
[09:54:31] <timmywil> only to preserve existing behavior
[09:55:13] <timmywil> the in operator is what fixes the JIT error
[09:55:38] <timmywil> I'd just not rather not break something if I don't have to
[09:55:45] <timmywil> perf and size is not an issue
[09:56:26] <DaveMethvin> you're starting to sound as conservative as I am timmywil :)
[09:56:31] <gibson042> my point is that omitting Object won't break anything that works now, because we're already doing obj.length
[09:57:16] <DaveMethvin> actually reminds me of https://github.com/jquery/jquery/pull/2201
[09:57:17] <gibson042> which of course is wrong, because strings
[09:57:18] <gibson042> n/m
[09:57:47] <gibson042> timmywil is right
[09:58:02] <DaveMethvin> oh yeah, i forgot `in` can't be used on a string
[09:58:11] <timmywil> ^^
[09:58:48] <DaveMethvin> "timmywil is right" better close the meeting while you're ahead!
[09:59:01] <timmywil> So, we're out of time. Please put any comments/objections in the PR. I plan on landing this week.
[09:59:33] <timmywil> Oh, also, thanks to gibson042 for the Sizzle release!
[09:59:41] <timmywil> merged into jQuery today
[09:59:59] <DaveMethvin> i'll be around this week, ping me if you need anything!
[10:00:02] <gibson042> yes, thank you
[10:00:06] <timmywil> thanks everyone
