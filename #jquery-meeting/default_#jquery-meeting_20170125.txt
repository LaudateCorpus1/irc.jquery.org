[12:00:45] <scott_gonzalez> jzaefferer awayrxaviers fnagel
[12:00:52] <fnagel> hey
[12:01:28] <scott_gonzalez> hey
[12:02:45] <scott_gonzalez> I guess the first thing on the agenda that we can discuss is datepicker.
[12:03:04] <fnagel> ok
[12:03:14] <fnagel> guess you've seen the PRs?
[12:03:28] <scott_gonzalez> It's been a while (two months) since out last meeting, so we'll probably need to provide context for some stuff.
[12:03:38] <scott_gonzalez> But on the last agenda, we had this item:
[12:03:41] <scott_gonzalez> Need to add the date to the `select` and `change` events
[12:04:20] <scott_gonzalez> Which is addressed by https://github.com/jquery/jquery-ui/pull/1786
[12:04:21] <scott_gonzalez> And is ready to land.
[12:05:17] <scott_gonzalez> Yeah, I saw the PRs, but didn't get around to it until after jzaefferer had already reviewed.
[12:05:33] <scott_gonzalez> I did a quick glance over since he had already approved and didn't see anything that stood out.
[12:05:38] <scott_gonzalez> So I think they're all ready to be merged.
[12:06:05] <fnagel> perfect
[12:06:20] <scott_gonzalez> So let's just go over those other PRs to make sure everyone is caught up.
[12:06:24] <scott_gonzalez> Remove `aria-hidden` from all cells: https://github.com/jquery/jquery-ui/pull/1788
[12:06:44] <scott_gonzalez> This was brought up by Jon Gunderson on the planning wiki.
[12:07:03] <fnagel> Yeah, which is pretty strange as he requested adding this property some time ago.
[12:08:39] <jzaefferer> In the worst case, we'll put it back again! Its a simple change...
[12:09:02] <fnagel> that was my thought too
[12:09:03] <scott_gonzalez> Presumably his first comment was based on what he thought was needed and this latest comment was based on actual testing.
[12:10:20] <scott_gonzalez> `numberOfMonths` could not be changed after initialization: https://github.com/jquery/jquery-ui/pull/1787
[12:10:21] <scott_gonzalez> This one is also ready to merge.
[12:10:54] <scott_gonzalez> fnagel: I assume you'll merge all of those soon. Do you know what you'll work on next?
[12:11:09] <scott_gonzalez> Is there anything that needs discussion right now?
[12:11:26] <scott_gonzalez> We have this question on the agenda: "Should we add an event for rendering? Example: changing month or year"
[12:12:20] <scott_gonzalez> Do you recall whose question that was? I feel like it may have been mine.
[12:12:29] <scott_gonzalez> I still think it could be useful, but I don't have any specific use cases in mind, so I'm not sure if it's actually needed.
[12:12:35] <fnagel> not really, I would like to finalize a11y but still missing a concept how to handle the multiple month functionality and differences between datepicker and calendar widget. When that's implement we could finalize tests
[12:13:08] <scott_gonzalez> Ok, so let's not add a render event until we have an explicit use case that isn't solved by an existing option or event.
[12:13:42] <fnagel> scott_gonzalez: you wanted some event for each rendering which might just translate to calling refresh()
[12:14:43] <scott_gonzalez> Well every navigation (e.g., clicking the previous month button), will do a completely new render of the dates, right?
[12:14:55] <fnagel> most actions, yes
[12:15:03] <fnagel> prev / next month for sure
[12:15:25] <scott_gonzalez> So I was thinking that if someone was modifying the DOM to add additional functionality, they'd need a hook for when that code needs to run.
[12:16:20] <scott_gonzalez> But without a specific use case in mind, it's impossible to say that the hook isn't already in place with one of the other events or options.
[12:16:58] <scott_gonzalez> For example, `eachDay` would solve a set of needs.
[12:17:10] <scott_gonzalez> `buttons` would solve another set of needs.
[12:17:24] <scott_gonzalez> So a generic render event may not be beneficial.
[12:18:15] <fnagel> I agree that eachDay should help for most use cases
[12:19:45] <scott_gonzalez> Do you have a list of accessibility questions? Should we try to schedule a call with Jon Gunderson, Birkir Gunnarsson, Joseph Scheuhammer, Colin Clark, Hans Hillen, etc?
[12:20:13] <fnagel> no specific questions yet, no
[12:20:27] <scott_gonzalez> I'm sure we won't get all of them (and we don't need that many people), but if we reach out to all of our contacts, we can hopefully get two of them on a call.
[12:20:34] <fnagel> nothing more that wiki todo item "a11y functionality"
[12:21:00] <scott_gonzalez> Ok, so maybe we should start with just asking Jon to do another review after you've merged the PRs?
[12:22:14] <fnagel> We should start with a review by Jon as I'm hardly in my office the next weeks due to a new client
[12:22:25] <scott_gonzalez> ok
[12:23:01] <fnagel> and: at this point I have no specific questions, it's more like we need some best practice I could work with
[12:23:37] <scott_gonzalez> ok
[12:24:20] <scott_gonzalez> So after you merge, why don't you respond to his comment telling him that `aria-hidden` has been fixed and asking for another review.
[12:24:50] <scott_gonzalez> Looks like I've got a few bugs I was supposed to investigate before things got crazy at work.
[12:24:53] <fnagel> thats the plan :-D
[12:25:03] <scott_gonzalez> So I'll look into those after I finish reviewing PRs.
[12:25:58] <fnagel> I will try to do some research and extend the wiki with some rough concept for handling multiple month so we have something to talk about with Jon, Hans, ...
[12:26:20] <scott_gonzalez> sounds good
[12:26:33] <scott_gonzalez> We have a PR to add jQuery as a dependency in `package.json`: https://github.com/jquery/jquery-ui/pull/1779
[12:27:07] <scott_gonzalez> Would love to have feedback from other team members on this one.
[12:27:28] <scott_gonzalez> Kind of a long discussion in that PR, so I'll wait a few minutes for everyone to read through it.
[12:35:05] <scott_gonzalez> Thoughts?
[12:35:46] <fnagel> I understand why he wants to add jQuery and I'm aware of that npm "problem" but I have not enogh understanding and real world experience with much package manager to be helpful for this discussion.
[12:36:21] <scott_gonzalez> ok
[12:36:22] <fnagel> But help me a little: he wants to add jQuery to npm dependencies as jQuery UIs code relies on that. Seems valid to me.
[12:36:22] <scott_gonzalez> jzaefferer?
[12:36:23] <scott_gonzalez> I'd really like to hear from jzaefferer since he did the webpack example.
[12:36:32] <scott_gonzalez> correct
[12:37:33] <scott_gonzalez> But the real problem comes from the fact that `package.json` shouldn't tell you the dependencies for jQuery UI.
[12:37:50] <scott_gonzalez> Because you really shouldn't be using `jquery-ui` as a module on its own.
[12:38:11] <fnagel> and your objection is a) there a thousands of concepts, if we start to change for one, we won't be stop. b) it would require us (devs) to download jQuery as a dependency via npm (would not be used) AND bower (which we actually use)
[12:38:13] <fnagel> right?
[12:38:21] <scott_gonzalez> You should be using individual widgets.
[12:38:22] <scott_gonzalez> And those each have different dependencies.
[12:38:29] <scott_gonzalez> Right.
[12:38:43] <scott_gonzalez> But I think the use of the entire repo as a single module is the real problem.
[12:39:01] <scott_gonzalez> I *really* don't want users doing that.
[12:39:16] <fnagel> "You should be using individual widgets." means using UI as dependency does not work currently, but UI.WIDGET does
[12:39:22] <scott_gonzalez> Especially if they're using a dependency resolver.
[12:39:44] <scott_gonzalez> Because if they have a build system that understands dependencies and creates packages, they should not be bundling jQuery UI as a single entity.
[12:40:21] <scott_gonzalez> Right, and if you do that, the dependencies listed in `package.json` are meaningless.
[12:40:28] <fnagel> Seems like a mix our of "npm does not allow FE dependencies" and "user like to use the whole repo, even when using a resolver" but technically the PR is valid
[12:40:47] <fnagel> Mhhhh
[12:41:45] <fnagel> I tend to say merge the PR as it does no real harm and is technically right (dependency graph wise). Revert when there is a general solution for solving FE dependencies.
[12:42:13] <fnagel> And I fully agree with you when saying "I personally hate the situation that the community has created"
[12:42:17] <fnagel> its a mess
[12:42:21] <scott_gonzalez> But then we'll likely never revert.
[12:42:22] <scott_gonzalez> And we'll just be encouraging people to do a Bad Thing.
[12:42:37] <fnagel> a valid point
[12:42:40] <scott_gonzalez> Honestly, I feel like this is a political battle.
[12:42:58] <fnagel> but having a wrong dependency graph seems bad to me too
[12:43:23] <scott_gonzalez> But the problem is that you only have a wrong dependency graph is you treat jQuery UI as a single entity.
[12:43:32] <scott_gonzalez> And that's not something we want people to do.
[12:43:42] <fnagel> which (again) seems a problem of the overall concept
[12:43:46] <scott_gonzalez> This is a use case we want to strongly discourage.
[12:43:47] <fnagel> agree
[12:44:51] <scott_gonzalez> Yehuda actually had a good quote about this a few years ago when talking about Ember vs. Angular.
[12:45:12] <scott_gonzalez> Something along the lines of doing the wrong thing should not be as easy as doing the right thing.
[12:45:33] <scott_gonzalez> I wish I could remember which talk it was in.
[12:46:20] <fnagel> regardless what we do, seems not like a satisfiying solution. Isn't there a recomendation by the nom guys for such cases?
[12:46:35] <fnagel> seems like a problem we are not alone with
[12:47:39] <scott_gonzalez> I think the npm "solution" is to generate a separate `package.json` for every widget, even if they're in the same repo.
[12:48:25] <scott_gonzalez> Which would require us to do about 50 separate releases to npm.
[12:48:33] <scott_gonzalez> For each version that we publish.
[12:48:52] <fnagel> ok, thats not gona happen
[12:49:40] <scott_gonzalez> right
[12:49:44] <scott_gonzalez> It becomes insane to manage.
[12:50:21] <scott_gonzalez> But that's basically what we need to solve everyone's problem today.
[12:50:22] <scott_gonzalez> And I don't think it's really worth it when we have workable solutions already.
[12:50:30] <scott_gonzalez> https://github.com/jzaefferer/webpack-jquery-ui
[12:51:07] <scott_gonzalez> It just sucks that everybody uses different tools. And they all have slightly different requirements.
[12:53:29] <scott_gonzalez> Well hopefully jzaefferer will chime in later.
[12:53:33] <scott_gonzalez> Anyone have anything else to discuss?
[13:00:10] <jzaefferer> sorry, I'm reading up now
[13:00:31] <sumedhN> Anyone from chassis here?
[13:04:22] <sumedhN> ??
[13:05:04] <scott_gonzalez> sumedhN: I don't think anyone from Chassis is here right now.
[13:05:19] <sumedhN> okay
[13:05:26] <jzaefferer> scott_gonzalez fnagel: specifying jquery as a dependency in jQuery UI's package.json seems fine to me. Every widget depends on jQuery, so it makes sense to specify that dependency. When doing require('jquery-ui/widges/autocomplete') it'll fail if jquery isn't installed
[13:06:38] <scott_gonzalez> And what version would we bundle?
[13:06:51] <jzaefferer> PS: "Sam Widges" seems to be a sandwich place in London, otherwise "widges" doesn't seem to be a real word
[13:07:19] <jzaefferer> bundle, as in what version we install in our repo via bower?
[13:07:43] <scott_gonzalez> No, what version would we put in `package.json`?
[13:10:34] <scott_gonzalez> And how do you deal with wanting to specify a specific version for your application?
[13:11:18] <scott_gonzalez> Would we just specify >=1.7?
[13:11:30] <jzaefferer> Minimum supported version seems good
[13:12:00] <jzaefferer> If user wants a specific version, they put that as a dependency in their app, npm should dedupe it as long as they version range is compatible
[13:12:38] <scott_gonzalez> But isn't this problematic for future jQuery releases?
[13:12:43] <jzaefferer> I don't mind the extra node_modules/jquery for devs working on jQuery UI. Its only a single package with no dependencies of its own
[13:12:53] <scott_gonzalez> Would we specify >= 1.7.0 < 4.0.0?
[13:13:37] <jzaefferer> If we assume that they're going to break shit again, yeah, upper limit also makes sense
[13:14:35] <scott_gonzalez> Ok, so here's a new question.
[13:14:59] <scott_gonzalez> This problem only exists if you list `jquery-ui` as an explicit dependency, but don't list `jquery` as an explicit dependency for your app, right?
[13:15:20] <scott_gonzalez> Or is that not the problem?
[13:15:49] <scott_gonzalez> And the problem is just that the dependency resolve for the packager doesn't know that it needs to bundle the jQuery that you've already explicitly listed because it's not listed as a dependency of jQuery UI?
[13:15:55] <scott_gonzalez> Actually, that seems like BS too.
[13:16:21] <scott_gonzalez> What's the specific use case that causes this to be a problem?
[13:17:50] <jzaefferer> I think its this one: "This problem only exists if you list `jquery-ui` as an explicit dependency, but don't list `jquery` as an explicit dependency for your app, right?"
[13:18:21] <scott_gonzalez> So that's a completely invalid dependency graph FROM THE APP.
[13:18:22] <scott_gonzalez> Isn't it?
[13:18:23] <scott_gonzalez> You cannot use jQuery Ui without using jQuery directly.
[13:18:30] <scott_gonzalez> hmm....
[13:18:51] <scott_gonzalez> Well, that might not be completely true, but I doubt people are actually using the classes directly.
[13:18:58] <scott_gonzalez> Because I never see code like that.
[13:19:21] <jzaefferer> https://github.com/jzaefferer/webpack-jquery-ui/blob/master/index.js#L10-L12
[13:19:40] <scott_gonzalez> My point being that you cannot have code like `$('#elem').datepicker()` without listing jQuery as a dependency so you can make the `$('#elem')` call.
[13:20:19] <jzaefferer> You can import the widget and instantiate it directly, without import jquery
[13:20:21] <scott_gonzalez> hmmm....
[13:20:43] <jzaefferer> Its not popular, but we do have that API
[13:20:46] <scott_gonzalez> No issues with two different jQuery instnaces?
[13:21:08] <jzaefferer> what do you mean?
[13:21:24] <scott_gonzalez> If you end up with one jQuery version in jQuery UI and another version directly in your app.
[13:21:34] <scott_gonzalez> The event systems won't play nice together.
[13:21:46] <scott_gonzalez> But we're assuming that doesn't happen, right?
[13:21:55] <scott_gonzalez> We're counting on npm to dedup properly.
[13:22:42] <jzaefferer> yeah, npm3+ seems to do that properly
[13:24:21] <scott_gonzalez> ok
[13:24:50] <scott_gonzalez> Do you want to comment on the PR asking them to update the version and fix the spacing?
[13:25:44] <scott_gonzalez> Or we can just switch to two space indentation in master and then just ask them to rebase and fix the version.
[13:25:55] <scott_gonzalez> We did have agreement to switch to standard eventually, right?
[13:26:55] <jzaefferer> I think we can just add the dependency in a separate commit, as the version range you had above, and close the PR with that
[13:27:10] <jzaefferer> let me create a PR for that...
[13:28:10] <jzaefferer> according to https://semver.npmjs.com/ ">= 1.7.0 < 4.0.0" is valid
[13:31:28] <jzaefferer> https://github.com/jquery/jquery-ui/pull/1790
[13:35:53] <scott_gonzalez> Do you know if the spaces are ok?
[13:35:56] <scott_gonzalez> https://github.com/jquery/jquery-ui/pull/1790/files#r97847004
[13:36:22] <scott_gonzalez> I feel like they should be, but the docs never show a space.
[13:40:57] <scott_gonzalez> https://github.com/npm/node-semver/blob/master/range.bnf
[13:41:02] <scott_gonzalez> Looks like space = OR
[13:41:21] <scott_gonzalez> Oh, no, that's not right.
[13:41:55] <scott_gonzalez> Looks like it doesn't support spaces
[13:45:08] <scott_gonzalez> Well, I guess the JS implementation doesn't match the BNF definitions.
[13:45:12] <scott_gonzalez> Because the spaces do work.
