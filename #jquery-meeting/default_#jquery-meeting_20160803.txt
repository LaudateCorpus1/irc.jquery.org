[12:00:14] <scott_gonzalez> ?uiteam
[12:00:15] <b-ot> arschmitz fnagel jzaefferer mikesherov rxaviers_ scott_gonzalez tjvantoll
[12:00:27] <arschmitz> hi
[12:00:41] <scott_gonzalez> hey arschmitz
[12:01:48] <fnagel> hey
[12:01:51] <scott_gonzalez> hey fnagel
[12:03:55] <scott_gonzalez> I guess this is everyone for now.
[12:04:53] <scott_gonzalez> download builder has been fixed and there haven't been any bug reports on it for a while :-)
[12:05:19] <arschmitz> yay
[12:06:06] <scott_gonzalez> jzaefferer updated the 1.12. upgrade guide to cover using jQuery UI via npm: https://github.com/jquery/jqueryui.com/commit/b083b13fd8f6377909813ae2d6c7de1476225ade
[12:07:16] <scott_gonzalez> There are a few tickets/PRs I'd like to discuss.
[12:07:59] <scott_gonzalez> Oh, also arschmitz fixed the checkboxradio issue with the correct styles only showing on hover: https://bugs.jqueryui.com/ticket/15003#comment:3
[12:08:31] <scott_gonzalez> There's a ticket about hidden tabs still being navigable: https://bugs.jqueryui.com/ticket/15013
[12:08:43] <scott_gonzalez> I've got a PR to fix that: https://github.com/jquery/jquery-ui/pull/1724
[12:08:58] <scott_gonzalez> arschmitz suggested closing this as a docs issue and requiring the user to disable the tabs.
[12:09:18] <scott_gonzalez> I think in this case, it's nice to handle this automatically.
[12:10:00] <scott_gonzalez> Though after arschmitz mentioned manually disabling, I'm not sure if it's that great that the hidden detection wouldn't update the disabled option.
[12:10:02] <arschmitz> i just don't see the point of a not disabled hidden tab
[12:10:28] <arschmitz> yeah i think if we make it automatic it should just make them disabled
[12:11:00] <arschmitz> but if you go to the trouble of hiding it why not just disabled it at the same time
[12:11:38] <scott_gonzalez> Let me see what accordion does for hidden content.
[12:12:48] <arschmitz> though i will say it might be nice if disabled accepted a selector
[12:13:17] <scott_gonzalez> Looks like it expects all of the headers to be visible.
[12:13:28] <scott_gonzalez> no way
[12:13:43] <scott_gonzalez> The selector would have to be overridden as soon as it was set.
[12:14:44] <scott_gonzalez> So, I see three options for tabs.
[12:14:48] <arschmitz> why it already accepts an array or a boolean?
[12:14:53] <scott_gonzalez> 1) We auto detect hidden tabs during navigation
[12:14:56] <arschmitz> if you let it take a string
[12:15:17] <scott_gonzalez> 2) We detect hidden tabs inside refresh() and set them to disabled
[12:15:25] <scott_gonzalez> 3) We do nothing and tell the user to disable the hidden tabs
[12:15:39] <scott_gonzalez> The reason we can't take a selector is because it's leaky.
[12:15:58] <scott_gonzalez> A user can't easily figure out what's disabled from a selector.
[12:16:08] <arschmitz> true
[12:16:49] <scott_gonzalez> And we'd need to constantly evaluate when we want to check disabled.
[12:17:50] <arschmitz> yup
[12:23:18] <scott_gonzalez> So thoughts on the three solutions?
[12:23:39] <arschmitz> i prefer 3 but out of 1 or 2 i would do 1
[12:23:51] <arschmitz> i mean 2 sorry
[12:23:55] <arschmitz> i prefer 2 over 1
[12:24:06] <scott_gonzalez> Yeah, I prefer 2 over 1 as well.
[12:24:30] <scott_gonzalez> Hadn't thought about the parity with disabled before.
[12:24:56] <arschmitz> also doing on refresh makes the perf of visibility selectors not so bad
[12:25:07] <scott_gonzalez> I'm not concerned about the perf.
[12:25:23] <scott_gonzalez> This is during navigation, so there's no worry about a slow query.
[12:26:03] <scott_gonzalez> You'd have to have tons of consecutive hidden tabs for it to matter.
[12:26:14] <arschmitz> true
[12:26:26] <scott_gonzalez> And at that point, we'd probably close an issue as won't fix based on bad UX for having that many tabs in the first place.
[12:26:35] <arschmitz> yeah
[12:27:16] <arschmitz> im fine with 2 or 3 but have a preference for 3
[12:27:29] <arschmitz> would be nice to get some other input besides just you and i though lol
[12:29:01] <scott_gonzalez> Well, I'm fine with doing 3 for now, leaving the issue open and implementing 2 when I've got time.
[12:29:12] <scott_gonzalez> Not really concerned about getting this into 1.12.1.
[12:29:28] <scott_gonzalez> And the reporter has been silent.
[12:31:07] <arschmitz> yeah
[12:31:49] <scott_gonzalez> Ok, closed the PR and updated the ticket.
[12:32:40] <arschmitz> sounds good
[12:33:49] <scott_gonzalez> Draggable prevents pinch zoom on Windows 10 touch in Chrome/Edge
[12:33:51] <scott_gonzalez> https://bugs.jqueryui.com/ticket/14993
[12:33:58] <scott_gonzalez> We discussed this in a previous meeting.
[12:34:50] <scott_gonzalez> We should be able to get this working today in Edge on desktop.
[12:35:29] <scott_gonzalez> During the Pointer Events Hackathon, we verified that there's a bug in Edge on mobile that would cause the fix to not work.
[12:35:49] <scott_gonzalez> So we can hopefully at least verify that `touch-action: pinch-zoom` would work at some point.
[12:36:06] <scott_gonzalez> And arschmitz, I think this is mostly what you want.
[12:36:15] <scott_gonzalez> Basically, allow native gestures to go through.
[12:36:28] <scott_gonzalez> Allow JS to handle single pointer movements.
[12:36:38] <arschmitz> actually its the compliment to it
[12:36:49] <arschmitz> i wanted to handle multi and let the browser handle single touch
[12:37:14] <scott_gonzalez> oh
[12:37:17] <arschmitz> i had thought the same thing at first
[12:38:01] <scott_gonzalez> Resizable: Support flexbox https://bugs.jqueryui.com/ticket/14997
[12:38:10] <scott_gonzalez> I'm still not sure what this user wants.
[12:39:09] <scott_gonzalez> I haven't used flexbox at all.
[12:39:23] <arschmitz> so with flexbox their is no explicit width generally
[12:40:55] <arschmitz> so i think they want us to detect flex in use
[12:41:03] <arschmitz> and set the flexbasis instead of the width
[12:41:46] <scott_gonzalez> I also still have no idea how to use codepen.
[12:41:58] <scott_gonzalez> I think this demo just have values that make resizing impossible.
[12:42:05] <arschmitz> yeah i can never remember how to make it full screen lol
[12:42:08] <scott_gonzalez> I ripped out stupid shit like both elements have a min width of 50%.
[12:42:14] <scott_gonzalez> And now it works just fine.
[12:43:58] <scott_gonzalez> How do I save a new copy with my edits?
[12:44:05] <arschmitz> fork
[12:44:06] <arschmitz> i think
[12:48:22] <scott_gonzalez> Well, once I rip out the force width, the first panel of course collapses.
[12:48:34] <scott_gonzalez> I just don't see how you'd use these two things together in a sane way.
[12:48:58] <scott_gonzalez> I feel like it should be possible, with the right combination of flex properties.
[12:49:04] <scott_gonzalez> But that would all be set by the user, not us.
[12:49:19] <scott_gonzalez> Because a given flex element can be set to size based on its defined width.
[12:49:27] <scott_gonzalez> Oh, so let me start with a defined width in CSS.
[12:49:49] <arschmitz> so the main thing is for this to work with flex
[12:50:00] <scott_gonzalez> Yup, that did it.
[12:50:01] <scott_gonzalez> http://codepen.io/anon/pen/WxgWGd?editors=1111
[12:50:08] <arschmitz> is that as you resize it would need to set flex basis instead of width
[12:50:58] <arschmitz> or at least thats what they are asking for
[12:51:03] <scott_gonzalez> And here's where using flex gets stupid: http://codepen.io/anon/pen/ZOrkLV?editors=1111
[12:51:03] <arschmitz> though yours seems to work fine also
[12:51:22] <arschmitz> lol
[12:51:32] <scott_gonzalez> But it shows that it works properly.
[12:51:53] <scott_gonzalez> If the resizable element is the first or last element, it should behave fine.
[12:52:01] <scott_gonzalez> Since it's only ever growing/shrinking on one side.
[12:52:08] <arschmitz> yea
[12:53:15] <scott_gonzalez> http://codepen.io/anon/pen/ZOrkLV?editors=1111
[12:53:20] <scott_gonzalez> Sane resizing in flex
[12:53:58] <scott_gonzalez> Based on that, I'm going to close the ticket as works for me.
[12:54:34] <arschmitz> seems fine to me if they have an issue with that they can always post
[12:54:45] <arschmitz> but your example works fine
[12:54:58] <scott_gonzalez> BAM! closed!
[12:55:43] <scott_gonzalez> https://css-tricks.com/snippets/css/a-guide-to-flexbox/ was super helpful in making that test case work.
[12:56:05] <scott_gonzalez> I think that was all the tickets and PRs I wanted to go over.
[12:56:13] <scott_gonzalez> We need to get 1.12.1 released.
[12:56:28] <scott_gonzalez> But let's wait until jzaefferer is available to discuss that release.
[12:56:41] <arschmitz> ok so just looked it up and for what its worth we should 100% not use flex basis or set it we should use width height
[12:56:47] <scott_gonzalez> Also, I leave for vacation on Friday night.
[12:56:55] <scott_gonzalez> I'll be gone all week.
[12:57:29] <scott_gonzalez> Yeah, `flex-basis: auto` is the default, which tells it to use the width if it's set.
[12:57:44] <arschmitz> well and flex basis can set width or height
[12:57:49] <arschmitz> based on the flex direction
[12:58:21] <arschmitz> using width and height explicitly works exactly the same and is just more explicit
[12:59:27] <arschmitz> so i think the reporter just didnt fully understand how to use flex
[13:02:36] <scott_gonzalez> yeah
[13:02:46] <scott_gonzalez> Not entirely surprising. It's pretty complex.
[13:04:24] <arschmitz> yeah i always find my self looking stuff up when i use it lol
[13:05:09] <arschmitz> does not help there are a ton of browser bugs with it too
[13:05:43] <scott_gonzalez> I think that's all for today.
[13:05:53] <arschmitz> yeah i dont have anything
[13:06:05] <scott_gonzalez> fnagel: Feel free to hound me about your PR(s) as soon as 1.12.1 is released.
[13:06:27] <fnagel> will do! :-D
