[12:03:37] <DaveMethvin> yay!
[12:03:37] <timmywil> DaveMethvin, m_gol, markelog https://docs.google.com/document/d/1BadwSO6Sn91RBfr05s77r81ncEi0oMBJ5mZS-k215vg/edit#
[12:03:47] <markelog> hey-hey
[12:03:50] <timmywil> what it is
[12:03:53] <m_gol> present
[12:05:11] <timmywil> 2.2-stable is looking good. How's 1.12 coming, markelog ?
[12:06:02] <markelog> slowly, reverted some commits, i think, most of it should be done until Wednesday
[12:06:21] <timmywil> ok, sounds good
[12:06:32] <markelog> we would need to update docs for it, right?
[12:06:45] <timmywil> gibson said he might miss the meeting, but said he'll do a Sizzle release and continue work on show/hide
[12:07:03] <timmywil> markelog: yea, 1.12/2.2 will push ahead some docs changes we had slated for 3.0
[12:07:13] <timmywil> I think most of them are done, but in a 3.0 branch
[12:07:23] <m_gol> happy docs cherry-picking :-)
[12:07:24] <markelog> ooh, wasn't aware of that
[12:07:33] <m_gol> we have the same on the jquery.com repo
[12:07:35] <m_gol> the jquery-3 branch
[12:07:43] <markelog> all that stuff you mentioned in the issue?
[12:07:46] <m_gol> that's getting rebased sometimes
[12:07:56] <timmywil> markelog: I can double-check after
[12:08:03] <markelog> okay, cool
[12:08:10] <markelog> did you start with the blog post?
[12:08:38] <timmywil> not yet, been a busy week
[12:08:55] <timmywil> I can start that this week
[12:09:17] <timmywil> anything else 1.12/2.2 related?
[12:09:21] <markelog> so when do you think we can release?
[12:09:36] <timmywil> depends on how quickly we get 1.12 verified
[12:10:16] <markelog> maybe we would target december 23?
[12:10:35] <markelog> right before christmas
[12:10:40] <markelog> in the middle of the week
[12:10:47] <markelog> like a present :-)
[12:11:04] <timmywil> DaveMethvin: we've released around Christmas before, right?
[12:11:09] <DaveMethvin> yeah
[12:11:20] <DaveMethvin> i suspect we'll have a few minor things to fix after the .0 releases
[12:11:23] <DaveMethvin> never fails
[12:11:26] <timmywil> sure
[12:11:30] <DaveMethvin> just looking at PR value, we're announcing the end of the 1.x branch on or near the day that MS drops IE8 support
[12:11:33] <markelog> probably
[12:11:35] <DaveMethvin> mid january
[12:11:42] <DaveMethvin> so we could do the .1 then maybe?
[12:11:52] <DaveMethvin> assuming we need one
[12:11:55] <timmywil> yea, we can aim for that
[12:12:03] <timmywil> I'm sure we will
[12:12:13] <timmywil> something is bound to come up
[12:12:16] <DaveMethvin> i will put in a bug that we can fix :)
[12:12:24] <timmywil> cool
[12:12:32] <DaveMethvin> who knows maybe it's already in there :)
[12:12:56] <markelog> so we thinking to release minor and major together?
[12:13:16] <DaveMethvin> we could, if 3.0.0 is ready
[12:13:26] <m_gol> 1.12.1+2.2.1+3.0.0?
[12:13:32] <markelog> i'd say only show/hide changes might stop us
[12:13:46] <markelog> but i would suggest to release minor early then major
[12:13:50] <DaveMethvin> i think people will be cautious about 3.0 anyway
[12:13:51] <timmywil> I expect gibson will have something for us this week
[12:14:02] <DaveMethvin> so even if we release it they won't upgrade to it immediately
[12:14:05] <markelog> four versions in one day might be tough for people to handle?
[12:14:28] <DaveMethvin> also January 14 is the 10-year anniversary of jQuery!
[12:14:43] <DaveMethvin> so we should release something then, even if it's just a beta
[12:14:44] <markelog> right on time!
[12:14:54] <m_gol> markelog: 3 versions
[12:14:57] <timmywil> it's not the same as releasing 3 versions of the same thing.
[12:14:58] <markelog> right
[12:15:13] <timmywil> we're trying to EOL 1.x/2.x with tidying releases
[12:15:27] <DaveMethvin> really the earlier the better, I have some time around the holidays but may not have time in late january
[12:16:21] <markelog> depends on gibson042 mostly, but i think 12 january is still a plausible option
[12:16:25] <timmywil> well, we will plan on releasing 1.12.0/2.2.0 before 3.0, but patch releases to 1.x/2.x can come after 3.0
[12:16:28] <timmywil> if they need to
[12:16:34] <DaveMethvin> true
[12:16:48] <DaveMethvin> that sounds like the correct relative order
[12:17:21] <DaveMethvin> i think the Migrate for 1.12/2.2 is ready now but i need to look at the 3.0 plan for Migrate
[12:17:36] <m_gol> hopefully not a lot of patches
[12:17:39] <markelog> 1.12 should be ready this week
[12:17:44] <timmywil> great
[12:18:04] <m_gol> BrowserStack has asked about the IE6 machines they keep for us so it'd be good to know when we stop with supporting 1.x/2.x so that they can release them
[12:18:20] <markelog> m_gol: that might not be soon
[12:18:30] <m_gol> markelog: why not?
[12:18:35] <markelog> like february
[12:18:40] <m_gol> that's fine :)
[12:18:45] <markelog> because of the possible support fixes
[12:18:49] <m_gol> I was afraid you'd say "a year" or sth ;)
[12:18:50] <timmywil> right
[12:18:56] <markelog> :-))
[12:19:18] <timmywil> I've listed some PRs we can land, but Deferred exceptions https://github.com/jquery/jquery/pull/2737
[12:19:18] <m_gol> yeah, I wrote to them that we might stop needing them around February/March but that I'll notify them
[12:19:27] <markelog> cool
[12:19:33] <timmywil> still not sure how I feel about this one
[12:19:40] <markelog> timmywil: so about the date for minor release?
[12:19:52] <timmywil> we can tentatively plan on 23rd
[12:19:57] <markelog> cool
[12:20:03] <markelog> love that date
[12:20:21] <DaveMethvin> i think it will be really hard for people to debug Deferred if 2737 doesn't land
[12:20:34] <DaveMethvin> actually it will STILL be hard but at least they'll know they're getting an error :P
[12:21:05] <markelog> yeah, without the devtools support it probably will
[12:21:34] <DaveMethvin> especially with all the old code that gets copy/pasta that doesn't have error handling
[12:21:47] <DaveMethvin> which they didn't need until 3.0 since we just threw and the console had a message
[12:22:13] <timmywil> DaveMethvin: do you think the PR is in a good place right now?
[12:22:22] <timmywil> I'm concerned about the stack trace
[12:22:37] <DaveMethvin> the only way to get the stack is to save it before the setTimeout
[12:22:40] <DaveMethvin> which is expensive
[12:22:50] <DaveMethvin> and more code
[12:23:02] <timmywil> you said you tried error.stack?
[12:23:14] <DaveMethvin> yeah it's lost since the promise is resolved by setTimeout
[12:23:26] <DaveMethvin> the stack would have been at the point where we called setTimeout
[12:23:51] <DaveMethvin> let me look into making an extra hook for grabbing the stack, i don't think that should be there by default but if the simple
[12:24:02] <DaveMethvin> warning isn't enough we could  provide a plugin
[12:24:32] <timmywil> the current stack trace doesn't seem all that useful. if it's too expensive to get the right stack, maybe we should remove the stack trace altogether.
[12:24:48] <DaveMethvin> yeah i think i pulled that out didn't i?
[12:25:01] <DaveMethvin> yeah on the last commit
[12:25:02] <timmywil> oh
[12:25:05] <timmywil> yes you did
[12:25:11] <timmywil> ok cool
[12:25:16] <DaveMethvin> but it would be good to have some way for a plugin to get more info
[12:25:17] <timmywil> then I'd say it's fine how it is
[12:25:33] <markelog> stack trace is hard
[12:25:41] <timmywil> once a user sees there's an error, they should be able to set breakpoints and figure it out.
[12:25:43] <DaveMethvin> that would require a hook at the setTimeout point so that it could get the synchronous stack
[12:25:43] <markelog> like if you look how q or bluebird does it
[12:25:57] <markelog> it looks pretty... weird
[12:26:31] <DaveMethvin> i think the code that is there is the most we should provide by default, but having an extra hook for stack would be nice
[12:26:36] <markelog> and end result is still might be confusing
[12:26:54] <timmywil> it would be nice, but arguable excessive.
[12:26:57] <DaveMethvin> i don't want it to get really complicated code wise, and like timmywil says most of the time people can set breakpoints
[12:26:57] <timmywil> arguably
[12:27:24] <markelog> is there any examples of such approach in the wild?
[12:27:32] <DaveMethvin> debugging promises sucks without dev tools support
[12:27:34] <markelog> like if there libs that do the same?
[12:27:38] <markelog> true that
[12:28:30] <timmywil> markelog: like you said, q and bluebird have some convoluted approaches. This seems like an adequate comprimise that doesn't take up too much code.
[12:28:43] <DaveMethvin> so anyway, the todo for me is to look at whether there is an easy way to add a hook for getting the stack, but the code that is there i think is all we want to do
[12:28:55] <timmywil> a step above failing silently and a step below proper debugging.
[12:29:05] <DaveMethvin> the hook would just be called at the right place if the user provided one
[12:29:13] <DaveMethvin> but we won't get stacks by default
[12:29:21] <DaveMethvin> just blurt out a warning on the console
[12:29:36] <timmywil> seems okay
[12:29:40] <DaveMethvin> for code exceptions, and not for explicit rejections
[12:29:46] <markelog> might be hard if there is a lot of such async code
[12:29:59] <DaveMethvin> yes, async is hard :)
[12:30:08] <markelog> :-)
[12:30:14] <timmywil> would be even harder without this
[12:30:31] <markelog> yeah
[12:30:58] <markelog> anyhow, if user writes that code, their bound to have issues with it
[12:31:01] <timmywil> so, I think we can land what you have. I'm not going to treat the remaining stack trace work as a blocker.
[12:31:25] <markelog> something is better then nothing!
[12:31:35] <timmywil> sound good, DaveMethvin ?
[12:31:54] <DaveMethvin> dcherman added a question
[12:31:56] <timmywil> maybe migrate could have the extra code for stack traces
[12:32:06] <DaveMethvin> i agree that it shoudl be bound to the console
[12:32:10] <markelog> not sure if that is a migrate scope?
[12:32:17] <markelog> maybe a plugin?
[12:32:18] <DaveMethvin> not sure why I didn't see an error
[12:32:26] <timmywil> maybe a plugin
[12:32:57] <timmywil> that is odd, DaveMethvin
[12:33:12] <DaveMethvin> it could go into migrate 3.0 i suppose, or a separate plugin, let me see what it takes to make one
[12:33:17] <timmywil> I would assume it needs a binding too
[12:33:46] <markelog> on the other hand, since that would support 3.0 changes, maybe migrate could have it
[12:34:02] <DaveMethvin> oh i bet i know why, because the unit test does an apply
[12:34:09] <timmywil> ah
[12:34:17] <DaveMethvin> so it would break anywere other than the unit test :)
[12:34:20] <DaveMethvin> nice catch dcherman
[12:34:50] <DaveMethvin> ok so i
[12:34:57] <DaveMethvin> will do another pass, it's not ready to land
[12:35:06] <timmywil> that about wraps it up. this week is crunch time! anything else for today?
[12:35:27] <markelog> yeah
[12:35:35] <timmywil> always something, markelog :)
[12:35:38] <markelog> :-)
[12:35:41] <markelog> i was looking at the core
[12:35:47] <markelog> and remembered that a while ago
[12:36:00] <markelog> we had an optimiaztion for the head selector
[12:36:07] <markelog> until DaveMethvin removed
[12:36:12] <timmywil> you mean body?
[12:36:18] <markelog> or that )
[12:36:29] <markelog> was awhile ago
[12:36:31] <markelog> so
[12:36:31] <timmywil> I can give you some background
[12:36:38] <markelog> go ahead
[12:37:10] <timmywil> it was originally added by John, because existing selector performance benchmarks started with a "body" test
[12:37:55] <markelog> so it was done for bench purposes, more or less?
[12:38:01] <timmywil> it was a way to stay on top in the benchmarks, but since then performance has been deemed fast enough
[12:38:13] <timmywil> so it wasn't worth the extra lines
[12:38:26] <markelog> so, that got me thinking if we can go further with it
[12:38:28] <markelog> like
[12:38:51] <markelog> we use different approaches for jQuery("<div></div>") and jQuery("<div>1</div>")
[12:38:59] <markelog> which also get us different result
[12:39:10] <markelog>  jQuery("<div></div>")[0].parentNode === null
[12:39:17] <markelog>  jQuery("<div>1</div>")[0].parentNode === document fragment
[12:39:46] <DaveMethvin> right b/c of the optimization for single empty elements
[12:39:49] <markelog> i thinking we use different approaches to speed up single tag creation?
[12:40:25] <markelog> Could that single tag be bottleneck?
[12:40:28] <DaveMethvin> you mean, should we remove the single tag stuff? I have a bad feeling about that
[12:40:33] <timmywil> the html parser is different than the selector engine. that might still have performance advantages, possibly even logistical ones.
[12:41:07] <markelog> it would definitely be be slower
[12:41:26] <timmywil> I imagine one call to document.createElement is always going to be faster than creating a fragment and parsing an HTML string
[12:41:41] <markelog> yeah, but i'm thinking it wouldn't be a slower path in apps
[12:41:47] <DaveMethvin> but maybe not much, i dunno if perf is the issue but more the billions of uses that probably have some assumption that we break
[12:41:50] <timmywil> slower to call createElement?
[12:42:07] <DaveMethvin> like whether <script> tags behave when done that way
[12:42:17] <markelog> no-no, createElement should always be faster
[12:42:33] <markelog> but single tag creating shouldn't be the slower code in the apps
[12:42:46] <markelog> can't imagine something like that
[12:42:57] <DaveMethvin> plus it would save running a regex on the input string woudln't it?
[12:42:58] <timmywil> what do you propose?
[12:43:04] <markelog> yeah
[12:43:09] <markelog> remove it :-)
[12:43:19] <DaveMethvin> take it out and see what breaks
[12:43:28] <markelog> https://github.com/jquery/jquery/compare/master...markelog:simplierParseHTML
[12:43:32] <markelog> i did :-)
[12:43:42] <timmywil> we can try it, but we should benchmark the slower browsers we support
[12:44:06] <markelog> http://jsperf.com/parsehtml-vs-new-parsehtml
[12:44:08] <markelog> :-)
[12:44:20] <DaveMethvin> hah, interesting
[12:44:26] <markelog> didn't check on on the slower browser though
[12:44:48] <timmywil> the data-URI test was removed
[12:44:49] <markelog> but i think it should increase perf on complicated tags
[12:44:56] <markelog> and slow down the fast one
[12:45:16] <markelog> yeah, i had some issue with it
[12:45:18] <DaveMethvin> but the fast one is probably already fast enough
[12:45:22] <markelog> didn't finish with it
[12:45:28] <DaveMethvin> and the slow one is most likely the problem
[12:45:31] <markelog> my thoughts exactly
[12:45:32] <DaveMethvin> which this makes better
[12:45:38] <timmywil> we should check mobile too
[12:45:45] <markelog> yep
[12:45:54] <timmywil> but this is interesting
[12:46:00] <DaveMethvin> what are the odds it works on android 2.x :)
[12:46:16] <timmywil> we can discuss this further in a ticket/email thread
[12:46:27] <DaveMethvin> we could always take it out in 3.0.0 and put it back in if it breaks or causes anything to be slooooow
[12:46:39] <markelog> ok-ok, i will keep trying that path
[12:46:46] <markelog> and also
[12:46:47] <timmywil> thanks
[12:46:54] <markelog> we have this - https://github.com/jquery/jquery/blob/1823a715660a5f31dd7e05672e9ad020066256a9/src/core/init.js#L76
[12:47:12] <markelog> i wonder if that is the same thing as document.body
[12:47:32] <DaveMethvin> that's the one that people always use in bogus jsperfs so it should be fast :)
[12:47:33] <markelog> getElementById is the fastest traverse method
[12:47:33] <timmywil> I did test removing that about a year ago and thought it was worth keeping
[12:48:14] <markelog> hm, okay, if we already try that
[12:48:37] <DaveMethvin> honest i've seen people say that jquery is better than zepto because we use all the special apis rather than just queryselector and it makes things a tiny bit faster
[12:48:42] <DaveMethvin> when they jsperf it
[12:49:24] <DaveMethvin> ok gotta go
[12:49:27] <markelog> might be the same thing as with complicated vs simple stuff
[12:49:45] <timmywil> ok, thanks everybody
[12:49:47] <markelog> it should speed up the complicated selectors
[12:49:54] <markelog> but slow down the id selector
[12:50:07] <markelog> okay, story for another time i guess )
[12:50:14] <timmywil> yea, catch you in -dev
