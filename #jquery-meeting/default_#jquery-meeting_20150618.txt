[09:03:21] <arschmitz> `pepteam
[09:03:21] <b-ot> arschmitz: arschmitz jrossi jrossi1 jrossi2 jrossi3 M4rius scott_gonzalez snover
[09:03:32] <snover> needs moar jrossi
[09:03:59] <arschmitz> there are no jrossi's today
[09:04:20] <arschmitz> :-(
[09:04:27] <snover> what about jrossi4
[09:04:29] <arschmitz> oh there is a jdalton though
[09:04:43] <jdalton> yay
[09:04:57] <arschmitz> scott_gonzalez: got double booked today
[09:05:09] <arschmitz> he may or may not be about
[09:05:51] <arschmitz> agenda https://docs.google.com/document/d/1nmk0W43PzkG5RNbJu9oEZv5f-5KWeJo5z22kza6q2AM/edit
[09:05:53] <scott_gonzalez> i'm here, but in another meeting, and with not-so-great wifi
[09:06:03] <jdalton> snover in the recorder extension it uses the tdd module but in the current tests the w3cTest is extending from leadfoot/Command
[09:06:06] <jdalton> what's the diff
[09:06:09] <snover> just stick some rabbit ears on your tv
[09:07:50] <snover> Command is http://theintern.github.io/leadfoot/Command.html and tdd is https://theintern.github.io/intern/#interface-tdd, see https://theintern.github.io/intern/#writing-functional-test for how they work together
[09:09:03] <arschmitz> so related to the test automation there has been talk in the pep and public browser tools threads testing lists https://lists.w3.org/Archives/Public/public-browser-tools-testing/2015AprJun/0081.html
[09:10:45] <jdalton> I've written a pretest script to pull them in modify them to add pep.js and adjust paths
[09:10:48] <jdalton> https://github.com/jdalton/PEP/blob/w3c/tests/support/pretest.js
[09:11:02] <jdalton> that way the w3c tests dont have to be tracked with the PEP repo
[09:11:23] <jdalton> now just working on getting the automation of commands working via recorder
[09:12:15] <arschmitz> that would be awesome make it a lot faster to get through these im sure
[09:12:20] <scott_gonzalez> I think we want them tracked within PEP though.
[09:12:31] <scott_gonzalez> If a W3C test changes, we have to update our automation.
[09:12:43] <arschmitz> couldnt we just use a specific commit
[09:12:58] <scott_gonzalez> Sure, we could do that.
[09:13:22] <scott_gonzalez> But what's the real benefit?
[09:13:33] <scott_gonzalez> We're now adding a git clone to the testing process.
[09:13:51] <jdalton> > I think we want them tracked within PEP though
[09:13:57] <jdalton> we can track to a commit hash
[09:14:20] <arschmitz> thats what i just said :-)
[09:14:25] <jdalton> or tag to keep things from shifting under our feet
[09:14:29] <jdalton> yap yap
[09:14:56] <jdalton> its a 1 time git clone on the first test run
[09:15:00] <jdalton> so think of it as a dev dep
[09:15:21] <snover> with regards to the stuff on the list, the current webdriver draft spec has a somewhat more competent description of how to perform pointer-based inputs
[09:15:27] <snover> nobody implements the spec though.
[09:15:50] <arschmitz> you could do it with npm install even
[09:16:30] <arschmitz> as an actual dev dependency
[09:16:46] <jdalton> I want to avoid that as that will get the entire git history
[09:16:51] <jdalton> which is a much larger dload
[09:17:01] <arschmitz> true
[09:17:04] <jdalton> i can add a field to the pkg json though with the repo + hash
[09:17:10] <jdalton> then read from it in the pretest script
[09:17:44] <snover> you can still use npm, point to one of github’s tar.gz
[09:17:51] <jdalton> smth like a field "web-platform-tests"
[09:18:01] <scott_gonzalez> I'm still missing what the benefit of this is.
[09:18:36] <jdalton> the benefit is not including  and manually modifying their tests in the PEP repo
[09:18:39] <snover> actually, nevermind, there’s no package.json so that almost certainly won’t work
[09:19:16] <jdalton> I'll pretty up the script so it'll live as a prop in the package.json for easy tracking configuring
[09:19:29] <jdalton> the gist is PEP gets the w3c tests and things just work
[09:20:21] <scott_gonzalez> We're not manually modifying the tests.
[09:20:24] <jdalton> without having to actually copy paste and modify them into the repo and track them with commits
[09:20:44] <jdalton> to get paths correct and to inject PEP
[09:21:09] <jdalton> it's trivial with automation though and that's working
[09:21:30] <jrossi1> There's a good chance we'll be adding and modifying tests in the new spec.  So I could see how with this approach, it'd be great because we'd get those new tests and they'd fail making us realize we need to update PEP accordingly.
[09:21:51] <scott_gonzalez> But that's pretty terrible.
[09:21:59] <scott_gonzalez> We go from passing to failing with no change in our code.
[09:22:11] <scott_gonzalez> That wouldn't happen anyway, because we'd have to manually update the SHA.
[09:22:15] <jdalton> as mentioned you can lock to a specific commit hash of there
[09:22:25] <arschmitz> that would only happen if you changed the commit we were tracking by hand and then re ran
[09:22:33] <jdalton> there will be no fail until you decide to pump the w3c test
[09:23:01] <arschmitz> we could probably even do like we do on UI with jquery versions
[09:23:06] <arschmitz> and test against a stable and a git
[09:23:20] <arschmitz> to know as soon as someing changes to cause a fail
[09:28:36] <arschmitz> Ok so i guess we will move on for now unless someone has something else on that and see what jdalton comes up with and talk again next week
[09:29:18] <arschmitz> The pointer events group finally had a call
[09:29:49] <arschmitz> and they talked about boundry events after capture is released
[09:30:08] <arschmitz> but there was no decision
[09:30:14] <arschmitz> there is an issue though https://github.com/w3c/pointerevents/issues/15
[09:31:37] <arschmitz> there is similar discussion on mouse events
[09:31:44] <arschmitz> because each browser is different
[09:32:19] <arschmitz> so not super helpful yet but at least there is talk
[09:32:27] <jrossi1> for the boundary events, I wouldn't worry too much about the WG decision.
[09:32:52] <jrossi1> whether the events are fired immediately upon capture release or on the next input frame is a pretty minor detail IMO.
[09:33:51] <scott_gonzalez> But it affects how the polyfill is implemented.
[09:34:16] <scott_gonzalez> https://github.com/jquery/PEP/issues/177
[09:34:21] <jrossi1> yep i understand
[09:34:49] <jrossi1> the thing is, we can't easily solve the general problem here in the polyfill
[09:35:25] <scott_gonzalez> If all browsers are going to be consistent in waiting for the next actual move, then we should do the same.
[09:35:27] <jrossi1> which is to always generate transitional events whenenver it transitions -- whether driven by capture release, actual input frames, layout changes under the pointer, etc.
[09:36:01] <jrossi1> honestly I think we're in a dead lock on aligning browser behavior here
[09:36:33] <jrossi1> mostly because we haven't seen sites be affected by these differences (rbyers mentioned a few, but I haven't seen them yet)
[09:37:07] <jrossi1> this behavior has been different for probably a decade, so I don't anticipate browsers being largely motivated to change here
[09:37:15] <jrossi1> one way or the other
[09:38:05] <jrossi1> I haven't looked at thow PEP decided transition events
[09:38:41] <jrossi1> but isn't this just a question of whether you call elementFromPoint() and run the transition detection logic after calling releasePointerCapture()?
[09:39:05] <jrossi1> doesn't seem to imply some major architectural fork in the road, but perhaps I'm missing something
[09:43:16] <arschmitz> So i dont think there is a decision here either but it might be worth updating the issue at least
[09:44:50] <arschmitz> So moving on we still have issue https://github.com/jquery/PEP/issues/151 about trying to support touch action css
[09:44:59] <arschmitz> instead of the attribute
[09:45:48] <arschmitz> After the meeting last week i was talking to jrossi1 about this and he offered to try to get us in contact with someone that worked on http://ecsstender.org/
[09:46:48] <jrossi1> I wouldn't recommend the approach ecsstender takes (for perf reasons). But it's at least worth the conversation for some insights.
[09:46:49] <arschmitz> thats dramatically more then we need but might be able to help us out
[09:47:00] <snover> what happened to the css wg for custom css?
[09:47:08] <jrossi1> still ongoing
[09:47:15] <jrossi1> Houdini Task Force
[09:47:22] <jrossi1> step 1: give your self a fancy name :-)
[09:47:43] <arschmitz> sadly i dont think that will be back ported any time soon lol
[09:48:21] <arschmitz> The hammer.js team wants to work with us on this too
[09:48:59] <jrossi1> that work is years away from completion
[09:49:08] <snover> years. jesus.
[09:49:53] <arschmitz> so i dont know if we will actually be able to make something workable here with perf considered
[09:50:11] <arschmitz> but its worth trying since safari seems to be willing to add the css too
[09:51:23] <jrossi1> in old IE's that don't suport the property, you can get at the original stylesheet text which makes this easier to parse
[09:51:49] <arschmitz> oh i didnt know that so you can avoid the ajax?
[09:51:53] <jrossi1> but in other browsers, the only approach I know of is to XHR the stylesheets again :-(
[09:52:05] <jrossi1> yeah, I've got a snippet somewhere where I've done this before
[09:52:07] <arschmitz> yeah thats what i though
[09:52:17] <arschmitz> i didnt know you could in ie though
[09:52:22] <snover> yeah, good old ie
[09:52:35] <snover> what is the performance impact of xhring a stylesheet that was delivered with appropriate cache control/
[09:53:00] <arschmitz> safari and older androids i see as the big issues since IE10+ has it
[09:53:09] <arschmitz> snover: well you cant use a cdn
[09:53:14] <arschmitz> is a big limitation
[09:53:43] <snover> depends on platform support
[09:53:47] <arschmitz> yes
[09:55:53] <jrossi1> http://jsbin.com/lajadimade/1/edit?html,css,js,console
[09:56:37] <arschmitz> cool
[09:56:59] <jrossi1> still works in Edge actually... though it's days could be numbered if this doesn't become interoperable behavior :-)
[09:57:38] <arschmitz> it would be a nice feature
[09:58:45] <arschmitz> so thats all i had on the agenda for today
[09:58:48] <arschmitz> and its about that time
[09:59:07] <arschmitz> does anyone have anything else?
[10:02:16] <snover> only dread
[10:02:33] <jrossi1> I have a dollar
[10:05:45] <arschmitz> ok see everyone next week
[11:01:41] <arschmitz> agcolom: gabrielschulhof sfrisk arthurvr meeting time
[11:01:46] <arthurvr> hey
[11:02:06] <arschmitz> might not really do a meeting i think everyone is on vacation
[11:02:18] <arthurvr> makes sense
[11:03:12] <arschmitz> yeah looks like no one else is here
[11:03:23] <sfrisk> yeah, I'm in the middle of a work crunch atm
[11:03:31] <apsdehal> hey
[11:03:36] <arschmitz> apsdehal: hi
[11:03:57] <arschmitz> apsdehal: probably going to skip meeting this week every one is busy or on vacation
[11:04:09] <apsdehal> ok
[11:04:11] <arthurvr> okayz
[11:04:25] <arschmitz> ok see everyone next week
[11:12:51] <agcolom> hello, sorry for being late.... here now...
