[11:01:19] <arschmitz> jasperdegroot: gseguin: agcolom: cgack: gabriel_schulhof: Meeting Time!
[11:01:31] * gabriel_schulhof waves
[11:01:34] <cgack> howdy
[11:01:36] <gseguin> I'm here
[11:01:39] <jasperdegroot> hi all
[11:02:06] <arschmitz> agenda https://docs.google.com/spreadsheet/ccc?key=0AskujzE4Ig0QdG5nSmZiSUhjYm4ya29CdjhLZmJwSWc&usp=drive_web#gid=43
[11:04:04] <arschmitz> ok so 1.4.4
[11:04:47] <arschmitz> we are planning on releasing on friday morning
[11:05:00] <arschmitz> at the conf
[11:05:13] <arschmitz> things are looking good
[11:05:18] <arschmitz> 4 prs left
[11:05:19] <gabriel_schulhof> Weeeeell ... friday release ... mmmm ...
[11:05:33] <arschmitz> 3 are ready
[11:05:39] <arschmitz> gabriel_schulhof: it will be early
[11:05:58] <arschmitz> so it should be fine and at a conf is i think worth more then a different day as far as visibility
[11:06:08] <gseguin> and it'll be announced at the conf so tweeted by a bunch of people
[11:06:09] <jasperdegroot> and there will be a lot of buzz because of the conf
[11:06:14] <jasperdegroot> right
[11:06:25] <gabriel_schulhof> OK. Well, I'm no PR expert ;)
[11:06:33] <arschmitz> the last 2 got a lot of attention
[11:06:38] <arschmitz> even though they failed :)
[11:06:46] <jasperdegroot> and it's Friday the 12th, not the 13th ;-)
[11:06:53] <gseguin> hey now, they didn't fail
[11:06:54] <gabriel_schulhof> LOL :)
[11:07:01] <gseguin> there was a technical hiccup
[11:07:22] <arschmitz> lol
[11:09:03] <arschmitz> there are only a couple 1.4.4 issues left after these prs
[11:09:31] <arschmitz> so if anyone wants to look at one this weekend i think we can extend the code freeze a little since we are in such good shape
[11:09:35] <gabriel_schulhof> Too bad you can't filter out issues that have PRs against them.
[11:09:47] <gabriel_schulhof> OK.
[11:10:26] <gabriel_schulhof> Gah ... https://github.com/jquery/jquery-mobile/issues/7644 can be closed.
[11:10:37] <gabriel_schulhof> It didn't autoclose because it landed against 1.4-stable, not master.
[11:10:39] <gabriel_schulhof> I'll close it.
[11:10:49] <arschmitz> ok
[11:10:50] <jasperdegroot> was about to ask
[11:11:10] <agcolom> sorry got held up by a neighbour! here now
[11:11:19] <arschmitz> agcolom: no problem welcome
[11:11:25] <arschmitz> agcolom: and good timing
[11:11:44] <arschmitz> i had a pretty major docs issue brought to my attention on irc
[11:11:44] <jasperdegroot> hi Anne
[11:12:18] <arschmitz> https://github.com/jquery/api.jquerymobile.com/issues/332
[11:12:40] <agcolom> right ok
[11:12:58] <gabriel_schulhof> Right, yeah ... we agreed that we'd put all extensions into one file.
[11:13:09] <agcolom> so just table widget and those 2 should go into examples in there?
[11:13:11] <gabriel_schulhof> That's done in the review, but I guess we wanna do it for 1.4.x as well, right?
[11:13:19] <gabriel_schulhof> Nono.
[11:13:22] <arschmitz> gabriel_schulhof: look at the code examples
[11:13:39] <arschmitz> every one is wrong and wont work
[11:14:00] <gabriel_schulhof> OK, so we're bring this part of the widget review up to 1.4.x, right?
[11:14:04] <gabriel_schulhof> bringing
[11:14:06] <arschmitz> im amazed no one filed an issue about this already
[11:14:20] <arschmitz> gabriel_schulhof: its not about the widget review
[11:14:29] <arschmitz> its about our docs being 100% wrong
[11:14:42] <gabriel_schulhof> Right, but the fix is a part of the widget review.
[11:14:51] <jasperdegroot> huh?
[11:15:01] <gabriel_schulhof> We have a table widget review API docs PR wherein it's fixed.
[11:15:15] <jasperdegroot> ah ok
[11:15:20] <jasperdegroot> but that's for 1.5?
[11:15:21] <arschmitz> jasperdegroot: $( ".selector" ).table-columntoggle( "option", "columnBtnText", "Show columns" );
[11:15:42] <gabriel_schulhof> arschmitz: Oh, right. That's because the code generation.
[11:15:45] <gabriel_schulhof> Definitely wrong.
[11:15:48] <arschmitz> yes
[11:15:49] <jasperdegroot> right
[11:15:52] <gabriel_schulhof> OK.
[11:15:59] <arschmitz> every example in the column toggle and reflow is like this
[11:16:10] <jasperdegroot> my huh? was regarding that the fix is part of widget review
[11:16:12] <agcolom> should it just be table?
[11:16:19] <arschmitz> thats a big problem its not about the separate pages
[11:16:22] <arschmitz> agcolom: yes
[11:16:37] <agcolom> so it should go in the table widget page?
[11:16:52] <gabriel_schulhof> I'll move the relevant bits from the widget review PR into a separate PR that fixes this issue, and I'll rebase the widget review PR once that lands.
[11:17:03] <arschmitz> gabriel_schulhof: ok that will work
[11:17:28] <agcolom> thanks gabriel_schulhof
[11:17:41] <arschmitz> i think it shows though people are looking at the demos more then the api
[11:17:45] <arschmitz> for code examples
[11:17:52] <gabriel_schulhof> Good.
[11:17:52] <agcolom> yes
[11:17:56] <arschmitz> that no one previously reported this
[11:17:59] <gabriel_schulhof> I think the API docs are more academic.
[11:18:09] <agcolom> I would agree with that
[11:18:12] <arschmitz> yeah
[11:18:26] <arschmitz> i happened to see someone paste it in #jquery
[11:18:31] <arschmitz> and asked them where they got it
[11:18:46] <agcolom> oops ;-)
[11:18:47] <gabriel_schulhof> arschmitz: Man!
[11:18:53] <gabriel_schulhof> That's like getting caught red-handed :)
[11:19:04] <arschmitz> yeah
[11:19:24] <gabriel_schulhof> The good news is docs can be fixed, tagged, and released whenver.
[11:19:33] <arschmitz> and they followed it up by pointing out some hungarian notation in our code ha ha ha
[11:20:35] <gabriel_schulhof> Man ... I think calling it Hungarian notation is an overstatement. We only ever point out jQuery objects, not /all/ data types.
[11:20:44] <gabriel_schulhof> But whatever.
[11:20:52] <gabriel_schulhof> Needs to go.
[11:20:56] <arschmitz> gabriel_schulhof: it is an example of hungarian notation
[11:21:00] <gabriel_schulhof> Yeah.
[11:21:07] <arschmitz> just because we dont do it everyhwere
[11:21:21] <arschmitz> and our style guide does forbid it
[11:21:41] <arschmitz> but anyway they were just giving me a hard time
[11:21:50] <arschmitz> its someone i help often
[11:22:09] <arschmitz> ok so 1.5
[11:22:43] <arschmitz> one more semi big change is going to have to happen were we say OPPS we got it wrong
[11:22:48] <arschmitz> icons
[11:22:58] <arschmitz> we thought :pseudo elements was a good idea
[11:23:09] <arschmitz> since we have realized its not as awesome as we though
[11:23:10] <arschmitz> t
[11:23:32] <arschmitz> and there are 2 good reasons we should switch back asap
[11:23:51] <gabriel_schulhof> Lemme guess: slow selectors?
[11:24:05] <arschmitz> 1.) let the :pseudo ones die as quick as possible so as few people are impacted as possible
[11:24:22] <arschmitz> 2.) ui button re-writes are based on spans
[11:24:40] <arschmitz> gabriel_schulhof: thats part of the reason we were wrong in the first place
[11:25:02] <jasperdegroot> we never did test it though
[11:25:05] <gabriel_schulhof> arschmitz: How do we do anchors thing?
[11:25:06] <arschmitz> gabriel_schulhof: it also makes the css kinda gross and non semantic
[11:25:22] <arschmitz> gabriel_schulhof: people add the span in their markup
[11:25:29] <arschmitz> gabriel_schulhof: this is also how bootstrap does it
[11:25:33] <gabriel_schulhof> OK.
[11:25:39] <gabriel_schulhof> I'm good with that.
[11:25:55] <arschmitz> or the widget will do it for you
[11:26:05] <gabriel_schulhof> ... right, in case of a button.
[11:26:14] <arschmitz> and the widget will once again work on any element you like
[11:26:20] <arschmitz> button a div etc
[11:26:21] <jasperdegroot> do we stick with SVGs with PNG fallback?
[11:26:28] <arschmitz> jasperdegroot: yes for now
[11:26:32] <jasperdegroot> or back to sprites like UI does
[11:26:38] <gabriel_schulhof> arschmitz: Wait a sec ... we're not gonna add anchors to the initSelector, are we?
[11:26:38] <arschmitz> svg
[11:26:40] <jasperdegroot> ok
[11:26:48] <arschmitz> gabriel_schulhof: thats up for debate
[11:26:57] <gabriel_schulhof> I vote an emphatic NO!
[11:26:59] <arschmitz> but no matter what its customizable
[11:27:11] <gabriel_schulhof> Yes, that supports my vote.
[11:27:12] <arschmitz> people can always set the init selector to whatever they want
[11:27:20] <gabriel_schulhof> People can add it to the initSelector if they like.
[11:27:47] <arschmitz> gabriel_schulhof: yes id be open to what people think on this im not firmly one way or the other
[11:28:10] <gabriel_schulhof> arschmitz: I'd say that instantiating a widget for every link is very, very bad.
[11:28:22] <gabriel_schulhof> arschmitz: Think of a listview.
[11:28:24] <jasperdegroot> sorry, but I don't follow
[11:28:41] <arschmitz> jasperdegroot: so id like for 1.5 if you could focus on updating the theme to use icons again
[11:28:44] <gabriel_schulhof> jasperdegroot: If we add anchors to the initSelector for a button widget, then every link will be a button widget.
[11:28:45] <arschmitz> i mean spans for icons
[11:29:16] <jasperdegroot> but we already decided that people have to add classes to anchors themselves, right?
[11:29:32] <jasperdegroot> arschmitz: ok
[11:29:38] <arschmitz> jasperdegroot: right now we dont support using button or anchor for the button widget at all
[11:29:43] <arschmitz> the new widget does support this
[11:29:43] <gabriel_schulhof> jasperdegroot: Exactly, and now we (should) extend that to also having to add a span.
[11:29:51] <arschmitz> so the question is what the init selector should be
[11:29:53] <jasperdegroot> yes
[11:30:02] <jasperdegroot> arschmitz: ah ok, gotcha
[11:30:15] <arschmitz> should you opt in or opt out for buttons and anchors
[11:30:36] <gabriel_schulhof> arschmitz: Opt in. Think about all the memory taken up by useless button widgets.
[11:31:09] <gabriel_schulhof> arschmitz: I mean, when we had buttonMarkup, we optimized the living daylights out of it just to make it be fast in a listview.
[11:31:09] <arschmitz> gabriel_schulhof: well in controlgroup it will always enhance them
[11:31:11] <jasperdegroot> yeah, I agree with gabriel_schulhof
[11:31:22] <arschmitz> just fyi
[11:31:44] <arschmitz> but thats part of controlgroups job enhance its children
[11:31:46] <gabriel_schulhof> arschmitz: ... and buttonMarkup was just a plain function, with, like, almost nodata.
[11:32:21] <gabriel_schulhof> arschmitz: ... and still it was terrible.
[11:32:22] <arschmitz> gabriel_schulhof: im inclined to agree on the init selector just being open
[11:32:38] <arschmitz> at least for anchors
[11:32:48] <gabriel_schulhof> arschmitz: Yes, please! ... and besides, that's what we have now.
[11:32:49] <arschmitz> buttons i would tend to go for init selector
[11:33:12] <arschmitz> links can be a link or a button
[11:33:18] <arschmitz> but buttons should always be buttons
[11:33:23] <arschmitz> lol
[11:33:31] <gabriel_schulhof> arschmitz: A button doesn't submit by default, does it?
[11:34:41] <arschmitz> depends on browser
[11:34:57] <arschmitz> but regardless buttons should always look like buttons
[11:35:04] <arschmitz> regardless of if they submit
[11:35:31] <jasperdegroot> arschmitz: I think it's best to work on spans instead of pseudo elements for icons in a branch that contains the new button widget
[11:35:42] <jasperdegroot> and controlgroup and checkboxradio widegt
[11:35:44] <jasperdegroot> widget*
[11:35:50] <arschmitz> jasperdegroot: yes in a branch for sure
[11:36:12] <gabriel_schulhof> Whew ... this'll be a PR on a PR :)
[11:36:14] <jasperdegroot> yes but a branch that contains the new widgets
[11:36:15] <arschmitz> jasperdegroot: i was thinking just work on the css to start
[11:36:32] <arschmitz> and we can pull the widget in once they are ready
[11:36:47] <jasperdegroot> arschmitz: but don't you think that will give a lot of conflicts
[11:36:52] <arschmitz> jasperdegroot: there is a small bit of debate about classes still
[11:36:58] <jasperdegroot> I see
[11:37:03] <arschmitz> jasperdegroot: no
[11:37:24] <arschmitz> becuase we will pull external files so there will be no conflicts its completely new
[11:37:34] <arschmitz> the button widget will not be in /js any more
[11:37:47] <arschmitz> it will be in external/jquery-ui/button.js
[11:37:53] <jasperdegroot> ok
[11:38:18] <jasperdegroot> I think lot of our button icon stuff is core.css
[11:38:37] <arschmitz> jasperdegroot: yeah and we wont pull the css from ui
[11:38:44] <arschmitz> only the js
[11:38:53] <jasperdegroot> but ok, I'll make the changes first and then we will see if we have to move things to other files
[11:39:15] <arschmitz> which brings me to something else i realized that gseguin can hopefully help with
[11:39:28] <gseguin> what is it?
[11:39:30] <arschmitz> css dependency comments
[11:39:37] <arschmitz> are going to break
[11:39:44] <arschmitz> because ui will point to their css
[11:39:50] <arschmitz> but we will want to use our own
[11:40:03] <arschmitz> we will need something like a require paths config
[11:40:15] <arschmitz> to say this path really should point to this different file
[11:40:26] <arschmitz> gseguin: thoughts?
[11:40:43] <gabriel_schulhof> arschmitz: Are we going to have a js/widgets/forms/button.js which depends on the external file, like we have for tabs?
[11:40:56] <gabriel_schulhof> arschmitz: ... if so, we need only ignore paths that are unavailable.
[11:41:04] <gseguin> that sounds hairy
[11:41:05] <arschmitz> gabriel_schulhof: the idea is to get rid of those now that ui uses amd
[11:41:34] <arschmitz> gabriel_schulhof: and hiding hidden would be bad it would hide errors
[11:41:37] <gabriel_schulhof> gseguin: It's like paths in requirejs
[11:41:51] <gabriel_schulhof> arschmitz: True.
[11:42:02] <gabriel_schulhof> arschmitz: We need to call our file jquery.ui.button.css
[11:42:12] <gseguin> honestly I hate to bring this back on the table but why aren't we using something like: https://github.com/guybedford/require-css
[11:42:24] <gseguin> That would take care of that problem
[11:42:25] <arschmitz> gabriel_schulhof: that would not even work it would be in wrong directory
[11:42:41] <arschmitz> gseguin: a variety of reasons
[11:42:53] <gabriel_schulhof> arschmitz: No, because if we implement paths the way requirejs has paths, then the path would be correct, and the filename would also be correct.
[11:43:34] <gabriel_schulhof> arschmitz: I'm just saying, if the filename is the same, we need implement nothing different from requirejs's paths.
[11:43:37] <arschmitz> gseguin: id rather not get back into that right this second i can find the issues thread if you want
[11:44:17] <gseguin> arschmitz: that's fine. I sort of recall not wanting to impose RequireJS as the AMD loader
[11:44:49] <arschmitz> thats part of it
[11:45:08] <gabriel_schulhof> arschmitz: Also, ummm ... symlinks ... ?
[11:45:13] * gabriel_schulhof ducks behind a large rock
[11:45:58] <arschmitz> gseguin: i have not looked recently but it seems fairly straight forward to add a paths config option to the builder
[11:46:12] <gseguin> arschmitz: we could use the same paths as in the requirejs's path config
[11:46:18] <arschmitz> pass in an object and then check the paths against it
[11:46:23] <arschmitz> gseguin: yup
[11:46:28] <arschmitz> thats a great idea
[11:47:01] <gseguin> jquery-ui/path/to/style.css
[11:47:12] <gseguin> or jquery-mobile/path/to/style.css
[11:47:31] <gseguin> and find a way to resolve the path via requirejs
[11:47:54] <arschmitz> yeah we just need to be able to have the comment in their file resolve to our file
[11:48:02] <arschmitz> because we wont pull any of their css
[11:48:17] <gseguin> oh ok
[11:48:26] <gabriel_schulhof> But then the paths config for css has to necessarily be different from the paths config for JS.
[11:48:36] <arschmitz> gabriel_schulhof: yes
[11:48:39] <gseguin> then current-project/path/to/style.css
[11:49:08] <arschmitz> gseguin: you will probably want to get with rxaviers on this
[11:49:14] <gseguin> ok
[11:49:21] <gabriel_schulhof> Does requirejs have a plugin for the way it reads dependencies?
[11:49:24] <gseguin> I'll sit with him next week
[11:49:31] <arschmitz> i plan is still to switch to ui builder
[11:49:37] <gabriel_schulhof> Last time I checked it was sticking the retrieved file into an eval() statement.
[11:49:42] <arschmitz> but they are using our builder for the css
[11:49:43] <gabriel_schulhof> That's pretty hard-coded.
[11:50:33] <gabriel_schulhof> If the process of harvesting deps from a given file were pluggable, our problems would be over.
[11:50:54] <arschmitz> so this brings me to the next 1.5 topic and task
[11:51:11] <arschmitz> updating every widget to use a proper classes option
[11:51:14] * jasperdegroot wonders if he is disconnected
[11:51:17] <gseguin> We could also use require-css internally and provide a noop shim to our bower consumers
[11:51:20] <gabriel_schulhof> jasperdegroot: You're not.
[11:51:37] <arschmitz> gseguin: i think this is a great topic for next week
[11:52:03] * gseguin shuts up now about require-css
[11:52:03] <arschmitz> gabriel_schulhof: id like you to try to work through the current widgets adding the classes option
[11:52:11] <jasperdegroot> gabriel_schulhof: actually I was for few minutes :(
[11:52:35] <gabriel_schulhof> arschmitz: OK.
[11:52:49] <arschmitz> gabriel_schulhof: most of it should be pretty straight forward
[11:53:03] <arschmitz> but there is one topic up for discussion with classes currently that will effect
[11:53:33] <gabriel_schulhof> arschmitz: sed -r  s/("ui-[^"]*")/this._classes( \1 )/g
[11:53:36] <arschmitz> which is should it work via setOptions
[11:53:37] <gabriel_schulhof> :)
[11:53:49] <arschmitz> gabriel_schulhof: that will not work
[11:53:54] <arschmitz> ui-icon will never be mapped
[11:54:07] <arschmitz> and there may be places we will add classes that we dont currently
[11:54:09] <gabriel_schulhof> arschmitz: I know ... I was oversimplifying :)
[11:54:25] <arschmitz> because every element must have its own class
[11:54:58] <arschmitz> for example there wont be a ui-button entry in any widget execpt button
[11:55:01] <rxaviers> I personally also like guybedford/require-css, although yeap gseguin it would impose that for AMD users. A css plugin isnt yet a consensus among AMD developers...
[11:55:10] <gabriel_schulhof> arschmitz: Yeah. We need to formalize which elements are considered parts of the widget's structure, and each element will have a class like ui-widgetname-structurename
[11:55:29] <arschmitz> all elements are part of widget structure
[11:55:40] <arschmitz> but not all currently get a ui-widgetname class
[11:55:40] <gseguin> rxaviers: let's talk about this next week
[11:55:43] <gabriel_schulhof> arschmitz: OK, then for all.
[11:55:53] <rxaviers> About the requirejs config option, as far as I could follow, builder could read each project's different config.
[11:55:53] <gabriel_schulhof> arschmitz: They'll now have to.
[11:55:55] <rxaviers> Sure.
[11:56:00] <arschmitz> gabriel_schulhof: exactly
[11:56:06] <gabriel_schulhof> arschmitz: ... and what about wrappers.
[11:56:08] <gabriel_schulhof> arschmitz: ?
[11:56:13] <arschmitz> what about them?
[11:56:29] <gabriel_schulhof> arschmitz: They currently get the ui-widgetname class. I guess that continues to be OK, right?
[11:56:34] <arschmitz> yup
[11:56:39] <gabriel_schulhof> arschmitz: ... because they're technically structural elements.
[11:56:44] <arschmitz> yup
[11:57:02] <arschmitz> we will now have a lot of ui-widgetname-icon classes that do nothing lol
[11:57:07] <gabriel_schulhof> So, ui-widgetname is given to the outermost element, not the element upon which the widget is defined.
[11:57:21] <arschmitz> gabriel_schulhof: there is not 100% standard for that
[11:57:32] <arschmitz> its what makes sense
[11:57:47] <gabriel_schulhof> arschmitz: ... because we could go with ui-widgetname-wrapper
[11:58:01] <gabriel_schulhof> ... and then we'd have consistency, whereby ui-widgetname is always given to this.element
[11:58:04] <arschmitz> gabriel_schulhof: its just what makes sense to that widgets structure
[11:58:21] <arschmitz> for example ui-selectmenu is not a class at all
[11:58:39] <arschmitz> in the ui selectmenu
[11:58:50] <gabriel_schulhof> You mean there are no rules associated with that selector?
[11:59:02] <arschmitz> no i mean there is no class ever placed in the markup
[11:59:13] <gabriel_schulhof> Oh, there isn't? Wow!
[11:59:16] <arschmitz> that class does not exist
[11:59:28] <arschmitz> this is something we could talk about formalizing though
[11:59:36] <arschmitz> when we are al together next week
[11:59:47] <gabriel_schulhof> No, but we do add ui-select
[11:59:54] <arschmitz> yes we do they dont
[12:00:15] <arschmitz> so the open issue on classes is should you be able to update it after init
[12:00:31] <arschmitz> and if you can should it actually do anything
[12:00:55] <arschmitz> right now it can be updated but has no effect it is not handled in setOptions
[12:01:05] <gabriel_schulhof> Well, if you can, it should behave as expected, which is that the particular structural element will have its classes updated.
[12:01:09] <arschmitz> the problem here is there is no way to optimize or abstract this
[12:01:12] <gabriel_schulhof> ... which is why you shouldn't be able to.
[12:01:19] <gabriel_schulhof> Yes there is.
[12:01:39] <gabriel_schulhof> You give a hash of class-name -> structural element
[12:01:45] <arschmitz> gabriel_schulhof:  no there isnt how would you optimize or abstract this?
[12:02:04] <gabriel_schulhof> You already have ui-widgetname-structurename -> classes
[12:02:09] <arschmitz> yes
[12:02:24] <gabriel_schulhof> You make a second hash ui-widgetname-structurename -> jQuery object
[12:02:58] <arschmitz> so you have to track every element you make a change to separately
[12:03:10] <arschmitz> and they dont always map to a single element
[12:03:10] <gabriel_schulhof> Then you jQuery.object.removeClass( oldClasses ).addClass( newClasses )
[12:03:17] <gabriel_schulhof> That's fine.
[12:03:23] <gabriel_schulhof> jQuery object can contain multiple elements.
[12:03:27] <arschmitz> yes
[12:03:47] <arschmitz> i dont know this seems like a bit much
[12:03:53] <gabriel_schulhof> Oh, definitely.
[12:04:03] <gabriel_schulhof> I vote we don't do it, but not because it's not possible.
[12:04:10] <arschmitz> there is actually a use case for allowing changes but not handeling in setoptions
[12:04:19] <gabriel_schulhof> What's that?
[12:04:26] <arschmitz> controlgroup with selectmenu
[12:04:42] <arschmitz> selectmenu changes its corner classes based on open/ closed
[12:04:54] <arschmitz> combine this with the excludeInvisibles option
[12:04:55] <gabriel_schulhof> ... but not in controlgroup. Right.
[12:05:18] <arschmitz> and you need to be abled to change the option values as things are shown hidden
[12:05:29] <arschmitz> but you dont care if it does anything right that second
[12:05:42] <arschmitz> just that it re-checks the option value every time
[12:06:10] <gabriel_schulhof> That's fine. We can document that we don't support changing the value at runtime, and still make use of this.
[12:06:36] <arschmitz> gabriel_schulhof: anyway its not been decided yet so if you have an oppinion i suggest you comment on the pr
[12:06:47] <gabriel_schulhof> We can even be specific and document that changes in the value will not be reflected immediately, but only upon subsequent lookup.
[12:07:02] <gabriel_schulhof> arschmitz: URL, please?
[12:07:27] <arschmitz> https://github.com/jquery/jquery-ui/pull/790
[12:08:08] <arschmitz> another change for 1.5 will be icons on input buttons will no longer be supported
[12:08:16] <arschmitz> this will remove ever needing a wrapper
[12:08:31] <arschmitz> ui has never supported icons on input buttons
[12:09:03] <arschmitz> we will however have css in place to make sure that you never get a blank space or a button with no text or icon
[12:09:10] <gabriel_schulhof> People can add them in with data-enhanced=true
[12:09:21] <arschmitz> so it will never be visually broken
[12:09:22] <gabriel_schulhof> ... add the wrapper themselves.
[12:09:31] <arschmitz> gabriel_schulhof: or just not use input buttons
[12:09:41] <arschmitz> there is absolutly no reason for them
[12:09:45] <jasperdegroot> last one sounds better
[12:09:52] <jasperdegroot> agreed
[12:10:08] <arschmitz> thats why <button> exists
[12:10:23] <gabriel_schulhof> Well, wait a sec. With input buttons you can add name=value pairs to the query.
[12:10:33] <arschmitz> yeah?
[12:10:43] <arschmitz> you can give a <button> a name and value?
[12:10:48] <gabriel_schulhof> OH. NM.
[12:10:50] <gabriel_schulhof> N00b here.
[12:11:00] <arschmitz> it is an input element
[12:11:07] <arschmitz> form element i mean
[12:11:57] <arschmitz> so i think these are the big things we have to handle for 1.5
[12:12:07] <gabriel_schulhof> arschmitz: TBH, I'm not seeing any discussion around whether to make classes work with setOptions in that PR.
[12:12:18] <arschmitz> there isnt yet
[12:12:24] <arschmitz> it came up in meeting yesterday
[12:12:30] <gabriel_schulhof> arschmitz: OK. Then I'll fire first, so to speak.
[12:13:02] <arschmitz> gabriel_schulhof: there is a third option i just thought of
[12:13:05] <arschmitz> make it init only
[12:13:18] <arschmitz> but allow digging into the data-object to change them directly if you need
[12:13:26] <arschmitz> kinda like private methods
[12:14:34] <arschmitz> i think readonly is fine as long as i can be worked around by those that know what they are doing and know the expected results
[12:14:58] <gabriel_schulhof> Actually, I've also had an idea.
[12:15:08] <gabriel_schulhof> Updating on-the-fly might not be so bad.
[12:15:19] <gabriel_schulhof> I mean, bad as in tough-to-implement.
[12:15:36] <gabriel_schulhof> The biggest problem I saw is which classes to remove when updating the classes?
[12:15:51] <arschmitz> gabriel_schulhof: by all means comment that too please our original thought was it should be handeled but it did not seem reasonable or optimizable
[12:16:03] <gabriel_schulhof> OK.
[12:16:09] <arschmitz> gabriel_schulhof: nah as long as you have access to both at same time
[12:16:11] <gabriel_schulhof> I'll just dump my brain :)
[12:16:11] <arschmitz> its fine
[12:16:16] <gabriel_schulhof> Yeah.
[12:16:29] <arschmitz> and if its in base widget it can be done in setOptions where you have both
[12:16:39] <gabriel_schulhof> Oh, and you know which elements you need to update!
[12:16:50] <arschmitz> gabriel_schulhof: but one thing to remember
[12:17:09] <gabriel_schulhof> You need only compare options.classes.ui-widgetname-structurename to this.options.classes.ui-widgetname-structurename, and it's a string comparison!
[12:17:25] <arschmitz> you cant bass widgetname( "option",classes", object ) unless you pass the whole options object
[12:17:34] <arschmitz> setOption is not a deep extend
[12:17:38] <gabriel_schulhof> That's fine.
[12:17:58] <gabriel_schulhof> Devs can retrieve the classes option and use extend to overwrite a single key.
[12:18:04] <gabriel_schulhof> I mean $.extend
[12:18:10] <gabriel_schulhof> That's their problem.
[12:18:23] <arschmitz> gabriel_schulhof: you can do widgetname( "option", "classes.foo", "class" )
[12:18:30] <gabriel_schulhof> Oh, OK.
[12:18:43] <arschmitz> but object fully replace
[12:18:43] <gabriel_schulhof> How does the parameter to _setOptions() look like then?
[12:19:01] <arschmitz> setOptions is an object of options
[12:19:02] <gabriel_schulhof> Well, we can fix that in the base class, because that makes no sense.
[12:19:19] <gabriel_schulhof> I mean, the base class already handles disabled.
[12:19:29] <arschmitz> so it extends the options object but each individual option is replaced not extended
[12:19:50] <arschmitz> which is by design
[12:20:00] <gabriel_schulhof> Well, not quite.
[12:20:16] <gabriel_schulhof> The default action is this.options[ key ] = options[ key ].
[12:20:23] <gabriel_schulhof> But that can be overridden.
[12:21:00] <arschmitz> anyway put your thoughts on it in the ticket
[12:21:03] <gabriel_schulhof> OK.
[12:21:25] <arschmitz> we are trying to land classes asap to get everything else going
[12:21:37] <arschmitz> the button branch is already rebased on it
[12:22:24] <arschmitz> gabriel_schulhof: feel free to take a look at new widgets and give your input on those too
[12:22:30] <gabriel_schulhof> OK.
[12:22:41] <gabriel_schulhof> I feel like a mountain just landed on me.
[12:22:59] <arschmitz> gabriel_schulhof: you will see its really not to bad we just need to get classes finalized
[12:23:07] <gabriel_schulhof> Kinda puts a damper on "Yaaaay! 1.4.4 is almost ready!" :P
[12:23:15] <arschmitz> gabriel_schulhof: nah this is exciting
[12:23:16] <jasperdegroot> I have to go... see you on -dev or next week in Chicago
[12:23:18] <arschmitz> new widgets
[12:23:26] <gabriel_schulhof> arschmitz: Definitely! I'm super-stoked!
[12:23:28] <arschmitz> jasperdegroot: thanks see you next week!
[12:23:30] <cgack> see you jasperdegroot
[12:23:35] <jasperdegroot> later all
[12:23:39] <gabriel_schulhof> jasperdegroot: L8R
[12:23:45] <arschmitz> gabriel_schulhof: it unwinds our current controlgroup initselector crazyness too
[12:23:53] <arschmitz> where it kinda depends on page
[12:24:04] <gabriel_schulhof> arschmitz: Yeah, that's bad.
[12:24:13] <arschmitz> gabriel_schulhof: switched to an items object in options
[12:24:19] <arschmitz> it maps widgetname to selector string
[12:24:33] <gabriel_schulhof> Nice!
[12:24:36] <arschmitz> so basicly it accepts an initselector object
[12:24:44] <gabriel_schulhof> Yeah, exactly.
[12:24:53] <arschmitz> so it addresses your concern of extensibility too
[12:24:59] <gabriel_schulhof> For sure!
[12:25:04] <gabriel_schulhof> Very nice!
[12:25:12] <gabriel_schulhof> ... and it's still markup-able via JSON.
[12:25:22] <arschmitz> yup
[12:25:38] <arschmitz> id recomend against it
[12:25:42] <arschmitz> but it will work
[12:26:00] <gabriel_schulhof> Well, ... in keeping with our markup-oriented approach.
[12:26:15] <arschmitz> gabriel_schulhof: the new widgets are a big step forward for us i think
[12:26:19] <gabriel_schulhof> Yeah.
[12:26:29] <arschmitz> they have been really thuroughly discussed thought out and planned
[12:26:36] <arschmitz> they are 100% accessible
[12:26:51] <gabriel_schulhof> I'll tell you one thing though. I'm not a fan of instantiating widgets via JS. I've done that before doing HTML and it's terrible.
[12:26:53] <arschmitz> and we dont have to maintain them :)
[12:27:03] <arschmitz> gabriel_schulhof: i prefer it :)
[12:27:15] <gabriel_schulhof> I've had places where I wrote like 5000 lines just creating buttons, text inputs, and scroll bars.
[12:27:19] <arschmitz> but regardles thats part of mobile you can pick
[12:27:33] <arschmitz> gabriel_schulhof: i think you need better selector then :)
[12:28:10] <gabriel_schulhof> No, the point is that creating UI should be sufficiently systematic to be doable in a declarative fashion.
[12:28:33] <arschmitz> maybe with web components
[12:29:06] <gabriel_schulhof> I dunno ... to me web components feels like it's just shoving all that under the carpet while opening up a whole slew of problems.
[12:29:12] <gabriel_schulhof> But anyway, this is a topic for -dev.
[12:29:18] <arschmitz> yeah lets wrap up here
[12:29:23] <arschmitz> anyone have anything else?
[12:30:09] <arschmitz> anything from the community?
[12:32:54] <arschmitz> see everyone on -dev
