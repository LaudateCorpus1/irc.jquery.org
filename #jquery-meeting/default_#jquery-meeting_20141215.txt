[09:00:59] <DaveMethvin> meeting time!
[09:01:30] <DaveMethvin> who's here? I spy gibson042
[09:01:33] <DaveMethvin> markelog__:
[09:01:37] <DaveMethvin> m_gol:
[09:01:42] <m_gol> present
[09:01:44] <markelog__> hey-hey
[09:02:02] <DaveMethvin> timmywil: you here?
[09:02:08] <timmywil> yurp
[09:02:24] <DaveMethvin> cool
[09:02:26] <DaveMethvin> ok
[09:02:37] <DaveMethvin> i think we're almost ready for a release
[09:02:50] <DaveMethvin> Sizzle looks good
[09:03:04] <DaveMethvin> i wanted to ask about that URL PR
[09:03:07] <timmywil> Why did Scott take the meeting notes out of the topic?
[09:03:35] <DaveMethvin> they're at the meeting url i think
[09:03:37] <DaveMethvin> lemme look
[09:04:46] <DaveMethvin> i can't find them but that was the idea ... we can ping him after
[09:05:08] <timmywil> which meeting url?
[09:05:12] <DaveMethvin> the topic was getting too big so it was supposed to point to a page with hte agendas
[09:05:18] <DaveMethvin> https://docs.google.com/document/d/1su2ZTFZbnp_DD-LGZleuEudTFRJT_g4zf7UfGOMQvco/edit
[09:05:23] <timmywil> oh ok
[09:05:47] <DaveMethvin> let's get through the agenda
[09:06:12] <DaveMethvin> thoughts on that Ajax URL patch being put into the release?
[09:06:31] <DaveMethvin> it shoudl be safe, we're not changing the externally visible url
[09:06:35] <timmywil> need to commit Sizzle update to jQuery
[09:06:44] <DaveMethvin> yep
[09:06:59] <timmywil> ah, that's in there
[09:07:05] <gibson042> I'm against including https://github.com/jquery/jquery/issues/1875 in this patch release
[09:07:05] <b-ot> gibson042: You have 1 new message, use `read when you wish to read it.
[09:07:09] <gibson042> `read
[09:07:10] <b-ot> gibson042: From m_gol, 3d 2h ago: just to be sure: I assume there are no breaking changes between Sizzle 1.10.19 and 2.1.0?
[09:07:16] <markelog__> these kind of patches could backfire very unexpectedly
[09:07:20] <DaveMethvin> better not be! :)
[09:07:24] <gibson042> correct
[09:07:24] <markelog__> )
[09:07:33] <DaveMethvin> markelog__: yeah i agree that's why i was asking
[09:07:55] <DaveMethvin> the IE behavior for that was a bit flakey
[09:08:02] <markelog__> i'd say if that is not essential and we could wait, then perhaps we should?
[09:08:07] <DaveMethvin> i'm okay with leaving it until 3.0
[09:08:16] <timmywil> was it included in compat?
[09:08:20] <DaveMethvin> we are knocking out a bunch of memory leaks
[09:08:47] <markelog__> in 3.0 we will do a lot of changes like that, so it might be more appropriate place for it
[09:08:47] <DaveMethvin> timmywil: yeah it was cp into there
[09:08:55] <DaveMethvin> you sold me markelog__
[09:08:59] <markelog__> )
[09:09:31] <DaveMethvin> if we were doing a beta it might be okay but i am hoping this wont' need a .3 to get right
[09:09:51] <markelog__> fingers crossed
[09:10:00] <m_gol> https://github.com/jquery/jquery/issues/1921 shouldn't be on a list
[09:10:19] <m_gol> it's a newer commit than the one I branched from and it doesn't make sense to include it
[09:10:25] <m_gol> I think
[09:10:41] <DaveMethvin> i thought it was there, let me recheck
[09:11:42] <DaveMethvin> you're right m_gol
[09:11:42] <m_gol> git merge-base e1949f43711b5808d42378bafb6728b40b1738d6 2.1-stable
[09:11:51] <DaveMethvin> both -stable
[09:12:03] <m_gol> e488d985cfb10ab8c684bbc6a9b8ff3eae23bf83 is the one I branched from for master
[09:12:21] <m_gol> * for 2.1-stable
[09:12:26] <m_gol> 76294e1e9e25665b22467c099ed406402f784e2a for 1.11-stable
[09:12:46] <DaveMethvin> ok, reassigned to 3.0
[09:14:21] <DaveMethvin> are there any jquery-release changes needed? I didn't see anything but something was nagging at me
[09:15:45] <DaveMethvin> timmywil could you update Sizzle for all the branches (master, compat, and the -stables)?
[09:15:51] <timmywil> sure
[09:15:52] <m_gol> https://github.com/jquery/jquery/pull/1662 was master-only as well
[09:16:34] <DaveMethvin> m_gol: i'll update that
[09:17:13] <m_gol> apart from that and the <a> URL parsing moved to 3.0 it looks good
[09:17:44] <DaveMethvin> ok good
[09:18:02] <DaveMethvin> now i just have to get my Debian VM working again to do the release
[09:18:24] <DaveMethvin> bit rot is an ugly thing
[09:19:20] <DaveMethvin> So there are a few things in the PR/issues below but i was wondering about using ES6 module format ... timmywil has edited that already
[09:19:38] <DaveMethvin> we could use r.js after creating the AMD modules tho
[09:19:58] <DaveMethvin> but that would make it slower no doubt
[09:20:17] <DaveMethvin> and it would mean you'd have to build to amd before testing
[09:20:38] <m_gol> but it would pave the road to the future
[09:20:42] <DaveMethvin> exporting from amd to es6 seems not worth the trouble
[09:20:45] <timmywil> Our build process is a custom creation on top of r.js. The modules generated from ES6 would not be adequate.
[09:21:09] <m_gol> if we're going to keep src in AMD for 3.0 and we want to switch to ES6 in src then it cannot happen before 4.0
[09:21:18] <timmywil> Don't get me wrong, I'm an ES6 fanboy. But I think we should use a module format supported by all browsers.
[09:21:32] <gibson042> we might be able to push our custom stuff into postprocessing
[09:21:38] <gibson042> but I don't see it for 3.0.0
[09:21:38] <DaveMethvin> we need to provide one for sure
[09:21:58] <timmywil> It's a very big change
[09:22:23] <DaveMethvin> if there were already good tools to author in es6 modules it would be easier
[09:22:25] <timmywil> that will affect CDN size.
[09:22:31] <DaveMethvin> but we need to transform before we can consume
[09:22:37] <DaveMethvin> which sucks
[09:22:38] <gibson042> to be clear: I don't see it for 3.0.0 because of timing, not because of semver. It could come in 3.x
[09:22:56] <DaveMethvin> right, once we ship 3.0 we can't change what's in /src
[09:23:01] <m_gol> gibson042: so you don't consider src/ format to be a part of our public API?
[09:23:07] <gibson042> correct
[09:23:11] <DaveMethvin> that would confuse the heck out of people
[09:23:18] <DaveMethvin> we'd need to wait until 4.0
[09:23:27] <gibson042> who uses src/ directly?
[09:23:31] <gibson042> as opposed to grunt?
[09:23:49] <gibson042> `grunt build` I *do* consider public API
[09:23:49] <m_gol> hard to know
[09:23:50] <timmywil> m_gol: to be fair, we wouldn't necessarily break distribution src/
[09:24:05] <timmywil> if exported to AMD
[09:24:08] <DaveMethvin> oh
[09:24:14] <m_gol> timmywil: if we don't then the es6 files would have to be in a different directory
[09:24:29] <m_gol> which may make git blame useless
[09:24:33] <timmywil> or not published
[09:24:33] <DaveMethvin> so /src in the repo would be es6 and /src in the release would be amd?
[09:24:54] <gibson042> that sounds terrifying
[09:24:59] <DaveMethvin> lol yeah
[09:25:01] <timmywil> just saying it's possible
[09:25:15] <m_gol> DaveMethvin: this would make the detached commits huge
[09:25:17] <timmywil> but I'm playing devil's advocate. I don't really want to do that.
[09:25:21] <DaveMethvin> if we don't go es6 in 3.0 i think we would wait until 4.0
[09:25:23] <m_gol> and we've already done what we could to keep them small
[09:25:44] <timmywil> DaveMethvin: that sounds more reasonable anyway
[09:25:44] <DaveMethvin> we're moving releases for this crap to another repo tho, right?
[09:25:45] <m_gol> maybe it'd be safer to wait for tooling and/or at least 1-2 browsers actually implementing it
[09:26:00] <timmywil> m_gol: +1
[09:26:10] <DaveMethvin> yeah i think given our runway we can't do this for 3.0
[09:26:27] <m_gol> we may also wait and see how it plays in QUnit
[09:26:41] <DaveMethvin> i suspect es6 modules will be an authoring format for a long time and most ppl will continue to use amd/cjs
[09:26:46] <m_gol> https://github.com/jquery/qunit/issues/707
[09:28:32] <DaveMethvin> alright
[09:29:11] <DaveMethvin> looking at process, i think it would be easiest for us to have issues for any non-trivial changes and PRs that either are trivial like the typos markelog__ landed today or that ref one or more issues
[09:29:41] <DaveMethvin> if we try to include PRs in the changelog it gets ugly quickly
[09:29:50] <m_gol> DaveMethvin: +1 but I think we've already discussed it a week ago?
[09:29:57] <DaveMethvin> yeah i said I'd look/think it over
[09:30:02] <DaveMethvin> and i did :)
[09:30:17] <DaveMethvin> so ... issues and PRs
[09:30:35] <DaveMethvin> gibson042: we shortchanged the discussion on promises
[09:30:43] <DaveMethvin> we have 30 minutes today!
[09:30:47] <gibson042> :)
[09:30:48] <DaveMethvin> you can use 29
[09:31:00] <gibson042> so I summarized the points of discussion
[09:31:01] <gibson042> Spec compat:
[09:31:01] <gibson042> * Don't swallow resolution: `dfd.done( thrower ).then( neverCalled, neverCalled ); dfd.resolve()`
[09:31:01] <gibson042> Back compat:
[09:31:01] <gibson042> * Don't process resolution values: `dfd.resolve( thenable ).done( expectsThenable )`
[09:31:01] <gibson042> * Multi-valued resolution: `dfd.resolve( value1, value2, ... ).then( expectsMultipleArguments )`
[09:31:02] <gibson042> * Progress: `dfd.notify( progress ).then( null, null, expectsProgress )`
[09:31:02] <gibson042> Possible conflict:
[09:31:03] <gibson042> * Contextual resolution: `dfd.resolveWith( context, values ).then( expectsContext )`
[09:31:51] <gibson042> my original intent was to keep .then 100% back-compatible
[09:32:16] <gibson042> subsequent has shown that _may_ not be possible for contextual resolution, in which case I'd change it to "as back-compatible as possible"
[09:32:33] <DaveMethvin> walking the line is tough fer sure
[09:32:53] <gibson042> so basically, we need to decide if that goal is still valid
[09:33:19] <DaveMethvin> chopping off the resolved values seems very painfully breaky so i think we need to diverge from spec there
[09:34:06] <DaveMethvin> we do need some way to do unhandled error detection?
[09:34:17] <gibson042> I want to put that in as a plugin
[09:34:37] <gibson042> regarding multi-values though, I _still_ see it as a spec extension but not divergence
[09:34:59] <gibson042> domenic disagrees, though
[09:35:06] <DaveMethvin> the way i look at the standard, if someone writes code that doesn't look at context and only expects one arg, our Deferred works fine there
[09:35:24] <gibson042> DaveMethvin: that's the case I want to support
[09:35:28] <DaveMethvin> well he's not trying to maintain backcompat
[09:35:31] <m_gol> gibson042: where does he disagree?
[09:35:36] <DaveMethvin> he's right about spec compliance
[09:35:54] <DaveMethvin> but i have no problem diverging in those places
[09:36:11] <gibson042> meh, I don't want to use these 24 minutes on semantics
[09:36:20] <m_gol> well, it's not possible to be ES6-compatible without breaking everything because of https://github.com/jquery/jquery/pull/1821#issuecomment-65131776
[09:36:38] <DaveMethvin> lol
[09:36:38] <gibson042> anyway, I want people coloring within the spec lines to use jQuery.Deferred as a proper thenable
[09:36:40] <m_gol> ok, sorry
[09:36:45] <gibson042> and use the outside space for backcompat
[09:36:46] <DaveMethvin> let's get practical
[09:36:59] <DaveMethvin> yes
[09:37:10] <DaveMethvin> exactly my thought too
[09:37:33] <gibson042> ok, then I *do* need to put together a PR
[09:37:37] <DaveMethvin> since `then` is supposed to be ignored in a standard Promise/A we can set it to anything we like for example :)
[09:37:44] <gibson042> :)
[09:37:45] <DaveMethvin> uh `this`
[09:37:45] <timmywil> Sizzles updated
[09:37:50] <DaveMethvin> yes, please
[09:38:06] <DaveMethvin> altho one thing with error handling
[09:38:16] <DaveMethvin> do you think it's going to work having that in a plugin?
[09:38:37] <gibson042> yes, but I'll probably want to make a Deferred prototype
[09:38:44] <m_gol> timmywil: thx; we need to update them on 2.1-stable/1.11-stable as well but we still use bower there
[09:38:45] <DaveMethvin> i'd almost prefer to have it be obnoxious by default and make people explicitly decide how to deal with it
[09:38:54] <timmywil> m_gol: already done
[09:38:58] <gibson042> we can't do that and be Promises/A+ compatible
[09:39:01] <DaveMethvin> ok
[09:39:11] <m_gol> :)
[09:39:22] <gibson042> so my plan is to keep an array of unresolved deferred objects
[09:39:33] <gibson042> and hook into resolve/reject to prune the array
[09:39:38] <gibson042> as a plugin
[09:40:16] <DaveMethvin> let me update the notes
[09:41:22] <m_gol> gibson042: so do you want to add this array in core and hook into it with a plugin?
[09:41:32] <gibson042> no, all in the plugin
[09:42:37] <DaveMethvin> just a reminder, with IE7 out of the support matrix we have the ability to use try/finally without a catch, which might come in handy
[09:43:12] <gibson042> yay!
[09:43:15] <DaveMethvin> at least the Deferred wouldn't get wedged but we'd still be able to throw native errors
[09:43:18] <gibson042> it sure might
[09:44:35] <DaveMethvin> well then we have time for Plain Objects
[09:45:47] <DaveMethvin> i'd really like to avoid having stuff we kind of secretly support even tho there are no unit tests or docs
[09:46:00] <DaveMethvin> the secret menu is cool for In'N'Out Burger but doesn't really help us
[09:46:29] <DaveMethvin> we do officially support plain objs for a limited set of stuff now, and it's working
[09:46:45] <DaveMethvin> we don't list animations or queues as one of them
[09:47:18] <gibson042> I think we should update the docs for both
[09:47:21] <DaveMethvin> and we have a bug saying animation on plain obj doesn't work with certain names
[09:47:30] <DaveMethvin> so how do we justify closing that bug? :)
[09:47:34] <m_gol> do we consider the effects module a first-class citizen or a kind-of-a-deprecated (but not really) module like deferred?
[09:47:59] <m_gol> maybe not deprecated but frozen
[09:48:08] <DaveMethvin> gibson042: bring animate/queue into support for plain objs?
[09:48:26] <gibson042> yes
[09:48:27] <gibson042> since we ourselves have published code that takes advantage of it
[09:48:48] <DaveMethvin> i think it's possible to animate plain objs reliably if you avoid css property names
[09:48:50] <DaveMethvin> in general
[09:49:11] <gibson042> I'm almost certain I can fix https://github.com/jquery/jquery/issues/1776 for any property name
[09:49:45] <DaveMethvin> just check for nodeType i suppose
[09:49:51] <gibson042> yep
[09:50:25] <DaveMethvin> mainly i just wonder if it's a good enough case to support
[09:50:38] <DaveMethvin> and of course to document
[09:50:42] <gibson042> gnarf likes it
[09:51:25] <DaveMethvin> to m_gol's point, if anything shoudl be done to animate it would be to support native animations, more like what velocity.js has done
[09:51:41] <DaveMethvin> improve perf, smoothness, etc
[09:51:57] <DaveMethvin> we're putting rAF back in 3.0 which is good
[09:52:30] <DaveMethvin> but we don't have any plans at the moment to enhance what's there
[09:52:45] <DaveMethvin> if we decided to go the velocity.js route, would plain obj support restrain us?
[09:52:58] <gibson042> hmm
[09:53:24] <gibson042> maybe in size, because it would probably manifest as one or more nodeType checks
[09:53:37] <gibson042> but probably not in perf
[09:54:09] <DaveMethvin> i've wanted to look at velocity.js to see what's going on inside it
[09:54:20] <DaveMethvin> just to see if there's anything we could learn from it
[09:54:22] <gibson042> same here
[09:54:37] <gibson042> I skimmed it a long while back, but never returned for the deep dive
[09:54:49] <gibson042> I'd like to do the same with greensock, for that matter
[09:54:57] <DaveMethvin> he says he's worked to minimize extra layouts which i guess we do by accident
[09:55:23] <DaveMethvin> it's somewhat api compatible but i have wondered where it's not
[09:56:57] <DaveMethvin> it seems like .queue() is less problematic for plain object support, or perhaps i shoudl say less of a potential problem?
[09:57:05] <gibson042> yeah
[09:57:14] <m_gol> we also have .data
[09:57:17] <DaveMethvin> i agree that nodeType checks shoudl work for our current animate
[09:57:26] <DaveMethvin> .data() is already on the list tho
[09:57:38] <DaveMethvin> but there was the q of exposing the expando
[09:57:57] <DaveMethvin> in compat we hide it for JSON seriliazation but not in a for/in
[09:58:09] <DaveMethvin> in master we were debating whether to hide it
[09:58:10] <m_gol> if we want to keep supporting .data on plain objects, it may affect PR https://github.com/jquery/jquery/pull/1668
[09:58:23] <DaveMethvin> right
[09:59:54] <DaveMethvin> I'd still like to avoid a special case for .data() there
[09:59:59] <gibson042> if we deprecate, we shouldn't expose the expando in 3.0 because it's not exposed in 2.x. If we don't deprecate, we shouldn't expose the expando because that's a change in the wrong direction
[10:00:35] <DaveMethvin> it's exposed in compat tho
[10:00:48] <gibson042> IIRC, 2.0 originally tried to `Object.defineProperty` everywhere
[10:00:50] <DaveMethvin> except for the toJSON case
[10:01:16] <DaveMethvin> and we're talking about a 3.0 so if there was ever a time for a breaking change it would be now
[10:01:19] <gibson042> it appears to be exposed in compat because there's no way to fully hide it
[10:01:36] <gibson042> I agree; I just think exposing is a bad change
[10:01:56] <DaveMethvin> true, but we were attempting to hide it for jquery-datalink
[10:02:02] <DaveMethvin> which is gone
[10:02:19] <DaveMethvin> i dunno who else is using this but i don't think it's mainstream
[10:02:30] <DaveMethvin> if it is we could put it back after a beta or in 3.0.1
[10:02:45] <DaveMethvin> think about all the stuff we broke in 1.9 :)
[10:03:00] <DaveMethvin> i wish we had a way to know what apis were being used in the wild
[10:03:00] <gibson042> lol
[10:04:16] <DaveMethvin> let's expose that expando and see who yells in the beta
[10:04:29] <gibson042> hmmm, ok
[10:04:32] <DaveMethvin> that way both compat and master will see it during a for/in
[10:04:53] <DaveMethvin> we're not consistent now anyway
[10:05:03] <DaveMethvin> so i wonder who's depending on this
[10:05:14] <DaveMethvin> only one way to find out ...
[10:05:16] <gibson042> yeah
[10:05:32] <gibson042> I think we're consistent for serialization, but not for for...in
[10:06:13] <DaveMethvin> on plain objects the idea is to not deprecate them now?
[10:06:17] <gibson042> so this will change JSON.stringify( objectWithData )
[10:06:32] <DaveMethvin> but continue support for existing use cases, plus .queue() which has been stealth-supported?
[10:06:42] <gibson042> and .animate
[10:06:54] <gibson042> maybe
[10:06:59] <DaveMethvin> gibson042: understood
[10:07:33] <DaveMethvin> yeah i have it on the maybe list
[10:08:05] <DaveMethvin> whoa, where did the time go?
[10:08:08] <m_gol> we may need a lot of new tests
[10:08:25] <DaveMethvin> yeah if we want to make sure this stuff really works and doesn't break in the future
[10:08:41] <DaveMethvin> ok, let's wrap up
[10:08:44] <DaveMethvin> any other big issues?
[10:09:06] <DaveMethvin> it looks like stuff is ready for a release, I'll work on that this afternoon
[10:09:20] <DaveMethvin> and the blog post
[10:09:20] <DaveMethvin> thanks guys!
[10:10:09] <arthurvr> Bye!
