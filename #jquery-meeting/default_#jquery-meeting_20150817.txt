[09:03:19] <timmywil> gibson042, DaveMethvin, m_gol, arthurvr MEAT
[09:04:05] <m_gol> present
[09:04:32] <gibson042> ready
[09:04:42] <markelog> hey-hey
[09:04:49] <timmywil> hey
[09:04:57] <timmywil> first up, https://github.com/jquery/jquery/issues/2541 do we cache node_modules?
[09:05:23] <markelog> suggest to read the discussion
[09:05:30] <markelog> it is pretty interesting )
[09:05:53] <markelog> when me and m_gol start argue, it is always interesting )
[09:06:03] <timmywil> let's make a decision, tho
[09:06:18] <m_gol> yeah :P
[09:06:40] <markelog> so, Timmy, Richard
[09:06:43] <m_gol> this is not *SUCH* a big deal as you could think from this discussion, though
[09:06:50] <gibson042> agreed on that point
[09:06:51] <markelog> yeah )
[09:07:11] <gibson042> but my preference matches m_gol's; don't cache
[09:08:25] <timmywil> I also lean towards not caching, unless I can be convinced otherwise
[09:08:43] <markelog> how can i convince you?
[09:09:03] <markelog> there is essentially two points why i think we should do it
[09:09:18] <markelog> 1. it is faster, we already do this in chassis
[09:09:30] <markelog> in the future we will add more and more dev deps
[09:09:56] <markelog> so build will become increasingly slower
[09:10:14] <markelog> 2. we would not show dep errors to the contributor
[09:10:32] <m_gol> I wonder how much time it takes; we could change `npm install` on travis to `time npm install` and it'd be clear
[09:10:40] <markelog> if we do, it might present the chance of discourage them
[09:10:52] <m_gol> like here: https://github.com/EE/karma-ng-json2js-preprocessor/blob/01b596070d34979b5b77d1e24681684b841ffd09/.travis.yml#L20-L21
[09:10:58] <markelog> if travis would use cdn
[09:11:04] <markelog> "cdn" that is
[09:11:08] <markelog> it wouldn't be fare
[09:12:07] <timmywil> markelog: point 2 seems pretty situational. I would think that even some unforeseeable problems are inevitable if our automated builds do not mirror exactly what is done locally.
[09:12:43] <timmywil> I can't argue against 1, except to say that npm install seems fast enough so far
[09:12:59] <markelog> 2. yeah, that might be an issue
[09:14:53] <markelog> okay, so remove it now
[09:15:04] <markelog> and bring it up in the future?
[09:15:07] <markelog> sounds good?
[09:15:11] <m_gol> SGTM
[09:15:12] <timmywil> +1
[09:15:14] <gibson042> +1
[09:15:30] <markelog> cool
[09:15:44] <markelog> now, if we remove that commit from mine pr
[09:15:49] <markelog> it would still be not ready
[09:15:54] <timmywil> orly?
[09:15:59] <markelog> since i would need to do the same for the compat
[09:16:03] <markelog> tried to cherry-pick it
[09:16:09] <timmywil> oh yea
[09:16:11] <markelog> but it is conflicted all over the place
[09:16:21] <markelog> so it would take another four hours or so
[09:16:28] <timmywil> oof
[09:16:32] <markelog> probably do that in weekend
[09:16:48] <m_gol> btw
[09:16:54] <m_gol> this is one of those cases
[09:16:56] <timmywil> well, is it safe to say that we're all comfortable with the PR for master now?
[09:16:58] <timmywil> I am
[09:17:02] <m_gol> where rebasing all those other PRs will be very, very painful
[09:17:11] <markelog> yep
[09:17:17] <markelog> but we already delayed that step
[09:17:25] <markelog> we would need to do it at some point
[09:17:28] <m_gol> and I happened to submit a couple of them 2 weeks ago :P
[09:17:31] <m_gol> yeah, I know
[09:17:48] <markelog> well, you tried to do them with new syntax
[09:17:51] <timmywil> true, but seems like a necessary step
[09:17:56] <m_gol> the question is, how much work requires it to recreate this PR?
[09:18:04] <markelog> new code-style
[09:18:09] <markelog> not syntax of course
[09:18:12] <m_gol> because we have a couple of PRs, some from me, some from others, that are good to merge IMO
[09:18:16] <markelog> m_gol
[09:18:18] <markelog> a lot
[09:18:22] <m_gol> ok
[09:18:25] <m_gol> :)
[09:18:34] <markelog> but it more has to do with qunit update
[09:18:40] <m_gol> so you propose to land your first & then rebase everything?
[09:18:40] <markelog> not with the code-style
[09:18:40] <m_gol> right
[09:18:43] <m_gol> I see
[09:18:53] <markelog> after i finish up with compat
[09:18:58] <timmywil> is it easier to land the code style changes first and rebase other PRs or land other PRs and rebase code style changes?
[09:19:01] <markelog> since it might confuse a lot of people
[09:19:16] <markelog> i guess the second
[09:19:29] <markelog> since user would fix the small conflicts
[09:19:40] <markelog> whereas i would face the whole bunch of them
[09:19:41] <timmywil> well, it sounds like the second is harder for you, markelog
[09:19:52] <markelog> oh shoot
[09:19:56] <markelog> the first of course )
[09:20:01] <m_gol> haha
[09:20:25] <markelog> i would need to go in ten minutes or so
[09:20:30] <timmywil> yea, I'm inclined to go with the second, so it's easier on markelog
[09:20:32] <markelog> would like to add couple items to the agenda
[09:20:33] <m_gol> I'm fine with it but IMO then we have to rebase ready PRs ourselves
[09:20:35] <timmywil> big PRs before smaller ones
[09:20:39] <m_gol> and not ask contributors
[09:20:39] <markelog> ))))
[09:21:04] <timmywil> we don't have a lot of big PRs to rebase, fortunately
[09:21:07] <m_gol> yup
[09:21:30] <timmywil> there ain't no AMDify jQuery PRs ;)
[09:21:36] <markelog> m_gol true, but some new prs might come up while i would the my thing
[09:21:42] <markelog> and then they would have to rebase again
[09:21:50] <timmywil> yea, sooner the better imo
[09:21:52] <m_gol> that's always the danger
[09:21:58] <markelog> okay-okay
[09:22:03] <markelog> so
[09:22:06] <timmywil> so anyone about to submit will not have to deal with this
[09:22:09] <markelog> We have this "always" function in jqxhr, with pretty confusing signature - "jqXHR.always(function( data|jqXHR, textStatus, jqXHR|errorThrown ) { });"
[09:22:16] <m_gol> are all my PRs good to land? (after markelog lands his on 2 branches)
[09:22:30] <markelog> i believe it was done to ease up migration from `complete` method, back when we didn't use jquery-migrate, `complete` is now removed and we use jquery-migrate for such cases now.
[09:22:43] <markelog> So i propose to simplify that method
[09:22:55] <timmywil> m_gol: unless I missed any in the notes, I think they all look good to me
[09:22:59] <m_gol> k, thx
[09:23:29] <timmywil> markelog: simplify how?
[09:23:38] <markelog> simplify its signature
[09:23:47] <timmywil> I mean, what would the params be?
[09:23:55] <markelog> the ones we had for the complete
[09:24:32] <markelog> i saw a lot of questions about this method in stackoverflow and resources like that
[09:24:42] <gibson042> `always` is a Deferred method, equivalent to `done` + `fail`
[09:24:42] <b-ot> gibson042: memorised “always`”.
[09:24:45] <markelog> some of them wasn't pretty
[09:24:56] <markelog> gibson042: jqxhr.always
[09:25:03] <markelog> not the deferred one
[09:25:08] <m_gol> `forget always`
[09:25:09] <b-ot> m_gol: I have forgotten “always`”. My mind is going, I can feel it.
[09:25:17] <markelog> )
[09:25:27] <timmywil> It is definitely a confusing signature to document, but I'm not sure we can change it. always gets whatever arguments done or fail gets.
[09:25:28] <gibson042> there is no jqXHR-specific always
[09:25:59] <gibson042> the problem is that ajax success and failure give the same data in different order
[09:26:02] <markelog> there is specific arguments passed to that function
[09:26:06] <gibson042> and I don't see how we can address it
[09:28:09] <markelog> so bottom line is i think we could consider to just bring `complete`, rename it to `always` )
[09:28:34] <markelog> current logic is, oh, well, logical, but confusing
[09:29:52] <timmywil> no, but, I think the point is .always is not a jqXHR method that can be changed just for jqXHRs. It is a deferred method. It gets whatever arguments were passed when resolved or rejected, which just happen to differ in jqXHRs.
[09:29:52] <markelog> ?
[09:29:58] <gibson042> more like "confusing, but documented"
[09:30:22] <markelog> not only that, is hard to write code for this method
[09:30:25] <timmywil> so, in order to change the arguments for always, we'd have to change teh arguments for done/fail
[09:30:44] <gibson042> right
[09:30:44] <markelog> not necessary
[09:31:03] <timmywil> but it is, if we follow our own spec for deferred.always
[09:31:12] <gibson042> or mask the Deferred method, which might even be worse than present
[09:32:05] <timmywil> gibson042: yea, that would probably be more confusing
[09:32:31] <markelog> might be
[09:32:34] <timmywil> let's move on tho. https://github.com/jquery/sizzle/issues/345 m_gol added this to agenda. I'm fine with this change.
[09:32:35] <gibson042> it's pretty much the same backcompat nightmare as jQuery.each callback arguments differing from jQuery.map, jQuery.grep, and native Array methods
[09:32:47] <markelog> but now it is definitely confusing
[09:32:49] <gibson042> me too
[09:32:53] <markelog> and people complain about it
[09:33:08] <markelog> yeah, but "always" is not so common
[09:33:18] <timmywil> markelog: if you want to make a case for it, we can sidebar (in an issue or email thread)
[09:33:28] <markelog> okay, will email
[09:33:34] <markelog> another thing real quick
[09:33:42] <markelog> jQuery.map
[09:33:55] <markelog> flatten the results
[09:34:04] <markelog> whereas Array#map doesn't
[09:34:19] <timmywil> hmm, we flatten?
[09:34:20] <markelog> i'm thinking we could follow the spec in that case
[09:34:26] <timmywil> I wasn't aware
[09:34:41] <gibson042> I don't think the breaking change is worth it
[09:34:45] <markelog> yeah, is not known very widely
[09:34:57] <markelog> it is confusion though
[09:35:12] <markelog> "map" in every language is very precise
[09:35:15] <markelog> but we are deviate
[09:35:19] <timmywil> oh yea, there it is. concat.apply.
[09:35:25] <timmywil> have we always dont that?
[09:35:35] <timmywil> done
[09:35:39] <gibson042> I understand that it is not expected, but we have always done so (AFAIK) and have documented our behavior
[09:35:47] <markelog> we started to do that five years ago
[09:36:15] <markelog> we did that
[09:36:25] <markelog> because it help us internally
[09:36:36] <markelog> if we still have cases like that
[09:36:44] <markelog> then, i would say leave it as is
[09:36:56] <markelog> but if not, i think it would be better API
[09:37:07] <markelog> and that flatten thing is not widely known
[09:37:13] <m_gol> once we drop jQuery Compat (in jQuery 4.0.0 or 5.0.0) we might as well want to remove some methods like $.parseJSON or $.map if build-in equivalents are enough
[09:37:14] <markelog> and shouldn't be common
[09:37:20] <gibson042> I'm not saying it wouldn't be better, I'm saying breaking backcompat is best avoided
[09:37:27] <timmywil> "If an array is returned, the elements inside the array are inserted into the set." interesting
[09:37:39] <gibson042> the last example on http://api.jquery.com/jQuery.map/ even demonstrates it
[09:37:46] <m_gol> ah, for map it wouldn't be enough because objects
[09:37:47] <markelog> all true Richard
[09:38:14] <gibson042> actually, I guess I'm saying something stronger than that
[09:38:28] <timmywil> yea, while we are making some breaking changes in 3.0, this particular change is probably too disruptive
[09:38:55] <gibson042> breaking backcompat in such a subtle way (e.g., method still exists with the same signature, but acts differently)
[09:38:58] <markelog> you think people use it a lot?
[09:39:20] <markelog> yeah, more logically )
[09:39:20] <gibson042> I don't think people use it a lot
[09:39:33] <markelog> behave that is )
[09:39:43] <timmywil> I think we've not only documented it, but evangelized it by putting it in an example.
[09:39:48] <gibson042> but it will be hard to detect the problem
[09:40:14] <markelog> i didn't know about such behaviour
[09:40:30] <gibson042> I suppose it's possible in this case, though... Migrate could warn when the callback returns an array
[09:40:49] <markelog> so i'm not sure everybody know that
[09:40:53] <gibson042> still, I think it's better for 4.0 (if we keep map at all) than 3.0
[09:41:08] <markelog> but it certainly surprising
[09:41:19] <markelog> whereas a lot of people don't read the docs
[09:41:25] <markelog> and just expect normal behaviour
[09:41:46] <timmywil> still, I agree that it's too late for 3.0 inclusion
[09:41:52] <m_gol> I agree
[09:41:59] <m_gol> we should try to ship ;)
[09:42:02] <markelog> like so https://en.wikipedia.org/wiki/Map_(higher-order_function)#Language_comparison
[09:42:11] <m_gol> btw, don't we need 3.1 & 4.0 milestones currently?
[09:42:17] <markelog> btw
[09:42:22] <timmywil> m_gol: sure!
[09:42:25] <m_gol> so that we can defer some non-breaking stuff to 3.1 & some breaking for 4.0
[09:42:38] <m_gol> currently we just target everything for 3.0 if it's valid
[09:42:38] <markelog> i think we should consider putting each, map signature to the migrate
[09:42:45] <m_gol> but with this strategy we'll never ship
[09:42:47] <timmywil> m_gol: good idea
[09:42:54] <markelog> saying something like in 4.0/5.0 we might change it
[09:43:05] <m_gol> especially non-breaking changes can be delayed
[09:43:13] <markelog> yeah, those changes are pretty distructive
[09:43:22] <markelog> but it seems we would need to do them at some point, don't we?
[09:43:56] <markelog> oh and btw
[09:44:01] <markelog> shoot
[09:44:04] <markelog> i'm late
[09:44:06] <markelog> aaah
[09:44:23] <markelog> so would do you think?
[09:44:46] <gibson042> +1 to new milestones
[09:44:56] <timmywil> in this case, I'm not sure we can say for certain that we'll do it. Best to delay for 4.0 imo.
[09:44:59] <markelog> yeah, +1 for sure
[09:45:10] <timmywil> and yes, +1 to milestones
[09:45:12] <markelog> yeah, that is true
[09:45:16] <arschmitz_> thats what we do in mobile is multiple concurrent milestones
[09:45:18] <markelog> but if we do it
[09:45:25] <markelog> we would need to do it pretty early
[09:45:31] <markelog> warnings and such
[09:45:40] <m_gol> I've created the milestones
[09:45:46] <m_gol> 3.1.0 & 4.0.0
[09:45:48] <timmywil> markelog: understood
[09:45:50] <markelog> since it is pretty big one
[09:46:07] <markelog> okay, will create an issue
[09:46:08] <timmywil> Alright, let me just mention this one before we close. https://github.com/jquery/jquery/pull/2479
[09:46:13] <markelog> gotta go
[09:46:14] <markelog> see ya
[09:46:18] <m_gol> timmywil: it's not exactly true we have no failures in swarm; we have in Edge: http://swarm.jquery.org/job/1100. It's just that Edge is still in the periodic run because: 1. It's too old on BrowserStack. 2. https://github.com/jquery/jquery/issues/2390
[09:47:03] <m_gol> shouldn't we always set to null instead of deleting?
[09:47:04] <timmywil> By none in swarm, I mean this page (http://swarm.jquery.org/project/jquery) is all green.
[09:47:11] <m_gol> ok
[09:47:17] <m_gol> I'd like to move Edge there, though :)
[09:47:22] <m_gol> and this one issue is holding it
[09:47:33] <timmywil> agreed it should be addressed
[09:47:56] <m_gol> the other failure can be solved by adding a guard for older build (one support test turned to true in newer builds and that's the failure - BrowserStack's version is too old)
[09:48:02] <timmywil> m_gol: so yea, that's the question. should we just always set to undefind in both compat and master?
[09:48:20] <timmywil> plain objects, nodes, or other
[09:48:22] <m_gol> on objects deleting is a perf issue
[09:48:32] <m_gol> on nodes, not sure, they're probably already slow
[09:48:49] <timmywil> gibson042: what do you think?
[09:48:53] <m_gol> but consistency would say to not delete unless not deleting on nodes has any issues
[09:49:28] <gibson042> data has several differences for handling node vs. non-node; given that _and_ that data on non-nodes is rare, I'm actually fine with the more user-friendly behavior of delete instead of setting to undefined
[09:49:29] <timmywil> although, I don't understand how setting to undefined uses less memory than deleting. We leave stray properties unless we delete.
[09:50:34] <gibson042> timmywill: `delete` circumvents JS engine optimizations
[09:50:52] <m_gol> in V8 a hidden class changes
[09:51:01] <m_gol> in other engines most likely sth similar happens
[09:51:03] <timmywil> yea, maybe the process of copying objects in order to delete leaves stray classes lying around
[09:52:03] <timmywil> gibson042: so, would you also change compat to delete on nodes?
[09:52:27] <timmywil> the perf issue doesn't seem as big as it was
[09:52:27] <gibson042> no, only delete on non-nodes, but do so in both branches
[09:52:35] <timmywil> ah, ok
[09:52:50] <timmywil> then we need an update to the PR
[09:52:50] <m_gol> so deleting on nodes has a perf issue?
[09:53:19] <timmywil> sort of
[09:53:23] <gibson042> yes, that's what jbedard has been addressing
[09:53:43] <timmywil> yea, the PR is focused on nodes
[09:53:48] <gibson042> but it's getting better
[09:54:05] <gibson042> at some future point, I think we'll be back to always deleting
[09:54:29] <timmywil> ok, so for now, have jbedard delete on non-nodes
[09:54:30] <m_gol> k
[09:54:34] <gibson042> but for now, setting to undefined on nodes appears worthwhile
[09:54:36] <timmywil> I'm fine with that
[09:55:26] <m_gol> sounds good
[09:55:28] <timmywil> thanks everybody! cyl
