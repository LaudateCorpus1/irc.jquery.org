[08:58:31] <DaveMethvin> whar's that light switch?
[09:03:06] <DaveMethvin> sorry, just putting together the meeting notes
[09:03:17] <rwaldron> Hi!
[09:03:24] <jaubourg> OH HAY
[09:03:29] <timmywil> well hello
[09:03:46] <DaveMethvin> such a fun bunch!
[09:03:48] <gnarf> darn - dave did the meeting alert in the other channel, now my "hey" was in the wrong one
[09:04:02] <jaubourg> heh
[09:04:09] <DaveMethvin> the old channel switcherooo
[09:04:18] <DaveMethvin> gets em every time
[09:04:24] <jaubourg> why did I read this "Buckaroo Banzai"?
[09:04:25] <gnarf> "Hey guys, meeting, in the other room! HAH@!#"
[09:04:57] <DaveMethvin> whoops, looks like that push -f may have confused the swarmy
[09:05:22] <DaveMethvin> let's face it, most git clients hate revisionist histtory
[09:05:28] <gnarf> so hey - RE Beta 2 & UI Tests - I think there is still an effects failure in the UI suite that I need to hunt down
[09:05:50] * jaubourg gives gnarf a competetion level bow: go get it
[09:06:02] <jaubourg> a-la-rambo style
[09:07:17] <DaveMethvin> so timmywil is on, what, his third rewrite in a week here? :D
[09:07:31] <timmywil> haha, well no more!
[09:07:45] <DaveMethvin> remember, sizzle ain't done till ui won't run
[09:07:59] <gnarf> heh
[09:08:14] <DaveMethvin> mission accomplished!
[09:08:30] <timmywil> hey, I see full passes in UI
[09:08:49] * gnarf proposes adding "poet laureate" to DaveMethvin's bio on jquery.org/team
[09:08:51] <DaveMethvin> okay, we can't ship beta2 until THAT is fixed :)
[09:09:16] <jaubourg> I could break something if you wanted
[09:09:18] <timmywil> there's one more issue I want to fix, but gibson has that covered. I'll land his pull after I can talk to him about his changes
[09:09:22] <jaubourg> having commited in some time
[09:09:23] <DaveMethvin> kk
[09:09:25] <jaubourg> haven't
[09:09:37] <DaveMethvin> hey, breaking stuff is MY job
[09:09:41] <jaubourg> you wish
[09:09:44] <jaubourg> :P
[09:09:51] <DaveMethvin> leave it to the experts!
[09:10:04] <gnarf> DaveMethvin / scott_gonzalez - The effects issue is bound to be an IE9- issue with setting a "protected" value
[09:10:24] <gnarf> and I really hate the try / empty catch pattern that we've used in the past to prevent it
[09:10:34] <timmywil> FYI, I'll be out of the country away from a computer Wednesday to July 22
[09:10:35] <gnarf> but like - not sure there is anything else we can do about it
[09:10:50] <timmywil> I'll be checking email, but that's about it
[09:11:01] <scott_gonzalez> gnarf: I fixed the effects failures.
[09:11:21] <scott_gonzalez> We were running off a version of jquery-color that was still using jQuery.curCSS.
[09:11:22] <gnarf> scott_gonzalez: oh - thanks, I'll go look at the commit - did you fix em in UI or in core?
[09:11:33] <gnarf> scott_gonzalez: ahhh - so it was inside color that it was failing
[09:11:37] <scott_gonzalez> yup
[09:11:48] <DaveMethvin> YAY for the effects fix!
[09:11:49] <gnarf> NEVERMIND THEN - EFFECTS RULES!!!!
[09:11:59] <scott_gonzalez> The remaining UI failures are from Sizzle.
[09:12:18] <timmywil> WHAT
[09:12:23] <DaveMethvin> lol
[09:12:37] <timmywil> and here I thought I fixed it
[09:12:40] <scott_gonzalez> The ":not( .foo ):has( bar )" selector snafu
[09:12:44] <scott_gonzalez> Oh, did you land that?
[09:12:46] <timmywil> oh that one
[09:13:02] <timmywil> anything else?
[09:13:13] <scott_gonzalez> That should be it.
[09:13:19] <DaveMethvin> ui is a selector torture test fer sure
[09:13:27] <scott_gonzalez> :-)
[09:13:37] <timmywil> yea, that will be fixed soon. I actually wasn't aware there was a test for that in the UI suite
[09:13:51] <gnarf> so like random idea
[09:14:01] <timmywil> cause I got passes locally, but maybe I did something wrong
[09:14:03] <gnarf> but could we boil the UI fails down to units that will fail in core as well?
[09:14:41] <DaveMethvin> they're just selector checks, right?
[09:14:41] <scott_gonzalez> I assumed that would happen.
[09:14:49] <DaveMethvin> yeah me too
[09:14:57] <gnarf> It doesn't make a lot of sense if we are catching failures in UI that don't then have new units written in core
[09:15:09] <jaubourg> +1 gnarf
[09:15:12] <gnarf> just want to make sure we are all assuming the same thing then :)
[09:15:14] <DaveMethvin> that's what we always do though, right?
[09:15:24] <timmywil> so, the UI fail scott mentions brings up a behavior question. What should ":contains( asdf )" match?
[09:15:37] <DaveMethvin> like, the spaces there?
[09:15:40] <timmywil> yea
[09:15:51] <DaveMethvin> what did it do before?
[09:15:53] <DaveMethvin> do that
[09:15:55] <DaveMethvin> :D
[09:16:15] <jaubourg> backward compatibility ftw, DaveMethvin is in the house!
[09:16:15] <timmywil> well, ok then
[09:16:21] * jaubourg raps
[09:17:03] <DaveMethvin> i hate ill defined stuff, seems like if spaces are important they should be quoted but if we did it differently who knows
[09:17:10] <timmywil> it matched the spaces :P
[09:17:20] <DaveMethvin> yeah i figured
[09:17:49] <scott_gonzalez> heh, so this is a funny situation.
[09:18:02] <scott_gonzalez> Because the selector we're using violates our unwritten coding standards.
[09:18:07] <scott_gonzalez> Which is "hand minimize selectors"
[09:18:42] <timmywil> well, gibson's pull will handle this
[09:19:01] <timmywil> he added a trim to the select function
[09:19:26] <DaveMethvin> i have notified the TSA that timmywil cannot leave the country if there are UI fails, just in case
[09:19:34] <timmywil> heh
[09:19:36] <jaubourg> good
[09:19:42] <jaubourg> that'll teach him
[09:19:48] <DaveMethvin> ok, so it looks fixable anyway
[09:20:22] <timmywil> yea, it'll get fixed before I leave
[09:20:29] <DaveMethvin> looks like we're running out of reasons not to have a beta :)
[09:21:26] <DaveMethvin> i asked jaubourg to come up with a solution for sync resolution of promises, we talked about it earlier today
[09:21:45] <DaveMethvin> it should let us keep {async: false}
[09:21:48] <DaveMethvin> which would be good
[09:21:58] <DaveMethvin> although the user would need to rewrite their code a bit
[09:22:01] <DaveMethvin> for the sync case
[09:22:26] <DaveMethvin> also, wanted to refactor some of the stuff like serialize into a different module
[09:22:33] <DaveMethvin> so it could be used without including ajax.js
[09:22:46] <DaveMethvin> that way you could include jsonp.js for example
[09:23:18] <gnarf> so hey - I missed last week's meeting, but I hear we discussed jQuery.unique
[09:23:21] <jaubourg> For promises: the idea is to have a synchronous method to test if the promise was resolved/rejected or notified... what I have so far is this: promise.resolved(function( arg1, arg2, ... ) { this === "context" ; // called immediately if resolved, function discarded otherwize } );
[09:24:00] <jaubourg> will return true if resolved, false otherwise
[09:24:30] <scott_gonzalez> That seems kind of crazy.
[09:24:41] <jaubourg> name and API not final at all, but the idea is to give access to a synchronous way to retrieve the context and args
[09:24:48] <jaubourg> that way promises can be asynchronous
[09:25:13] <jaubourg> scott_gonzalez: why?
[09:25:22] <DaveMethvin> scott_gonzalez: which part?
[09:25:31] <scott_gonzalez> The "run this if complete but do nothing otherwise" part.
[09:25:46] <scott_gonzalez> I don't understand how this allows us to make the switch anyway.
[09:25:48] <jaubourg> why not? It's a synchronous/temporal test
[09:26:02] <scott_gonzalez> jaubourg: An API for that test already exists.
[09:26:04] <DaveMethvin> it would queue if not resolved though, right?
[09:26:13] <jaubourg> no, that's the point
[09:26:21] <jaubourg> and it shouldn't
[09:26:26] <gnarf> can we please define "asynchronus" in this case - because I know we had a few discussions about this, and I'm a little concerned that whatever change is coming down the pipe might inadvertantly break something in effects rewrite.
[09:26:38] <jaubourg> this is NOT a synchronous done/fail/progress
[09:26:43] <jaubourg> if a test
[09:26:45] <jaubourg> it's
[09:27:00] <DaveMethvin> if you do promise.done(fn) on a resolved promise, it currently calls immediately/sync
[09:27:05] <gnarf> scott_gonzalez: not that gives you the values back?  It seems jaubourg just needs a way to get the value from a resolved promise only if it is already set.
[09:27:31] <DaveMethvin> let's move the implementation discussion to a jquery-devs-list thread
[09:27:37] <jaubourg> ok
[09:27:45] <jaubourg> I'll have to go shortly
[09:27:56] <DaveMethvin> if we can't get this done with some api change, it's likely we'll just close the whole sync resolution thing wontfix
[09:28:07] <DaveMethvin> because it seems like that is our choice
[09:28:11] <jaubourg> but the idea is to make it possible to get resolve context and values synchronously so that the imp can be async
[09:28:13] <scott_gonzalez> Oh, I see. Yeah, my comment on the .ready() ticket is a lie.
[09:28:47] <scott_gonzalez> jaubourg: That was not what I was requesting, but is surely what I wanted. o_O
[09:29:02] <scott_gonzalez> And gnarf is correct that this will break effects.
[09:29:07] <DaveMethvin> we should definitely have a good discussion on the devs list so we can make sure we've already thought it out :)
[09:29:10] <jaubourg> scott_gonzalez: it makes what you want possible without screwing people making sync ajax requests ;)
[09:29:41] <DaveMethvin> i think there is a way to do this but we need some runway to make the api change without breaking everyone at once
[09:29:53] <jaubourg> DaveMethvin: feel free to start the thread, I'll be out for several hours
[09:30:05] <DaveMethvin> k will do
[09:30:29] <jaubourg> anyway, sorry to depart like a thieve but time flies in belge-land
[09:30:37] <DaveMethvin> np jaubourg!
[09:30:39] <gnarf> I almost >need< promise.done( fn ) to immediately call fn if it's already resolved...
[09:30:55] <gnarf> but if there is a second API I can access to get that info, i might be able to code around it
[09:30:57] <jaubourg>  /kiss everyone
[09:31:01] <DaveMethvin> gnarf but i think we will have an api you can call right
[09:31:11] <jaubourg> yeah, that's the idea gnarf
[09:31:16] * jaubourg vanishes
[09:31:24] <gnarf> DaveMethvin: right now I'm actually abusing the fact that .done( fn ) does that though :)
[09:31:40] <DaveMethvin> yeah i know, as are a lot of people i fear
[09:32:09] <DaveMethvin> which means we either have to give up on async resolution of promise callbacks, or break code and give people an alternate method
[09:32:42] <gnarf> so, since thats moving to a thread
[09:32:47] <gnarf> jQuery.unique ? :)
[09:33:01] <DaveMethvin> i think we decided not to take action on anything there
[09:33:29] <timmywil> it needs to stay, but it can be shorter in 2.0
[09:33:33] <DaveMethvin> with the idea that plugins might need it
[09:33:36] <gnarf> we are using it somewhere still, but I still think we should deprecate it / make it hidden for only us to use in future... People commonly mistake its purpose and try to use it (because it's documented) for things that it isn't supposed to be used for.
[09:33:49] <gnarf> ehh- plugins need it?
[09:33:51] * gnarf sighs
[09:33:53] <DaveMethvin> EVERYTHING can be shorter in 2.0
[09:34:00] <DaveMethvin> yeah if they combine sets for example
[09:34:04] * gnarf nods
[09:34:12] * DaveMethvin shakes fist at plugins
[09:34:37] <DaveMethvin> okay, so how about we do the next beta tomorrow?
[09:34:56] <DaveMethvin> that gives timmywil a chance for another sizzle rewrite before he leaves the country :D
[09:35:07] <timmywil> maybe 2
[09:35:36] <DaveMethvin> ok, hearing no objections ... i'll do that tomorrow
[09:35:55] <timmywil> gibson rewrote the child pseudo logic, so that pretty much takes care of everything being rewritten
[09:36:32] <DaveMethvin> that's pretty much everything i had, anybody have other issues?
[09:37:13] <DaveMethvin> oh goody!
[09:37:25] <timmywil> if we want to remove the broken swarm job, I'd be alright with that
[09:37:54] <DaveMethvin> i think i may have the power to do that, but not the know-how
[09:38:00] <gnarf> ?
[09:38:10] <timmywil> ok, see -dev
[09:38:14] <gnarf> in the history timmywil? or like is something submitting broken jobs?
[09:38:45] <DaveMethvin> alright, i'll close the meeting channel and we can move to -dev
