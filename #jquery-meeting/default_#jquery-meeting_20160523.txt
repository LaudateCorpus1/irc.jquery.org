[12:00:09] <timmywil> m_gol, markelog, DaveMethvin|away https://docs.google.com/document/d/1uhcW9_TlSwD8JnO1_HNnSYJAriTK9WYZ8uQNDvtAAhA/edit
[12:00:12] <timmywil> DaveMethvin|away
[12:00:13] <timmywil> DaveMethvin|away
[12:00:17] <markelog> hey-hey
[12:00:23] <timmywil> Dave changed his last name
[12:00:34] <timmywil> I don't like it
[12:00:49] <m_gol> present
[12:00:51] <markelog> :))
[12:01:31] <timmywil> Thank you all! We successfully released 3 versions of jQuery on the same day.
[12:01:53] <markelog> good!
[12:01:56] <timmywil> Unfortunately, we have to double that each time.
[12:02:20] <markelog> it seems there is no new issues after release yet
[12:02:26] <timmywil> awesome
[12:02:36] <markelog> yey!
[12:03:31] <markelog> although we did release on friday
[12:03:40] <timmywil> In case you're wondering, only major bugs/regressions will warrant another 1.x/2.x release
[12:03:52] <markelog> and on weekends there is not a lot of people who actually check it out
[12:04:12] <markelog> see traffic stats - https://github.com/jquery/jquery/graphs/traffic
[12:04:40] <timmywil> nice-to-haves won't make it unless there's something else that mandates another release
[12:05:07] <timmywil> Did anyone happen to check Ember?
[12:05:15] <timmywil> + jQuery 3.0
[12:05:25] <markelog> will probably check out semantic btw
[12:05:37] <markelog> this thing - http://semantic-ui.com/
[12:06:12] <timmywil> it looks like they've been checking https://github.com/emberjs/ember.js/issues/12821
[12:06:49] <timmywil> markelog: cool
[12:07:34] <timmywil> gibson042: is there still something to be done for https://github.com/jquery/jquery-migrate/issues/102?
[12:07:46] <gibson042> there is
[12:08:00] <timmywil> ok, we'll leave that open then.
[12:08:08] <timmywil> I'm thinking 2 weeks of RC then final release
[12:09:17] <gibson042> also, I was recently reminded of https://github.com/jquery/jquery/issues/1756 ... do we a change to CSS syntax error message formats as "breaking"?
[12:09:43] <timmywil> I don't think so
[12:09:55] <gibson042> I've been neglecting Sizzle, but there may be a case for bundling its update too
[12:09:57] <m_gol> I'd just not do it in a patch
[12:10:37] <m_gol> gibson042: can we drop Yandex.Browser support from Sizzle? We removed it from Core but it's still there
[12:10:50] <gibson042> yeah, +1 to dropping it
[12:10:58] <timmywil> yes
[12:10:59] <m_gol> and it seems to be a problem for BrowserStack as they clearly don't have the manpower to maintain it
[12:11:01] <m_gol> ok
[12:11:03] <m_gol> one other thing
[12:11:09] <m_gol> there's this one browser called IE6
[12:11:14] <timmywil> lies
[12:11:24] <m_gol> legends say so!
[12:11:37] <timmywil> we need new legends
[12:11:43] <m_gol> BrowserStack used to provide us with 2 extra constantly running IE6 machines so that our tests don't break
[12:11:55] <timmywil> yea, I think it's time to let those go
[12:11:56] <m_gol> they removed them as we told them we're fine with regularly spawned ones
[12:12:04] <m_gol> until it turned out those regular ones crash all the time
[12:12:04] <timmywil> oh, right, they already did
[12:12:11] <m_gol> so they restored one of those two
[12:12:24] <m_gol> it's there all the time: http://swarm.jquery.org/clients
[12:12:24] <markelog> m_gol: will do
[12:12:27] <timmywil> okay...
[12:12:43] <m_gol> we should figure out how soon we can stop needing this browser completely
[12:12:49] <m_gol> as a nice gesture to BrowserStack
[12:13:04] <m_gol> I mean completely in Automate, Live should be fine
[12:13:20] <timmywil> I'd say one week.
[12:13:26] <markelog> will ask them to remove yandex.browser
[12:13:36] <m_gol> although as far as I remember the Live one was crashing on our attributes tests as well
[12:13:38] <markelog> right after removal from sizzle
[12:13:45] <markelog> probably do it this week
[12:13:53] <timmywil> Give 1.12.4/2.2.4 some time to propagate. If nothing major comes in that we need to fix quickly, we can move on.
[12:13:58] <m_gol> timmywil: what do we do after one week if we need to release another 1.x? do we test it against IE6 manually somehow?
[12:14:16] <markelog> do we consider dropping testing in some browser breaking btw?
[12:14:19] <timmywil> I would test it manually before release.
[12:14:23] <markelog> i think no, right?
[12:14:30] <gibson042> I also think no
[12:14:39] <markelog> ok-ok, less fuzz that way
[12:14:41] <m_gol> that's debatable but it's not an API technically
[12:14:47] <timmywil> it's just automated testing. I'd still want to test manually.
[12:14:52] <m_gol> I'd still not do it in a patch release :)
[12:14:52] <m_gol> sure
[12:14:54] <m_gol> makes sense
[12:15:06] <m_gol> Sizzle supports that as well
[12:15:17] <timmywil> I remember a time when I would test all the browsers manually for John before a release.
[12:15:17] <markelog> ie6 you mean?
[12:15:28] <m_gol> can we remove it from there as well? at least on master which should target jQuery 3
[12:15:40] <markelog> timmywil: wasn't it initial idea of swarm?
[12:15:41] <m_gol> yes, I'm talking specifically about IE6
[12:15:51] <m_gol> IE7 is not nearly that problematic for BrowserStack, it seems
[12:15:53] <markelog> maybe other browsers as well?
[12:15:54] <timmywil> markelog: it was before swarm worked with browserstack
[12:16:06] <markelog> those were the times :)
[12:16:12] <markelog> when we were young
[12:16:14] <markelog> hah
[12:16:17] <m_gol> timmywil: that must have been a tedious job :-)
[12:16:26] <markelog> i did that too actually
[12:16:31] <markelog> not before the release
[12:16:35] <timmywil> yea, fortunately, I had the setup for multiple vms
[12:16:37] <markelog> but after any bug i submitted to jq
[12:16:55] <m_gol> gibson042: what do you think about IE6 & Sizzle wrt what I said?
[12:17:00] <markelog> gibson042: what browsers should we remove?
[12:17:04] <markelog> yandex, ie6
[12:17:08] <markelog> maybe something else?
[12:17:23] <gibson042> those two are fine
[12:17:26] <markelog> do we have ie6 specific code paths
[12:17:28] <markelog> ?
[12:17:35] <markelog> or we just not testing it in ie6
[12:17:40] <markelog> but leave the hacks?
[12:17:42] <gibson042> just not testing it
[12:17:51] <gibson042> I think there are IE6-specific paths
[12:18:12] <markelog> you want the ability to use latest sizzle in 2.x/1.x?
[12:18:18] <m_gol> this should probably be reflected in the wiki page of Sizzle
[12:18:19] <gibson042> and honestly, would continue automatically testing it if not for BrowsterStack choking on them
[12:18:37] <m_gol> that workarounds for IE6 are not removed from the code but it's no longer actively tested
[12:18:37] <markelog> do not why you would want :)
[12:18:49] <m_gol> UI did sth like that
[12:18:52] <m_gol> only with IE<11 ;)
[12:19:08] <timmywil> I assumed we would eventually drop IE6-8 on the master branch.
[12:19:22] <gibson042> Sizzle is in a weird niche
[12:19:29] <markelog> i'm not sure if there is consumers of sizzle which use ie6-8
[12:19:32] <markelog> maybe ie8
[12:19:40] <markelog> but still sounds weird
[12:19:47] <gibson042> I don't think the project itself has much of a future, unless it is for implementing CSS support
[12:20:06] <markelog> sizzle you mean
[12:20:07] <markelog> ?
[12:20:12] <gibson042> yes
[12:20:20] <m_gol> from the jQuery perspective I see a couple of choices
[12:20:32] <timmywil> the problem is we need it for selector extensions and certain bug fixes
[12:20:36] <markelog> you still would need to use get* methods not the qSA
[12:20:37] <gibson042> I fully intend to expand jQuery selector-native to a point where we drop the Sizzle dependency
[12:20:42] <markelog> since those are faster
[12:20:52] <m_gol> 1) keep Sizzle support all those weird environments but make jQuery stop using it
[12:20:55] <markelog> and having the ability to define your own selectors is also nice
[12:21:11] <gibson042> anyway, this is drifting a bit
[12:21:14] <m_gol> 2) reduce Sizzle brower support (or at least offer a slim version) for use in jQuery 3, with smaller footprint
[12:21:22] <markelog> gibson042: interesting discussion neverthelss
[12:21:39] <timmywil> we could try splitting up the selector in a way that runs the valid parts of the selector through matchesSelector (rather than implementing everything)
[12:21:39] <gibson042> unfortunately, I can't devote enough attention to it at the moment
[12:21:55] <markelog> m_gol: i think Richard want to leave it as is and just drop sizzle from jq
[12:22:08] <gibson042> but I really want to drop the dependency, which essentially leaves Sizzle supporting nothing
[12:22:17] <gibson042> at which point, *poof*
[12:22:22] <markelog> sounds interesting
[12:22:24] <timmywil> gibson042: I don't see how that's possible yet
[12:22:34] <gibson042> I'll show you in a month or two
[12:22:43] <markelog> there is also will be new selectors that not all browsers support yet
[12:22:45] <timmywil> is what I said basically the path?
[12:22:54] <gibson042> pretty much
[12:22:56] <markelog> not sure if that is what users would want though
[12:22:58] <gibson042> I've already got a POC
[12:23:09] <gibson042> and it can cover custom selectors
[12:23:16] <gibson042> not that I like them, but whatever
[12:23:18] <timmywil> cool
[12:23:19] <m_gol> nice
[12:23:33] <markelog> gibson042: but these code will be integrated in jq?
[12:23:42] <gibson042> yes
[12:23:50] <gibson042> it didn't make it for 3.0, but hopefully 3.1
[12:23:57] <gibson042> the point is, qSA is powerful enough to do what we need
[12:24:04] <markelog> but slow
[12:24:14] <timmywil> not that slow
[12:24:14] <markelog> i think get* methods should still be used
[12:24:21] <gibson042> faster than the redundant Sizzle implementation
[12:24:24] <markelog> comparing to get methods they are
[12:24:35] <timmywil> not really anymore
[12:24:37] <markelog> it was like that before
[12:24:39] <markelog> hah
[12:24:49] <markelog> probably requires some benchs
[12:24:53] <gibson042> yes
[12:25:12] <m_gol> getElementById will always be faster as it only finds one element and querySelectorAll('#id') may find more
[12:25:17] <gibson042> which is one reason it's not there yet
[12:25:21] <markelog> but if they are qSA indeed improved
[12:25:21] <timmywil> we have multiple
[12:25:38] <markelog> m_gol: there is document.querySelector(...) you know :)
[12:25:51] <markelog> but yeah, byId should still be much faster
[12:25:57] <m_gol> querySelector is not querySelectorAll; either way it's still branching
[12:26:14] <markelog> > querySelector is not querySelectorAll
[12:26:17] <markelog> well obviously :)
[12:26:18] <gibson042> don't get hung up on those optimizations, they're not the key point
[12:26:24] <m_gol> right
[12:26:35] <markelog> i'm in love with them :)
[12:26:42] <timmywil> I agree getById is faster. I'm saying we're quickly approaching the point where qsa is fast enough.
[12:27:03] <m_gol> Let's just wait for gibson042 to provide a proof of concept then. :) We're not in a hurry with that.
[12:27:11] <timmywil> true
[12:27:14] <m_gol> gibson042: Going back... Does a note to Sizzle browser support that I mentioned above seem fine to you?
[12:27:27] <m_gol> that we no longer test on IE6 but keep workarounds?
[12:27:38] <gibson042> yes
[12:28:05] <m_gol> ok, I'll remove it from the tested set & put up a note then https://github.com/jquery/sizzle/wiki#-browser-support
[12:28:18] <markelog> m_gol: i already said i'm gonna do it
[12:28:25] <markelog> see above
[12:28:39] <m_gol> ok, I thought you only said that about Yandex ;)
[12:28:39] <timmywil> No meeting next week. It's an American holiday and I'll be sitting on a beach. Also, I think it's a good time to skip one.
[12:29:12] <m_gol> sounds good
[12:29:16] <markelog> ok-ok
[12:29:26] <timmywil> thank all
[12:29:33] <timmywil> thanks*
