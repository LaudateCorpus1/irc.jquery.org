[08:59:18] <scott_gonzalez> arschmitz: fnagel gnarf jzaefferer kborchers mikesherov petersendidit rxaviers tj_vantoll1
[08:59:25] <fnagel> hey
[08:59:25] <petersendidit> hey
[08:59:27] <arschmitz> Hi
[08:59:27] <rxaviers> hello
[08:59:55] <jzaefferer> Ol√°
[09:00:17] <scott_gonzalez> Let's start with a button update.
[09:00:30] <jzaefferer> I may owe another review there
[09:00:36] <jzaefferer> Its on top of my list
[09:00:41] <arschmitz> I did a ton of updates this weekend
[09:00:53] <tj_vantoll1> hey
[09:01:07] <arschmitz> rebased the branch cleaned up commit history addressed all issues in pr added controlgroup and the test suite and a demo for it
[09:01:18] <arschmitz> also added wiki for textinput
[09:01:32] <arschmitz> and did a prototype of it based on the wiki
[09:01:48] <scott_gonzalez> Let's wait on textinput.
[09:01:49] <kborchers> here
[09:02:08] <scott_gonzalez> We'll talk about the roadmap later in this meeting.
[09:02:32] <arschmitz> jzaefferer: would you prefer i push to same branch or a new one since i cleaned up the commit history
[09:03:07] <jzaefferer> I don't care about the commits
[09:03:24] <jzaefferer> Fine by me to just force push to the existing branch
[09:03:28] <mikesherov_> hi
[09:03:30] <scott_gonzalez> I'm not sure how GitHub handles PRs like this.
[09:03:32] <arschmitz> i just mean it will kill the history on the pr if i force push so i wanted to check
[09:03:46] <scott_gonzalez> You might want to close the PR, delete the branch on GitHub, then push it again with the same name.
[09:03:59] <arschmitz> ok
[09:04:11] <tj_vantoll1> It should be fine to wipe the history. It'll probably make it easier to look at again actually.
[09:04:52] <petersendidit> https://github.com/jquery/jquery-ui/pull/790 is an example of multiple forced pushes
[09:05:15] <scott_gonzalez> Yeah, I know foce pushing makes open PRs hard to follow.
[09:05:25] <scott_gonzalez> I'm just not sure what happens if you close the PR, then force push.
[09:05:34] <scott_gonzalez> and never re-open the PR
[09:05:53] <arschmitz> i think as long as you dont reopen its frozen if i recal
[09:06:02] <scott_gonzalez> That's what I'm hoping.
[09:06:17] <arschmitz> i reopened one by accident once and it updated everything
[09:06:22] <arschmitz> but was normal prior so im fairly sure
[09:06:43] <scott_gonzalez> tj_vantoll1 has reviewed the calendar rebase.
[09:06:46] <scott_gonzalez> https://github.com/jquery/jquery-ui/pull/1316
[09:06:46] <jzaefferer> Okay, let's do a new branch with new PR then
[09:06:55] <jzaefferer> I'll review that
[09:06:57] <scott_gonzalez> And fnagel has been making updates based on the feedback.
[09:07:01] <arschmitz> jzaefferer: ok
[09:07:05] <jzaefferer> I also want to do some datepicker testing
[09:07:06] <fnagel> right
[09:07:14] <fnagel> same question: force or new branch?
[09:07:30] <scott_gonzalez> For this one, you can just force push.
[09:07:31] <jzaefferer> Been working with Rafael on Globalize this morning. Haven't gotten to datepicker, yet, but that's a priority
[09:07:59] <scott_gonzalez> One thing that came up is that spinner is using old Globalize in master.
[09:08:07] <scott_gonzalez> But the datepicker rewrite is using new Globalize.
[09:08:11] <scott_gonzalez> And they're not compatible.
[09:08:17] <fnagel> jzaefferer: I would need help to fix the keyboard handling tests. Won't work in travis currently.
[09:08:19] <scott_gonzalez> So we'll need to get that sorted out.
[09:08:44] <tj_vantoll1> It seems like something we should address in master at some point.
[09:08:52] <tj_vantoll1> Spinner to Globalize 1.0 that is.
[09:09:09] <tj_vantoll1> Rather than tie it to the datepicker rewrite.
[09:09:19] <jzaefferer> Update globalize in master, update spinner to use that, then rebase datepicker again?
[09:09:29] <tj_vantoll1> Yes IMO
[09:09:45] <jzaefferer> I can look into that with Rafael today
[09:09:52] <tj_vantoll1> Cool
[09:09:57] <arschmitz> globalize does not support number parsing for spinner yet does it?
[09:10:23] <tj_vantoll1> Dunno
[09:10:31] <arschmitz> https://github.com/jquery/globalize/issues/296
[09:10:43] <tj_vantoll1> Ah
[09:10:53] <tj_vantoll1> So we can't upgrade spinner to use Globalize anyways then.
[09:10:56] <arschmitz> https://github.com/jquery/globalize/issues/238
[09:11:17] <arschmitz> there i think are several blocking issues for spinner but rxaviers would know a lot better :-)
[09:11:20] <jzaefferer> That's different
[09:11:43] <jzaefferer> Parsing numbers already works
[09:12:01] <jzaefferer> Formatting currencies is a bigger concern I guess, since we even demo that
[09:12:29] <arschmitz> yeah im not sure i just thought last i knew there were missing things for spinner
[09:12:31] <scott_gonzalez> There's also an existing bug about percentages.
[09:12:45] <tj_vantoll1> For datepicker's sake I say we just ignore test failures until this gets resolved in master.
[09:12:48] <scott_gonzalez> http://bugs.jqueryui.com/ticket/8934
[09:12:48] <jzaefferer> Well, that would be a good way to set priorities for Globalize
[09:12:52] <jzaefferer> Make it work for Spinner
[09:12:59] <tj_vantoll1> Agreed
[09:13:45] <fnagel> scott_gonzalez: regarding calendar PR: do you want to take a look at the PR before I force push my latest changes?
[09:13:47] <jzaefferer> New globalize should be much better at dealing with percentages
[09:13:58] <jzaefferer> Are we okay with Globalize 1.0 blocking 1.12?
[09:14:01] <scott_gonzalez> fnagel: No, you can force push first.
[09:14:11] <fnagel> ok
[09:14:13] <jzaefferer> I guess we're not merging that until Spinner is fully migrated
[09:14:21] <scott_gonzalez> jzaefferer: No. But I don't plan on having Globalize involved in 1.12 at all.
[09:14:46] <scott_gonzalez> Globalize 1.0 should block 1.13.
[09:14:47] <jzaefferer> Okay, so we'll update globalize in a separate branch and rebase datepicker on top of that then?
[09:14:55] <scott_gonzalez> We'll get to that in a few minutes.
[09:15:04] <tj_vantoll1> The other thing that came up was whether to bother testing datepicker's options that are passthroughs for calendar.
[09:15:38] <scott_gonzalez> I think starting with just verifying the pass through is fine.
[09:15:47] <scott_gonzalez> If bugs pop up, we can add tests as needed.
[09:16:02] <tj_vantoll1> I suggested a single test that verifies all the pass-throughs on the instance.
[09:16:08] <tj_vantoll1> Ok
[09:17:07] <scott_gonzalez> Honestly, I'd probably just test the passthrough mechanism and then verify that each option is in the list (maybe expose the array).
[09:17:26] <tj_vantoll1> Yeah that's basically what I was thinking too.
[09:17:27] <scott_gonzalez> But anything simple should be fine.
[09:18:52] <scott_gonzalez> We still need to finalize the attribute copying for selectmenu.
[09:18:53] <scott_gonzalez> https://github.com/jquery/jquery-ui/pull/1298
[09:19:03] <scott_gonzalez> Copying accesskeys doesn't really work.
[09:19:40] <fnagel> So we reomve all "pass through options" and built one test that verifys correct pasing.  Should I intergate this into the current rebase PR or is that someting we can do as new commits later on?
[09:20:14] <scott_gonzalez> Either is fine.
[09:20:22] <tj_vantoll1> Yeah either.
[09:20:26] <tj_vantoll1> No rush certainly.
[09:20:54] <fnagel> Ok, perhaps we should land the current PR before
[09:21:35] <scott_gonzalez> There's a good chance you'll get to the test change before I get to reviewing the PR.
[09:22:28] <fnagel> Ok
[09:22:50] <fnagel> So, back to attribute copying?
[09:23:07] <scott_gonzalez> Yeah, I'm not really sure what we should do about this.
[09:23:44] <scott_gonzalez> Firefox is the only browser that handles this "properly"
[09:24:14] <scott_gonzalez> By that I mean that the custom element has the same behavior as the native element.
[09:24:20] <fnagel> Me too, but even if the functionality is not perfect it improves the native behaviour.
[09:25:04] <scott_gonzalez> I'm not sure about that.
[09:25:17] <fnagel> At least in Firefox on Win
[09:25:20] <scott_gonzalez> Is it better to not have an accesskey key at all or to have an accesskey that doesn't actually focus the element?
[09:25:40] <scott_gonzalez> It seems like a broken accesskey is worse than no accesskey.
[09:25:47] <tj_vantoll1> So there are browsers that support accesskey on options but it fails on the custom widget?
[09:26:13] <scott_gonzalez> yes
[09:26:16] <tj_vantoll1> uh
[09:26:21] <tj_vantoll1> Ok I see the problem now.
[09:26:30] <scott_gonzalez> But what I find more concerning is that the accesskey for the select doesn't move focus.
[09:26:58] <scott_gonzalez> So you can't actually use the accesskey and then use your keyboard to control the select.
[09:27:19] <tj_vantoll1> So maybe we should just close the accesskey ticket as plugin.
[09:27:46] <tj_vantoll1> And document an extension in that does this in the ticket.
[09:29:10] <scott_gonzalez> Ok, so just copy the title and leave accesskey alone.
[09:29:18] <tj_vantoll1> Yeah
[09:29:29] <scott_gonzalez> Well, I guess we need to figure out if we should be removing the accesskey from the original.
[09:29:49] <tj_vantoll1> Does it matter?
[09:30:06] <fnagel> Accesskey on hidden element? No idea
[09:30:27] <tj_vantoll1> I'd say not to worry about that unless someone submits a bug.
[09:30:45] <tj_vantoll1> If someone finds a problem we can remove it.
[09:30:57] <scott_gonzalez> That's what started this whole thing: http://bugs.jqueryui.com/ticket/10435
[09:30:57] <jzaefferer> That's what we do, removing problems
[09:31:31] <tj_vantoll1> Well but that person wanted the functionality to transfer.
[09:31:43] <scott_gonzalez> Though it didn't say whether it was broken or just did nothing.
[09:31:48] <scott_gonzalez> We should test that.
[09:31:49] <tj_vantoll1> Right
[09:32:23] <scott_gonzalez> fnagel: Is that something you can do?
[09:32:37] <fnagel> I guess he was testing on Win with FF or IE
[09:32:41] <scott_gonzalez> Just check if accesskey does anything if we leave it on the original elements.
[09:33:02] <fnagel> Sure
[09:33:22] <fnagel> Will add this to the PR
[09:33:42] <fnagel> And update the PR by remving accesskey copying
[09:34:37] <fnagel> Could somebody answer the ticket
[09:34:49] <scott_gonzalez> I'll update the ticket.
[09:36:58] <scott_gonzalez> jzaefferer: Was there any suggestion for http://bugs.jqueryui.com/ticket/10458?
[09:37:10] <jzaefferer> https://github.com/jquery/jquery-ui/pull/1325
[09:37:15] <jzaefferer> Just created the PR
[09:37:27] <scott_gonzalez> Oh, hmm...
[09:37:33] <scott_gonzalez> Have you looked at autocomplete?
[09:37:39] <jzaefferer> No
[09:39:07] <scott_gonzalez> http://bugs.jqueryui.com/ticket/7024
[09:39:08] <jzaefferer> But since autocomplete keeps focus on the input, the typeahead should never be active
[09:39:16] <jzaefferer> So it shouldn't affect autocomplete
[09:39:21] <scott_gonzalez> https://github.com/jquery/jquery-ui/commit/098dd1404b7b6025a5735495a91ca2b964c5cb3e
[09:39:29] <scott_gonzalez> Right, but we have the exact same problem.
[09:39:33] <scott_gonzalez> With a different workaround.
[09:39:55] <jzaefferer> Well: https://github.com/jquery/jquery-ui/commit/098dd1404b7b6025a5735495a91ca2b964c5cb3e
[09:39:59] <jzaefferer> this is a lot more complicated
[09:39:59] <fnagel> jzaefferer: your gist snippet and PR looks good to me. That is what I had in mind as its a similar solution as I once did for my old selectmenu fork.
[09:40:28] <jzaefferer> Also says the problem is only in Firefox
[09:40:32] <jzaefferer> Which isn't the case here
[09:40:44] <scott_gonzalez> Ok, so let's land that fix in menu.
[09:41:06] <jzaefferer> Alright
[09:41:31] <jzaefferer> Should I wait for an actual review of the PR, or is that good to land?
[09:41:46] <jzaefferer> for example, the comment could be describe the problem, if someone has an idea for that
[09:41:50] <mikesherov_> has a spelling error
[09:42:07] <jzaefferer> oh
[09:42:18] <mikesherov_> and no ticket reference in the comment
[09:42:32] <mikesherov_> and no test, but I imagine that's very hard to actually unit test
[09:42:32] <jzaefferer> actice -> active
[09:42:37] <jzaefferer> yeah
[09:42:44] <jzaefferer> Do we still do ticket references in code?
[09:42:49] <jzaefferer> I thought that's dead
[09:42:59] <scott_gonzalez> We do it all the time
[09:43:23] <scott_gonzalez> We don't write tests named after tickets. Perhaps that's what you're thinking of.
[09:43:34] <jzaefferer> There's even one in menu
[09:43:42] <jzaefferer> Yeah, that sounds right
[09:44:25] <mikesherov_> I still put ticket refs in tests, just not the name of the test
[09:44:44] <scott_gonzalez> right
[09:45:38] <scott_gonzalez> We had the Pointer Events discussion yesterday.
[09:45:44] <mikesherov_> hooray
[09:45:55] <scott_gonzalez> I had planned on doing a recap of it today, but we'll wait until all the notes are combined.
[09:45:59] <scott_gonzalez> kborchers is working on that.
[09:46:11] <jzaefferer> mikesherov_: how about now? https://github.com/jquery/jquery-ui/pull/1325/files
[09:46:26] <tj_vantoll1> Everybody should go start this Chrome issue https://code.google.com/p/chromium/issues/detail?id=162757 :)
[09:46:28] <kborchers> yeah the notes should be done later
[09:46:32] <tj_vantoll1> "star" that is
[09:46:33] <scott_gonzalez> The short version is we didn't convince Blink to implement, but we still want to push for Pointer Events.
[09:46:42] <kborchers> DaveMethvin: took over and will get them to me a bit later
[09:46:42] <mikesherov_> jzaefferer: LGTM
[09:46:48] <arschmitz> its up 57 from yesterday at end of meeting :)
[09:46:54] <scott_gonzalez> :-)
[09:47:12] <jzaefferer> Blink/Safari are in this questionable embrace where they only go together or not at all :/
[09:47:20] <jzaefferer> And we can't talk to Safari...
[09:47:40] <arschmitz> a bit how it seemed...
[09:48:01] <scott_gonzalez> Well, we can probably pressure Blink into implementing by getting everyone to use a polyfill.
[09:48:15] <arschmitz> yup and staring that issue
[09:48:26] <jzaefferer> Mostly getting everyone to use it
[09:48:36] <jzaefferer> Are we sticking with the polymer polyfill?
[09:48:37] <scott_gonzalez> If large numbers of developes start writing against Pointer Events, then we can say "look, Chrome is slower than IE and Firefox"
[09:48:41] <scott_gonzalez> And then they'll implement.
[09:48:44] <jzaefferer> Or is the dojo/ibm one any more promising?
[09:49:08] <scott_gonzalez> We're not sure. One or the other will end up in the Dojo Foundation or the jQuery Foundation and we'll go with that.
[09:49:22] <arschmitz> the sentiment in the call seemed to be polymer is much more complete
[09:49:31] <scott_gonzalez> The benefit to the Polymer polyfill is that there's existing history from people very invovled in Pointer Events and Touch Events.
[09:49:38] <arschmitz> at least as of right now
[09:50:07] <arschmitz> and we have already worked with it too
[09:50:12] <scott_gonzalez> Polymer likely has better coverage.
[09:50:39] <jzaefferer> But IBM won't use it since they can't sign the Google CLA?
[09:51:12] <scott_gonzalez> They wouldn't need to.
[09:51:20] <scott_gonzalez> It would either transfer to jQuery or Dojo.
[09:51:33] <jzaefferer> And then they can contribute?
[09:51:38] <scott_gonzalez> yeah
[09:51:43] <tj_vantoll1> They should be able to contribute what they know from their repo once it moves.
[09:51:43] <scott_gonzalez> IBM can contribute to both foundations.
[09:51:57] <arschmitz> but they could not to the current one because its google
[09:52:03] <arschmitz> so likely why they were making their own
[09:52:09] <jzaefferer> That sounds much more promising then us using the Polymer polyfill and them building dpointer
[09:52:44] <tj_vantoll1> Agreed. We need a canonical repo for this to work.
[09:53:16] <scott_gonzalez> A big part of them creating dpointer was that the Polymer polyfill is very tightly coupled with the Polymer build tools.
[09:53:25] <scott_gonzalez> You need multiple Polymer repos just to build the polyfill.
[09:53:38] <scott_gonzalez> Which will be something that we'd immediately change.
[09:54:30] <scott_gonzalez> We're running out of time.
[09:54:34] <scott_gonzalez> Lots to discuss this week...
[09:54:51] <scott_gonzalez> As I said a few weeks ago, I'd like 1.12 to happen very quickly.
[09:54:59] <mikesherov_> Can we continue in jqueryui-dev?
[09:55:22] <scott_gonzalez> I don't think there's another meeting after us, so we can stay here.
[09:55:27] <mikesherov_> hooray
[09:55:59] <arschmitz> yeah no dev leads this week to run to either
[09:56:00] <scott_gonzalez> I'd like to change the roadmap so that 1.12 has the button rewrite, classes option, and effects rewrite.
[09:56:19] <mikesherov_> OK, I can switch gears to the effects rewrite
[09:56:34] <mikesherov_> draggable is green on bugs anyway at this point :-)
[09:56:36] <scott_gonzalez> It would also include API changes to menu (adding the menu item wrappers again), selectmenu (styling the button), and potentially tooltip (supporting nodes as content)
[09:56:44] <scott_gonzalez> awesome
[09:56:50] <scott_gonzalez> Thoughts on that plan for 1.12?
[09:57:01] <jzaefferer> Speaking of button rewrite, we need to decide on the backwards compatibility story there.
[09:57:36] <jzaefferer> We renamed options within button itself, which we could make compatible with the previous version
[09:57:37] <arschmitz> yeah button would not be too hard checkboxs seem like another story
[09:57:48] <mikesherov_> I think that's a lot to chomp for 1.12 especially if it's so soon
[09:57:50] <jzaefferer> The rest is rather unpractical
[09:57:51] <scott_gonzalez> Checkbox should be easy.
[09:57:54] <mikesherov_> but depends on what everyone else can do
[09:58:06] <tj_vantoll1> Agreed with mikesherov.
[09:58:14] <tj_vantoll1> Or his alter ego mikesherov_ that is.
[09:58:16] <scott_gonzalez> Button rewrite is ~80% done, right?
[09:58:28] <arschmitz> button stuff will not be an issue as long as i can get it reviewed
[09:58:37] <arschmitz> which so far has not been an issue
[09:58:38] <scott_gonzalez> Effects is ~95% done?
[09:58:40] <jzaefferer> I'll work on reviewing button
[09:59:03] <scott_gonzalez> petersendidit: Are there remaining issues for classes or do we just need another round of review?
[09:59:15] <tj_vantoll1> I can start on a PR for the menu wrapping.
[09:59:19] <arschmitz> jzaefferer: ill push new branch and open new pr this afternoon and ping you
[09:59:25] <jzaefferer> arschmitz: sounds good
[09:59:48] <jzaefferer> "selectmenu (styling the button)" just needs to land, right?
[09:59:50] <petersendidit> there is still one issue left for button
[09:59:53] <mikesherov_> I don't like numeric percentage completions
[09:59:59] <mikesherov_> but effects is close
[10:00:01] <jzaefferer> That's what I said 21 days ago at least: https://github.com/jquery/jquery-ui/pull/1299#issuecomment-51359702
[10:00:02] <fnagel> jzaefferer: and needs documentation
[10:00:11] <mikesherov_> my main concern is just the lack of test coverage
[10:00:18] <jzaefferer> fnagel: aye, can you write the docs for that?
[10:00:18] <scott_gonzalez> mikesherov_: Sure, we obviously can't be accurate with percentages.
[10:00:22] <mikesherov_> for effects
[10:00:29] <tj_vantoll1> mikesherov_: So it's 9/10 done :P
[10:00:36] <mikesherov_> so I think I'm close
[10:00:53] <mikesherov_> but last time I thought I was close, scott_gonzalez and jzaefferer made me realize I was FAAAAAR
[10:01:00] <scott_gonzalez> :-/
[10:01:07] <arschmitz> petersendidit: button re-write fixes that issue
[10:01:16] <mikesherov_> if no new things get discovered as broken
[10:01:28] <petersendidit> yup
[10:01:28] <mikesherov_> I could have effects done with a week or so of train time
[10:01:44] <scott_gonzalez> Yeah, so this all sounds accomplishable.
[10:01:59] <jzaefferer> button rewrite depends on classes option, right?
[10:02:09] <arschmitz> no
[10:02:17] <arschmitz> but they effect each other of course
[10:02:21] <jzaefferer> if the only blocker is button, we need to get those two together
[10:02:38] <petersendidit> classes option is easier with the button rewrite
[10:02:40] <arschmitz> yeah button will need to be updated to use classes
[10:02:49] <jzaefferer> How do we do that?
[10:02:51] <arschmitz> or other way around lol
[10:02:57] <fnagel> jzaefferer: Did we document _renderItem method until now?
[10:03:06] <jzaefferer> fnagel: no idea
[10:03:08] <mikesherov_> sounds like we need to add "classes" first
[10:03:14] <mikesherov_> then update button to use it
[10:03:20] <petersendidit> yea land classes and then we can update butons to use it
[10:03:24] <arschmitz> the menu issue will effect classes too but i think i told scott and he already commented about it
[10:03:27] <fnagel> jzaefferer: should be in the api doc, right? If so, it#s not
[10:03:41] <tj_vantoll1> fnagel: I have a pull to add it https://github.com/jquery/api.jqueryui.com/pull/223
[10:04:17] <arschmitz> petersendidit: it brings back the issue with menu before where the anchor did not have a structure class
[10:04:34] <arschmitz> so need to add one just for the sake of classes option
[10:04:41] <petersendidit> yea
[10:05:32] <scott_gonzalez> So is everyone good with this plan?
[10:05:38] <scott_gonzalez> If so, I'll update the roadmap.
[10:05:39] <fnagel> jzaefferer tj_vantoll1: I will add it and push it in the same branch
[10:05:43] <arschmitz> its really good for mobile!
[10:05:48] <tj_vantoll1> yeah
[10:06:07] <arschmitz> we are going to try to do 1.5 at the same time i think
[10:06:11] <jzaefferer> sounds good to me
[10:06:15] <arschmitz> with all the new ui widgets ported in
[10:06:20] <jzaefferer> break stuff, don't do anything new
[10:06:21] <arschmitz> for button stuffs
[10:06:46] <scott_gonzalez> Thoughts on allowing element/jQuery for tooltip content? http://bugs.jqueryui.com/ticket/9278
[10:07:15] <mikesherov_> would make tooltip a bit more useful
[10:07:35] <arschmitz> yeah could add like pictoral instructions to things :)
[10:07:44] <scott_gonzalez> You can already do that.
[10:07:50] <scott_gonzalez> It supports anything via a function.
[10:08:08] <mikesherov_> I literally just had to make a walkthrough with custom dialogs and positioning becaus tooltip doesn't allow elements
[10:08:11] <fnagel> tj_vantoll1: Why is there no PR for your selectmenu-extension-point branch?
[10:08:18] <mikesherov_> oh right
[10:08:26] <mikesherov_> would've been good to know!
[10:08:31] <mikesherov_> :-P
[10:08:34] <scott_gonzalez> heh
[10:08:42] <scott_gonzalez> Ok, I'll mark it valid and review the PR again.
[10:08:49] <mikesherov_> no reason then we shouldn't support that
[10:09:04] <fnagel> tj_vantoll1: forget about it, just found it
[10:09:22] <mikesherov_> in general, anything that accepts stuff generated via function, should be able to accept a selector string or elment list
[10:09:31] <arschmitz> there was a bunch of talk about this and accessibility at deque kborchers do you recall if that was relevant to this?
[10:09:32] <mikesherov_> IMO
[10:09:51] <arschmitz> just the idea of having rich content in a tooltip
[10:10:53] <scott_gonzalez> Dylan has already fixed an issue related to accessibility of tooltip content.
[10:11:07] <arschmitz> scott_gonzalez: could have been that
[10:11:22] <tj_vantoll1> Yeah I think that was the aria-live stuff Dylan added.
[10:11:27] <kborchers> i don't remember exactly but definitely remember there being issues with properly announcing content that doesn't exist during initial render but could be unrelated
[10:12:08] <scott_gonzalez> Ok, so that brings us to the last item.
[10:12:09] <arschmitz> i think this was something different but i cant be sure that was almost a year ago
[10:12:13] <scott_gonzalez> Split effects: https://github.com/jquery/jquery-ui/pull/185
[10:12:23] <scott_gonzalez> mikesherov_ gnarf: What are your thoughts on this?
[10:12:43] <scott_gonzalez> I feel like we either do this in 1.13 or we don't do it at all.
[10:12:44] <mikesherov_> I think I can re-evaluate it after the new effects lands
[10:12:53] <scott_gonzalez> ok
[10:12:56] <mikesherov_> yeah, let's rediscuss once 1.12 is out
[10:12:57] <gnarf> ^
[10:13:07] <gnarf> though it might be nice to land it with "new effects" too
[10:13:09] <mikesherov_> scott_gonzalez: I wanted to talk to you about draggable rewrite
[10:13:12] <gnarf> thats up to you guys
[10:13:22] <jzaefferer> I vote for not doing it at all
[10:13:23] <mikesherov_> gnarf: seems like scope creep to me
[10:13:32] <jzaefferer> But then I also don't think we should keep our effects around at all
[10:13:48] <gnarf> can we split out into a separate ui-effects lib?
[10:13:53] <mikesherov_> I think once 1.12 lands, we'll be in a better place to see it, but I tend to agree with jzaefferer
[10:14:37] <mikesherov_> all this seems ripe to discuss after 1.12
[10:14:41] <gnarf> i've kinda been on the "get rid of effects, but provide a standard for hooking hide/show" opinion myself lately
[10:14:43] <gnarf> and sure
[10:15:09] <tj_vantoll1> +1 jzaefferer. I've got to go. I'll be back online later today.
[10:15:45] <jzaefferer> Well, if mikesherov_ wants to finish the effects rewrite, we sure should land that in 1.12
[10:15:47] <mikesherov_> scott_gonzalez: before we're done, can we discuss something about interactions rewrite? Perhaps back in dev?
[10:15:55] <scott_gonzalez> sure
[10:16:00] <jzaefferer> I don't feel like we should invest any more resources into effects though
[10:16:01] <mikesherov_> yeah, I do wanna finish effects in 1.12
[10:16:44] <jzaefferer> In my experience, datepicker is everywhere, effects are nowhere...
[10:16:49] <jzaefferer> Anyway
[10:16:53] <mikesherov_> so, draggable rewrite, the main thing we're doing is simplifying calcs and removing options
[10:17:02] <scott_gonzalez> 1.11.2 is like 90% mikesherov_'s bug fixes.
[10:17:24] <mikesherov_> right now, it does insane stuff
[10:17:44] <mikesherov_> the current path of the rewrite still deals with three calcs
[10:18:21] <mikesherov_> an original position, clientX from mouse, and some amount of scrolling from a scroll container
[10:18:40] <mikesherov_> all of which can become stale and invalidated by user mucking with layout
[10:19:01] <mikesherov_> there is an even simpler implementation which I think is bulletproof
[10:19:12] <mikesherov_> wanted to run it by the team here
[10:20:37] <mikesherov_> at it's heart, draggable is: on mousemove the element.clientX (if it existed) to a distance that is deltaX pixels away from event.clientX, where deltaX is the difference of on the mousedown
[10:21:28] <jzaefferer> mikesherov_: I think a ticket or PR or something with some code and/or screenshots would help a lot of that kind of discussion
[10:21:42] <jzaefferer> *for that
[10:21:46] <mikesherov_> so we figure out on mousemove how to derive element.clientX
[10:21:57] <jzaefferer> Also I want to go to have lunch /o\
[10:21:58] <mikesherov_> yes, but I want direct input
[10:22:15] <DaveStein> before I smash it and take the credit lol
[10:22:15] <mikesherov_> one sec jzaefferer
[10:22:22] <mikesherov_> jzaefferer: go eat
[10:22:35] <DaveStein> the new draggable is 11 tests away from full pass, aside from some of this scroll stuffs
[10:22:41] <mikesherov_> so basically, we could instead use elem.getBoundingClientRect
[10:22:42] <jzaefferer> actually I have another question - should I do feature request for blank lines above comments for jscs?
[10:22:54] <mikesherov_> jzaefferer: yes
[10:23:01] <jzaefferer> DaveStein: "some of this scroll stuffs" sounds like its the other 90%
[10:23:06] <mikesherov_> scott_gonzalez: draggable could be so much simpler!
[10:23:14] <DaveStein> ha sorry i meant that the 11 tests are basically because of scroll
[10:23:34] <DaveStein> in fixed grandparents yada yada
[10:23:35] <mikesherov_> on mousedown, record the delta between event.clientX and element,gBCR.left
[10:23:55] <mikesherov_> then on mouseover, perform same calc
[10:24:00] <jzaefferer> "fixed grandparent"s sounds so weird
[10:24:02] <mikesherov_> subtract the deltas
[10:24:03] <DaveStein> mikesherov_'s idea seems like a good idea unless there's any reason we don't want to use get BoundClientRect
[10:24:21] <scott_gonzalez> So you store original position and just add total delta to that on every mousemove.
[10:24:24] <scott_gonzalez> Seems sane.
[10:24:42] <mikesherov_> the difference of the deltas then is just elem.css("left", "+=", deltaDiff );
[10:24:53] <mikesherov_> no original position
[10:24:54] <DaveStein> + whatever left was there before
[10:25:04] <mikesherov_> because that can be screwed up by layout changes
[10:25:04] <DaveStein> so left: 20, becomes 50 with a delta of 30
[10:25:07] <scott_gonzalez> Oh, so not even original, just delta between moves?
[10:25:19] <mikesherov_> on mousedown, just store basically cursorAt
[10:25:25] <mikesherov_> right
[10:25:36] <mikesherov_> then compare the delta on mousemove
[10:26:15] <mikesherov_> the diff of the two deltas get added to the left
[10:26:42] <scott_gonzalez> Is this easier to test by modifying what we have or just by starting from nothing and building a super simple draggable with no options?
[10:26:58] <DaveStein> if we want to make this change, doing it mine should be relatively simple
[10:26:59] <mikesherov_> it's equally easy to test
[10:27:03] <DaveStein> PS: Was unaare of "+=" being real
[10:27:09] <mikesherov_> yeah, but DaveStein's is way better
[10:27:26] <scott_gonzalez> Ok, this sounds fine to me
[10:27:30] <DaveStein> yeah i don't have that much tracking code as is sweet
[10:27:33] <DaveStein> as is, sweet
[10:27:38] <mikesherov_> cool, we'll proceed with that
[10:27:48] <scott_gonzalez> Anything else?
[10:27:50] <mikesherov_> it means though that the base interactions.js reports clientX, not pageX
[10:27:57] <DaveStein>  we did have another debate about scrolling the other day in regards to passing exact tests for current version
[10:28:11] <mikesherov_> which we can take back to the dev room
[10:28:22] <mikesherov_> if anyone else wants to eat :-)
[10:28:30] <DaveStein> in today's draggable, ondrag is always one movement behind for passing position since scroll is async
[10:28:41] <DaveStein> so the test itself is subtracting 1 movement in its math
[10:28:43] <mikesherov_> but basically, we were unsure of the order of operations for auto scroll
[10:29:04] <DaveStein> do we want to make this same test pass as is, or actually correct it? mike is hesitant to change tests in our branch unless they go to master
[10:29:08] <DaveStein> this one wouldnt be able to the way its made
[10:29:35] <DaveStein> sorry this change wouldnt be doable in the current test suite
[10:29:37] <DaveStein> in master
[10:30:12] <scott_gonzalez> I think the switch to clientX is fine. Ideally we switch to passing actual event instances (when we use the Pointer Events polyfill), then the change won't even matter.
[10:30:23] <mikesherov_> right
[10:30:34] <mikesherov_> can we back up a sec re: scrolling
[10:30:40] <DaveStein> basically: do we want dragstop to be one behind frmo where the scrolling position will be
[10:30:48] <DaveStein> because tehcnically on stop it IS one behind since scroll is async
[10:30:58] <mikesherov_> yes, that's the right question
[10:31:19] <DaveStein> however in actual use, dragstop will fire with the correct value since a user doesn't instantaneously stop dragging after moving
[10:31:25] <DaveStein> unlike in the tests
[10:31:28] <mikesherov_> if a user drags an autoscrolling draggable, we set scrollTop on the parent
[10:32:14] <scott_gonzalez> The root of the problem is that simulate is synchronous for drags, right?
[10:32:33] <DaveStein> ha yes he is telling me this out loud
[10:32:35] <mikesherov_> YES
[10:32:49] <mikesherov_> I can change it all to async
[10:32:52] <scott_gonzalez> Seems like we have a way to fix that :-)
[10:33:00] <DaveStein> then the test in master would no longer need -1
[10:33:01] <DaveStein> right?
[10:33:02] <mikesherov_> which actually is way better
[10:33:11] <mikesherov_> so then DaveStein don't kill each other
[10:33:27] <mikesherov_> ok, we'll do that
[10:33:33] <mikesherov_> one last question
[10:33:34] <scott_gonzalez> Ugh, if you two kill each other, interactions will never get done :-(
[10:33:40] <DaveStein> haha
[10:33:50] <mikesherov_> in new draggable, if I want to implement grid as a developer
[10:33:56] <mikesherov_> or beter yet, contaiment
[10:34:03] <DaveStein> okay ill try to make the change to how movement is done on Friday and then Mike just needs to make simulate be async and then remoev that pesky -1
[10:34:08] <scott_gonzalez> (as if they're different things)
[10:34:19] <mikesherov_> the thought is, just set ui.position in the event callback, right?
[10:34:24] <scott_gonzalez> yup
[10:34:39] <mikesherov_> ok, the question then is, how can that prevent auto-scroll?
[10:35:12] <mikesherov_> meaning, my containment is also within the range of scroll sensitivity
[10:35:38] <mikesherov_> meaning, I want to stop the autoscroll because of my containment
[10:35:48] <scott_gonzalez> Is that a real concern?
[10:35:51] <DaveStein> I am able to handle that already
[10:35:53] <DaveStein> in callbacks
[10:35:58] <mikesherov_> I have no way of informing draggable just by modding ui.position
[10:36:05] <DaveStein> because we'd see the user modified the position
[10:36:09] <mikesherov_> well, it's a concern
[10:36:28] <DaveStein> i know what position is before firing and after firing, but the difference would be that auto scrolling would be AFTER drag is fired
[10:36:33] <mikesherov_> the general case is that without extension, you have no way of informing draggable to not autoscroll
[10:36:34] <DaveStein> its BEFORE in current draggable i believe
[10:36:37] <scott_gonzalez> Is the concern that the page will scroll once or that it will continue to scroll on every mousemove even though the element isn't moving?
[10:36:49] <mikesherov_> right, it's about order of operations here
[10:37:09] <mikesherov_> even scrolling once
[10:37:48] <DaveStein> i ran into that while working on containment but then fixed it.... but also it could be a non-issue
[10:37:54] <DaveStein> scott_gonzalez: I was wondering if containment should stay in as an option with default set to 'html'. I've never had a usage of draggable where forgetting containment wasn't reported as a bug.
[10:38:01] <DaveStein> then Mike's point would be moot
[10:38:04] <scott_gonzalez> I think handling scroll after the callback makes it easy, but I'm not sure how a minor scroll would cause problems.
[10:38:43] <DaveStein> if we make it a backcompat instead, that's saying a sane default is to allow dragging off the page
[10:38:47] <scott_gonzalez> Containment is an option.
[10:39:06] <DaveStein> but wasn't it on chopping block for backcompat?
[10:39:07] <mikesherov_> scott_gonzalez: it's staying an option?
[10:39:10] <scott_gonzalez> no
[10:39:18] <scott_gonzalez> http://wiki.jqueryui.com/w/page/12137878/Draggable
[10:39:19] <mikesherov_> oh, right
[10:39:20] <scott_gonzalez> It's in the spec.
[10:39:29] <scott_gonzalez> We even use it within UI.
[10:39:34] <mikesherov_> well, then the whole thing is moot
[10:39:35] <scott_gonzalez> Dialog sets a containment of document.
[10:40:07] <mikesherov_> sorry for the waste of time then
[10:40:09] <DaveStein> Oh I know why I was thrown off
[10:40:13] <DaveStein> https://github.com/DaveStein/jquery-ui/blob/interactions/ui/draggable.js#L569
[10:40:26] <DaveStein> it's going to be there still, but you wanted it as a plugin so it's not in draggable directly
[10:40:53] <DaveStein> we were going to use it elsewhere I guess? do you recall?
[10:41:46] <mikesherov_> so can we then move it back into the main code instead of an extension? because then we can keep autoscroll happening before userland drag
[10:41:54] <mikesherov_> scott_gonzalez: ^
[10:42:11] <scott_gonzalez> I'm not sure why I did that.
[10:42:16] <mikesherov_> heh
[10:42:23] <DaveStein> i just know i wouldn't have made it like that without you saying so
[10:42:23] <DaveStein> :P
[10:42:30] <scott_gonzalez> Yeah, it can (and probably should) move into the main code.
[10:42:38] <DaveStein> okay i'm gonna do that
[10:42:39] <mikesherov_> so we'll move it back in so that containment runs before scroll, which runs before drag trigger
[10:42:41] <DaveStein> and then this issue goes away
[10:42:46] <scott_gonzalez> https://github.com/DaveStein/jquery-ui/commit/7450b8c1259f415f398f7ca6cff7f01f53e39a44
[10:42:54] <mikesherov_> kk, thanks for clarifying!
[10:43:08] <DaveStein> also as far as the Draggable doc goes
[10:43:10] <scott_gonzalez> I probably just took the easy path to getting it in the right file.
[10:43:19] <mikesherov_> yeah
[10:43:21] <DaveStein> shuold we put the default in as 'html' or document
[10:43:29] <mikesherov_> ok, I think that's it then
[10:43:30] <DaveStein> rather than null
[10:43:34] <DaveStein> that's the last thing :D
[10:43:45] <mikesherov_> default false, no?
[10:43:56] <scott_gonzalez> Why wouldn't the default be null?
[10:44:06] <scott_gonzalez> Drag wherever you want, even if it means making the document larger.
[10:44:26] <DaveStein> i guess since we will ALWAYS auto scroll now, that would do the trick?
[10:44:38] <DaveStein> because if you have scroll: false, and containment: false
[10:44:45] <DaveStein> a user can just drag away to nowhereland
[10:45:02] <scott_gonzalez> Well, only to the point where their cursor hits the edge.
[10:45:13] <scott_gonzalez> Just like you can drag any window on your desktop.
[10:45:16] <mikesherov_> right
[10:46:16] <DaveStein> scott_gonzalez: http://jqueryui.com/resources/demos/draggable/default.html
[10:46:19] <DaveStein> drag all the way to the top left
[10:46:24] <DaveStein> out of yoru browser and let go
[10:46:39] <DaveStein> so literally every time i've used draggable without containment, i've gotten a bug report
[10:46:53] <DaveStein> Mike is saying "oh" out loud repeatedly
[10:47:07] <scott_gonzalez> Wow, I'm surprised you get events for that.
[10:47:24] <DaveStein> its top and left since you don't scroll in negative land
[10:47:31] <DaveStein> the general "you" in that case
[10:47:43] <scott_gonzalez> Yeah, but the cursor is out of the window.
[10:47:53] <DaveStein> but events still fire in all the browsers
[10:47:53] <scott_gonzalez> I didn't expect to get events at that point.
[10:48:01] <DaveStein> "apparently" says mike who is now just reading my monitor haha
[10:48:05] <scott_gonzalez> I guess that's necessary for native drag and drop.
[10:48:18] <DaveStein> yeah and technically you can code things to drag from window A to window B
[10:48:24] <DaveStein> remember those fun Chrome experiments./
[10:48:25] <DaveStein> ?
[10:48:30] <scott_gonzalez> oh yeah
[10:48:43] <DaveStein> so then default to html for new draggable?
[10:48:48] <DaveStein> because that's 99.9%
[10:48:55] <scott_gonzalez> I guess.
[10:49:06] <mikesherov_> 2 points for DaveStein
[10:49:14] <scott_gonzalez> Using the default should be fine for dialog at that point.
[10:49:21] <mikesherov_> RIGHT
[10:49:30] <mikesherov_> right, because dialog uses html
[10:49:41] <mikesherov_> when we land new draggable, dialog switches to using the default
[10:49:57] <mikesherov_> ok, g2g
[10:50:01] <mikesherov_> thanks scott_gonzalez for the extra time
[10:50:18] <scott_gonzalez> No problem. Keep up the good work.
[10:50:31] <scott_gonzalez> And stop torturing DaveStein with tests.
[10:50:40] <mikesherov_> lol
