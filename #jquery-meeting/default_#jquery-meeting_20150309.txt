[09:00:03] <timmywil> gibson042, DaveMethvin|away, m_gol, arthurvr Meeting time!
[09:00:54] <gibson042> hey-o
[09:01:39] <timmywil> So, I will need to board a flight pretty soon
[09:01:58] <timmywil> so let's get started
[09:02:01] <timmywil> https://github.com/jquery/jquery/issues/2118
[09:02:10] <timmywil> Do we want to return null for attributes
[09:02:25] <gibson042> +1 from me
[09:02:31] <gibson042> (obviously)
[09:02:47] <timmywil> me too. Is there anything big this will break?
[09:02:52] <markelog> i remember we return undefined in a lot of places
[09:02:59] <markelog> so it might be consistancy issue
[09:03:22] <timmywil> Well, there's consistency with our other methods and consistency with native behavior
[09:03:48] <markelog> let me see
[09:03:50] <gibson042> for what it's worth, our internal consistency is lacking here
[09:03:54] <gibson042> this would be a step forward
[09:04:15] <timmywil> Since prop was separated from attr, we've been getting closer and closer to mirroring native
[09:04:22] <timmywil> this would put a cap on it
[09:04:37] <timmywil> a cherry, if you will
[09:04:46] <markelog> we do this in one place, it seems we should do that everywhere
[09:05:08] <timmywil> I think we can evaluate methods one at a time
[09:05:08] <gibson042> where else is analogous?
[09:05:17] <timmywil> For some, it might make more sense to return undefined
[09:05:20] <timmywil> like data
[09:05:23] <gibson042> and prop
[09:05:27] <markelog> gibson042: that is the question :-)
[09:05:32] <timmywil> yea, and even prop
[09:05:50] <markelog> the question is, why native returns null
[09:05:59] <markelog> is that a correct and expected behaviour?
[09:06:06] <timmywil> that's just been the spec since the beginning
[09:06:08] <gibson042> it's defined by DOM
[09:06:09] <markelog> it might be just legacy
[09:06:27] <markelog> jquery was in bussiness of improving the dom
[09:06:36] <markelog> so
[09:06:41] <markelog> what is right?
[09:06:42] <timmywil> I imagine we returned undefined because we were melding the concepts of attrs and props
[09:06:54] <timmywil> but we're better now
[09:08:02] <gibson042> hrm
[09:08:30] <timmywil> hrm?
[09:08:52] <timmywil> I'd like to hear Dave's thoughts. He might know of a use case that would make us reconsider. But, I'll just ping him in the ticket.
[09:08:57] <markelog> i would +1 for this to beta, but we would need evaluate other places and revert it if it would cause any serious faillures in some plugins or sites
[09:09:11] <timmywil> markelog: good idea
[09:10:16] <timmywil> gibson042: I meant we are no longer jumbling content attributes and IDLs
[09:10:43] <gibson042> no, that's true, I'm just being swayed by markelog
[09:10:58] <gibson042> DOM specifies null, but everything else uses undefined
[09:11:14] <gibson042> native Javascript, that is
[09:11:42] <gibson042> DOM attributes are special because the values are always string or boolean, so undefined vs. null is arbitrary
[09:11:59] <markelog> fyi: i might disconnect, my battery is low
[09:12:00] <gibson042> most DOM bindings don't have multiple "None" values
[09:12:11] <gibson042> it's just that Javascript is weird
[09:13:05] <timmywil> true, but I like the idea of using a method for attributes and getting the same value I expect from getAtribute
[09:13:25] <markelog> people might expect jquery to return null, because dom does, even if it's less correct, so that is why i think it might better to do the same
[09:13:36] <timmywil> markelog: yea, that's my thinking
[09:13:38] <gibson042> right
[09:13:54] <markelog> i think it might be the only one legit reason to do it
[09:14:03] <gibson042> expectations relating to JavaScript and expectations relating to DOM are in conflict
[09:14:09] <timmywil> hopefully, it's not a significant difference to user code
[09:14:23] <timmywil> but we can see in the beta
[09:14:25] <gibson042> but we are a primarily DOM library
[09:14:43] <gibson042> so I think I'm still behind the change
[09:15:08] <gibson042> and nonexistent-safe round-tripping is a really nice benefit
[09:15:25] <markelog> if user does something like attr() === undefined
[09:15:25] <markelog> if that is a popular pattern, then we out of luck i guess
[09:16:01] <markelog> it would like changing `each` signature
[09:16:04] <markelog> same thing
[09:16:11] <gibson042> anyone following our style guide should do `== null` anyway
[09:16:14] <timmywil> yea, if it's used a lot
[09:16:16] <arthurvr> Hey guys!
[09:16:37] <markelog> gibson042: yeah, but only we would follow our guide ))
[09:16:41] <timmywil> ok, so we'll try it, but cautiously
[09:16:44] <markelog> just joking of course
[09:16:46] <gibson042> +1
[09:17:29] <timmywil> last week we mentioned talking about 2 branches vs 1
[09:17:38] <timmywil> is everyone still in favor of that?
[09:17:44] <markelog> yeah, will create ticket right after this
[09:17:50] <timmywil> If we are, I still think we should wait until after 3.0
[09:18:00] <markelog> i think we put a lot of effort for 3.0 to make two
[09:18:06] <markelog> so let it not be in vein )
[09:18:15] <markelog> but for the next version
[09:18:22] <timmywil> to avoid messing up anything during such a significant change
[09:18:37] <timmywil> and then I can use the new release script at least once. :)
[09:18:44] <markelog> yeah, that is another reason
[09:18:46] <gibson042> yes, branch combination is a post-3.0 effort
[09:19:11] <timmywil> ah, lost markelog
[09:19:27] <timmywil> well, sorry to cut out, but I need to board
[09:19:51] <timmywil> There's not much left except reminders to land some stuff and take a look at the current failures in master
[09:19:52] <gibson042> ok
[09:19:56] <gibson042> yep
[09:20:06] <timmywil> thanks gibson042
[09:20:07] <gibson042> landing the CSS relative unit PR now
[09:20:08] <timmywil> and arthurvr
[09:20:21] <timmywil> see you guys!
[09:20:30] <arthurvr> Bye! Sorry I was late.
