[12:03:19] <timmywil> DaveMethvin, m_gol, markelog, gibson042 https://docs.google.com/document/d/1uhcW9_TlSwD8JnO1_HNnSYJAriTK9WYZ8uQNDvtAAhA/edit
[12:03:38] <markelog> hey-hey
[12:03:43] <DaveMethvin> present
[12:03:49] <m_gol> present
[12:04:26] <gibson042> here
[12:04:47] <m_gol> one thing I'd like to raise
[12:05:00] <m_gol> can we deprecate versions of the jquery npm package older than 1.11?
[12:05:05] <markelog> raise the roof!
[12:05:24] <m_gol> they're not hours and people sometimes mistake them for proper old jQuery versions
[12:05:47] <m_gol> npm allows to deprecate ranges so we could make a warning displayed when an old version is installed
[12:05:59] <markelog> good idea
[12:06:03] <DaveMethvin> sounds good to me
[12:06:12] <m_gol> https://docs.npmjs.com/cli/deprecate
[12:06:15] <timmywil> Got a suggestion for the warning?
[12:06:21] <DaveMethvin> let's take bets on how many hours before we get the first complaint
[12:06:43] <DaveMethvin> yeah, wording can be tricky
[12:06:48] <timmywil> how about "Grunt needs your help"
[12:06:53] <markelog> :))
[12:06:56] <m_gol> :D
[12:07:36] <m_gol> "Versions of the jquery package older than 1.11.0 are patched versions that don't work in web browsers. Update to >=1.11.0"
[12:07:52] <m_gol> or s/Update/Upgrade/
[12:08:46] <timmywil> not bad
[12:09:21] <markelog> isn't it a bit harsh?
[12:09:27] <markelog> like "don't work in web browsers"
[12:09:37] <timmywil> not if it's true
[12:09:46] <markelog> it isn't, right?
[12:09:56] <timmywil> were they adapted for use in node? idk
[12:10:07] <timmywil> could have broken use on the web
[12:10:14] <m_gol> well, they don't :-)
[12:10:18] <markelog> yeah, "could of"
[12:10:26] <markelog> like a lot of people still use 1.4.2
[12:10:28] <markelog> :)
[12:10:32] <timmywil> I mean, I haven't tried it
[12:10:32] <m_gol> not from npm
[12:10:43] <timmywil> markelog: we're not saying don't use those versions
[12:10:44] <markelog> maybe "may not work..."?
[12:10:49] <timmywil> just don't use those version from npm
[12:11:01] <markelog> why not?
[12:11:02] <timmywil> we weren't hosting and they were changed
[12:11:19] <timmywil> 1.4.2 on npm is not the same as 1.4.2
[12:11:28] <markelog> how so?
[12:11:45] <m_gol> markelog: old versions on npm are Node wrappers around jQuery
[12:11:51] <m_gol> we only publish from 1.11/2.1
[12:11:52] <timmywil> it doesn't work in a web browser
[12:11:57] <markelog> oooh,
[12:11:58] <markelog> okay
[12:12:08] <m_gol> I'm only not clear on 1.9
[12:12:14] <markelog> i thought we started to doing that much earlier
[12:12:26] <m_gol> I know it's been published as a Node package until 1.8
[12:12:30] <m_gol> and then we published 1.11
[12:12:33] <timmywil> yea, we should be sure about which versions
[12:12:34] <m_gol> but I also see 1.9 now on npm
[12:12:53] <m_gol> and the 1.9 one has our README, not the old Node-based one
[12:13:05] <m_gol> did sb publish it for some reason?
[12:13:23] <timmywil> publish 1.9? maybe that's when we took over?
[12:13:24] <m_gol> 1.9.1 to be more precise
[12:13:36] <timmywil> it's been a while
[12:13:43] <timmywil> I forget
[12:13:48] <m_gol> I don't think so...
[12:13:59] <timmywil> anyway, we can look into that offline
[12:14:02] <m_gol> 1.9.1 has been published 2 months after 1.11.1
[12:14:04] <m_gol> ok
[12:14:22] <markelog> i have one thing to ask
[12:14:41] <markelog> is jQuery.proxy still a thing?
[12:15:03] <DaveMethvin> afaik?
[12:15:06] <timmywil> yes
[12:15:19] <gibson042> we use it internally and document it publicly
[12:15:28] <markelog> even with Function#bind?
[12:15:45] <timmywil> yea, because it binds more than one thing and has 2 signatures
[12:15:54] <markelog> we used only in one place
[12:15:56] <m_gol> the question is: isn't Function#bind slower?
[12:16:17] <DaveMethvin> probably :)
[12:16:21] <gibson042> for the record, I would _definitely_ support Function#bind over jQuery.proxy
[12:16:22] <markelog> if it is, it should be negligible
[12:16:57] <m_gol> if we could deprecate it I'm all for it but we need to look closer at the signatures and decide what to do about them
[12:17:10] <DaveMethvin> all those utility methods are annoying but I'd prefer to just say "hell no we aren't enhancing them" rather than taking them off version by version like pulling off a bandaid slowly
[12:17:11] <m_gol> we can do it in 3.1.0, though, if we don't finish for 3.0
[12:17:33] <m_gol> DaveMethvin: well, we are deprecating jQuery.parseJSON, aren't we? :)
[12:17:42] <m_gol> also, I have a feeling that's what Migrate is for as well
[12:17:42] <DaveMethvin> the docs can just say "they are what they are, if you want something different then write your own"
[12:17:43] <DaveMethvin> yeah
[12:17:47] <markelog> it seems has a very limited use, right?
[12:17:54] <markelog> since bind is everywhere now
[12:17:55] <timmywil> there's a clear feature parity between parseJSON and JSON.parse, tho
[12:17:58] <m_gol> also, we may remove looong after deprecating it
[12:18:18] <m_gol> deprecation is mostly making people slowly stop using them
[12:18:20] <DaveMethvin> it's also a question of whether taking it out buys us anything
[12:18:28] <markelog> size decrease?
[12:18:30] <m_gol> size ;)
[12:18:34] <markelog> :)
[12:18:37] <DaveMethvin> tiny tiny tiny
[12:18:43] <markelog> and you know
[12:18:47] <markelog> focused api
[12:18:52] <markelog> and that kind of stuff
[12:18:55] <m_gol> we may do one big sweep of removals in, let's say, 5.0
[12:19:09] <m_gol> but that doesn't mean we can't start deprecating long before that
[12:19:15] <markelog> yeah
[12:19:21] <DaveMethvin> yeah i'd rather just deprecate the heck out of a lot of things like isNumeric
[12:19:27] <DaveMethvin> and then leave it alone for a while
[12:19:43] <m_gol> and if we collect all those now unnecessary APIs they may add up in size
[12:20:09] <DaveMethvin> the good thing to me about deprecating stuff is that we can say, "no we aren't changing the behavior of a deprecated api"
[12:20:10] <markelog> isNumeric still very useful internally
[12:20:20] <markelog> but like, jQuery.now
[12:20:22] <DaveMethvin> sure but as a public api it's a nuisance
[12:20:26] <m_gol> right
[12:20:36] <m_gol> jQuery.now is a perfect example
[12:20:40] <gibson042> isNumeric has no internal uses
[12:20:44] <DaveMethvin> b/c people always gravitate to those and want them changed in some strange way
[12:21:01] <markelog> gibson042: wow, indeed!
[12:21:11] <DaveMethvin> jQuery.trim, there's a crazy forum thread about that one
[12:21:25] <m_gol> I'm definitely in favor of deprecating a lot of those methods that now have native equivalents and leave them deprecated for some time
[12:21:27] <DaveMethvin> someone wanted a param to change the way it trimmed for best performance
[12:21:34] <m_gol> DaveMethvin: jQuery.trim is needed because of Android 4.0
[12:21:49] <timmywil> open a ticket
[12:22:11] <m_gol> who/
[12:22:14] <m_gol> ? :)
[12:22:14] <b-ot> :)
[12:22:25] <markelog> okay, so how about i will create tickets for those three methods?
[12:22:31] <DaveMethvin> k
[12:22:31] <markelog> for their deprecation
[12:22:34] <m_gol> +1
[12:22:41] <timmywil> yea, that
[12:22:41] <markelog> isNumeric, proxy, now
[12:22:43] <markelog> anything else?
[12:22:48] <m_gol> if you find more than those 3 you may create more :-)
[12:23:06] <markelog> thank you :)
[12:23:09] <timmywil> ok, issues
[12:23:17] <markelog> but i was asking maybe someone remembers
[12:23:21] <markelog> any other examples?
[12:23:50] <markelog> like we still need nodeName or type
[12:24:01] <markelog> isArray
[12:24:08] <markelog> yeah, that could be too
[12:24:18] <m_gol> yup
[12:24:24] <timmywil> if you think of more, we can discuss in tickets
[12:24:35] <markelog> maybe jQuery.error
[12:24:37] <markelog> ok-ok
[12:24:40] <m_gol> jQuery. text?
[12:24:42] <m_gol> k
[12:25:27] <timmywil> I think m_gol added a couple issues, but I don't have particular questions about them myself.
[12:25:51] <m_gol> right, the document.implementation thing
[12:25:55] <timmywil> For 2941, I'm resigned to removing it. For 2945. I think we fixed it already.
[12:26:25] <m_gol> remove everywhere? we need to think about security implications
[12:26:52] <timmywil> using it fixed a security issue?
[12:26:54] <DaveMethvin> it was only half the security solution m_gol
[12:27:15] <DaveMethvin> the other half depended on the caller to $.parseHTML processing the DOM tree it returned as i recall
[12:27:18] <m_gol> not an issue per se, rather the ability to have parsed inert DOM when using $.parseHTML
[12:27:49] <m_gol> one of DOMPurify maintainers submitted this patch AFAIK
[12:27:58] <DaveMethvin> but since this is new there is no code that takes advantage of inert HTML from parseHTML
[12:28:01] <DaveMethvin> yeah
[12:28:22] <DaveMethvin> and if there are compat issues i have to wonder if we shoudl be trying it
[12:28:26] <DaveMethvin> also we need to document
[12:28:32] <m_gol> we also now have a better solution, I believe, with htmlPrefilter
[12:29:00] <timmywil> it seems like we're stuck removing it regardless. This issue is big enough.
[12:29:03] <DaveMethvin> in any case i think we agreed that the .2 releases should back this out right?
[12:29:22] <DaveMethvin> we could disuss more for 3.x but it's a breaking change for 1.x/2.x
[12:29:27] <m_gol> because this patch only helped with $.parseHTML, using $(someHTMLString) was the same as it stopped being inert once the jQuery object got those nodes copied over
[12:29:35] <m_gol> yeah, I think so
[12:30:03] <timmywil> well, we can start with that, but does anyone see a solution for this aside from Chrome fixing the bug?
[12:30:04] <m_gol> I'd think about pros & cons for 3.0, I wouldn't reject it right now without more discussion but I agree they should go away in 1.x/2.x
[12:30:09] <DaveMethvin> m_gol: i think it stopped being inert b/c we passed `document` explicitly
[12:30:17] <DaveMethvin> parseHTML was only inert if you didn't pass a document
[12:30:18] <m_gol> timmywil: they are not even sure what the spec states on that :D
[12:30:24] <DaveMethvin> which was kind of unexpected
[12:30:38] <timmywil> m_gol: they're not sure whether they should keep an href?
[12:30:49] <m_gol> timmywil: it's not "keeping the href"
[12:30:55] <m_gol> it's more involved
[12:31:06] <DaveMethvin> the spec doesn't say what the "base" shoudl be on a fragment that wasn't in a document, or some such
[12:31:07] <m_gol> when the attribute is translated to the property, it needs to resolve the URL
[12:31:32] <DaveMethvin> ideally it would just use the attribute value for the property value in that case
[12:31:39] <m_gol> but it's not clear what the base URL is for docs created via document.implementation.createHTMLDocument('')
[12:31:40] <DaveMethvin> but instead they do bizarre things
[12:31:54] <timmywil> ah
[12:32:05] <timmywil> still seems like going to empty string isn't the right solution
[12:32:13] <DaveMethvin> in other words, just another normal day for jquery
[12:32:15] <m_gol> agreed
[12:32:20] <DaveMethvin> you might not need it
[12:32:44] <timmywil> alright, so we can wait on 3.0 removal and just remove in .2 releases for now?
[12:32:50] <m_gol> +1
[12:32:52] <DaveMethvin> yep
[12:33:13] <m_gol> when do we release .2?
[12:33:14] <timmywil> ok
[12:33:19] <DaveMethvin> right now it's just this ticket and the fix for sizzle on AMD in .2, right?
[12:33:20] <markelog> was always against that `document.implementation` thing
[12:33:24] <m_gol> do we wait more or release after this one backout?
[12:33:25] <timmywil> m_gol: when we can :)
[12:33:26] <markelog> just fyi
[12:33:33] <m_gol> markelog: ;)
[12:33:38] <timmywil> is this the last ticket for .2?
[12:33:41] <DaveMethvin> i guess if there are no more bugs reported
[12:33:42] <timmywil> that we know of
[12:33:45] <m_gol> a lot of people seem to complain about this sizzle path thing
[12:33:54] <DaveMethvin> it's fixed for npm at least tho
[12:33:56] <timmywil> ok, there is a concern with the sizzle thing
[12:34:06] <m_gol> timmywil: that's all I know
[12:34:19] <timmywil> on the one hand, we made it so that people don't have to specify the sizzle location
[12:34:31] <m_gol> DaveMethvin: it's fixed but we still need to release for people to get the fix on npm :-)
[12:34:47] <timmywil> but those that have been doing that will find they're extraneous sizzle package is not being included
[12:35:04] <DaveMethvin> timmywil: which is worse?
[12:35:14] <timmywil> personally, I like what we have now
[12:35:19] <m_gol> timmywil: can't they override it on their side?
[12:35:23] <timmywil> people should use the sizzle version that went with that release
[12:35:28] <m_gol> yeah
[12:35:33] <timmywil> m_gol: they can, but with a different syntax
[12:35:37] <m_gol> you could make the same case for all of our AMD modules
[12:35:53] <timmywil> in other words sizzle: "path" won't work anymore
[12:35:58] <m_gol> people might want to swap some of them, Sizzle is not the exception here
[12:36:08] <m_gol> the question is: isn't it a breaking change?
[12:36:10] <timmywil> it would have to be "path/to/external/sizzle": "path"
[12:36:29] <timmywil> m_gol: it could be argued we're fixing a longstanding bug
[12:36:31] <m_gol> tbh I didn't want this patch backported to 1.x/2.x, I was afraid of those problems. I just forgot to comment about that :(
[12:36:54] <DaveMethvin> as long as the default setup works, and we document what to do if you don't want the default, i'm good with whatever
[12:37:12] <timmywil> I doubt anyone is actually wanting to replace sizzle
[12:37:21] <timmywil> they were just forced to include the path in their config
[12:37:36] <m_gol> the only think they may want to do is to use selector-natve
[12:37:37] <m_gol> * native
[12:37:51] <m_gol> which will stop working now, right? until they change the syntax
[12:37:52] <timmywil> m_gol: yup, which this doesn't affect
[12:37:56] <m_gol> ah, ok
[12:38:05] <m_gol> then I'm fine with whatever as well :D
[12:38:31] <timmywil> ok cool
[12:38:44] <m_gol> this document.impl thing; who takes it?
[12:38:56] <m_gol> I can do it on Wednesday if no one has time today or tomorrow
[12:38:59] <timmywil> I assigned myself, but anyone can feel free to take it if they want
[12:39:10] <markelog> i might be able to do that tomorrow
[12:39:13] <markelog> but not sure
[12:39:15] <timmywil> markelog: did you have a specific question on https://github.com/jquery/jquery/pull/2126?
[12:39:28] <markelog> timmywil: didn't catch on that discussion
[12:39:35] <markelog> it was an year ago, gosh
[12:39:50] <markelog> can we table it until the next meeting?
[12:39:56] <timmywil> sure
[12:40:01] <m_gol> k, timmywil, on Wednesday morning I'll look if there'a a PR and if not I'll make one
[12:40:01] <timmywil> I should read through that again too
[12:40:11] <timmywil> m_gol: sounds good, thanks
[12:40:53] <markelog> cool
[12:41:05] <timmywil> and I'm going to leave the reminder to help with migrate in our notes until we've got all the tickets assigned.
[12:41:16] <m_gol> about Migrate...
[12:41:24] <markelog> oh, DaveMethvin good to merge that coveralls pr?
[12:41:39] <DaveMethvin> markelog: yep, thanks
[12:41:43] <markelog> cool
[12:41:47] <m_gol> I am confused a little about what's the actual target group for Migrate 3.0
[12:41:49] <m_gol> :)
[12:42:03] <m_gol> I had a discussion with Dave about that on GitHub
[12:42:14] <m_gol> on my PR about deprecating JSON.parse
[12:42:47] <DaveMethvin> people who made it to jQuery 1.11.x or so without needing Migrate 1.x should be able to take their code and use jQuery 3.0 and Migrate 3.0
[12:43:06] <DaveMethvin> we need to jQuery.parseJSON shim to fully implement the parsing tho
[12:43:06] <m_gol> ok, so not just 1.12/2.2 but also older versions are the target
[12:43:11] <DaveMethvin> including returning null on an empty string
[12:43:19] <DaveMethvin> which is diff than JSON.parse
[12:43:41] <m_gol> are 1.11/2.1 the minimum versions we can assume?
[12:43:42] <DaveMethvin> well yeah techincally the latest 1.x/2x
[12:43:48] <m_gol> they've been out for a long time
[12:44:00] <m_gol> 1.12/2.2 only for a moment so I understand your concerns
[12:44:06] <DaveMethvin> right now we unit test lots of stuff
[12:44:29] <DaveMethvin> i proposed dropping that a while back but it was extra work for little payoff
[12:44:36] <DaveMethvin> since we already have it working that way
[12:44:49] <m_gol> my concern is mainly to not downgrade people
[12:45:11] <m_gol> if they're on jQuery x and update to y>x and Migrate restores bad behavior from x-1 that may be a problem
[12:45:15] <timmywil> with the warning added to migrate, I'm hoping people will make necessary adjustments and remove it
[12:45:16] <DaveMethvin> right
[12:45:23] <DaveMethvin> so most of the old behavior shims will come out
[12:45:26] <DaveMethvin> attroperties stuff
[12:45:31] <timmywil> ah right
[12:45:50] <DaveMethvin> if it doesn't *hurt* though i think there is a case for leaving it in for better diagnostics
[12:45:57] <DaveMethvin> that was my point with parseJSON
[12:46:00] <m_gol> I was thinking about preparing a PR with those removals, I'm trying to determine the scope
[12:46:01] <timmywil> yea, whatever is removed in the latest 1.x/2.x can still be gone in 3.0
[12:46:10] <DaveMethvin> especially since the problem may be in the server and not your own code
[12:46:10] <m_gol> I'm starting to understand, I think ;)
[12:46:49] <m_gol> timmywil: my point was that these jQuery.parseJSON hacks are not present in jQuery 1.12/2.2 so I wanted to remove them from Migrate but Dave opposed
[12:47:03] <timmywil> oh, wasn't aware they were gone in 1.12/2.2
[12:47:18] <DaveMethvin> the pr as-is doesn't implement parseJSON quite the same way 1.12/2.2 does
[12:47:22] <DaveMethvin> specifically empty strings
[12:47:29] <timmywil> aren't people already dealing with that without a migrate to help?
[12:47:43] <m_gol> DaveMethvin: that's 2.2 impl: https://github.com/jquery/jquery/blob/2.2-stable/src/ajax/parseJSON.js
[12:47:56] <m_gol> it only casts to string which only makes a difference for Android 2.3
[12:48:11] <DaveMethvin> hmmm
[12:48:25] <DaveMethvin> so which case am i thinking of?
[12:48:30] <DaveMethvin> was it undefined or null?
[12:48:39] <DaveMethvin> did we change that in 2.2?
[12:48:53] <m_gol> hmm, actually, it's been that way since 2.0.0
[12:49:07] <timmywil> you'd get "null" or "undefined" either way
[12:49:08] <m_gol> 2.0.0 was even more restrictive as it didn't have the workaround for Android 2.3
[12:49:14] <m_gol> https://github.com/jquery/jquery/blob/2.0.3/src/core.js#L482
[12:49:35] <DaveMethvin> ok then i am wrong i guess, could have sworn ...oh wait
[12:49:39] <DaveMethvin> it was the problem with ajax
[12:49:54] <DaveMethvin> so yeah parseJSON is good as your pr is m_g
[12:50:00] <m_gol> :D
[12:50:25] <DaveMethvin> okay so that one is good, let me bless it
[12:50:37] <m_gol> glad to know ;) I'll land the PRs on core & migrate
[12:50:45] <timmywil> bless it like beyonce
[12:50:51] <m_gol> ;)
[12:50:59] <m_gol> are you ok with me removing more stuff, Dave?
[12:51:13] <m_gol> I think it would be beneficial to get rid of the cruft before adding a lot of new stuff
[12:51:36] <m_gol> (this is about https://github.com/jquery/jquery-migrate/issues/152)
[12:52:14] <DaveMethvin> yes, it's a good time to clean
[12:52:28] <m_gol> ok, I'll try to do it on Wednesday
[12:52:38] <DaveMethvin> we can remove all the behavior-changing shims
[12:52:51] <m_gol> (I have OSS time at work for 4h on each Wednesday)
[12:52:57] <DaveMethvin> awesome!
[12:53:16] <timmywil> nice
[12:53:26] <timmywil> alright, thanks everybody
[12:53:32] <m_gol> I have one more PR: https://github.com/jquery/jquery/pull/2949
[12:53:38] <m_gol> but I guess people need more time to review
[12:53:45] <m_gol> so let's talk about it next week
[12:53:54] <timmywil> yea, I'll add it to the agenda for next week
[12:54:06] <timmywil> see you in -dev
