[12:08:15] <scott_gonzalez> ?pepteam
[12:08:15] <b-ot> arschmitz bethge jdalton jrossi jrossi1 jrossi2 jrossi3 jrossi9billion M4rius scott_gonzalez snover
[12:08:35] <scott_gonzalez> Sorry, got held up and just got back to my computer.
[12:09:19] <bethge> Hi! No problem :)
[12:09:40] <scott_gonzalez> A lot has happened this week.
[12:09:53] <bethge> \o/
[12:10:56] <scott_gonzalez> Let's start with all the PRs from bethge.
[12:11:04] <scott_gonzalez> Build: Replace Esperanto with Rollup https://github.com/jquery/PEP/pull/284
[12:12:06] <bethge> I basically went ahead and followed: https://github.com/rollup/rollup/wiki/Migrating-from-Esperanto
[12:13:08] <bethge> I didn't work for me without making all the paths relative. I am not fully certain at what point relative paths are necessary
[12:14:44] <scott_gonzalez> Quick glance at a diff of the output looks like it just renamed some of the vars.
[12:14:58] <scott_gonzalez> So I think this is good to merge.
[12:15:24] <scott_gonzalez> I'm not sure about the relative paths either.
[12:15:44] <scott_gonzalez> But having them relative matches how node works, so it's pretty intuitive.
[12:16:01] <bethge> Yeah, thats true.
[12:17:01] <scott_gonzalez> merged!
[12:17:52] <bethge> Nice, that was quick. I feel like you have some practice with that.  ;-D
[12:18:47] <scott_gonzalez> Heh, yeah, and that was with me verifying the output and documenting it in the minutes :-)
[12:18:59] <scott_gonzalez> I have aliases for the entire process ;-)
[12:19:10] <scott_gonzalez> Mouse is always an active pointer (https://github.com/jquery/PEP/pull/282)
[12:19:53] <scott_gonzalez> I'll need some time to review that one.
[12:19:58] <bethge> That kind of escalated.
[12:20:35] <scott_gonzalez> I think many people probably don't realize there's a difference between active pointer and active buttons state in terms of the rules for capture.
[12:20:46] <arschmitz_> sorry here
[12:20:48] <bethge> Tbh. I only realized last week :D
[12:21:29] <scott_gonzalez> Yeah, conceptually you know it makes sense.
[12:21:58] <scott_gonzalez> But for some inputs, active buttons state is a requirement for even being used.
[12:22:30] <scott_gonzalez> I had even forgotten we differentiated them.
[12:23:25] <scott_gonzalez> Capture: Assert node is connected (https://github.com/jquery/PEP/pull/283)
[12:23:36] <scott_gonzalez> Builds on top of the mouse active pointer PR.
[12:24:05] <bethge> Right, so that we have all the steps in the spec covered for Capturing.
[12:24:20] <scott_gonzalez> There may be additional restrictions soon for cross-window capture.
[12:24:39] <scott_gonzalez> But since that's not in the spec yet, we don't have to worry about it right now.
[12:25:00] <bethge> Ok, cross-window is with iframes, right?
[12:25:14] <scott_gonzalez> Could be iframes, could be two windows side by side.
[12:25:22] <scott_gonzalez> iframes are more common though.
[12:25:26] <scott_gonzalez> https://github.com/w3c/pointerevents/issues/59
[12:25:45] <bethge> Ok. That might become tricky to polyfill.
[12:25:58] <scott_gonzalez> That's the https://github.com/w3c/pointerevents/issues/52
[12:26:24] <scott_gonzalez> Yeah, I don't think we'd be able to polyfill that unless touch ids are already consistent.
[12:26:51] <arschmitz_> yeah rick says it there it might not even be possible on some os's
[12:26:58] <arschmitz_> for the browser even
[12:28:44] <scott_gonzalez> There's a private discussion about the security implications of capturing cross-frame that will determine if the limitation will be needed.
[12:29:16] <scott_gonzalez> If the limitation exists, then having consistent IDs is irrelevant.
[12:29:34] <scott_gonzalez> But it could also be limited based on being cross domains.
[12:30:02] <arschmitz_> a cors type limitation would make sense
[12:32:45] <scott_gonzalez> Marius also has a PR to add more tests (https://github.com/jquery/PEP/pull/281/files)
[12:34:22] <bethge> Pretty simple stuff, similar to pointerenter tests
[12:34:50] <bethge> (just simple, might still be simply wrong) ;-)
[12:35:05] <scott_gonzalez> arschmitz_: Are you able to dig up this bug? https://github.com/jquery/PEP/issues/277
[12:36:00] <scott_gonzalez> The iOS bug
[12:36:26] <scott_gonzalez> Might be relevant for the cross-frame pointer events discussion.
[12:36:37] <scott_gonzalez> I wonder if it's a bug or an intentional thing that Apple did.
[12:36:53] <bethge> They are very driven towards performance ...
[12:37:12] <arschmitz_> its a bug i could not find the bug but i helped make gseguin make a patch for core to fix it a few years ago
[12:37:23] <arschmitz_> just a sec ill get that
[12:37:24] <scott_gonzalez> oh, ok
[12:37:51] <arschmitz_> https://github.com/gseguin/ios-iframe-touchevents-fix
[12:38:06] <arschmitz_> of course readme is useless for the issue
[12:38:39] <scott_gonzalez> Regarding capture release when pointer is over a different element (https://github.com/jquery/PEP/issues/254), there's a related discussion about whether over/out/enter/leave events should be fired at all during capture: https://github.com/w3c/pointerevents/issues/61
[12:38:43] <arschmitz_> so as i recall the basic idea is if you have a touch event bound to body i think it is
[12:38:56] <arschmitz_> then the iframe stops responding completely
[12:39:14] <arschmitz_> the only workaround was to unbind all events when the main window loses focus
[12:39:21] <arschmitz_> and then rebind them all when it regains it
[12:39:40] <bethge> Just wondering, does a touchmove fire on the new window when it crosses windows?
[12:40:08] <arschmitz_> no
[12:40:15] <arschmitz_> it recieves no events at all
[12:40:23] <arschmitz_> you cant even select inputs
[12:40:31] <arschmitz_> if you have a touch event bound to the body
[12:40:35] <arschmitz_> or higher
[12:41:21] <bethge> Aah, ok. I was just getting at the issue of letting the iframe know, that it is being dragged through, but the bug you are describing is a lot worse.
[12:41:39] <arschmitz_> yes its really ugly
[12:42:39] <scott_gonzalez> Yeah, so that sounds like it's not related to what we're discussing in PEWG. Definitely sounds like just an ugly bug.
[12:42:52] <bethge> I will whip up a demo for that one and ... and should I start a new issue for it?
[12:44:35] <scott_gonzalez> It sounds like it may not be too common if it's been an iOS bug for a long time.
[12:44:50] <scott_gonzalez> Might not be worth the effort unless a user reports a problem
[12:44:57] <bethge> Good point
[12:45:28] <arschmitz_> yeah iv never run into my self
[12:45:33] <arschmitz_> gseguin did at jive
[12:45:43] <arschmitz_> and i just helped him write the patch for it
[12:46:04] <arschmitz_> and mobile could easily run into this or hammer
[12:46:11] <arschmitz_> and iv never seen it reported on either
[12:46:59] <scott_gonzalez> Ok, so let's move to the next thing (or I'll just repeat it since it kinda got lost in this discussion):
[12:46:59] <scott_gonzalez> Regarding capture release when pointer is over a different element (https://github.com/jquery/PEP/issues/254), there's a related discussion about whether over/out/enter/leave events should be fired at all during capture: https://github.com/w3c/pointerevents/issues/61
[12:47:40] <scott_gonzalez> bethge previously worked on the code that handles this: https://github.com/jquery/PEP/commit/8e33953dbcf02063c862e6436c4eb7f6d15164be
[12:48:18] <scott_gonzalez> So if this change happens, it'd just be a matter of always filtering these out during capture, rather than conditionally filtering them out based on the target.
[12:48:39] <scott_gonzalez> Actually, I think we need to make a change regardless of the outcome.
[12:48:59] <scott_gonzalez> If the events stay, we need to treat over and out as if they were enter and leave.
[12:49:05] <scott_gonzalez> That's not clear in the spec.
[12:49:13] <scott_gonzalez> But it will be if the decision is to keep the events.
[12:49:41] <scott_gonzalez> The reason being that if you capture to a node and that node has children, you don't want an out event if the pointer moves over the child.
[12:49:55] <bethge> Right ...
[12:49:57] <bethge> Makes sense
[12:51:51] <scott_gonzalez> Anything else to discuss?
[12:52:59] <bethge> I was meaning to bring up https://github.com/jquery/PEP/issues/279 and https://github.com/jquery/PEP/issues/286
[12:53:20] <bethge> Both are issues about the state of button / buttons, the latter in particular for Safari
[12:53:47] <bethge> For Safari we currently keep an internal state of which buttons are pressed and which ones are not.
[12:54:03] <bethge> For Chrome and Firefox we can just use `buttons`, which Safari does not have.
[12:54:18] <bethge> The issue with keeping internal state is that it is rather fragile.
[12:55:03] <scott_gonzalez> Indeed. Actually, it probably doesn't even work for non-mouse.
[12:55:28] <scott_gonzalez> Because we can't detect that a finger was removed and then added.
[12:55:35] <scott_gonzalez> Since it will get a different id.
[12:57:03] <bethge> Oh ok, I so far only checked mouse, and on every right-click it will cause the internal buttons state to be wrong.
[12:57:26] <bethge> Addition: If right-click opens a contextmenu
[12:58:28] <bethge> So I believe an alternative for mouse would be to not store the state internally and just go with `button` and `which` Browsers without `buttons` support.
[12:58:47] <bethge> *for browsers
[12:59:21] <bethge> We would loose the ability to have chorded mouse interactions in Safari.
[12:59:35] <scott_gonzalez> I need to join another meeting right now.
[12:59:46] <scott_gonzalez> And it's a video meeting, so I can't bounce back and forth :-/
[12:59:55] <arschmitz_> thats ok me too
[12:59:59] <bethge> Yeah, no worries.
[13:00:36] <scott_gonzalez> Ok, so let's wrap up and we can continue to discuss this issue in #pep later.
[13:00:44] <scott_gonzalez> Thanks everyone.
