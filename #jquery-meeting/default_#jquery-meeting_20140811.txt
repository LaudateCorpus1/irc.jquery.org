[09:00:55] <DaveMethvin> hey guys!
[09:01:10] <DaveMethvin> just scraping an agenda together now
[09:01:39] <DaveMethvin> ok
[09:02:09] <DaveMethvin> so markelog m_gol gibson042 timmywil  meeting?
[09:02:18] <timmywil> hi there
[09:02:19] <markelog> hey
[09:02:23] <gibson042> GIBSON042 IS READY
[09:02:32] <DaveMethvin> .ready()
[09:02:42] <DaveMethvin> awesome
[09:02:47] <DaveMethvin> so .... Trac
[09:02:50] <DaveMethvin> TRAC
[09:02:56] <m_gol> present
[09:02:57] <m_gol> haha
[09:03:03] <DaveMethvin> should we give up on it?
[09:03:12] <DaveMethvin> we'll need to keep it around read-only no matter what
[09:03:23] <DaveMethvin> but it doesn't seem like we're getting a lot of progress on fixing it
[09:03:31] <DaveMethvin> and our ticket volume is pretty small lately
[09:03:59] <DaveMethvin> maybe trac would be okay if we just used it r/o and turned off new tix and registrations
[09:04:05] <DaveMethvin> that would stop the spammers at least
[09:04:42] <DaveMethvin> thoughts?
[09:05:16] <m_gol> hm
[09:05:26] <m_gol> you said sth different on the list ;)
[09:05:43] <DaveMethvin> well that's before i tried using it this weekend :)
[09:06:13] <DaveMethvin> it's horrible right now
[09:06:53] <DaveMethvin> i dunno whether our low ticket volume is because we finally got the dumb people to stop posting help requests, or because people can't get it to create new tickets
[09:07:00] <DaveMethvin> it's been really quiet http://bugs.jquery.com/timeline
[09:07:05] <timmywil> I'm happy switching to something else
[09:07:28] <m_gol> scott_gonzalez didn't like an idea of switching to GitHub
[09:07:41] <m_gol> but I don't think we actually actively use most of the features
[09:08:00] <m_gol> most fields have finitely many options and can be recreated via labels
[09:08:02] <DaveMethvin> trac has so much promise, but we can't seem to make it work
[09:08:28] <m_gol> and even though it has its shortcomings, even such active projects as AngularJS use it so it seems possible ;)
[09:08:31] <DaveMethvin> and i don't like splitting our ticket database, but trac is pretty unusable
[09:08:47] <m_gol> it won't be that we'll suddenly get better, though
[09:08:52] <m_gol> we often need to reference old tickets
[09:09:02] <DaveMethvin> actually angular is not a good example, i think it needs a better tracker given the volume
[09:09:16] <m_gol> that's possible ;)
[09:09:21] <DaveMethvin> if we turn off new regs and ticket creation i think it would be better
[09:09:29] <m_gol> and we need to find a way to distinguish between GitHub tickets and Trac ones
[09:09:34] <DaveMethvin> the spammers have bots hitting us several times a minute
[09:09:41] <m_gol> since Fixes #NUMBER will be ambiguous
[09:09:47] <timmywil> m_gol: gh-
[09:09:52] <DaveMethvin> i think we should stick with gh-xxx for github and #xxx for old trac
[09:09:55] <m_gol> hmm, ok
[09:10:18] <DaveMethvin> github stil links those so it doesn't hurt us
[09:10:23] <m_gol> DaveMethvin: amazing, timmywil said the same in 3 chars ;(
[09:10:24] <m_gol> * ;)
[09:10:36] <m_gol> haha, I foresee a problem
[09:10:38] <DaveMethvin> gibson042 could have done it in 2
[09:10:39] <DaveMethvin> :)
[09:10:44] <m_gol> :)
[09:10:48] <timmywil> he's always refactoring my stuff
[09:10:51] <m_gol> GitHub will link #NUMBER to its own tickets
[09:11:07] <m_gol> not a problem now since most our tickets have large numbers
[09:11:09] <m_gol> but not all
[09:11:15] <DaveMethvin> yeah but the number spaces are pretty far apart right now so it won't breka
[09:11:16] <DaveMethvin> break
[09:11:26] <m_gol> for now :)
[09:11:30] <DaveMethvin> we rarely ref really old tickets
[09:11:40] <m_gol> when we reach the 14000th GitHub ticket we'll shut down ;)
[09:11:57] <DaveMethvin> altho we'll be cranking up the numbers on the gh side if we went full github
[09:12:03] <DaveMethvin> YOU NEVER GO FULL GITHUB
[09:12:24] <DaveMethvin> alright well when scott_gonzalez gets back i'll talk to him about it
[09:12:34] <m_gol> DaveMethvin: are we hit by spammers just via new tickets or comments etc. to existing ones as well?
[09:12:35] <DaveMethvin> he probably figures we'll switch to debt
[09:12:47] <m_gol> Trac+Debt+GitHub
[09:12:48] <DaveMethvin> the spammers register hundreds of email addys
[09:12:53] <m_gol> ouch
[09:12:54] <DaveMethvin> since we don't have validatoin
[09:12:57] <m_gol> so
[09:13:07] <DaveMethvin> and they *try* to create spam tix but the spam filter catches them
[09:13:09] <m_gol> what do we do if sb wants to comment on a Trac ticket & doesn't have an account?
[09:13:21] <m_gol> if we switch it off
[09:13:38] <DaveMethvin> i don't think we should let people comment on really old tix
[09:13:44] <DaveMethvin> it's a bug imo
[09:14:05] <DaveMethvin> we just get people either commenting on some bug that happens to give the same error message
[09:14:12] <DaveMethvin> or they have nothing useful to add on an old bug
[09:14:21] <DaveMethvin> like the recent one complaining about no XDR support
[09:14:36] <DaveMethvin> and the ticket clearly explains why there is no default XDR support
[09:14:49] <DaveMethvin> because XHR CORS is very differnt than XDR
[09:14:52] <m_gol> yeah, but it's not only about old tickets
[09:15:04] <m_gol> since we still use Trac, we have new tickets as well ;)
[09:15:16] <DaveMethvin> the ones for 1.12/2.2 we could port i guess
[09:15:16] <m_gol> and they won't get extremely old automatically after we switch ;)
[09:15:27] <DaveMethvin> there aren't a lot of open tickets
[09:15:30] <m_gol> maybe just all new/open that are not pending?
[09:15:44] <DaveMethvin> yeah it's small enough that we could do something like that
[09:15:48] <m_gol> k
[09:16:46] <DaveMethvin> i will make one last effort to see if we can get trac cleaned up
[09:17:01] <DaveMethvin> but with the small number of active tix i think a switch would be possible
[09:17:11] <m_gol> k
[09:17:23] <m_gol> (a year later... :P)
[09:17:50] <mikesherov_> .
[09:17:57] <DaveMethvin> okay, so last week i think we decided to go with the options object for $.xhr
[09:18:03] <DaveMethvin> i talked a bit with Scott about it
[09:18:16] <DaveMethvin> he really wants a lightweight $.xhr in 1.12
[09:18:28] <DaveMethvin> but the tradeoff will be that it may be kinda borked
[09:18:44] <DaveMethvin> we don't want to wrap the native xhr object
[09:18:53] <DaveMethvin> otherwise we get into the problems that $.ajax has
[09:18:59] <gibson042> so that means no `.send`?
[09:19:05] <DaveMethvin> yeah
[09:19:25] <DaveMethvin> it's a bit confusing from an api standpoint
[09:19:37] <DaveMethvin> because you start with an xhr-ish thing and it switches to a promisey thing
[09:19:43] <gibson042> but it really seems to solve/eliminate lots of problems
[09:19:54] <DaveMethvin> and augmenting promises that way isn't a good idea
[09:20:00] <mikesherov_> +1
[09:20:26] <DaveMethvin> that's the issue we have with jqXHR where's it's a "more than Deferrred"
[09:20:35] <DaveMethvin> so you have to be careful when chaining
[09:21:03] <mikesherov_> so, $.xhr always returns a promise? and how do you get at the xhr?
[09:21:20] <DaveMethvin> the xhr is the value returned
[09:21:33] <timmywil> $.xhr = $.ajaxSettings.xhr; // done
[09:21:45] <DaveMethvin> there is no ajaxSettings!
[09:21:48] <DaveMethvin> not in $.xhr
[09:21:53] <mikesherov_> so, no promises ?
[09:22:00] <timmywil> well, I was kidding. there is right now
[09:22:11] <DaveMethvin> yeah but prob in the ajax module
[09:22:40] <mikesherov_> and that gets rid of the need for a blessed promise lib?
[09:22:44] <DaveMethvin> mikesherov:  $.xhr({ ... settings ... }).then(function(xhr){ ....})
[09:23:07] <DaveMethvin> well the promise lib is another issue
[09:23:23] <mikesherov_> OH
[09:23:24] <mikesherov_> I get it
[09:23:30] <timmywil> hmm, I like that, but what about the successful response?
[09:23:41] <timmywil> .then(function(xhr, response) ?
[09:23:53] <DaveMethvin> we don't convert anything in $.xhr
[09:24:01] <DaveMethvin> if you want to convert you can chain a promise
[09:24:04] <m_gol> timmywil: there is no second argument
[09:24:12] <m_gol> unless we have an error
[09:24:14] <DaveMethvin> there can't be b/c promises only have one arg
[09:24:18] <DaveMethvin> even the fails
[09:24:25] <markelog> promises only have one argument
[09:24:30] <timmywil> of course
[09:24:31] <DaveMethvin> and fails are supposed to be FAIL, not "i got 404"
[09:24:48] <DaveMethvin> unless you want to throw an error on 404, which a helper could do for you
[09:25:00] <timmywil> ok, then you get the response off the xhr?
[09:25:24] <timmywil> not quite as convenient, but I guess I'd be fine with that
[09:25:27] <DaveMethvin> yeah you can get any of the xhr props and do something w it
[09:25:45] <mikesherov_> .then(function(xhr,response)) isn't a thing
[09:25:49] <mikesherov_> in native promises
[09:25:52] <DaveMethvin> or something like $.xhr().then(convertToJSON).then(function(json){ ... })
[09:25:54] <mikesherov_> you'd need to .spread
[09:25:55] <timmywil> mikesherov_: we've established that
[09:25:59] <mikesherov_> oh sorry
[09:26:03] <mikesherov_> only half listening
[09:26:31] <DaveMethvin> so convertToJSON would take the xhr.responseText and call JSON.parse on it
[09:26:41] <DaveMethvin> just a tiny helper
[09:26:43] <markelog> xhr would depend on deferred then?
[09:26:55] <DaveMethvin> no, it would depend on Promise
[09:27:01] <DaveMethvin> but that's another question
[09:27:02] <markelog> on a shim?
[09:27:04] <timmywil> DaveMethvin: maybe small enough that it could be included in the API? like $.xhr().then($.xhr.json)
[09:27:13] <DaveMethvin> timmywil: yeah my gist showed that
[09:27:18] <mikesherov_> right, timmywil like in Dave's initial gist
[09:27:22] <mikesherov_> jinx
[09:27:44] <DaveMethvin> markelog: that's one of my questions, i really think it should be "bring your own shim"
[09:27:45] <timmywil> ok, so many things have been discussed I don't know what API we're working off of
[09:27:52] <DaveMethvin> rather than us picking one
[09:28:12] <DaveMethvin> and also why i think the callback method should be there
[09:28:25] <DaveMethvin> if someone wants to use $.xhr with Deferred it should be possible and easy to do
[09:28:32] <DaveMethvin> no reason to go through Promise to get there
[09:28:40] <markelog> amm, so xhr imp would depend on env? If there a Promise function return it, if not return a native xhr object?
[09:28:59] <timmywil> I don't like the idea of varying return types
[09:29:00] <DaveMethvin> it would throw an error unless you had Promise
[09:29:12] <DaveMethvin> so it either returns Promise or doesn't work
[09:29:22] <m_gol> +1
[09:29:27] <DaveMethvin> $.xhr() returns Promise
[09:29:28] <timmywil> Promise option -> native -> break
[09:29:41] <DaveMethvin> $.xhrc( ) takes a callback
[09:29:57] <DaveMethvin> if someone wants to create $.xhrd() they can do it with $.xhrc()
[09:30:09] <markelog> so in order to use tiny helper for xhr you would need to use a shim?
[09:30:29] <timmywil> $.xhrc makes me cringe
[09:30:33] <mikesherov_> and this would rely on a global Promise object existing?
[09:30:50] <DaveMethvin> the native Promise is a global object, yeah
[09:31:05] <markelog> and whole lib now would need a dependency?
[09:31:15] <DaveMethvin> if you want to use Promise, yeah
[09:31:19] <gibson042> I think we just have to ship with an integrated shim... it's more jQueryish
[09:31:24] <mikesherov_> NPO is .4KB,
[09:31:43] <mikesherov_> and again, that's without any Gibson transform applied
[09:31:44] <markelog> so we would two impl of promises?
[09:31:50] <DaveMethvin> i'm concerned about choosing a shim for people
[09:31:59] <mikesherov_> no, one impl of promise, one impl of a thenable
[09:32:00] <DaveMethvin> we've never shimmed something by default
[09:32:22] <mikesherov_> and we can always go the "blessed" but not shipped with option
[09:32:23] <m_gol> DaveMethvin: we can do jQuery.Promise = window.Promise || shim
[09:32:24] <DaveMethvin> we can't remove Deferrred
[09:32:34] <m_gol> in the same fashion we have $.parseJSON etc.
[09:32:37] <DaveMethvin> m_gol: good point
[09:32:40] <DaveMethvin> and we should
[09:32:53] <markelog> shim like that should already do that
[09:33:03] <mikesherov_> right
[09:33:18] <DaveMethvin> the shim i saw set the global
[09:33:20] <m_gol> markelog: no, I mean to not overwrite window.Promise ever
[09:33:27] <mikesherov_> All popular promise shims already fallback to native
[09:33:30] <m_gol> only to define jQuery.Promise
[09:33:37] <m_gol> and use that
[09:33:38] <markelog> they should not overwrite it if it exist
[09:33:44] <DaveMethvin> right
[09:33:50] <markelog> so  jQuery.Promise = shim
[09:33:52] <markelog> nothing else
[09:33:53] <mikesherov_> right, jQuery.Promise = window.Promise
[09:34:00] <m_gol> markelog: I mean to not even create window.Promise at all if it doesn't exist
[09:34:09] <DaveMethvin> right, agreed
[09:34:16] <m_gol> most polyfills actually set the globals when not already defined
[09:34:20] <DaveMethvin> window.Promise should always be the native one
[09:34:20] <timmywil> markelog: well, I think jQuery.Promise = window.Promise || shim
[09:34:27] <m_gol> it's not jQueryish (TM gibson0421)
[09:34:29] <DaveMethvin> or the user has included some shim that is not ours
[09:34:49] <markelog> timmywil: shim would do that themselfs
[09:35:00] <timmywil> markelog?
[09:35:20] <markelog> i'm bad at explaing stuff :-)
[09:35:34] <m_gol> markelog: no, shim will do `if (!window.Promise) window.Promise = CODE`
[09:35:41] <DaveMethvin> i dunno why i didn't think about doing it that way, but jQuery.Promise makes the most sense
[09:36:19] <timmywil> I'd prefer if the shim didn't set any globals, just in case the user has some other lib that sets window.Promise
[09:36:24] <m_gol> yup
[09:36:39] <m_gol> and if they like our shim, they can always do window.Promise = jQuery.Promise themselves
[09:36:51] <DaveMethvin> yeah altho i'd advise against that
[09:36:54] <m_gol> :)
[09:36:57] <timmywil> heh
[09:37:08] <DaveMethvin> i just know we'll get a lot of bug reports
[09:37:13] <m_gol> haha
[09:37:16] <DaveMethvin> kind of like $.extend
[09:37:26] <DaveMethvin> "it doesn't behave right for this edge case!"
[09:37:39] <m_gol> hmm
[09:37:46] <m_gol> we don't actually have to expose it
[09:37:50] <m_gol> it can be a private module
[09:37:57] <DaveMethvin> true, we don't
[09:38:06] <DaveMethvin> altho if we carry the baggage we might as well expose it
[09:38:24] <DaveMethvin> perhaps we wait until we are confident in it before exposing
[09:38:25] <m_gol> because generally you're right, we wouldn't need to maintain things like jQuery.trim if we stopped needing it then
[09:38:52] <DaveMethvin> well i think we'll be stuck with a Promise shim for a decade now
[09:38:58] <m_gol> although if we ever stop needing the shim, `Promise: Promise` doesn't seem large ;)
[09:39:06] <m_gol> to keep in the code
[09:39:16] <m_gol> I'm optimistic, I say 5 years :P
[09:39:27] <DaveMethvin> custom builds, no problem, but there will be enough to keep it around
[09:39:34] <DaveMethvin> in the monolithic file
[09:39:45] <m_gol> well, IE8 won't be supported beyond Jan 2016 ;)
[09:39:48] <DaveMethvin> you think android 2.3 is gone in 5 years? :)
[09:39:53] <m_gol> hahaha
[09:40:06] <m_gol> k
[09:40:14] <DaveMethvin> well i'd look at trac tickets but it's SO SLOW
[09:40:17] <m_gol> I need to run in a moment
[09:40:23] <m_gol> so
[09:40:24] <m_gol> http://bugs.jquery.com/ticket/15205
[09:40:27] <m_gol> what do you think?
[09:40:57] <DaveMethvin> loading...
[09:41:12] <m_gol> to sum up for Tracless people: there's currently no way to dump all data kept
[09:41:21] <DaveMethvin> yeah i was thinking about that
[09:41:29] <DaveMethvin> remember there are things like the selector cache
[09:41:38] <m_gol> so if we create a detached element, do sth with it and lose reference, data is there forever
[09:41:46] <DaveMethvin> i dunno if resetting everything back to initial state is worth the work
[09:41:47] <m_gol> DaveMethvin: yeah, but that has limited size
[09:41:50] <m_gol> .data doesn't
[09:42:03] <DaveMethvin> once we switch to data attaching to elements it shoudlnt' be an issue
[09:42:28] <m_gol> I hope we won't stumble on large obstacles
[09:42:55] <m_gol> Igor Minar claims Chrome is not the best at cleaning up refs after large objects attached directly to nodes
[09:43:00] <DaveMethvin> the only case where we'd leak is special events for an element that attach events outside the element
[09:43:04] <DaveMethvin> at least that's the case i thought of
[09:43:29] <DaveMethvin> but that's not all so common
[09:43:34] <m_gol> Angular has test-related problems with that mostly
[09:43:37] <DaveMethvin> and it does get cleaned up if you call cleanData
[09:43:46] <m_gol> since in tests you often have detached elements that are discarded
[09:43:57] <DaveMethvin> so what does jqLite do m_gol ?
[09:44:04] <DaveMethvin> is that like 1.x?
[09:44:06] <m_gol> it mirrors jQuery 1 approach mostly
[09:44:07] <m_gol> yeah
[09:44:16] <DaveMethvin> ok so no really private cache
[09:44:18] <m_gol> and they dump jQuery.cache after each test
[09:44:22] <DaveMethvin> yeah
[09:44:49] <DaveMethvin> let
[09:44:51] <m_gol> it'd be easier if we had an init method or sth
[09:45:00] <DaveMethvin> let's get the new data stuff in place and see how it goes
[09:45:04] <m_gol> k
[09:45:17] <m_gol> so, milestone: 2.next
[09:45:17] <DaveMethvin> the thing is, there is no "central" location to dump the data once you move it to elements
[09:45:20] <DaveMethvin> but that's the point
[09:45:25] <m_gol> yeah, true
[09:45:29] <DaveMethvin> jQuery.cache is one leak waiting to happen
[09:45:43] <DaveMethvin> and the convenience of dumping it all only comes in handy during testing
[09:46:04] <m_gol> that's true
[09:46:32] <m_gol> k, gotta go, cu
[09:46:44] <DaveMethvin> alright, thanks
[09:46:51] <DaveMethvin> anybody else have issues?
[09:47:27] <DaveMethvin> I want to land a few of these accumulated PRs, can everyone go through and look/comment on them?
[09:48:27] <DaveMethvin> ok, that's all i have
[09:48:42] <DaveMethvin> anybody else?
[09:49:02] <DaveMethvin> alright, thanks guys!
