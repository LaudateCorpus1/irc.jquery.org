[12:02:23] <timmywil> m_gol, gibson042, DaveMethvin https://docs.google.com/document/d/1uhcW9_TlSwD8JnO1_HNnSYJAriTK9WYZ8uQNDvtAAhA/
[12:03:21] <gibson042> LETÂ´S DO THIS
[12:03:40] <timmywil> hai
[12:04:09] <markelog> hey-hey
[12:05:15] <timmywil> So, let's start with the elephant. DO we want to do this? https://github.com/jquery/jquery/pull/2850 It could be usefult to remove ready without removing Deferred, but I wonder if it is worth the 39 bytes.
[12:05:42] <timmywil> vice versa
[12:06:00] <markelog> with deffereds it looked much better
[12:06:33] <timmywil> that said, we could still make it so that jQuery.ready is a consumable, rather than keeping the promise method.
[12:06:34] <markelog> now try..catch
[12:06:49] <markelog> and while inside
[12:07:10] <markelog> and all that wrapped with if
[12:07:17] <timmywil> it's a bit messy
[12:07:31] <markelog> yeah, but looks better then initially )
[12:08:29] <timmywil> so, my idea is to keep the added tests, but conform to the behavior using Deferred.
[12:08:45] <timmywil> I just like Promise.resolve(jQuery.ready)_
[12:08:47] <m_gol> present
[12:08:50] <timmywil> -_
[12:08:51] <m_gol> sorry for the delay
[12:08:59] <gibson042> I agree with keeping the behavior
[12:09:05] <markelog> interesting
[12:09:14] <gibson042> no strong feelings about the dependency
[12:09:42] <timmywil> I can draw up a PR and we can discuss
[12:09:49] <markelog> i'm thinking that is needed for the users that build jquery themselves
[12:09:59] <gibson042> m_gol opened the original https://bugs.jquery.com/ticket/15174
[12:10:05] <markelog> i'm not sure if there is a lot of those users
[12:10:50] <timmywil> I wouldn't say needed, just a bonus if you want to remove Deferred without removing ready, but I wonder how often that actually happens. Personally, I don't remove remove Deferred when doing custom builds.
[12:11:08] <markelog> we could start using insight package to get a better picture btw
[12:11:47] <markelog> since we doing a lot of those builds, but it might just not worth the hassle
[12:12:23] <m_gol> if someone doesn't use effects or ajax it makes sense to remove Deferred
[12:12:42] <m_gol> I don't think it's that uncommon, e.g. Angular 1.x may use jQuery if present but those modules are not used
[12:12:45] <timmywil> seems like they can keep it if they want ready too
[12:12:55] <markelog> deffereds also useful by itself
[12:13:11] <markelog> not used?
[12:13:15] <timmywil> Angular could write their own ready
[12:13:33] <m_gol> it has ;)
[12:13:40] <timmywil> then...
[12:13:41] <markelog> like angular doesn't use ajax?
[12:13:44] <m_gol> nope
[12:13:53] <markelog> well it doesn't using anything )
[12:14:01] <markelog> it just using jquery if it is present
[12:14:07] <markelog> if not, their own thing
[12:14:15] <markelog> fetch then?
[12:14:16] <timmywil> I don't see them moving away from that
[12:14:19] <markelog> m_gol?
[12:14:26] <m_gol> it has its own $http service that relies on $q which is something like Q, Promises/A+ compliant for a long time etc.
[12:14:40] <markelog> what do they use for ajax?
[12:14:43] <m_gol> but it uses regular XHR under the hood
[12:14:58] <markelog> we do too )
[12:15:17] <markelog> it is still called jQuery.ajax right?
[12:15:30] <timmywil> it's called $http
[12:15:49] <markelog> which uses the jQuery.ajax if jquery is present?
[12:15:52] <m_gol> no
[12:15:52] <timmywil> which uses jQuery.ajax if present, but otherwise falls back to its own implementation
[12:15:54] <m_gol> never
[12:15:59] <timmywil> oh okay
[12:15:59] <markelog> ))
[12:16:04] <timmywil> I just assumed
[12:16:11] <markelog> me too
[12:16:19] <m_gol> it uses jQuery if present for DOM manip stuff & queries
[12:16:24] <timmywil> I see
[12:16:28] <m_gol> not for AJAX/promises/effects
[12:16:29] <markelog> only for that?
[12:16:58] <markelog> hm, but anyway we degress
[12:17:01] <timmywil> if they keep their own ready, seems like they could still do a custom build without either ready or deferred
[12:17:11] <m_gol> yeah
[12:17:12] <markelog> it doesn't mean that angular users build their own jquery for it
[12:17:16] <m_gol> that was just one example
[12:17:34] <m_gol> yes, Angular doesn't ship with jQuery, you can just attach your own one
[12:17:42] <markelog> yeah, anyway, in what direction are we leaning to?
[12:17:54] <m_gol> they use this: https://github.com/angular/angular.js/blob/8bda5ec7350705fe6e80549321105536546b3372/src/jqLite.js#L53-L91
[12:18:21] <timmywil> I'm leaning towards not landing this, but let me present another PR next week that keeps the Promise-consumable behavior
[12:18:45] <markelog> how it would differ from what we have now in master?
[12:18:55] <markelog> oh
[12:18:58] <m_gol> I'd love to see core/ready without large dependencies but it's not the most important thing in the world...
[12:18:59] <markelog> sorry, get it)
[12:19:13] <markelog> would be cool to use insight though
[12:19:18] <markelog> how is that sound?
[12:19:22] <timmywil> what is insight?
[12:19:37] <markelog> do the npm repo insight
[12:19:47] <markelog> useful thingy)
[12:19:48] <markelog> insight
[12:19:53] <markelog> https://github.com/yeoman/insight
[12:20:15] <timmywil> oh, interesting
[12:20:37] <markelog> might also be good to move our grunt task from main repo
[12:21:38] <markelog> how about i will create a ticket for it, sounds good?
[12:21:47] <m_gol> we'd need to ask for permission to collect data, does it provide such an option?
[12:21:52] <timmywil> it does
[12:21:56] <timmywil> has an optout
[12:22:05] <timmywil> ticket sounds good
[12:22:29] <m_gol> yeah
[12:22:43] <m_gol> I'm pretty sure it will break people's builds, though
[12:22:49] <m_gol> those permission prompts always do
[12:23:03] <markelog> created https://github.com/jquery/jquery/issues/2890
[12:23:38] <markelog> yeah, if we do this, we would need to be careful about it
[12:23:40] <timmywil> gibson042 https://github.com/jquery/jquery/issues/2073 I'm fine if we want to deprecate all but one property.
[12:23:44] <m_gol> a lot of people hit that problem when Bower started using it
[12:24:16] <timmywil> maybe we could only run it for grunt custom
[12:24:52] <markelog> or we could enable it all the way and check out user reaction)
[12:25:03] <markelog> also would provide some stats )
[12:26:36] <markelog> what's next?
[12:26:39] <timmywil> Of [":"], filters, and pseudos, is filters our preferred property for custom pseudoes. I can standardize this in the repo.
[12:27:31] <gibson042> does anyone have a preference between `pseudos` and `filters`?
[12:27:44] <timmywil> The only place I know of that documents this is the Sizzle wiki https://github.com/jquery/sizzle/wiki#-backwards-compatible-plugins-for-pseudos-with-arguments
[12:27:50] <timmywil> which uses [":"]
[12:28:20] <markelog> how css spec call these things?
[12:28:36] <timmywil> well, it doesn't have a mechanism for custom selectors
[12:29:05] <gibson042> ...but it calls such selectors "pseudo-class"
[12:29:19] <timmywil> technically, filters are pseudos are both semantically correct.
[12:29:23] <gibson042> https://drafts.csswg.org/selectors-4/#pseudo-classes
[12:29:29] <timmywil> but pseudos is more precise in terms of the kind of selector
[12:29:30] <markelog> but we like "filters"?
[12:29:46] <markelog> i'd say whenever spec call similar entities
[12:29:47] <gibson042> I could go either way
[12:30:08] <markelog> so i guess i would be in favour of pseudos
[12:30:10] <m_gol> aligning more with the spec sounds good
[12:30:36] <markelog> yeah, let other people bikeshed that thing
[12:30:48] <gibson042> cool; "pseudos" it is
[12:31:00] <timmywil> okay
[12:31:21] <m_gol> One thing about core/ready - plugins might need it as they can't know they're loaded at the bottom of body; that would mean plugins depend on Deferred even if they don't really need them. And this adds to final size.
[12:31:46] <timmywil> my question now is, how do we deprecate this? Update the Sizzle wiki and add a page for creating custom selectors to api.jquery.com?
[12:31:52] <m_gol> of course plugins can define their own ready... but that's not a one-liner so few of them would do it
[12:32:19] <markelog> probably migrate should do something about it too
[12:32:59] <timmywil> perhaps, yea
[12:33:11] <DaveMethvin> hi guys, sorry, catching up with the meeting notes now
[12:33:16] <markelog> hey-hey Dave!
[12:33:58] <m_gol> hi
[12:34:33] <timmywil> Another possibly big convo is this one. https://github.com/jquery/jquery/issues/2863
[12:34:34] <gibson042> timmywil: sounds good to me
[12:35:35] <markelog> oh, yeah, exhausting much
[12:35:58] <timmywil> heh
[12:36:10] <markelog> to cut things short i can do a pr, with perf and all that
[12:36:29] <markelog> it might show what kind of things we should do from my perspective
[12:36:34] <timmywil> that would make this easier to review
[12:37:01] <timmywil> and save us time right now
[12:37:14] <m_gol> timmywil: we don't have a tagname error in Android 4.4, I've fixed it last week. I've removed the note about that from the doc
[12:37:26] <timmywil> m_gol: oh, great, thanks!
[12:37:27] <markelog> okay, so if no one objects, i will do a pr and we can finalize those questions there
[12:37:29] <m_gol> only the IE9 one failure is still there
[12:37:34] <timmywil> yea, I need to get on that
[12:37:41] <timmywil> I'm hoping it's a test issue
[12:37:49] <markelog> should be!
[12:37:52] <markelog> looks very weird
[12:38:00] <m_gol> otherwise a revert would be needed...
[12:38:14] <markelog> you very radical m_gol)
[12:38:18] <timmywil> so markelog will do a PR and we'll discuss further from there
[12:38:19] <m_gol> ;)
[12:38:26] <markelog> coolsies
[12:38:46] <markelog> cc gibson042
[12:38:48] <timmywil> Lastly, I leave this one up to DaveMethvin https://github.com/jquery/jquery/pull/2860
[12:39:07] <m_gol> looks like it could improve a lot
[12:39:10] <DaveMethvin> i like it, any other opinions?
[12:39:17] <gibson042> I like it
[12:39:17] <DaveMethvin> i can review and land it if you want this week
[12:39:17] <markelog> weeell )
[12:39:25] <DaveMethvin> haha
[12:39:36] <markelog> i'd say it should be faster
[12:39:42] <m_gol> we still need to benchmark of course
[12:39:46] <markelog> definitely
[12:39:55] <markelog> but landing without bench
[12:40:13] <markelog> putting my preferences aside that is
[12:40:43] <DaveMethvin> let me take a look and if the perf is good I can land it
[12:40:48] <timmywil> DaveMethvin: +1
[12:40:50] <m_gol> but since browsers already use getters for that, I doubt we'd be incurring a large perf penalty for using getters on our side, too
[12:41:07] <DaveMethvin> plus we get a BIG boost for cases where we are forcing layout
[12:41:10] <markelog> sounds good to me
[12:41:11] <m_gol> yup
[12:41:12] <DaveMethvin> which was why we wanted to try this
[12:41:27] <timmywil> that's all I have for today. anything to add?
[12:41:30] <markelog> are you gonna profile it, or use jsperf?
[12:41:37] <markelog> yeah!
[12:41:39] <DaveMethvin> i will probably profile it
[12:41:42] <markelog> i have couple things
[12:41:45] <m_gol> I'd like scott_gonzalez opinion on the core/ready stuff
[12:41:48] <markelog> DaveMethvin: cool
[12:41:57] <timmywil> markelog: add to agenda too
[12:42:02] <markelog> ok-ok
[12:42:13] <m_gol> it seems minor but I have an impression plugins needs ready and that makes any code that uses plugins depend on Deferred even if not really needed
[12:42:52] <DaveMethvin> yeah that is a really unfortunate dependency in the long term i would think
[12:43:05] <timmywil> DaveMethvin: why?
[12:43:14] <m_gol> we could recomment to use the $(fn) form and people excluding ready would just have to care to put scripts at the bottom but lots of plugins use $(document).ready(fn) and it doesn't seem people are in favor of deprecating that
[12:43:16] <DaveMethvin> pulling in Deferred just for ready seems wasteful
[12:43:32] <timmywil> so does adding 40 bytes for a use case that may be rare
[12:43:51] <DaveMethvin> if it's not a breaking change it can be done later in a 3.x
[12:43:53] <markelog> well deferred is not that big of a module
[12:43:57] <DaveMethvin> or pushed to 4.0 i guess
[12:44:03] <m_gol> it may be rare because custom building jQuery is not so easy
[12:44:05] <markelog> it certainly would be nicer without it
[12:44:06] <gibson042> it's pretty big
[12:44:13] <markelog> relatively
[12:44:20] <gibson042> Deferred+Callbacks
[12:44:28] <markelog> but in absolute numbers 3-5 kb?
[12:44:35] <DaveMethvin> well plus it's just a different impl of Promise that people may not need in a year's time
[12:44:38] <markelog> even for mobile
[12:44:54] <markelog> didn't we change that?
[12:45:01] <timmywil> DaveMethvin: true, but if that day comes, I'd be more inclined to drop Deferred altogether.
[12:45:15] <markelog> i think in the future, we could use standart promises - natives
[12:45:26] <m_gol> timmywil: IE11 doesn't have ES6 Promise so I don't see that happening within the next 8 years
[12:45:53] <markelog> wow 8?
[12:46:05] <m_gol> that's when support for Windows 8.1 ends
[12:46:12] <m_gol> well, 7.5 years
[12:46:20] <DaveMethvin> yeah don't exaggerate :P
[12:46:25] <timmywil> ha
[12:46:27] <DaveMethvin> that's a LONG time
[12:46:33] <markelog> hm, and next version should be 12?
[12:46:40] <markelog> maybe they will release an update for ir
[12:46:43] <markelog> *it
[12:46:44] <DaveMethvin> ie11 is the last ie
[12:46:45] <m_gol> they won't
[12:46:49] <DaveMethvin> they don't plan on adding anything to it
[12:46:50] <markelog> tomorrow or something
[12:46:51] <m_gol> edge is the current browser, IE is frozen
[12:47:05] <m_gol> we now even depend on IE11 not getting their bugs fixed :P
[12:47:05] <markelog> gush
[12:47:11] <timmywil> I have an idea. What about adding these 40 bytes at custom build time?
[12:47:25] <DaveMethvin> kind of like the alt selector engine?
[12:47:25] <gibson042> oooh, nice
[12:47:34] <markelog> that what i was thinking)
[12:47:37] <DaveMethvin> that could work
[12:47:47] <m_gol> timmywil: ha. didn't think about it and it sounds good
[12:47:55] <markelog> timmywil is the hero!
[12:47:57] <timmywil> ok, I can do a PR.
[12:48:05] <DaveMethvin> por que no los dos?
[12:48:21] * DaveMethvin raises timmywil on shoulders and shouts ole!
[12:48:44] <markelog> damn, now i'm gonna loose sleep because of it, i wanted to propose it, why didn't i
[12:48:51] <m_gol> ;)
[12:49:25] <markelog> okay, so i have an item
[12:49:34] <timmywil> https://github.com/jquery/jquery-migrate/issues/111
[12:49:38] <markelog> yes
[12:49:47] <markelog> i think it is pretty serious than it looks
[12:49:57] <markelog> i have provided a pr for that
[12:50:01] <gibson042> FWIW, `grunt custom:-callbacks,-deferred uglify dist compare_size` yields -1258, but it's not quite fair because of reasons above
[12:50:07] <markelog> but i think we should mention it in the blog post
[12:50:28] <markelog> gibson042: i knew you trying to detect the real size!
[12:50:31] <DaveMethvin> yeah that's good, thanks markelog
[12:50:37] <markelog> just knew!
[12:50:38] <gibson042> :P
[12:51:03] <markelog> i checked out couple effects plugins, they all use those params
[12:51:08] <markelog> for some reason
[12:51:16] <DaveMethvin> huh
[12:51:26] <markelog> so it could be big breaking thing
[12:52:05] <markelog> okay, that is it from me
[12:52:14] <m_gol> another thing: DaveMethvin: does Migrate warn against "[href=#]"-like selectors? would that be hard? we get a lot of issues about this change
[12:52:26] <m_gol> I've already closed a few
[12:52:41] <DaveMethvin> i suppose it could be checked with a regex?
[12:52:47] <DaveMethvin> it doesn't check right now
[12:52:57] <markelog> doesn't it already warns?
[12:53:00] <markelog> not with migrate
[12:53:06] <markelog> but through sizzle
[12:53:16] <m_gol> how so
[12:53:17] <m_gol> ?
[12:53:23] <DaveMethvin> well it gives an error and stops the program already
[12:53:29] <markelog> it throws a error right?
[12:53:35] <gibson042> yeah
[12:53:43] <markelog> so we can just try to resurrect that behaviour in migrate?
[12:53:52] <DaveMethvin> but i think the idea is that Migrate could give a warning explaining what is happening so they wouldn't report the bug
[12:54:01] <DaveMethvin> and perhaps try to fix it, although that might be tricky
[12:54:25] <timmywil> you could revert the regex we changed in sizzle and warn when selector contains [href=#]
[12:54:34] <markelog> i thinking we don't need to go in sizzle internals
[12:55:08] <m_gol> yeah, the most frequent case is [href=#sth]
[12:55:15] <m_gol> where sth may be ""
[12:55:21] <m_gol> I mean, nothing
[12:55:21] <DaveMethvin> that could be detected pretty reliably i guess?
[12:55:33] <m_gol> yeah, should be. at least those cases
[12:55:51] <m_gol> https://github.com/jquery/jquery-migrate/issues/140
[12:56:31] <markelog> oh
[12:56:33] <markelog> https://github.com/jquery/jquery-migrate/issues/141
[12:56:34] <markelog> )
[12:56:39] <markelog> 34 seconds before me)
[12:57:34] <markelog> 26 even
[12:57:49] <gibson0421> I lost the past couple of minutes, but for the record am against updating behavior so [href=#] works again
[12:58:01] <markelog> i'm full of caffeine today
[12:58:01] <gibson0421> warnings are cool, though
[12:58:05] <timmywil> gibson0421: don't worry, just talking about a warning in migrate
[12:58:12] <markelog> gibson0421: even for migrate?
[12:58:23] <timmywil> oh, even for migrate
[12:58:29] <timmywil> no shim?
[12:58:46] <gibson0421> correcting it would be a HUGE pain because you have to tokenize the invalid selector
[12:58:46] <timmywil> I mean, it technically wasn't documented, but we usually shim things along with warnings
[12:58:53] <DaveMethvin> i think we should be able to shim it
[12:59:11] <timmywil> gibson0421: wouldn't the shim be a change to a Sizzle regex?
[12:59:16] <timmywil> let Sizzle do the tokenizing
[12:59:38] <gibson0421> but that's just it; `[href=#]` DOESN'T tokenize
[12:59:42] <DaveMethvin> was the change in Sizzle done to fix some other parsing issues?
[12:59:58] <timmywil> gibson0421: it used to, and would again with a change to the regex, right?
[13:00:14] <gibson0421> it's not an exposed regex
[13:00:18] <timmywil> oh
[13:00:19] <DaveMethvin> since it's not standard behavior i wouldn't mess with hit
[13:00:20] <scott_gonzalez> m_gol: Sorry, just the ping re core/ready. I'm busy right now, but am happy to discuss in a little bit in #jquery-dev.
[13:00:42] <markelog> scott_gonzalez: we can cc you in relevant issue
[13:00:44] <DaveMethvin> we can fix the specific case ppl are reporting by rewriting the selector i think
[13:00:52] <DaveMethvin> that way we don't need to mess with Sizzle
[13:01:00] <gibson0421> to do it right, you'd have to tokenize
[13:01:25] <gibson0421> `[pathological="[href=#]"]` et al.
[13:01:28] <DaveMethvin> yes, if we just fix the case ppl are reporting i think it would be simpler tho
[13:01:29] <m_gol> $( "[foo='a[href=#]']" )
[13:01:32] <m_gol> right
[13:01:47] <DaveMethvin> there are definitely strange cases but those don't seem to be the ones ppl are reporting
[13:01:58] <gibson0421> I think https://github.com/jquery/sizzle/commit/a060f6148ab14089cd671165a04780a73950da75 is the Sizzle change
[13:01:59] <m_gol> I linked 6 issues that people reported
[13:02:07] <m_gol> in https://github.com/jquery/jquery-migrate/issues/140
[13:02:14] <DaveMethvin> they just want [href=#abc] to work afaict
[13:02:21] <m_gol> we can see how different they are to each other
[13:02:22] <scott_gonzalez> markelog: Sounds good. I've sort of been following the thread.
[13:03:13] <timmywil> gibson0421: I think it was the commit that unified characterEncoding and identifier
[13:03:29] <DaveMethvin> m_gol: 3 of them seem to be from the same plugin, or at least use the same regex, and it's a simple case
[13:03:37] <markelog> scott_gonzalez: will do
[13:03:47] <gibson0421> yeah, timmywil is right
[13:03:48] <gibson0421> https://github.com/jquery/sizzle/commit/f204a6112216f31685717d9fc1bf6cabf42b2ef1
[13:04:13] <m_gol> all 6 issues mention selectors in the form of "no-opening-square-bracket[href=#no-closing-square-bracket]no-closing-square-bracket"
[13:05:11] <m_gol> these ones should be detectable via a regex
[13:05:25] <gibson0421> `:contains("pathological=[href=#]")`
[13:05:34] <timmywil> lol, pathological
[13:05:38] <DaveMethvin> even if we screw up a pathological case it would have died anyway
[13:05:46] <gibson0421> no, it wouldn't
[13:05:51] <gibson0421> the above selector is valid
[13:05:56] <gibson0421> for Sizzle
[13:06:01] <DaveMethvin> ok right
[13:06:11] <DaveMethvin> but again that's pathological!
[13:06:17] <gibson0421> I'm ok with false positives for warnings
[13:06:18] <markelog> we could just use "might be an invalid selector"
[13:06:23] <gibson0421> but for rewriting, much less so
[13:06:26] <gibson0421> exactly
[13:06:27] <m_gol> 5 out of 6 of these issues have selectors starting with a[href*=#]
[13:06:44] <m_gol> * 4 of 6
[13:06:50] <markelog> same problem though
[13:06:54] <timmywil> m_gol: yea, gibson0421's point is that by shimming it, we might create problems for selectors that still work the same
[13:06:56] <markelog> with false-positives
[13:07:35] <m_gol> ok, if it's hard & unreliable to correct then just adding a warning would be helpful
[13:07:42] <timmywil> I'm fine with just an explanation in the warning
[13:07:52] <timmywil> this was technically always invalid
[13:07:54] <DaveMethvin> in reality people reporting this won't bother to use Migrate, sorry to say
[13:08:10] <DaveMethvin> we'll just have the joy of telling them, "you should use Migrate"
[13:08:15] <gibson0421> :)
[13:08:31] <DaveMethvin> this needs to go into a 1.3.1 and the 3.0.0
[13:08:43] <m_gol> we'll have to say that a lot...
[13:08:51] <markelog> DaveMethvin: oh, well, i think most smart ppl use migrate
[13:09:20] <timmywil> alright, we're out of time
[13:09:25] <m_gol> since this was reported even twice in a row... 2884 & 2885
[13:09:27] <m_gol> right
[13:09:42] <timmywil> let's continue discussion in dev, tickets or defer to next week
[13:09:58] <DaveMethvin> k
[13:09:58] <timmywil> thanks everybody
[13:10:03] <m_gol> cu
