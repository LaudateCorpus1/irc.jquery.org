[09:02:03] <mikesherov> hi
[09:02:57] <DaveMethvin> hey!
[09:03:05] <DaveMethvin> who else is here?
[09:03:37] <DaveMethvin> some folks may still be traveling back, not sure when m_gol and markelog were going to be home
[09:04:46] <mikesherov> hi?
[09:04:52] <DaveMethvin> maybe just you and me mikesherov
[09:04:59] <mikesherov> oh, hi DaveMethvin
[09:05:13] <mikesherov> stars don't mean shit
[09:05:15] <DaveMethvin> lol
[09:05:22] <DaveMethvin> well they DON'T
[09:05:37] <mikesherov> I concur
[09:05:46] <DaveMethvin> okay, now we have a party
[09:06:12] <DaveMethvin> i saw some tweets from rwaldron at IDF last week, sounds like they were having fun
[09:06:36] <DaveMethvin> so i drank his beer in chicago, serves him right
[09:06:38] <DaveMethvin> :)
[09:06:51] <DaveMethvin> let me start an agenda
[09:09:35] <DaveMethvin> m_gol made some good progress on getting the Promises/A+ suite to pass on jauborgs branch
[09:09:55] <DaveMethvin> we can catch up with him later and see what needs to be done still
[09:10:03] <DaveMethvin> but it seemed like it was mostly minor stuff
[09:10:10] <DaveMethvin> related to error cases and bad args
[09:10:21] <DaveMethvin> like what .then(5) does
[09:10:38] <DaveMethvin> 5 IS NOT A FUNCTION, GOOD DAY SIR!
[09:11:09] <gibson042> the latest I saw (Friday) was problems with value unwrapping
[09:11:15] <gibson042> but they're of a similar character
[09:11:28] <DaveMethvin> seems like they're not killer at least
[09:11:41] <DaveMethvin> and i was happy to see that it got that close with very little extra code
[09:11:51] <gibson042> and there's still the problem around `dfd.done( fnThrows ).then( neverCalled )`
[09:11:55] <gibson042> but yeah
[09:12:09] <DaveMethvin> yeah
[09:12:10] <gibson042> they're.... resolvable
[09:12:19] <gibson042> 8-)
[09:12:19] <mikesherov> BADUM-CHING
[09:12:35] <DaveMethvin> that one is ugly but we could do some sort of console warn i guess?
[09:12:45] <DaveMethvin> pipe will be there for people who want an error
[09:12:56] <gibson042> I think we just keep separate callbacks lists for .then, and invoke them first
[09:13:26] <mikesherov> well
[09:13:39] <mikesherov> can we discuss pipe for a moment
[09:13:46] <DaveMethvin> sure
[09:13:59] <mikesherov> considering the call from domenic to expose what we've been bitching about
[09:14:05] <mikesherov> do we need it?
[09:14:13] <DaveMethvin> for old browsers, yes
[09:14:21] <mikesherov> let me rephrase
[09:14:22] <DaveMethvin> but yes it's nice they are doing the onerror thang
[09:14:37] <mikesherov> perhaps we can polyfill
[09:14:51] <mikesherov> or prollyfill instead
[09:15:09] <mikesherov> that is figure out how to instrument in the proposed way in old browser?
[09:15:12] <DaveMethvin> the basic backcompat deferred isn't promise/a compliant and really can't be made to do that without even more breakage
[09:15:19] <mikesherov> right
[09:15:28] <DaveMethvin> so pipe is just a way to get the old non-promise/a behavior
[09:15:32] <mikesherov> right
[09:15:36] <gibson042> but we can have an analog for Promise.unhandledRejections
[09:15:40] <mikesherov> let me rephrase further
[09:15:45] <gibson042> added by plugin, even
[09:15:55] <mikesherov> yeah, what gibson042 said
[09:16:01] <DaveMethvin> oh sure
[09:17:16] <DaveMethvin> do you have a link to that proposal?
[09:17:54] <DaveMethvin> looking now
[09:18:23] <gibson042> [whatwg] An API for unhandled promise rejections
[09:19:09] <DaveMethvin> right, just was looking for a public link
[09:19:24] <mikesherov> so, if jQuery is a first mover on this
[09:19:25] <DaveMethvin> there are several tix related but none that have the proposal afaict
[09:19:42] <mikesherov> DaveMethvin: James forwarded it to the group
[09:19:46] <mikesherov> check your email
[09:19:48] <gibson042> http://lists.whatwg.org/htdig.cgi/whatwg-whatwg.org/2014-September/297601.html
[09:19:49] <DaveMethvin> i know, it's in email
[09:19:58] <DaveMethvin> but i can't link to the email :)
[09:20:04] <mikesherov> oh ha
[09:20:15] <DaveMethvin> yeah that's the one i wanted, thanks gibson042
[09:20:38] <JamesMGreene> Gotta love "classic" email group systems  ;)
[09:21:34] <DaveMethvin> yeah, uhhhhgly
[09:22:20] <gibson042> at any rate, <3 `Array.observe( Promise.unhandledRejections, dealWithIt )`
[09:22:40] <mikesherov> `Array.observe( Promise.unhandledRejections, putOnSunglasses )`
[09:22:46] <DaveMethvin> for our impl i suppose the most delay we could muster would be to setTimeout to give any attached handlers a chance to deal with it
[09:22:50] <DaveMethvin> lol
[09:23:04] <mikesherov> DaveMethvin: that's the canonical
[09:24:01] <DaveMethvin> alright, so who's gonna take this one the rest of the way? I can check with jaubourg on his availability
[09:24:02] <gibson042> Array.observe( Promise.unhandledRejections, youCantAlwaysGetWhatYouWant )
[09:24:23] <DaveMethvin> since he got it this far and m_gol has the testing pretty close
[09:24:36] <mikesherov> I can't muster the strength to make a reference to "try"ing sometimes
[09:25:10] <mikesherov> btw, for reference: https://github.com/petkaantonov/bluebird#error-handling
[09:25:29] <DaveMethvin> yeah there is some gold in the bluebird repo
[09:25:44] <DaveMethvin> petka's stuff on v8 perf is great
[09:26:08] <mikesherov> "The second approach, which is what bluebird by default takes, is to call a registered handler if a rejection is unhandled by the start of a second turn"
[09:26:32] <mikesherov> I think we should adopt this approach in concert with Bluebird and in step with the domenic proposal
[09:26:50] <DaveMethvin> and i see why that's attractive, but we already have the onerror plumbing doing the job
[09:27:08] <DaveMethvin> it's the "code barfs" situation
[09:27:35] <DaveMethvin> if someone explicitly wants to handle errors in ex-post-facto they can always attach an error handler up front
[09:27:54] <mikesherov> the difference though is in first vs. second turn
[09:28:12] <DaveMethvin> the onerror proposal handles first turn right?
[09:28:28] <mikesherov> no?
[09:28:39] <mikesherov> I couldn't really tell with gibson042 either
[09:29:08] <gibson042> yeah, I really want to put our weight behind the Promise.unhandledRejections footnote
[09:29:10] <DaveMethvin> i thought the bulleted process was talking about doing the error check after the turn
[09:29:18] <gibson042> instead of onerror
[09:29:22] <gibson042> how do we go about that?
[09:29:46] <DaveMethvin> what happens if there is no Promise.unhandledRejections hander tho
[09:29:55] <DaveMethvin> does it fall back to onerror?
[09:29:59] <gibson042> no... that property is an array, not a handler
[09:30:13] <gibson042> `.observe` to your heart's content, or lack thereof
[09:30:28] <gibson042> no handler means errors get swallowed as they do now
[09:30:40] <DaveMethvin> ok but how does this get handled for people who arent' looking?
[09:30:50] <gibson042> and for the love of all things holy, don't touch onerror
[09:30:58] <DaveMethvin> basically if everyone starts using Promise today, there is nobody looking
[09:31:04] <mikesherov> DaveMethvin: still swallowed
[09:31:07] <gibson042> yep
[09:31:09] <DaveMethvin> that's not good, right?
[09:31:13] <mikesherov> but it's there for libs to address
[09:31:22] <mikesherov> basically, it's the promise spec saying
[09:31:38] <gibson042> right now, the problem isn't that nobody is looking... it's that there's no place TO look
[09:31:41] <mikesherov> "Yes, jQuery, it is good for you to give your users a way to know about unhandled rejections
[09:31:52] <mikesherov> here is the thing you SHOULD hook into
[09:31:59] <mikesherov> rather than causing a break
[09:32:25] <mikesherov> so we'd swallow errors just like everyone else
[09:32:30] <mikesherov> no code barfing
[09:32:51] <mikesherov> but we'd e.g. console.log the possiblyUnhandledRejections
[09:32:52] <DaveMethvin> to me, it's much more likely that unhandled rejections that are engine-thrown errors are coding problems that will become
[09:32:59] <DaveMethvin> really hard to track if they are hidden by default
[09:33:05] <mikesherov> Right
[09:33:08] <DaveMethvin> it would be like having no console messages on errors
[09:33:12] <mikesherov> we can have an opinion here
[09:33:32] <mikesherov> meaning, the actual spec now gives you a way as a library to give the errors by default if you want
[09:33:37] <mikesherov> but still discourages the barfing
[09:33:55] <mikesherov> like "pause on uncaught exception" or "don't"
[09:33:57] <DaveMethvin> well either way whether you onerror them or console them, it would seem better to have a way for a "i know what i'm doing" user to silence them
[09:34:07] <mikesherov> Right
[09:34:22] <mikesherov> so we as jQuery would say "by default, you don't know what you're doing"
[09:34:41] <DaveMethvin> so if you know your code will induce a browser to throw a SyntaxError (which seems pretty rare) ...
[09:34:57] <DaveMethvin> you could attach a preemptive reject handler to your  promise
[09:35:06] <mikesherov> and the default thing would be we don't barf on unhandledRejection, but we do loudly complain about it in the console
[09:35:57] <DaveMethvin> would we assume that most RUM tools ferry back console messages? i know some of them do at least
[09:36:07] <mikesherov> and then users could say "relax, jQuery, I'm weird and I attach error handlers async so don't even complain when an unhandledrejection happens
[09:36:32] <mikesherov> so, that's the other problem
[09:36:45] <mikesherov> the assumption of "console"
[09:36:57] <mikesherov> and it being the thing we write to
[09:36:58] <DaveMethvin> i know that most of them do ferry back onerror, that's the one main thing they all do
[09:37:25] <DaveMethvin> well there's jQuery.error :)
[09:37:32] <mikesherov> yah
[09:37:38] <mikesherov> was going to say that
[09:37:45] <DaveMethvin> we'll just throw then !
[09:37:57] <DaveMethvin> dunnot want to do that :)
[09:38:11] <mikesherov> but we could throw in another turn
[09:38:28] <mikesherov> meaning, if we really wanted to, we could async the throw into it's own stack
[09:39:05] <mikesherov> anyway, worth investigating this now
[09:39:06] <DaveMethvin> it might be worth raising this discussion in a larger group to see if we can track whatever is going to happen with the standard thing
[09:39:12] <mikesherov> ya
[09:39:27] <DaveMethvin> don't want to go off on our own and be accused of not playing nicely with others
[09:39:31] <mikesherov> so that we can support that
[09:39:32] <mikesherov> you know
[09:39:37] <mikesherov> as part of our mission
[09:40:29] <DaveMethvin> mike do you want to reach out to a few folks on this?
[09:41:04] <mikesherov> I suppose I could although it's a tad over my head
[09:41:17] <DaveMethvin> it's over ALL our heads :)
[09:41:21] <mikesherov> ha
[09:41:30] <mikesherov> OK, so I'll reach out for sure
[09:41:52] <DaveMethvin> sounded like gibson042 liked domenic's proposal over onerror as ewll
[09:41:53] <DaveMethvin> well
[09:42:18] <gibson042> I definitely prefer the observable to screwing with (or even assuming) onerror
[09:42:26] <mikesherov> basically saying that "jQuery wants to follow the standard here, but with the slight angle that we're going to implement the standard with the assumption of least supression"
[09:42:33] <gibson042> but domenic was sneaky; he put both in and spent almost no time on the good one
[09:42:51] <DaveMethvin> mainly i want something that yells by default so it won't get lost ... other than that i'm flexible
[09:43:04] <mikesherov> so I'll just represent us making sure that when Joe the plumber downloads jQuery the first time and uses prmises the first time, his syntaxerror is surfaced, not swallowed
[09:43:10] <DaveMethvin> yes
[09:43:32] <mikesherov> great
[09:43:40] <mikesherov> so I'll reach out to Domenic then?
[09:43:43] <DaveMethvin> yes
[09:44:02] <DaveMethvin> maybe we can get him to write a spec for us or someting :D
[09:44:25] <DaveMethvin> ok then now that we have promises we can do xhr!
[09:45:03] <DaveMethvin> if we're dropping ie6/7 support i think we are okay, the old activex xhr in IE didn't have events
[09:45:09] <DaveMethvin> but the one in ie8 does
[09:45:22] <DaveMethvin> although i haven't checked to see if they work ...
[09:45:27] <gibson042> grunt custom:iknowwhatimdoing ⇒ "Array.observe( jQuery.Deferred.unhandledRejections, jQuery.error )" :)
[09:45:52] <DaveMethvin> nice and small too
[09:46:09] <gibson042> a little bigger in practice, but yeah
[09:46:41] <mikesherov> now we just need to conjure Array.observe out of thin air
[09:46:53] <gibson042> :P
[09:46:58] <DaveMethvin> gibson042: were you going to do some samples of $.xhr usage? I think markelog had that on his list
[09:47:12] <gibson042> we're both supposed to find some for translation
[09:48:08] <DaveMethvin> mainly i think we want to be sure that we didn't miss any common scenarios and that $.xhr is as simple for those scenarios
[09:48:18] <DaveMethvin> can you have those by next week?
[09:48:22] <gibson042> I think so
[09:49:32] <DaveMethvin> are there any other things we should discuss? kind of hard with just 3 of us!
[09:49:45] <mikesherov> yes
[09:49:47] <DaveMethvin> what else should we give to the people who aren't here? :P
[09:49:59] <mikesherov> 1. should I still be reaching out to Kyle Simpson regarding NPO?
[09:50:14] <DaveMethvin> procrastination paid off
[09:50:19] <mikesherov> haha
[09:50:23] <DaveMethvin> i don't think we need it do we? gibson042 ?
[09:50:30] <gibson042> I think not
[09:50:32] <DaveMethvin> seems like our .then() has it covered
[09:50:44] <mikesherov> ok, one less thing to think about
[09:50:51] <mikesherov> 2. I'm on the CSSWG now
[09:50:57] <DaveMethvin> oh good!
[09:51:11] <DaveMethvin> or should I say !important
[09:51:20] <mikesherov> so, anything we legitimately need changed in CSS specs (mostly CSSOM), let me know
[09:51:24] <mikesherov> ha
[09:51:39] <mikesherov> I'll try to raise them at the telecon
[09:51:42] <DaveMethvin> we need an !!urgent to override !importnat
[09:51:46] <mikesherov> haha
[09:52:19] <DaveMethvin> ok sounds like we're done for now, I'll catch up with m_gol, jauborg, and markelog about stuff later
[09:52:27] <DaveMethvin> thanks!
[09:52:47] <gibson042> congrats again, mikesherov
[09:52:59] <mikesherov> thanks!
