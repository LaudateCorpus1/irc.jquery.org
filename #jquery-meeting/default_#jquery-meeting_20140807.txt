[10:59:56] <arschmitz> jasperdegroot: gseguin: gabriel_schulhof: agcolom: cgack: Meeting time!
[11:00:04] <gseguin> hiya
[11:00:07] <cgack> howdy!
[11:00:19] <jasperdegroot> hi
[11:00:33] <jperrault> hello
[11:00:45] <arschmitz> jperrault: hi
[11:02:43] <gabriel_schulhof> Hey!
[11:03:59] <arschmitz> ok lets get started
[11:04:19] <arschmitz> agenda: https://docs.google.com/spreadsheet/ccc?key=0AskujzE4Ig0QdG5nSmZiSUhjYm4ya29CdjhLZmJwSWc&usp=drive_web#gid=40
[11:05:00] <arschmitz> ok lets start with 1.4.4
[11:05:13] <arschmitz> does any one have anything relating to 1.4.4 issues or regressions?
[11:05:22] <jasperdegroot> yeah
[11:05:23] <jasperdegroot> https://github.com/jquery/jquery-mobile/issues/7606
[11:05:43] <jasperdegroot> do we support button elements in navbars?
[11:05:49] <jasperdegroot> or only anchors?
[11:05:55] <arschmitz> thats not a regression is it? isnt that how it was in 1.3?
[11:06:25] <jasperdegroot> if we support button elements it is a regression
[11:06:28] <arschmitz> and we broke in 1.4 and now fixed and people are complaining about it being fixed
[11:06:39] <arschmitz> maybe im thinking of something else
[11:06:46] <jasperdegroot> arschmitz: yeah, I think you do
[11:06:53] <jasperdegroot> this is about navbars
[11:07:06] <jasperdegroot> buttons in there should never be inline
[11:07:16] <arschmitz> ok
[11:07:30] <jasperdegroot> but all our examples only use links, no button elements
[11:07:46] <arschmitz> gotcha
[11:07:46] <jasperdegroot> so we didn't notice
[11:07:58] <arschmitz> so first we need to decide if we actually support this
[11:08:11] <jasperdegroot> yeah
[11:08:25] <gabriel_schulhof> I was under the impression that <button> and <a> are pretty much the same.
[11:08:30] <jasperdegroot> I realized that after my first comment on the issue
[11:08:40] <arschmitz> is there any reason not to? it seems perfectly sensible
[11:08:46] <gabriel_schulhof> I mean, in terms of our library.
[11:08:51] <jasperdegroot> arschmitz: yeah, makes sense to me too
[11:09:19] <jasperdegroot> gabriel_schulhof: button elements need some specific CSS to make them 100% width
[11:09:56] <gabriel_schulhof> jasperdegroot: Oh, I see, so the browser gives them different default properties than it does links.
[11:10:20] <jasperdegroot> gabriel_schulhof: yup
[11:11:20] <arschmitz> ok so yeah i think we should support and fix this
[11:11:28] <arschmitz> any one opposed ?
[11:11:51] <gabriel_schulhof> I'm OK with it - but then again, it won't be me doing the fixing :)
[11:12:00] <jasperdegroot> gabriel_schulhof: and button elements get corner and mini style classes inside navbars, while anchors don't so that's something in the JS
[11:12:13] <jasperdegroot> arschmitz: +1
[11:12:15] <gabriel_schulhof> jasperdegroot: Ooooh! That's bad!
[11:12:43] <jasperdegroot> I assigned the ticket to myself
[11:12:45] <gabriel_schulhof> Man ... I can't help but think that the classes option would let us if not fix, then make so many things systematic!
[11:12:57] <jasperdegroot> will also add demo with button elements
[11:13:01] <arschmitz> gabriel_schulhof: yup it will be nice
[11:13:23] <arschmitz> ok so moving on anything else 1.4.4 related?
[11:13:30] <gabriel_schulhof> arschmitz: One other regression.
[11:13:36] <gabriel_schulhof> https://github.com/jquery/jquery-mobile/issues/7605
[11:13:47] <gabriel_schulhof> Fixed by https://github.com/jquery/jquery-mobile/pull/7604
[11:14:19] <gabriel_schulhof> anchors end up inside textarea widgets, because clearBtn's logic for adding the clear button is wrong.
[11:14:44] <arschmitz> gabriel_schulhof: ok good you already have a pr on that
[11:14:50] <gabriel_schulhof> Yep.
[11:15:19] <gabriel_schulhof> I'm PR-ing like a kitten :)
[11:15:27] <jasperdegroot> :D
[11:15:38] <arschmitz> ok so another 1.4.4 issue that has cropped up has to do with vmouse
[11:15:59] <arschmitz> gseguin: and i have both looked into this one quite a bit and its ugly
[11:16:16] <gseguin> I have a workaround
[11:16:28] <gabriel_schulhof> Oh no ... not that frame thing in iOS ...
[11:16:32] <gseguin> https://gist.github.com/gseguin/b7395bca357b316ed613
[11:16:47] <arschmitz> basicly in ios if you listen for touchevents on document you cant ever change cursor position in an input
[11:17:21] <arschmitz> so the only workaround is what gseguin has there which is to track all bound events and unbind them when the iframe receives focus
[11:17:56] <gseguin> and try/catch exceptions for out of domain iframes
[11:17:56] <arschmitz> personally i think this is way too heavy handed for us
[11:17:58] <gabriel_schulhof> OK, so you have a delegated "focusin listener on the document?
[11:18:08] <gabriel_schulhof> I mean "focusin", "iframe"
[11:18:16] <gseguin> yeah
[11:18:35] <gabriel_schulhof> How about doing an extension?
[11:18:46] <gseguin> that thing is not extensible
[11:18:54] <gseguin> everything is in a closure
[11:19:02] <arschmitz> gabriel_schulhof: vmouse is not written to be extended in anyway
[11:19:34] <gabriel_schulhof> Hmmm ... then at least let's put it behind a flag.
[11:19:37] <arschmitz> so we would have to re-write the whole thing into an object
[11:19:45] <arschmitz> gabriel_schulhof: cant do that in a patch release
[11:19:48] <gseguin> That's what I wanted to do
[11:19:48] <arschmitz> thats new api
[11:19:56] <gseguin> and then disable it by default
[11:20:10] <arschmitz> cant introduce new api in a patch release
[11:20:12] <gabriel_schulhof> arschmitz: We need not document it.
[11:20:13] <gseguin> arschmitz: not if it's disabled by default
[11:20:25] <gabriel_schulhof> No ... that's true.
[11:20:27] <arschmitz> if its not documented then there is no point
[11:20:35] <arschmitz> and it is api disabled or not
[11:20:53] <gabriel_schulhof> It's kind of a borderline case.
[11:20:58] <arschmitz> that could only go in 1.5
[11:21:13] <arschmitz> and we are hoping to deprecate vmouse for pointer events in 1.5
[11:21:21] <gabriel_schulhof> We didn't realize that vmouse didn't support iframes, but now we have to say it doesn't.
[11:21:38] <gabriel_schulhof> arschmitz: Does pointerevents account for this iOS problem?
[11:21:45] <arschmitz> nope
[11:21:50] <gabriel_schulhof> arschmitz: I mean the polyfill.
[11:21:52] <arschmitz> this is equally broken in ios
[11:21:57] <gabriel_schulhof> Ouch!
[11:22:00] <arschmitz> i mean in the pointer events polyfill
[11:22:17] <gabriel_schulhof> arschmitz: Do any iOSs support native pointer events?
[11:22:23] <arschmitz> gabriel_schulhof: no
[11:22:27] <gabriel_schulhof> Wow!
[11:22:31] <gabriel_schulhof> This is gonna be fun!
[11:22:42] <arschmitz> gabriel_schulhof: thats all handled by the polyfill
[11:22:50] <arschmitz> we dont need to worry about that
[11:23:09] <arschmitz> however this iframe issue is the same no matter vmouse or pointer events
[11:23:16] <gabriel_schulhof> arschmitz: Well, when we switch to pointerevents, we can ... point ... the finger at the polyfill and put it all on their shoulders.
[11:23:26] <arschmitz> lol
[11:23:39] <gabriel_schulhof> ... but it still needs to be addressed.
[11:23:54] <arschmitz> question is how and when
[11:24:14] <gabriel_schulhof> Can kborchers help?
[11:24:19] <arschmitz> gabriel_schulhof: also remember vmouse is a mess and has not been changed in 3 years not a single bug fix nothing
[11:24:33] <gabriel_schulhof> I know. I'm all in favour of getting rid of it.
[11:24:46] <gabriel_schulhof> This does not change that plan.
[11:24:57] <arschmitz> gabriel_schulhof: ok so only question is do we do anything about this in vmouse
[11:25:00] <gabriel_schulhof> The only thing that changes is that now we know the replacement won't fix this.
[11:25:35] <gabriel_schulhof> That's an interesting question.
[11:25:53] <kborchers> i would actually like to help if i can
[11:25:53] <gabriel_schulhof> If we release the workaround in 1.5.0, vmouse will be "better" than pointer events in iOS.
[11:26:10] <arschmitz> kborchers: that would be great
[11:26:11] <gabriel_schulhof> ... and we'll have pressure to keep it around longer.
[11:26:20] <gabriel_schulhof> kborchers: Yes, please!
[11:26:31] <arschmitz> gabriel_schulhof: you ignore the many issues that pointer events fix that vmouse has
[11:26:44] <kborchers> i'm a bit out of the loop though so might need to be brought up to speed on some things ... like once you switch to pointerevents, what are your min browser targets because that may have to be addressed in the polyfill before anything else can happen
[11:26:59] <arschmitz> kborchers: ie8
[11:27:04] <kborchers> yikes, ok
[11:27:32] <arschmitz> kborchers: maybe you and i can do a call about this and i can bring you up to speed on our end
[11:27:47] <arschmitz> kborchers: i already have a branch using pointer events completely too
[11:27:48] <kborchers> so yeah, i need to look at the polyfill again because they use some fun stuff that is fun to shim beyond ie9
[11:28:11] <kborchers> arschmitz: which i'm sure fails miserably in ie8 :)
[11:28:32] <kborchers> but that's good to have for testing!
[11:28:35] <arschmitz> kborchers: i thought scott_gonzalez and jzaefferer got it working?
[11:28:51] <kborchers> recently?
[11:28:57] <arschmitz> no quite a while back
[11:29:01] <kborchers> scott and i got it working a while back
[11:29:11] <kborchers> and then polymer folks broke a bunch of stuff
[11:29:11] <arschmitz> maybe that was it :)
[11:29:15] <arschmitz> ohhhhhh
[11:29:22] <gabriel_schulhof> Yee-haw!
[11:29:25] <arschmitz> that part i didnt know about
[11:29:27] <kborchers> and i haven't fixed it because they use a bunch of fun stuff
[11:29:48] <gabriel_schulhof> Sounds like it's gonna be an odyssey!
[11:30:02] <kborchers> let me try to look into the polyfill tonight and see where it's at and report back
[11:30:11] <arschmitz> kborchers: sure
[11:30:19] <gabriel_schulhof> arschmitz: Knowing this, it sound to me like it might be worth putting our workaround behind a flag and into 1.5.0.
[11:31:02] <gabriel_schulhof> arschmitz: It might be worth filing an issue about this against polymer, no?
[11:31:15] <gabriel_schulhof> ... if they don't already know ....
[11:32:42] <arschmitz> gabriel_schulhof: thing is its not an issue with the polly fill
[11:32:49] <arschmitz> its an issue with how you use it
[11:33:13] <arschmitz> its no different if you just use plain touch events
[11:33:19] <gabriel_schulhof> arschmitz: It's an issue the polyfill will have to smooth over just as vmouse has to smooth over it.
[11:33:30] <arschmitz> gabriel_schulhof: not really
[11:33:41] <gabriel_schulhof> arschmitz: ... because it will appear as though the polyfill breaks inputs.
[11:33:50] <arschmitz> gabriel_schulhof: the bug is in ios not in the polyfill
[11:34:15] <gabriel_schulhof> I know. I understand. But, as with most browser bugs, we get stuck with having to work around them.
[11:34:46] <arschmitz> gabriel_schulhof: sometimes there are cases where this is not something we handle
[11:34:51] <gabriel_schulhof> So, we might as well fix them at the point where we perform the operation (hooking up a listener to a touch event) that breaks things.
[11:34:57] <arschmitz> gabriel_schulhof: for example do you think we should modify .on to fix this?
[11:35:16] <arschmitz> its the same if you $( document ).on( "touchstart", ...
[11:35:22] <gabriel_schulhof> That's an interesting point of view.
[11:35:43] <gabriel_schulhof> After all, core is responsible for "paving over" browser quirks.
[11:36:21] <arschmitz> not responsible for but in cases they do fix browser bugs
[11:36:27] <arschmitz> but they dont fix ALL browser bugs
[11:36:31] <gabriel_schulhof> Nono.
[11:36:33] <gabriel_schulhof> Gotcha.
[11:37:00] <gabriel_schulhof> It's just ... man ... if ... and I mean IF we decide to "pave over" it, then we should do it in exactly one spot.
[11:37:16] <gabriel_schulhof> Otherwise we should make it clear that using the polyfill, or using vmouse /has/ this implication.
[11:37:20] <arschmitz> and in this case i think the fix is far too invasive
[11:37:25] <gabriel_schulhof> Yep.
[11:37:39] <arschmitz> yes i think we should simply document this
[11:38:03] <gabriel_schulhof> You know ... unlike vmouse, .on() can be shimmed.
[11:38:18] <arschmitz> if we were keeping vmouse i would say make it extensible
[11:38:26] <gabriel_schulhof> So, a third-party plugin/extension/shim/whatever may be desirable.
[11:38:32] <arschmitz> but that would be a huge re-write so i dont think its worth it
[11:38:42] <gabriel_schulhof> No for sure not.
[11:38:55] <arschmitz> gseguin: actually thats a great point
[11:39:00] <arschmitz> dont shim vmouse shim on
[11:39:32] <arschmitz> then you could make it an extension
[11:39:44] <arschmitz> gabriel_schulhof: good thought
[11:40:06] <gseguin> so you shim .on and filter events ?
[11:40:15] <arschmitz> gseguin: yeah
[11:40:21] <gseguin> then install the patch when binding on v* ?
[11:40:36] <arschmitz> yeah
[11:40:38] <gseguin> ok, I can look into this
[11:41:07] <arschmitz> gseguin: then when we switch to pointer events it would be as simple as replacing vmouse* with pointer*
[11:41:24] <gseguin> makes sense
[11:41:59] <gabriel_schulhof> Ping!
[11:42:22] <gabriel_schulhof> Ummm ... what's a great point?
[11:42:36] <gabriel_schulhof> My connection just dropped out.
[11:42:53] <arschmitz> to shim on not vmouse
[11:43:09] <arschmitz> then this can be shimmed right now as an extension
[11:43:49] <gabriel_schulhof> Hey!
[11:43:54] <gabriel_schulhof> Sorry!
[11:43:56] <gabriel_schulhof> Dropped off!
[11:44:27] <arschmitz> gabriel_schulhof: i said your idea to shim on is a good one
[11:44:36] <arschmitz> gabriel_schulhof: because it can be done as an extension right now
[11:44:47] <gabriel_schulhof> Right.
[11:44:56] <arschmitz> gabriel_schulhof: and is easy to change to pointer events
[11:45:08] <arschmitz> or even just make it support both right now
[11:45:24] <gabriel_schulhof> OK, but where do we put this shim?
[11:45:34] <gabriel_schulhof> Do we make it part of the library?
[11:45:40] <arschmitz> whoever writes its repo
[11:45:40] <gabriel_schulhof> ... or just a third-party plugin?
[11:45:47] <arschmitz> i would say 3rd party
[11:45:54] <gabriel_schulhof> Hmmm ... OK ...
[11:46:07] <gabriel_schulhof> I'd be willing to put it in web-ui-fw.
[11:46:15] <gabriel_schulhof> ... but gseguin has a leg-up on the issue.
[11:46:25] <gabriel_schulhof> So, gseguin, if you wanna mae a repo for such a shim ... ?
[11:46:28] <gabriel_schulhof> make
[11:46:30] <arschmitz> yeah i could host it with my stuff as well but i think gseguin is going to work on it
[11:46:38] <gseguin> whichever you think makes most sense
[11:46:55] <arschmitz> gseguin: as long as someone is watching and fixing issues i think it does not matter
[11:47:00] <gabriel_schulhof> Well, if it's just something people include after core and before mobile, it's all good.
[11:47:32] <gseguin> alright I'll work on it and will host it on my github
[11:47:40] <gabriel_schulhof> Wait a sec ...
[11:47:53] <gabriel_schulhof> touch* events currently have no $.special, right?
[11:47:57] <gabriel_schulhof> ... because they're native.
[11:48:19] <gabriel_schulhof> We just decide to hook up to touchstart instead of mousedown depending on the $.support.touch.
[11:48:34] <gabriel_schulhof> So, if we were to do a $.event.special for touch*, then that wouldn't be a shim.
[11:48:52] <gabriel_schulhof> OTOH, nm, because you can't make a $.event.special for a native event, right?
[11:49:40] <arschmitz> gabriel_schulhof: dont even have to go that far
[11:49:42] <gabriel_schulhof> Cuz, like, what? Inside $.event.special.touchmove you ... .on( "touchmove" )? Ummm ... not gonna work ...
[11:49:54] <arschmitz> gabriel_schulhof: just intercept calls to on
[11:50:05] <gabriel_schulhof> Yeah, right. Totally.
[11:50:24] <gabriel_schulhof> I was just wondering if we could use some of core's architecture to make this less of a shim and more of a plugin.
[11:50:27] <gabriel_schulhof> But I guess not.
[11:50:30] <arschmitz> if its on the document and a touch event save the callback so you can unbind it later
[11:50:30] <gseguin> the first call to .on with a vevent
[11:51:15] <arschmitz> gseguin: i think you could do touch instead of v and cover pointer events too
[11:51:33] <gabriel_schulhof> Does polymer implement its polyfilling via jQuery's .on()?
[11:51:58] <gseguin> arschmitz: I certainly could
[11:51:59] <gabriel_schulhof> So, like, does it hook up to the touch events upon which it bases its pointer* events via core's .on()?
[11:52:10] <arschmitz> gabriel_schulhof: no but the jquery polyfill does
[11:52:13] <arschmitz> i think
[11:52:34] <gabriel_schulhof> ... because if it does, then the shim would also "fix" polymer.
[11:52:57] <arschmitz> gabriel_schulhof: https://docs.google.com/spreadsheet/ccc?key=0AskujzE4Ig0QdG5nSmZiSUhjYm4ya29CdjhLZmJwSWc&usp=drive_web#gid=40
[11:52:59] <arschmitz> oops
[11:53:07] <arschmitz> https://docs.google.com/spreadsheet/ccc?key=0AskujzE4Ig0QdG5nSmZiSUhjYm4ya29CdjhLZmJwSWc&usp=drive_web#gid=40
[11:53:31] <arschmitz> ack
[11:53:38] <arschmitz> why is my past not updating lol
[11:53:58] <arschmitz> https://github.com/jquery/jquery-pointer-events/blob/master/src/pointer.js#L21
[11:54:00] <arschmitz> there we go lol
[11:55:06] <gabriel_schulhof> Well, ... whaddya know ...
[11:56:24] <gabriel_schulhof> So, it sounds like the shim might do double duty making vmouse work while at the same time making polymer work - as long as polymer uses jQuery to attach to native events.
[11:56:44] <arschmitz> yes
[11:57:04] <gabriel_schulhof> That makes it all the more important.
[11:59:31] <arschmitz> ok well its getting on in time
[11:59:36] <arschmitz> anything for 1.5?
[12:00:04] <jasperdegroot> not from me
[12:00:24] <gabriel_schulhof> I wrote some nav stuff.
[12:00:38] <gabriel_schulhof> I implemented the unique ID for history entries.
[12:00:45] <arschmitz> cool
[12:00:45] <gabriel_schulhof> That makes same-page transitions fully work.
[12:00:55] <arschmitz> i started looking at your pr for that
[12:01:14] <cgack> i don't have anything to report for 1.5
[12:01:24] <gabriel_schulhof> arschmitz: We need to be careful about managing state inside the navigator.
[12:01:32] <arschmitz> but i spent most of this week working on getting ui accordion and my prototype of new panel into branches
[12:01:41] <cgack> but I'll be speaking in Chicago so hopefully we can all meetup
[12:01:42] <arschmitz> gabriel_schulhof: yes
[12:01:48] <gabriel_schulhof> arschmitz: We have a lot of options objects and sometimes we pass them by reference, sometimes we copy them, sometimes we merge them, ...
[12:01:54] <gabriel_schulhof> arschmitz: It's all pretty chaotic.
[12:02:09] <arschmitz> gabriel_schulhof: that was all benders work
[12:02:22] <arschmitz> do you think we could simplify that at all?
[12:02:23] <gabriel_schulhof> arschmitz: Well, it's also evolutionary.
[12:02:51] <gabriel_schulhof> arschmitz: Not without a thorough analysis of which state is needed where and where do we want to intentionally copy stuff.,
[12:03:09] <arschmitz> gabriel_schulhof: maybe someday but not now lol
[12:03:15] <gabriel_schulhof> Agreed.
[12:03:45] <arschmitz> ok if there is nothing else we are 3 mins long so lets wrap up
[12:03:52] <arschmitz> anything from the community?
[12:03:53] <gabriel_schulhof> I'm good.
[12:03:59] <gabriel_schulhof> Oh!
[12:04:04] <gabriel_schulhof> I'm on vacation next week.
[12:04:11] <arschmitz> gabriel_schulhof: ok
[12:04:27] <jasperdegroot> gabriel_schulhof: enjoy your vacation!
[12:04:32] <jasperdegroot> later all
[12:04:35] <gabriel_schulhof> Thanks!
[12:04:37] <gabriel_schulhof> L8R
[12:04:45] <arschmitz> see everyone back on -dev
