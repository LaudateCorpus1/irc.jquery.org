[11:00:55] <toddparker> Hey all, jQuery Mobile team meeting starting now
[11:01:46] <StevenBlack> Test.
[11:02:15] <toddparker> looks like I successfully unmoderated this...
[11:02:31] <_nickel> :D
[11:03:15] <toddparker> kinblas is having trouble connecting
[11:03:20] <toddparker> scottjehl too
[11:04:01] <toddparker> Agenda here: https://docs.google.com/document/d/1b3X8L0gMxA0KwNfoRitb44upkRjVxdX34bqxrAWVBLg/edit#
[11:05:15] <StevenBlack> toddparker:  http://filamentgroup.com/clients/om/ works slick-as-snot on Opera Mini.
[11:06:06] <toddparker> yep, opting it out of ajax solves all the wonkiness
[11:06:11] <toddparker> same on BB5
[11:06:25] <toddparker> any ideason how to help kin and scott connect here?
[11:06:45] <toddparker> neither is allowed into this room for some reason
[11:09:07] <toddparker> hey all - we're going to wait a few minutes to get some core team members in. technical difficulties!
[11:09:11] <scottjehl> hey
[11:09:17] <toddparker> hey scottjehl
[11:12:51] <toddparker> First off, I wanted to welcome Ghislain Séguin (gseguin_) from Jive Software. He will be working part time on the jQuery Mobile project. We're glad to have you!
[11:13:13] <toddparker> just waiting for kinblas to join
[11:13:14] <gseguin_> Hi everyone, glad I can help
[11:13:51] <toddparker> Welcome aboard.
[11:14:10] <toddparker> Ok, so the first item of business is a check-in on where we are with the navigation re-factor
[11:14:25] <scottjehl> yep
[11:16:15] <toddparker> Decouping and cleanup (Kin)
[11:16:15] <toddparker> https://github.com/jquery/jquery-mobile/wiki/Refactor:-navigation.js-A4.1-structure
[11:16:16] <toddparker> https://github.com/jquery/jquery-mobile/wiki/Refactor:-changepage-outline
[11:16:23] <toddparker> ...waiting for Kin to join...
[11:20:22] <StevenBlack> Five bucks on the Lightning over the Bruins tonight.  Any takers in Beantown on that?
[11:21:16] <toddparker> as long as i don't need to lay down real $
[11:21:40] <StevenBlack> Nah, US$ will be fine.
[11:23:26] <StevenBlack> OK, let's bet on Kin appearance time.  A buck on 2:25-2:26
[11:23:30] <toddparker> heh
[11:24:33] <gseguin_> I have to drop off around 11:30ish, team event here
[11:24:59] <gseguin_> sorry about that
[11:25:30] <toddparker> no problem. sorry this is such a mess. they team changed permissions on this channel recently...
[11:26:17] <gseguin_> no worries, is the transcript going to be available somewhere?
[11:27:39] <toddparker> it's on the jquery.org site
[11:27:50] <toddparker> i also try to recap everything in a weekly blog post
[11:28:07] <paul_irish> ajpiano: can we take off +r in here?
[11:28:20] <ajpiano> yeah
[11:28:31] <toddparker> thanks
[11:29:21] <toddparker> welcome _kinblas!
[11:29:24] <toddparker> woo hoo
[11:29:36] <toddparker> ok, so let's start a (quick) rundown on the nav status
[11:29:40] <_kinblas> that was painful
[11:29:40] <scottjehl> woo
[11:29:48] <toddparker> yeah :)
[11:29:50] <gseguin_> Yay!
[11:29:50] <toddparker> Decouping and cleanup (Kin)
[11:29:51] <toddparker> https://github.com/jquery/jquery-mobile/wiki/Refactor:-navigation.js-A4.1-structure
[11:29:51] <toddparker> https://github.com/jquery/jquery-mobile/wiki/Refactor:-changepage-outline
[11:30:09] <toddparker> _kinblas, the floor is yours
[11:30:21] <toddparker> make that kinblas
[11:30:38] <kinblas> So I landed what I had a couple of weeks ago on the navigation branch, not much there
[11:30:56] <kinblas> just flushing what I had in my local tree which I think we documented in last weeks blog
[11:31:23] <toddparker> so these latest changes are part of the cleanup and de-coupling
[11:31:32] <kinblas> yeah
[11:31:44] <toddparker> are those now done and you're starting on the URL handing tweaks?
[11:31:47] <kinblas> I'm currently separating out the page loading code from the changePage() code
[11:31:54] <toddparker> gotcha
[11:32:02] <kinblas> the page loading code will handle the URL stuff
[11:32:15] <kinblas> the pageChange code is strictly for switching between in-memory-DOM stuff
[11:32:20] <kinblas> though if you pass it a URL
[11:32:36] <toddparker> The latter will enable some of these extensibility hooks https://github.com/jquery/jquery-mobile/wiki/Refactor:-navigation.js-A4.1-extensibility
[11:32:38] <kinblas> it will call loadPage() and changePage() will get called automatically when the page is loaded and in memory
[11:32:52] <toddparker> gotcha. seems nice and tidy.
[11:33:05] * kinblas loads that page
[11:33:23] <kinblas> yes
[11:34:03] <kinblas> it will have hooks for URL parsing/changing, loading of optional non-HTML data, and a hook to allow folks to build their HTML from that data if they wish
[11:34:21] <kinblas> of course the defaults for all of this is what we do today
[11:34:22] <toddparker> is there a point where we can push this back into master or is the navigation stuff a pretty monolithic thing that needs to be built in a branch, then pushed at the end?
[11:34:30] <scottjehl> sounds good
[11:34:47] <toddparker> ...like after you get the page load and change stuff done...
[11:34:59] <kinblas> yeah I think what I'll do is this
[11:35:12] <kinblas> separate out the load from the change get scott to look at it and then make sure the tests pass
[11:35:14] <kinblas> then land
[11:35:20] <toddparker> cool
[11:35:27] <kinblas> the hooks etc can come in afterwards
[11:35:37] <toddparker> then the additional things can be added in, exactly
[11:35:38] <toddparker> cool
[11:35:40] <kinblas> I just want to get off a branch
[11:35:40] <scottjehl> how far off is that Kin?
[11:35:42] <kinblas> it's painful
[11:35:48] <toddparker> yeah
[11:35:50] <kinblas> give me a day or so
[11:35:54] <toddparker> ok, great
[11:36:00] <kinblas> I've been hand patching stuff with fixes from master
[11:36:01] <scottjehl> yep. Branches are for pansies
[11:36:04] <kinblas> that have landed since I branched
[11:36:08] <scottjehl> heh
[11:36:13] * kinblas takes off his dress
[11:36:20] <toddparker> one thing: try to write up some docs as you go since it'll be fresh in your mind
[11:36:42] <kinblas> ok, sorry I've been meaning to do that, been busy last 1.5 weeks
[11:36:51] <toddparker> either on the wiki or just create a new docs page in demos & docs to explain this stuff
[11:36:53] <toddparker> sure
[11:36:56] <kinblas> there are many many issues, and requests for us to handle
[11:37:13] <toddparker> i know, i keep assigning them to you :P
[11:37:14] <kinblas> it would be good to write it down
[11:37:22] <toddparker> yeah, too easy to forget
[11:37:31] <kinblas> and weave the issues you mention into things so we know we've got them covered
[11:37:47] <toddparker> ok, so i think we're good on the first 3 bullets under nav
[11:37:57] <toddparker> next:
[11:37:58] <toddparker> Page caching on/off flag (who?)
[11:37:59] <toddparker> Add a simple "don't cache" flag per page via a new data-cache attribute on the page div to tell framework to re-load it if shown again, default is “true” (re-use the page) but you can set data-cache="false" to tell the framework to re-load ever time it’s viewed
[11:37:59] <toddparker> Issue: https://github.com/jquery/jquery-mobile/issues/1554
[11:38:02] <kinblas> before I get into that time-suck (documenting) I'll finish up the load page extraction
[11:38:07] <toddparker> sure, good
[11:38:26] <toddparker> I think we're all in agreement that this is a good idea and have a ticket on it
[11:38:41] <toddparker> once you push to master, could someone else work on adding this?
[11:38:47] <toddparker> any volunteers?
[11:39:29] <kinblas> no volunteers, I'll do it *after*
[11:40:03] <kinblas> I meant ... no volunteers? I'll do it *after*
[11:40:28] <StevenBlack> Well we need nav to land first so...
[11:40:29] <toddparker> sure, we'll leave it unassigned for now
[11:40:35] <scottjehl> this seems like a feature Kin could focus on after landing
[11:40:36] <scottjehl> yep
[11:40:46] <toddparker> ok, next...
[11:40:55] <toddparker> Memory management for the DOM (who?)
[11:40:56] <toddparker> How to keep the DOM from getting too big?
[11:41:16] <toddparker> last time, we suggested this:
[11:41:17] <toddparker> Add a new global configuration option to set the max number of pages to keep in the DOM at once. Once that max is hit, we run a a document-wide $("selector").remove() at the appropriate juncture in every changePage invocation (post Ajax success) that finds all pages that are data-cache="false" or oldest in the stack and delete them. We’ll need to check for alreadyLocalPage = ("[data-url='...']:not([data-cache='fal
[11:41:26] <StevenBlack> Another nav predicate.
[11:41:37] <toddparker> but scott and i were talkinga bout doing something more low-tech until we know more about memory clenaup
[11:41:50] <toddparker> stevenblack - sure, understood
[11:41:59] <toddparker> After discussing this, we might want to have a simpler mechanism for the nearer term until we really understand how memory is feed up on these devices: When you hit the max number of pages in the DOM (if specified), the next link/form submit isn't Ajax-driven so the browser does a full page refresh.
[11:42:00] <toddparker> Issue: https://github.com/jquery/jquery-mobile/issues/1555
[11:42:15] <toddparker> captured this in the ticket.
[11:42:40] <toddparker> how do people feel about going with the simpler option?
[11:42:58] <toddparker> 'cause nuking dom nodes may not free up memory in a predictable way
[11:43:27] <toddparker> we know a refresh will work everywhere, might be an easy fix to land too
[11:43:38] <StevenBlack> Note: this could be implemented with a plugin.
[11:44:17] <StevenBlack> A listener on pagehide, scrubbing pages according to rules to be determined by the developer.
[11:44:34] <kinblas> heh that's where I thought we left off
[11:44:35] <toddparker> StevenBlack - you mean the first proposl, or either = any memory mgmt
[11:44:38] <StevenBlack> data-lifetime="volatile" or whatever.
[11:45:09] <toddparker> so it sounds like we could punt on this altogether?
[11:45:09] <scottjehl> hmm I agree when it comes to the caching, but this one seems different
[11:45:46] <toddparker> i sort of like the idea of building the simplest features in, but have hooks to build more involved features
[11:45:47] <StevenBlack> Thinking the dev who needs this bad will write it as a plugin we can incorporate it later.
[11:45:54] <scottjehl> in this case, we would have a condition in our click and submit handlers  that says, "are there too many pages in the dom?" okay then, return true ; don't use ajax
[11:46:22] <scottjehl> maybe we need a beforechangepage event triggered via our click and ajax handlers?
[11:46:23] <toddparker> ...but having a simple max number of dom pages that flips off ajax for the next request is very simple and predictable
[11:46:28] <scottjehl> click and submit rather
[11:47:32] * kinblas sees issues with that approach in the dynamic app case
[11:48:46] <StevenBlack> +1 on punt.
[11:48:47] <toddparker> kinblas - for dynamic apps, you can disable this max or write your own custom tool to manage the dom
[11:49:23] <toddparker> i just had a bunch of people as "if you're adding pages to the dom, won't that crash the browser?"
[11:50:00] <toddparker> seems like we shoudl implement the simplest feature, more as a failsafe, to say we're doign *something*
[11:50:07] <kinblas> I guess the question is do you want this built into the system so everyone gets it, or if youwant to build an optional plugin folks can just download and include?
[11:50:17] <toddparker> i agree that we don't know what this magic number of pages should be
[11:50:32] <toddparker> ...if there is a plugin to recommend, sure
[11:50:46] <StevenBlack> That's why god gave us the pagehide event, and developers who know which assest are expensive mem and load time) and which are trivial
[11:51:02] <kinblas> Are we thinking folks are going to be using jqm on their entire site?
[11:51:13] <kinblas> or just to provide a mobile presence which is usually just a few pages?
[11:51:17] <toddparker> i sort of look at this as a failsafe for that, people building websites
[11:51:36] <toddparker> if you're a hardcore dev, you'll do the right thing
[11:51:41] <scottjehl> jqm should aim to scale to handle a whole site, yes
[11:51:53] <kinblas> but what is the criteria for pruning?
[11:51:58] <toddparker> right,and we'd never recommend stuffing a whole site into one page
[11:52:07] <StevenBlack> data-lifetime="volatile"
[11:52:09] <kinblas> number of pages in DOM + whatever is not in the stack?
[11:52:25] <toddparker> "+ whatever is not in the stack" ?
[11:52:34] <toddparker> pages already visited?
[11:52:35] <kinblas> the URL stack
[11:52:51] <scottjehl> we were just saying number of pages in the dom - an arbitrary high number
[11:52:51] <StevenBlack> Some pages involve a 10-table join on the back end... we can never tell.
[11:52:58] <kinblas> right
[11:53:10] <toddparker> i think it could just be a simple # of data-role = page or dialog in the DOM
[11:53:28] <scottjehl> it's true that each "page" could be 2 elements
[11:53:41] <scottjehl> not about to count dom nodes either
[11:53:46] <toddparker> right
[11:53:54] <toddparker> this is a very rough mechanism
[11:54:25] <kinblas> all I'm worried about is us ripping out something folks need for their app or state
[11:54:29] <kinblas> out from underneath them
[11:55:04] <toddparker> what are we ripping out?
[11:55:06] <StevenBlack> ... like a page containing a <script>
[11:55:11] <StevenBlack> ... or a template
[11:55:17] <toddparker> ah, i see
[11:55:25] <toddparker> it could happen
[11:55:32] <kinblas> or some form that has some data in it, because the user went on a tangential navigation
[11:55:39] <toddparker> but i think for websites, this is needed
[11:55:54] <toddparker> for web apps or instaleld apps, you need to roll up your sleeves and tweak/disabel this
[11:56:00] <scottjehl> page containing a script?
[11:56:25] <StevenBlack> <script> inside <div data-role="page">
[11:56:34] <StevenBlack> That's how you inject scripts now...
[11:56:45] <scottjehl> right. executes once, remove the node after that, no worries
[11:56:59] <scottjehl> right?
[11:57:08] <StevenBlack> And function foo() defined therein?
[11:57:10] <scottjehl> anyway, what if we add this as disabled by default
[11:57:22] <toddparker> wait. jQM is based on PE
[11:57:49] <toddparker> your site should be built to work in those conditions
[11:58:15] <toddparker> if you're doing all sort of templating, you're on your own. disabel the max limit and do whatever
[11:58:24] <StevenBlack> No!
[11:58:35] <toddparker> no to what?
[11:58:46] <StevenBlack> Bad call because it's an all-or-nothing and templating guy needs this more than anybody, I imagine.
[11:59:03] <toddparker> they do, but they need much more robust tools to managing the DOM
[11:59:18] <toddparker> ...that we're not going to include or even write IMHO
[11:59:41] <kinblas> @toddparker: So since you're bringing up PE
[11:59:44] <toddparker> it'll probably be pretty custom, depending on what you're building
[11:59:51] <toddparker> yeeees
[12:00:14] <kinblas> People approach it differently
[12:00:34] <kinblas> some folks assume that if JS is enabled, or some feature is enabled
[12:00:34] <toddparker> PE?
[12:00:51] <kinblas> that they can use it and may have state related to said feature
[12:01:11] <kinblas> if we go and rip something out of the DOM which they were working with
[12:01:17] <toddparker> so that's more for a JS-driven experience
[12:01:23] <kinblas> right
[12:01:28] <kinblas> which we're talking about
[12:01:34] <kinblas> because you can get a large dom
[12:01:35] <kinblas> with JS
[12:01:43] <toddparker> sure, then they  flip off this feature
[12:02:03] <StevenBlack> We can do this whole thing by convention as opposed to by configuration.  A single page class tells us whether this item's expendible.  After that, it's a one-liner.
[12:02:46] <toddparker> i don't think we should ask people to tag every page as expendable or not
[12:02:53] * kinblas agrees
[12:03:01] <StevenBlack> No, lets just delete pages.
[12:03:10] <toddparker> ok, sounds like this needs more discussion
[12:03:13] <kinblas> but its necessary for an automated approach
[12:03:24] <kinblas> heh this is such a hot topic
[12:03:32] <kinblas> I'm all for pruning
[12:03:33] <toddparker> heh, not really
[12:03:39] <kinblas> it's just who is responsible is my worry
[12:04:02] <toddparker> average web dev building a site = us
[12:04:18] <toddparker> anyone building something more script-driven = them
[12:04:54] <toddparker> jQM should "just work" for the simplest case. since we're ajaxifying links and forms, we need something to keep this under control
[12:05:06] <StevenBlack> I suggest a threshhold:  first froof that it can't be done with an add-on, THEN we add it to the framework.
[12:05:22] <StevenBlack> froof=proof
[12:05:27] <kinblas> I think we already know we can
[12:06:03] <StevenBlack> So we write this as a configurable addon.  Maybe added-on by default, but still, not in mainline anywhere.
[12:06:04] <toddparker> so what if we build the simplest feature as a plugin
[12:06:17] <toddparker> the max # pages = refresh
[12:06:45] <toddparker> then if anyone, like stevenblack, wants to mockup up other systems those can also be plugins
[12:07:03] <toddparker> that would be fine with me
[12:07:15] <kinblas> what's the threshold in mind?
[12:07:22] <toddparker> think we'd need to write something to test the mechanics
[12:07:27] <StevenBlack> duck-punchable rule.  Maybe some other criteria, worst case scenario it's a 10-liner.
[12:07:28] <toddparker> # pages?
[12:07:42] <kinblas> yeah
[12:07:56] <toddparker> doesn't really matter, it's just to illustrate the mechanism
[12:08:04] <StevenBlack> A page iterator, passed-in function returns true, page is toast.
[12:08:47] <StevenBlack> And it's the iterator that has smarts to skip page[0].
[12:08:59] <toddparker> cool
[12:09:22] <toddparker> so once kin gets the nav stuff in order, maybe steven can take a crack at writing a simple plugin
[12:09:32] <StevenBlack> Dibs.  Mine.
[12:09:58] <kinblas> sounds good
[12:10:15] <toddparker> cool so our decision:
[12:10:15] <toddparker> After discussing this, we don’t want to include anything hard-coded in the framework. We want to support a plug-in system that allows developers to write a range of different memory and DOM management tools because there isn’t a single “right solution.
[12:10:50] <kinblas> yup
[12:10:56] <toddparker> before we sign off, i wanted to hit a few items
[12:11:15] <toddparker> Ajax nav
[12:11:18] <toddparker> Find object/feature detection ways to exclude the following browsers from the Ajax Navigation but still give them the enhanced experience otherwise (Scott)
[12:11:18] <toddparker> Blackberry 5
[12:11:18] <toddparker> Opera Mini
[12:11:19] <toddparker> Nokia S60
[12:11:43] <toddparker> I tested Opera Mini and BB5 on the latest with Ajax off and they woth work great
[12:11:46] <toddparker> http://filamentgroup.com/clients/om/
[12:12:01] <toddparker> This would close a bunch of issues
[12:12:04] <toddparker> ay objections?
[12:12:06] <StevenBlack> I'm very happy with that.
[12:12:52] <kinblas> we still need to figure out the way to exclude?
[12:12:59] <toddparker> _nickel and kinblas?
[12:13:08] <kinblas> I'm ok with it.
[12:13:16] <toddparker> scott is looking at how to do that
[12:13:27] <toddparker> ok goo
[12:13:29] <toddparker> good
[12:13:30] <toddparker> With Ajax off, we need to tweak all plugins that rely on Ajax. This needs to be done anyway because this feature cna alwasy be turned off globally but we have some dependent plugins:
[12:13:41] <toddparker> Dialogs (support data-role=”dialog” on pages?)
[12:13:42] <toddparker> Support dialog role issue:
[12:13:42] <toddparker> https://github.com/jquery/jquery-mobile/issues/1094
[12:13:48] <toddparker> easy one
[12:14:10] <toddparker> Nested lists are harder - flat list but indent child list items?
[12:14:37] <toddparker> Large (full page) select menus = just use native menus
[12:14:52] <toddparker> nested lists are the only one we need to think about design-wise
[12:15:25] <toddparker> ...we could just have stacked lists that anchor to each other...might be odd
[12:15:47] <toddparker> ok, moving on
[12:15:50] <kinblas> hey todd are you talking aobut 1094?
[12:15:55] * kinblas is lost
[12:16:42] <toddparker> when you turn off ajax nav, either via global options or b/c you're on BB5/opera mini
[12:16:50] <toddparker> a few things don't work
[12:17:03] <toddparker> dialogs
[12:17:09] <toddparker> nested lists
[12:17:19] <toddparker> long custom select menus
[12:17:28] <toddparker> dialog issue is #1094
[12:17:56] <kinblas> we should fix 1094
[12:18:04] <kinblas> we should degrade to native selects
[12:18:05] <toddparker> yeah
[12:18:09] <toddparker> yep
[12:18:13] <kinblas> you get long nested lists
[12:18:20] <toddparker> heh
[12:18:25] <toddparker> dunno what to do there
[12:18:42] <toddparker> but that's not a huge deal, feature-wise
[12:18:48] <toddparker> we'll figure something out
[12:18:52] <kinblas> degrade to collapsibles?
[12:18:58] <toddparker> maybe
[12:18:59] <kinblas> or are we talking no JS
[12:19:21] <toddparker> oh, right maybe we're ok
[12:19:44] <kinblas> in the no JS case we get un-enhanced normal list
[12:20:00] <kinblas> if we're enhancing and just not going to separate pages, then we need some other mechanism
[12:20:03] <kinblas> like collapsibles
[12:20:34] <kinblas> though that might get confusing if they aren't indented or colored slightly different
[12:21:03] <kinblas> you won't be able to tell a collapsible trigger from a real navigation link
[12:22:09] <toddparker> right
[12:22:50] <toddparker> i was saying that we could still show nested lists as they are now, but the back button would skip you back to the last real page for now
[12:23:04] <toddparker> guess that is probably what happens now anyway
[12:23:43] <scottjehl> pretty sure disabling ajax won't affect nested lists
[12:24:01] <kinblas> because they are in-memory-pages
[12:24:18] <kinblas> available for pruning of course :-)
[12:24:26] <toddparker> so if you follow that link above to test it
[12:24:53] * StevenBlack is already in Opera Mini testing that
[12:25:08] <toddparker> it updates the hash with #undefined
[12:25:16] <scottjehl> yeah we should never prune a js-generated page
[12:25:22] <toddparker> but does show the child page
[12:25:24] <scottjehl> like a nested list child
[12:25:42] <StevenBlack> PONL.  Plain ol' nested list is what I'm seeing.
[12:26:00] <toddparker> ??
[12:26:04] <kinblas> so isn't the whole reason Opera Mini is on this list because of scrolling problems?
[12:26:20] <kinblas> switching between in-memory nested lists will still display that problem
[12:26:27] <toddparker> true
[12:27:09] <toddparker> ok, we'll have to mull over how to handle nested list
[12:27:14] <toddparker> next topic...
[12:27:22] <toddparker> user zoom via meta tag
[12:27:27] <toddparker> Restore user zooming capability
[12:27:27] <toddparker> Right now, all our demos and docs have this meta tag:
[12:27:27] <toddparker> <meta name="viewport" content="width=device-width, minimum-scale=1, maximum-scale=1">
[12:27:28] <toddparker> The issue is that the minimum-scale=1, maximum-scale=1"portion completely disables the pinch- or double-tap-to-zoom feature which isn’t very “webby” so we’re going to change our meta tag to set a better example of how to code a page in jQuery Mobile. The meta tag is part of the user’s page content so this isn’t a change to the library per-se, but our demos are used as a template for many users so this is
[12:27:28] <toddparker> The proposed meta tag we’ll use will look like this:
[12:27:28] <toddparker> <meta name="viewport" content="width=device-width, initial-scale=”1”">
[12:27:46] <toddparker> basically, we're not to disable zooming the viewport anymore
[12:27:55] <toddparker> it's bad practice in general
[12:28:10] <toddparker> this isn't part of the framework tho
[12:28:18] <scottjehl> right. it used to be
[12:28:22] <scottjehl> actually, stillis
[12:28:24] <scottjehl> still is
[12:28:27] <kinblas> but off
[12:28:27] <toddparker> the meta tag can be tweaked by devs...it's part of their page markup
[12:28:31] <scottjehl> we need to kill that for beta
[12:28:37] <toddparker> right!
[12:28:47] <kinblas> so have we played around with how this affects header/footer placement?
[12:28:56] <toddparker> oh brother
[12:28:59] <kinblas> LOL
[12:29:04] <toddparker> can we nuke that feature
[12:29:05] <kinblas> the bain of our existence
[12:29:13] <toddparker> seriously
[12:29:34] <toddparker> i would love to move that out of core, it's experimental
[12:30:08] <kinblas> heh
[12:30:14] <toddparker> lots of new mobile apps are moving towards a topnav instead of trying to get a fixed footer in there
[12:30:33] <toddparker> http://blog.twitter.com/2011/05/better-app-for-your-mobile-browser.html
[12:30:34] <toddparker> = webby
[12:30:56] <kinblas> and it scrolls off screen?
[12:31:02] <toddparker> think so
[12:31:15] <toddparker> i haven't gotten it yet, you?
[12:31:33] <toddparker> positioning the top is easier than the footer, isn't it?
[12:31:48] <kinblas> no they both suck
[12:32:03] <toddparker> heh
[12:32:07] <kinblas> just kidding, the only difference is you don't have to calculate the height of a header
[12:32:14] <toddparker> scrolling offscreen is ok with me, seriously
[12:32:18] <toddparker> right
[12:32:28] <toddparker> same issues with freezing rendering
[12:32:59] <toddparker> i've seen too many apps get into trouble relying on the fixed toolbars. can get very broken
[12:33:22] <toddparker> kin - how close to "as good as it can be" are the fixed toolbars?
[12:34:03] <kinblas> Aside from trying to force rendering before a scroll, we're probably doing all we can
[12:34:15] <toddparker> good to know
[12:34:45] <kinblas> of course you do know that fixed positioning is fixed for android 2.2
[12:34:58] <kinblas> but you have to use the right viewport meta incantation to enable it
[12:35:06] <toddparker> i think we should give some thought to re-positioning (ha!) how these work
[12:35:39] <kinblas> pa-dum-pum hey-oh
[12:36:11] <kinblas> Folks have been so accustomed to using them, at least from the issues I see updated daily/weekly about them still not being fixed
[12:36:18] <toddparker> yeah
[12:36:19] <kinblas> I'm wondering if it is just expected behavior
[12:37:18] * kinblas notes twitter's header stays fixed
[12:37:29] <toddparker> it may be, but i don't know if it's a realistic expectation
[12:37:34] <toddparker> it does?
[12:37:38] <toddparker> how did you get in??
[12:37:42] <kinblas> yeah, they must be using faux scrolling
[12:37:45] <toddparker> i still see the old one
[12:37:49] <toddparker> blech
[12:38:06] <toddparker> do you have a url?
[12:38:27] <kinblas> you have to sign in, in the mobile browser to see it
[12:38:42] <toddparker> now that a few browsers support position fixed and overflow, i really hope apple and google follow suit
[12:38:53] <scottjehl> google did
[12:38:53] <toddparker> ah
[12:39:02] <kinblas> heh, yeah Android 2.2
[12:39:07] <toddparker> ...yeah on honeycomb
[12:39:17] <toddparker> 2.2?
[12:39:36] <kinblas> you just need the right meta tag to turn it on
[12:39:48] <kinblas> I sent it to you guys in an email months ago
[12:39:57] <toddparker> woah
[12:40:05] <toddparker> i missed that
[12:40:13] <kinblas> that was so last year :-P
[12:40:17] <toddparker> heh
[12:40:27] <kinblas> I'll try to dig it up
[12:40:49] <toddparker> should we start moving towards using native scrolling when supported, then fall back to our fixed technique?
[12:41:15] <toddparker> anyway, off topic
[12:41:30] <toddparker> so we're letting people zoom the page
[12:41:40] <toddparker> ...any objections to making this edit to the docs?
[12:42:15] <toddparker> we will need to test the fixed toolbars as part of this
[12:42:52] <kinblas> it would be nice to allow zoom, but before anyone does sweeping doc changes, play around with the toolbar stuff and make sure we aren't shooting ourselves in the foot
[12:43:12] <toddparker> i'll give it a try today
[12:44:20] <toddparker> ok, sounds like we're goo
[12:44:23] <toddparker> good
[12:44:43] <kinblas> ok, back to work
[12:44:49] <toddparker> ok, thanks guys!
[12:45:07] <StevenBlack> Quickie: Git repo size?
[12:45:20] <StevenBlack> Zap unneeded branches.  End of story.
[12:46:00] <kinblas> don't delete pagecontainer!
[12:46:09] <kinblas> it's old and moldy but I have some nuggets in there
[12:46:45] <StevenBlack> Some haven't been touched in many months.
[12:47:47] <StevenBlack> kinblas: you and I should work together to eliminate some of these setTimeout() calls...
[12:48:04] <kinblas> yeah I strongly dislike them
[12:48:34] <toddparker> great guys
[12:48:45] <toddparker> go forth and zap old branches and timeouts.
[12:49:02] <toddparker> alright all
[12:49:03] <scottjehl> yes plz
[12:49:12] <toddparker> meeting is over. see you over on -dev
