[09:00:38] <arschmitz> Hi
[09:00:44] <scott_gonzalez> snover: jrossi1 arschmitz jzaefferer
[09:00:49] <scott_gonzalez> M4rius
[09:01:40] <arthurvr> hey there
[09:01:55] <scott_gonzalez> Style guide and functional tests PRs were merged.
[09:02:12] <arschmitz> yay
[09:02:14] <scott_gonzalez> I started looking into the unit tests, but I didn't have too much time this week.
[09:02:22] <scott_gonzalez> So I don't actually have much to talk about.
[09:02:27] <scott_gonzalez> Anyone have items for the agenda?
[09:02:45] <arschmitz> im finishing a PR for some more style guide stuff thats about it
[09:02:56] <arschmitz> switching quotes
[09:04:22] <scott_gonzalez> ok
[09:04:27] <scott_gonzalez> Anyone have anything else?
[09:07:36] <M4rius> The call for the pointer events group got postponed, right? To tackle the issue with what is supposed to happen after a capture has been released.
[09:08:29] <jrossi1> there was no call this week
[09:08:43] <jrossi1> probably will have one next week if folks can attend
[09:09:31] <M4rius> as scott_gonzalez considered, FF nightly's current is different than IEs
[09:09:43] <M4rius> *current behaviour
[09:09:53] <scott_gonzalez> Yeah, I'll bring everything up in the next call.
[09:10:48] <scott_gonzalez> I have this issue and web driver tests to discuss with the WG.
[09:11:04] <scott_gonzalez> This issue is already on the WG list for discussion.
[09:12:04] <M4rius> ok great
[09:12:15] <scott_gonzalez> I think that's it for today then. Unless anyone has another item to discuss?
[09:14:09] <scott_gonzalez> Thanks everyone.
[09:14:22] <scott_gonzalez> Hopefully we'll have some discussion in PEWG before our next meeting.
[11:01:54] <arschmitz> agcolom: gabriel_schulhof jasperdegroot sfrisk apsdehal arthurvr meeting time
[11:02:01] <gabriel_schulhof> Hey!
[11:02:05] <jasperdegroot> hi
[11:02:06] <arthurvr> hey hey
[11:02:28] <sfrisk> Hello!
[11:05:02] <arschmitz> agenda https://docs.google.com/spreadsheets/d/1xGEVtftLDEHAA37YYlA23J_EZwIRyMUaseBY790byPM/edit#gid=370772533
[11:06:59] <arschmitz> ok lets start with ui stuff as uasual
[11:07:04] <jasperdegroot> is there a tab for today?
[11:07:10] <arschmitz> oh shoot
[11:07:15] <arschmitz> i accidently updated last weeks
[11:07:53] <arschmitz> ok there we go
[11:08:09] <arschmitz> so prototype mixins we talked a bit about last week
[11:08:11] <arschmitz> there is a PR now
[11:08:21] <arschmitz> https://github.com/jquery/jquery-ui/pull/1554
[11:08:55] <arschmitz> which allows the form reset mixin
[11:10:03] <agcolom> sorry just arrived back
[11:10:44] <arschmitz> agcolom: welcome
[11:11:00] <arschmitz> there is also a pr now for the form reset mixin
[11:11:01] <arschmitz> https://github.com/jquery/jquery-ui/pull/1555
[11:11:32] <arschmitz> which i realized now we can use a single handler across every widget instead of 1 per type
[11:11:50] <arschmitz> scott_gonzalez: PR already reflects this
[11:14:52] <arschmitz> ok so ui is planning on splitting up ui core
[11:15:06] <arschmitz> which is good for us because it will remove backcompat stuff we dont need
[11:15:52] <arschmitz> however it also means that any file that depends on ui core we need to figure out exactly which pieces it uses
[11:16:17] <arschmitz> i also want to split up our helpers and defaults modules
[11:16:35] <arschmitz> so i started tracing all the dependencies here https://docs.google.com/spreadsheets/d/17YuKwz0Qq0aAwi6oqQ7KmDkTDN8LHipjuuL91nwAwCI/edit
[11:18:34] <arschmitz> oh and navigation.js too
[11:20:24] <arschmitz> any one have any thoughts on anything so far?
[11:20:54] <gabriel_schulhof> Just a hunch that _maybeDegradeTransition could be done simpler.
[11:21:03] <gabriel_schulhof> We needn't define it in two places.
[11:21:21] <gabriel_schulhof> We should just define it in one place and AMD-depend on that place wherever we deal with transitions.
[11:22:02] <arschmitz> i think a lot of this can be removed completely or handled better
[11:22:14] <arschmitz> which i hope to address when i start splitting things up
[11:22:20] <gabriel_schulhof> OK,
[11:22:46] <arschmitz> there are some things in there only used by a single module
[11:23:27] <arschmitz> ok so theme extension
[11:23:35] <arschmitz> i started making this address more cases
[11:23:42] <arschmitz> there is one case gabriel_schulhof brought up though i need to add
[11:26:24] <arschmitz> that brings us to something i spent a lot of time and thought on this week
[11:26:39] <arschmitz> enhancements to the new autoinit
[11:26:50] <arschmitz> i implemented multiple widgets
[11:27:07] <arschmitz> via data-role="widget1 widget2 widget3"
[11:27:21] <gabriel_schulhof> So it /is/ possible?
[11:27:21] <arschmitz> and at the same time actually improved performance quite a bit
[11:27:50] <arschmitz> basicly i removed all concepts of widgets or the widget factory from autoinit
[11:28:32] <gabriel_schulhof> So, let me guess: One pass for "[data-role]", and one pass for each custom initSelector, right?
[11:29:03] <gabriel_schulhof> ... and we're not gonna have any more custom initSelectos Real Soon Nowâ„¢, so it's just gonna be that one pass.
[11:29:13] <arschmitz> yup
[11:29:29] <arschmitz> and all the hooks get passed a jquery object
[11:29:33] <arschmitz> enhancables
[11:29:39] <arschmitz> which is that collection
[11:29:50] <arschmitz> that way they can use the same fast track where it makes sense
[11:30:09] <arschmitz> the init selector stuff is now a hook
[11:30:15] <arschmitz> called the widgetCrawler
[11:30:33] <gabriel_schulhof> OK, but for each element returned in the "[data-role]" pass, you need to retrieve the data-role attribute to check which widgets to run on it, right?
[11:30:48] <gabriel_schulhof> Is that not expensive?
[11:31:07] <gabriel_schulhof> I mean, I guess it's not more expensive than doing all those passes on the same tree, right?
[11:31:25] <arschmitz> yes
[11:31:54] <arschmitz> but getting attributes is not expensive
[11:32:06] <arschmitz> the reason data is is because of the type conversion
[11:32:15] <gabriel_schulhof> Good point!
[11:32:26] <arschmitz> and its once per element its not like each widget does it
[11:32:55] <gabriel_schulhof> Yep. Cool!
[11:33:03] <arschmitz> this also adds
[11:33:10] <arschmitz> $.fn.enhanceOptions
[11:33:26] <arschmitz> which compiles all that data-* options into an options object
[11:33:48] <arschmitz> oh also with the widget crawler
[11:33:59] <arschmitz> it does nothing if no initGenerator is defined
[11:34:56] <arschmitz> the idea is to push the fast track as much as possible i think
[11:35:10] <arschmitz> so another change here is we check if $.widget is defined
[11:35:24] <arschmitz> and if it is we extend the widget prototype with getcreate options
[11:35:36] <arschmitz> it checks this on every run of enhance
[11:35:47] <arschmitz> so that this is now truely load order independant
[11:35:57] <arschmitz> gabriel_schulhof: oh another substatial change
[11:36:06] <arschmitz> now we just blindly do
[11:36:22] <arschmitz> if( $.fn.role ) element[ role ]()
[11:36:30] <arschmitz> so roles can be any $.fn function
[11:36:33] <arschmitz> not just widgets
[11:37:04] <gabriel_schulhof> Nice! That brings in all jQuery plugins, some of which border on widgets.
[11:39:38] <arschmitz> yup
[11:40:28] <arschmitz> so
[11:40:34] <arschmitz> the really maddening part
[11:40:39] <arschmitz> nested options
[11:40:48] <arschmitz> we have talked about supporting this for a long time
[11:41:12] <arschmitz> something in the form of data-option-name.nested-option
[11:41:36] <gabriel_schulhof> At this point we should just drop the - and just go with CamelCase ...
[11:41:40] <arschmitz> which would convert to name.nestedOption
[11:41:45] <arschmitz> gabriel_schulhof: you cant
[11:41:53] <arschmitz> js converts everything to lower
[11:41:57] <gabriel_schulhof> Oh ...
[11:41:59] <gabriel_schulhof> Dang ...
[11:42:06] <arschmitz> which brings me to the issue
[11:42:08] <gabriel_schulhof> Wait ... so?
[11:42:16] <gabriel_schulhof> Why must options be CamelCase?
[11:42:31] <gabriel_schulhof> After all, widgets never are.
[11:42:32] <arschmitz> because all variables are
[11:42:40] <arschmitz> its in the style guide
[11:42:49] <gabriel_schulhof> Yeah, but this is data coming in from the DOM, not variables.
[11:42:56] <gabriel_schulhof> Variables are what you declare in your code.
[11:42:59] <arschmitz> but the option in the widget is
[11:43:14] <arschmitz> so how do we tell that optionname shoudl be optionName
[11:43:18] <arschmitz> if you dont use a dash
[11:43:31] <gabriel_schulhof> Well, if there's no conflict, there's no problem.
[11:43:33] <arschmitz> the dash to camel conversion is part of the html data- attribute spec
[11:43:45] <gabriel_schulhof> Well, OK.
[11:43:48] <arschmitz> gabriel_schulhof: but you cant know that
[11:44:09] <arschmitz> gabriel_schulhof: also there is a real problem here
[11:44:21] <gabriel_schulhof> Just to be the devil's advocate: If you have optionName and optionname side-by-side, find another widget factory to run your ill-designed widget.
[11:44:43] <gabriel_schulhof> But OK. I understand the need for the dash-to-CamelCase conversion.
[11:45:03] <arschmitz> there is an actual problem here though
[11:45:11] <arschmitz> we now have options with dashes in them
[11:45:17] <arschmitz> in the form of the class keys
[11:45:27] <gabriel_schulhof> *facepalm*
[11:45:50] <arschmitz> those are a special case and not allowed by our style conventions any where else
[11:45:55] <arschmitz> but they cause us real pain here
[11:46:13] <arschmitz> because there is no way to know if it should be a camel cased nested option or retain dashes
[11:46:22] <gabriel_schulhof> data-classes-<starting at this point, dash no longer means uppercase>
[11:46:40] <arschmitz> gabriel_schulhof: but we have to support camecasing
[11:46:57] <gabriel_schulhof> gabriel_schulhof: No. We reserve the space under classes for our own convention.
[11:47:21] <gabriel_schulhof> Everywhere else, we support it.
[11:47:32] <gabriel_schulhof> After all, data-ui-classes is highly project-specific already.
[11:47:44] <arschmitz> maybe but my thoughts were one of 2 things
[11:47:53] <arschmitz> one dont support nested options
[11:48:00] <arschmitz> we have never actually had a feature request for it
[11:48:29] <arschmitz> but we have never really had much in the way of nested options
[11:48:53] <arschmitz> classes changes that
[11:49:13] <gabriel_schulhof> We will always have Paris^H^H^H^H^HJSON.
[11:49:17] <arschmitz> however you could still do data-classes="{'ui-button': 'foo'}"
[11:49:38] <arschmitz> the other thing i kinda thought of along the lines of your idea was do
[11:49:59] <arschmitz> data-classes[ui-button]="foo"
[11:50:09] <arschmitz> i like the parity with how this is handled in js
[11:50:26] <gabriel_schulhof> Is that legal markup?
[11:50:33] <arschmitz> i think so
[11:50:41] <arschmitz> pretty sure i tried it let me double check though
[11:51:44] <gabriel_schulhof> If we honour our CamelCase convention, that would mean { "classes[uiButton]": "foo" }
[11:51:54] <arschmitz> yes
[11:52:01] <gabriel_schulhof> So, we'd have to parse the key a bit.
[11:52:05] <arschmitz> yup
[11:52:08] <arschmitz> thats unavoidable
[11:52:17] <gabriel_schulhof> Not bad.
[11:52:23] <arschmitz> i even looked into reimplementing core data
[11:52:26] <arschmitz> to avoid it
[11:52:37] <gabriel_schulhof> You could do this to an arbitrary depth, too.
[11:52:41] <arschmitz> but getAttribute does all the lowercasing
[11:52:55] <arschmitz> also .data() caches
[11:53:03] <gabriel_schulhof> However, you'd have to re-dash the class-keys.
[11:53:06] <arschmitz> so to match speed we would have to re implement that class
[11:53:22] <arschmitz> gabriel_schulhof: yes anything camelcased will be convered to dashes inside []
[11:53:27] <jasperdegroot> I don't think uppercase is allowed in data- attribute name
[11:53:34] <arschmitz> jasperdegroot: its not
[11:53:38] <arschmitz> thats why it gets lowercased
[11:53:58] <gabriel_schulhof> I like this latter approach.
[11:54:19] <arschmitz> gabriel_schulhof: so both data-option.foo and data-option[foo] would be valiud
[11:54:26] <arschmitz> but only [] would do dashes
[11:54:49] <gabriel_schulhof> ... especially since this does not commit the dev to overwriting the whole classes option.
[11:55:05] <gabriel_schulhof> ... saving us from having to merge-on-create-but-overwrite-later.
[11:55:16] <arschmitz> gabriel_schulhof: thats all done by the factory already
[11:55:20] <arschmitz> and we only read once
[11:55:23] <arschmitz> so that does not matter
[11:55:28] <gabriel_schulhof> Yeah, true.
[11:55:54] <gabriel_schulhof> ... because the factory does not recognize cool declarative markup-based addressing of class keys - he he!
[11:55:54] <arschmitz> and [] does work http://jsbin.com/bijodo/1/edit?html,js,output
[11:56:40] <arschmitz> so the question remains
[11:58:00] <arschmitz> should we support this at all
[11:58:07] <arschmitz> nested option setting that is
[11:58:21] <arschmitz> or wait for an actual feature request
[11:58:28] <gabriel_schulhof> I think this latter approach is great, and we should introduce it as soon as someone files a bug.
[11:58:56] <gabriel_schulhof> We already have a lot of work to do for 1.5.
[11:59:04] <arschmitz> gabriel_schulhof: its already done
[11:59:15] <arschmitz> so its just a question of if it stays in the PR or not
[11:59:43] <jasperdegroot> +1 to wait
[11:59:48] <gabriel_schulhof> Do we have any idea how classes will be used?
[12:00:01] <arschmitz> gabriel_schulhof: what do you mean
[12:00:17] <arschmitz> gabriel_schulhof: we have been pushing 2 different use cases
[12:00:18] <gabriel_schulhof> arschmitz: I mean that, will people actually write data-classes[ui-button]?
[12:00:29] <arschmitz> the first this could very well happen
[12:00:36] <arschmitz> to customize individual instances
[12:00:53] <arschmitz> or add classes in general to certain ones
[12:01:07] <arschmitz> the second use case is when you want to change every instance
[12:01:13] <arschmitz> this would be done on the prototype level
[12:01:15] <gabriel_schulhof> If we put class keys like ui-widgetname-componentname on all elements, people can do a lot with CSS, I think.
[12:01:37] <arschmitz> gabriel_schulhof: absolutely
[12:01:50] <gabriel_schulhof> You can address individual widgets with a class at the top-level element.
[12:01:52] <arschmitz> thats why im bringing this up now this is the first time we had an option that this would be wanted for
[12:02:40] <gabriel_schulhof> Markup and JS should only be used for styling where CSS is not expressive enough.
[12:03:08] <gabriel_schulhof> jasperdegroot: If we do the classes right, how much do you think people will need to add individual classes using such data-attributes?
[12:03:24] <gabriel_schulhof> jasperdegroot: Not asking any easy questions to day, am I?
[12:03:31] <jasperdegroot> lol
[12:03:32] <gabriel_schulhof> :)
[12:03:48] <arschmitz> gabriel_schulhof: well with chassis this wont be an issue
[12:03:49] <jasperdegroot> gabriel_schulhof: have to read it a couple times to see if I understand what you mean
[12:03:59] <arschmitz> but with our current theme there is a lot of specificity
[12:04:11] <jasperdegroot> yeah
[12:04:13] <arschmitz> also any time your dealing with generated elements
[12:04:35] <arschmitz> its a pain because you start adding containers just to have a parent class to key off
[12:04:53] <gabriel_schulhof> That's just it though ... adding ui-widgetname-componentname to each generated element should solve that.
[12:05:01] <arschmitz> gabriel_schulhof: no
[12:05:07] <arschmitz> not if you want to only change a single instance
[12:05:18] <jasperdegroot> not with our current theme
[12:05:18] <gabriel_schulhof> Not if the outside element is part of the initial markup.
[12:05:45] <arschmitz> gabriel_schulhof: thats just it its not always that way
[12:06:01] <gabriel_schulhof> arschmitz: Could you please give me an example?
[12:06:10] <arschmitz> where a wrapper is generated?
[12:06:12] <arschmitz> textinput
[12:06:56] <gabriel_schulhof> OKOK, hold on. I had it backwards. You're talking element generated outside the element ... OK.
[12:07:18] <gabriel_schulhof> OK. That's an excellent point.
[12:07:38] <arschmitz> so if you want to change the style of the icon in a single textinuput
[12:07:46] <arschmitz> you MUST either add your own extra wrapper
[12:07:51] <arschmitz> or use the classes option
[12:08:51] <gabriel_schulhof> Yes, technically true, but how often is such a textinput not already in an "extra wrapper", which servers more purposes than just to explicitly wrap the textinput?
[12:09:01] <gabriel_schulhof> OK.
[12:09:07] <gabriel_schulhof> Eating my words.
[12:09:09] <gabriel_schulhof> NM.
[12:09:24] <gabriel_schulhof> If you have a form with two inputs, and you need to customize one, you're already in trouble.
[12:09:46] <arschmitz> yup
[12:10:03] <arschmitz> but thats not the point here we already the the option
[12:10:13] <arschmitz> its just about how via markup we force you to set it
[12:10:52] <gabriel_schulhof> Well, one last weak argument is that with the current version such customization is not possible either, except via data-enhanced.
[12:12:00] <arschmitz> what do you mean?
[12:12:05] <arschmitz> why isnt it?
[12:12:16] <gabriel_schulhof> Well, how do you customize the icon nowadays?
[12:12:36] <gabriel_schulhof> Suppose you want not a search icon, but a question mark icon for a search field?
[12:13:00] <jasperdegroot> that's not really a theming thing
[12:13:08] <arschmitz> agreed
[12:13:12] <jasperdegroot> and that changes now we switch to spans
[12:13:20] <gabriel_schulhof> No, I mean for a particular input.
[12:13:24] <gabriel_schulhof> Not for the whole theme.
[12:13:28] <gabriel_schulhof> How do you do it in 1.4.x?
[12:13:45] <arschmitz> also fairly certain the new widget will support an icon option
[12:13:47] <jasperdegroot> override the CSS
[12:14:00] <jasperdegroot> because we use :after
[12:14:01] <arschmitz> yup
[12:15:11] <jasperdegroot> actually, you can still do that when we use span of course
[12:15:22] <jasperdegroot> it's still a background-image
[12:15:45] <arschmitz> yes
[12:15:52] <arschmitz> but it requires the wrapper to key off
[12:15:56] <arschmitz> to customize a single one
[12:16:04] <arschmitz> that is what we are trying to avoid now
[12:16:19] <gabriel_schulhof> So, why does it not require the wrapper to key off with :after?
[12:16:24] <arschmitz> it does
[12:16:29] <arschmitz> thats the point this is bad
[12:16:39] <arschmitz> thats why we are adding the classes option
[12:16:45] <arschmitz> again the option already exists
[12:16:53] <arschmitz> this is only about setting the option via attributes
[12:17:35] <gabriel_schulhof> Yeah, OK, then let's do it. I mean, what's the point of adding the option, if you can only changes for the prototype?
[12:17:46] <gabriel_schulhof> change it
[12:17:56] <arschmitz> well thats not true either you can set it via json
[12:18:00] <arschmitz> in the attribute
[12:18:02] <arschmitz> or via js
[12:18:14] <gabriel_schulhof> Does reading JSON from the attribute already work?
[12:18:21] <arschmitz> it always has
[12:18:28] <arschmitz> since version 1
[12:18:33] <gabriel_schulhof> Oh, well, then this is no more than convenience ...
[12:18:37] <arschmitz> yes
[12:18:51] <gabriel_schulhof> ... especially since the merge-on-create is already there ...
[12:18:57] <arschmitz> yup
[12:19:22] <gabriel_schulhof> Well, then I dunno ... is it really worth the extra effort?
[12:19:34] <gabriel_schulhof> I mean, I understand you've written it, but to support it.
[12:19:44] <arschmitz> well effort is negligible the implementation is simple and already done
[12:19:45] <gabriel_schulhof> ... and it needs to be documented, and tested ...
[12:20:00] <arschmitz> but the question is A if we want to support this
[12:20:01] <jasperdegroot> I still think we should wait
[12:20:07] <arschmitz> and b should we wait for a request
[12:20:16] <gabriel_schulhof> I think we should wait.
[12:20:17] <jasperdegroot> until it is requested
[12:20:31] <arschmitz> ok that was what i wanted as well
[12:20:37] <gabriel_schulhof> If people find the JSON way cumbersome, we have a handy-dandy alternative ready at the snap of a finger.
[12:20:41] <arschmitz> if its requested ill add it
[12:21:13] <gabriel_schulhof> ... but like you said - JSON was supported from day 0, so that's probably rock-solid.
[12:21:29] <arschmitz> well we never documented it was
[12:21:43] <arschmitz> i dont know if anyway has ever tried it other then me to double check it
[12:21:58] <arschmitz> but we used .data() which attempts smart type conversion
[12:22:04] <arschmitz> you can even put functions in there
[12:22:15] <arschmitz> and it will attempt to make it work
[12:22:28] <jasperdegroot> didn't we use that somewhere?
[12:22:39] <jasperdegroot> for the listview filter or something
[12:22:54] <gabriel_schulhof> Wow! .data() sounds more and more like sendmail ... degrade as gracefully as the laws of physics will allow :)
[12:23:14] <arschmitz> gabriel_schulhof: you knew this already you implemented a copy of it in mobile
[12:23:33] <arschmitz> https://github.com/jquery/jquery-mobile/blob/master/js/data.js#L24
[12:23:35] <gabriel_schulhof> Was there JSON in there?
[12:24:03] <gabriel_schulhof> Oh yeah!
[12:24:04] <gabriel_schulhof> There it is.
[12:24:28] <arschmitz> that function is actually not great though its slow
[12:24:32] <arschmitz> because it does not cache
[12:24:39] <arschmitz> core data caches
[12:24:48] <jasperdegroot> arschmitz: anything else you wanted to discuss? we are running late
[12:25:03] <arschmitz> jasperdegroot: yeah there is a bunch left but i guess we can wait until next week
[12:25:16] <jasperdegroot> ok
[12:25:24] <gabriel_schulhof> Yeah, that was purely a replacement for native getAttribute() that does type conversion and takes into account the namespace.
[12:25:24] <jasperdegroot> I have to go now
[12:25:30] <jasperdegroot> later all
[12:25:35] <gabriel_schulhof> jasperdegroot: K L8R
[12:25:43] <arschmitz> ok anyone have anything thats we need to go over
[12:26:04] <gabriel_schulhof> Just the core breakage, but that's getting on in core.
[12:26:05] <arschmitz> or any prs they want to try to land for me to prioritize
[12:26:20] <arschmitz> gabriel_schulhof: which core breakage?
[12:26:29] <gabriel_schulhof> arschmitz: The .preventDefault() stuff.
[12:26:40] <arschmitz> did we figure that out i dont remember?
[12:26:44] <gabriel_schulhof> Yes.
[12:26:50] <arschmitz> oh ok what was it lol?
[12:26:56] <gabriel_schulhof> .originalEvent is sometimes {}
[12:27:03] <gabriel_schulhof> So it doesn't have a .preventDefault()
[12:27:03] <arschmitz> right!!!
[12:27:09] <arschmitz> thats us though
[12:27:13] <gabriel_schulhof> No.
[12:27:14] <gabriel_schulhof> It's core.
[12:27:21] <gabriel_schulhof> jQuery.event.simulate(), to be precise.
[12:27:32] <gabriel_schulhof> It explicitly sets .originalEvent to {}
[12:27:47] <arschmitz> ok so whats the deal there is this a bug or do we need to fix?
[12:28:03] <gabriel_schulhof> So, the question now is whether we should delete e.originalEvent or leave it as a fake event and reinstate the guards.
[12:28:21] <gabriel_schulhof> https://github.com/jquery/jquery/pull/2303/
[12:29:04] <gabriel_schulhof> Anyway, that needs to settle and land in core master before we can have green tests.
[12:29:43] <gabriel_schulhof> If the guards stay off, it's a good thing because it exposes all the fake event everyone's been using.
[12:29:59] <gabriel_schulhof> ... but if may just be simpler to revert the change that caused the breakage.
[12:30:12] <gabriel_schulhof> I leave the decision up to the pros in #jquery-dev.
[12:30:42] <gabriel_schulhof> s/if/it/
[12:31:10] <gabriel_schulhof> Anyway, that was the only other thing. Let's get back to -dev.
[12:31:13] <arschmitz> ok
[12:31:28] <arschmitz> i have one thing id liek on the record related
[12:31:29] <arthurvr> bye
[12:31:50] <arschmitz> which is i found MAJOR breakages in UI from core changes to offset
[12:31:55] <arschmitz> we need to check mobile
[12:32:03] <arschmitz> some of these were only in tests
[12:32:16] <arschmitz> but also half a dozen widgets were actually broken
[12:32:30] <gabriel_schulhof> I see stormclouds gathering on the horizon.
[12:32:42] <arschmitz> and their tests did not fail
[12:32:58] <arschmitz> even though they threw errors
[12:33:03] <arschmitz> thats bad
[12:33:04] <gabriel_schulhof> I'm sorry - this is too dramatic for me ... LOL :)
[12:33:21] <arschmitz> we need to check anything we can think of that uses .offset()
[12:33:38] <gabriel_schulhof> Like, oh, I dunno ... popup ... that uses it extensively!
[12:33:42] <arschmitz> up
[12:33:57] <arschmitz> the breaks in ui dont effect us
[12:34:02] <arschmitz> because it was only interactions
[12:34:06] <arschmitz> and things that use position
[12:34:13] <gabriel_schulhof> Right.
[12:34:27] <arschmitz> but my thought was popup and the slider popup
[12:34:34] <gabriel_schulhof> Yep.
[12:34:47] <gabriel_schulhof> Should've maybe started using position so the fix there would fix popup too.
[12:35:05] <arschmitz> https://github.com/jquery/jquery/issues/2310
[12:35:39] <arschmitz> we will want to add a comment there if we find breakages in mobile
[12:36:02] <gabriel_schulhof> OK. I'll put it on my todo list.
[12:36:12] <arschmitz> there are 3 or 4 other potentially breaking commits to offset aside from the one i link there also
[12:36:26] <arschmitz> but they didnt break anything i found in ui
[12:37:05] <arschmitz> ok so unless there is another urgent topic lets go back to dev
[12:37:16] <arschmitz> gabriel_schulhof: if you have time there is something else i want to discuss
[12:37:21] <arschmitz> in dev
[12:37:40] <gabriel_schulhof> Not immediately, unfortunately, but I'll try to get back in a couple of hours.
[12:37:40] <arschmitz> ok thanks every one
[12:37:46] <gabriel_schulhof> K L8R
