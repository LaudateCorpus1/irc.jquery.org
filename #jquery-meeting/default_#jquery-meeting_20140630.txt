[09:01:08] <DaveMethvin> meeting time!
[09:01:22] <DaveMethvin> poor timmywil was all alone last week
[09:01:50] <gibson042> GUESS WHO'S BACK FROM EIGHT DAYS IN THE WOODS
[09:02:00] <timmywil> Oprah?
[09:02:02] <DaveMethvin> um, you?
[09:02:17] <DaveMethvin> did they have javascript out there?
[09:02:40] <DaveMethvin> people tell me javascript is everywhere
[09:03:11] <gibson042> they shut off the javascript three days in
[09:03:15] <gibson042> it was horrible
[09:03:30] <markelog> hey-hey
[09:03:41] <gibson042> I had to C# my way through the rest of the week
[09:03:49] <DaveMethvin> wow that's roughing it
[09:04:09] <timmywil> Javascript. Like discovering fire.
[09:04:15] <DaveMethvin> okay, lessee
[09:04:19] <m_gol> DaveMethvin: I've almost missed it since you didn't start by your usual summoning ;)
[09:04:44] <DaveMethvin> m_gol: meeting time! :)
[09:04:48] <m_gol> thx :P
[09:05:03] <DaveMethvin> is timmywil  around?
[09:05:08] <m_gol> we have some broken tests
[09:05:12] <m_gol> after last Sizzle updates
[09:05:13] <timmywil> Do you not see my messages?
[09:05:17] <DaveMethvin> oh yeah
[09:05:18] <m_gol> :shakes fist:
[09:05:18] <m_gol> ;)
[09:05:26] <DaveMethvin> i missed yours
[09:05:33] <timmywil> man, they were funny too
[09:05:48] <DaveMethvin> well, i dunno about that .. :)
[09:05:48] <timmywil> I'M FUNNY
[09:06:01] <DaveMethvin> and darn it, people like you
[09:06:11] <timmywil> I'm smart enough
[09:06:27] <DaveMethvin> m_gol you want to fill in the test fails there?
[09:06:34] <timmywil> Ok, we should just close that pull
[09:06:50] <DaveMethvin> wat, 266?
[09:06:58] <timmywil> 1606
[09:07:06] <DaveMethvin> agreed
[09:07:08] <timmywil> sry to skip ahead
[09:07:31] <DaveMethvin> done
[09:07:58] <timmywil> as for sizzle/266, I'd say we wait a couple more days then see what Isaac thinks.
[09:08:06] <DaveMethvin> yeah that's fine
[09:08:18] <DaveMethvin> we could take sizzlejs instead but really they should give sizzle up
[09:08:19] <m_gol> timmywil: what changed recently that http://swarm.jquery.org/result/1928657 broke? Is this an incorrect test now?
[09:08:26] <m_gol> yup
[09:09:00] <DaveMethvin> quoats!
[09:09:10] <gibson042> m_gol: correct
[09:09:19] <timmywil> hmm, we've always made a special case for #
[09:09:25] <gibson042> the non-alphanumeric value should be quoted
[09:09:33] <DaveMethvin> WWBD?
[09:09:39] <DaveMethvin> what would browser do?
[09:09:41] <gibson042> special-casing was out of convenience, and IIRC never guaranteed
[09:10:06] <gibson042> the fact that it made it to Sizzle at all was because qSA threw
[09:10:15] <timmywil> ok, it's valid, but I hope we don't break too much.
[09:10:35] <DaveMethvin> well this is the time to "break" things
[09:10:47] <DaveMethvin> we can always unbreak if it gets too bad
[09:10:54] <timmywil> ok
[09:11:17] <DaveMethvin> but people are always saying "$() is just qSA" well let's give em what they want
[09:11:24] <m_gol> hahahaha
[09:11:25] * DaveMethvin grins with evil
[09:11:30] * timmywil cries
[09:11:40] * DaveMethvin checks own code for breakage
[09:11:55] <gibson042> for the record, https://github.com/jquery/sizzle/commit/f204a6112216f31685717d9fc1bf6cabf42b2ef1 is the Sizzle commit
[09:12:07] <DaveMethvin> okay, so i spewed out some stuff on $.xhr
[09:12:17] <DaveMethvin> asked jaubourg to take a look but haven't heard from him
[09:12:43] <DaveMethvin> i figure if we're gonna create something new we shouldn't try to make it $.ajax compat necessariliy
[09:13:11] <DaveMethvin> and we should avoid internalizing a bunch of behavior in options because it makes things very hard to modularize
[09:14:01] <DaveMethvin> so take a look and think about how you use ajax, does this handle the common cases?
[09:14:45] <DaveMethvin> the main places I got hung up was with cases where someone wants to use beforeSend or things like that where you want to monkey with the request in the middle
[09:15:04] <DaveMethvin> i really don't want a bunch of callbacks in the options if it can be avoided
[09:17:12] <DaveMethvin> you'll prob want to meditate on that for a while, but if you have comments just put them on the gist or fork off a copy
[09:17:16] <timmywil> is that common enough?
[09:17:30] <DaveMethvin> timmywil: not sure if it is or not
[09:17:33] <timmywil> If the request needs to be different, it can be created differently
[09:18:00] <DaveMethvin> yeah it almost seems like it should be done with a different api if its out of the ordinary
[09:18:48] <DaveMethvin> i like something of this sort because all the conversions and checks are done outside of the request, which means you don't need to pull in those modules if you don't use them
[09:19:02] <timmywil> so we're using native Promises?
[09:19:13] <DaveMethvin> welll, that's one of the questions :)
[09:19:31] <DaveMethvin> i definitely think the lack of a callback should make the api return a promise
[09:19:39] <DaveMethvin> but not sure whether a Deferred shoudl be an option too
[09:19:46] <DaveMethvin> and if so how to specify
[09:19:52] <DaveMethvin> i guess it would be via options
[09:20:30] <timmywil> or overridable. $.xhr.Promise or something
[09:20:38] <DaveMethvin> i haven't gone through to see whether there would be other behavior differences
[09:21:11] <DaveMethvin> i'd worry about $.xhr.Promise because it would change things for all callers, which would be really messy on a big project with third party code
[09:21:35] <m_gol> we have to choose the default anyway but reducing global state would be good
[09:21:39] <DaveMethvin> better to make people wrap $.xhr to get a specific type of promise I think
[09:21:48] <m_gol> +1
[09:21:51] <DaveMethvin> i was assuming ajaxOptions are gone
[09:22:08] <DaveMethvin> i hooked the converters off $.xhr but that was just to prevent polluting the namespace
[09:22:13] <m_gol> we should drop core/ready hard dependency on Deffered while we're at it
[09:22:26] <DaveMethvin> yeah it would be good to do that
[09:22:41] <timmywil> If we're talking about supporting all 2.0 browsers, I don't think we can use native Promises
[09:22:54] <timmywil> by default anyway
[09:23:01] <DaveMethvin> you could use a shim
[09:23:09] <m_gol> how large it is?
[09:23:18] <m_gol> if this is the default, we'd have to include one I guess
[09:23:37] <timmywil> yea, I guess there are lots of shims, but we already have something that is official jQuery
[09:24:03] <DaveMethvin> i think if options specify a promise-like factory that might be good enough
[09:24:08] <timmywil> and if it's swappable, win-win
[09:24:31] <DaveMethvin> perhaps the default would be Deferred since it would generally be there
[09:24:38] <DaveMethvin> except on a custom build
[09:24:46] <DaveMethvin> in which case the person prob knows what they are doing
[09:25:18] <timmywil> whatever the default, I think it should be possible to use Deferred
[09:25:22] <DaveMethvin> yes
[09:25:49] <m_gol> it'd be good to test the build with Promise as well
[09:25:51] <scott_gonzalez> If it's possible the use native promises, I think that's a huge plus.
[09:26:18] <m_gol> we're currently testing only the main build
[09:26:20] <DaveMethvin> i think it should be able to use any promisey impl
[09:26:28] <m_gol> but maybe it's better to wait for Karma before doing that
[09:26:35] <timmywil> thenable compatible
[09:26:37] <DaveMethvin> we have that pull to improve our interop with other promise impls
[09:26:41] <DaveMethvin> yeah
[09:27:05] <DaveMethvin> also i didnt plan on supporting progress events etc with this
[09:27:26] <DaveMethvin> deferred supports progress but standard Promise does not
[09:27:28] <timmywil> native promise doesn't have it anyway, right?
[09:27:50] <DaveMethvin> yeah that would just cause more confusion
[09:28:02] <DaveMethvin> since ajax isn't going away it can be used for gold plated requests
[09:28:03] <timmywil> which means other promise implementations differ on its support for progress
[09:28:26] <timmywil> and would make it more difficult to sub in any thenable
[09:28:50] <DaveMethvin> yeah if we just use .then almost any impl should work
[09:29:36] <markelog> we could even provide a way for user to create a custom build with any promise impl they want
[09:29:45] <DaveMethvin> yeah
[09:29:54] <m_gol> DaveMethvin: so don't we have a problem with catching exceptions when we want to use both Deferred & Promise?
[09:30:15] <DaveMethvin> well if you use Deferred the exceptions aren't caught
[09:30:19] <DaveMethvin> if you use Promise they are
[09:30:24] <DaveMethvin> and may be silently swallowed
[09:30:45] <DaveMethvin> it's up to the user to choose what they want
[09:31:02] <DaveMethvin> we should be sure our impl works well for either, i think it can
[09:31:25] <DaveMethvin> also, is it time for us to do a download builder? there is a third party one
[09:31:27] <m_gol> k
[09:31:57] <m_gol> (wow, I've never seen so much green in the weekly build: http://swarm.jquery.org/job/3200)
[09:32:20] <DaveMethvin> clearly we aren't trying hard enough to break things m_gol
[09:32:22] <m_gol> (what spell do I need cast to have effects pass like that? :D)
[09:32:30] <markelog> ))
[09:32:31] <m_gol> only 2 runs, though
[09:32:33] <m_gol> back to normal now
[09:32:37] <m_gol> http://swarm.jquery.org/project/jqueryweekly
[09:32:38] <DaveMethvin> whew
[09:34:03] <DaveMethvin> do we have a ticket for the core dependency on Deferred?
[09:34:15] <DaveMethvin> actually i think .ready() is already broken out, lemme look
[09:34:55] <DaveMethvin> yeah so there's src/core/ready
[09:35:00] <DaveMethvin> ready.js
[09:35:00] <m_gol> yup
[09:35:05] <m_gol> I don't think we have a ticket
[09:35:25] <m_gol> so core/ready should fallback to standard Promise if !$.Deferred
[09:35:28] <DaveMethvin> so the idea would be to let people use .ready() but not need Deferred
[09:36:30] <DaveMethvin> trying to think whether we should just tell people to not use .ready() but it's SOOOO common
[09:36:47] <DaveMethvin> so removing that dep would be good
[09:37:10] <m_gol> there was time when not using ready led to broken code
[09:37:18] <m_gol> due to some tests being invoked on ready
[09:37:37] <m_gol> false negatives on box sizing etc.
[09:37:47] <DaveMethvin> jQuery.ready as a promise isn't really documented so changing it to be either Deferred or Promise thenable seems like it shoudl be okay
[09:37:54] <m_gol> so I don't blame people wanting to be secure ;)
[09:38:08] <DaveMethvin> so we'd then document that jQuery.ready is a thenable
[09:38:12] <m_gol> yeah
[09:38:16] <m_gol> hm
[09:38:18] <DaveMethvin> but not guarantee the underlying impl
[09:38:32] <m_gol> isn't thenable now a word with a meaning not satisfied by $.Deferred?
[09:38:38] <m_gol> that wording might be confusing
[09:39:09] <DaveMethvin> thenables are pretty sloppy
[09:39:13] <m_gol> I mean it's in the spec
[09:39:58] <DaveMethvin> well as long as people who want exact behavior have a way to get it
[09:40:19] <DaveMethvin> you can Promise.cast() or whatever it's called nowadays
[09:40:55] <m_gol> Promise.resolve ;)
[09:41:10] <DaveMethvin> our .ready() code needs some refactoring to work that way but should be possible
[09:41:37] <DaveMethvin> m_gol can you make a ticket for this?
[09:41:38] <m_gol> shouldn't be hard
[09:41:40] <m_gol> yup
[09:41:44] <DaveMethvin> thanks!
[09:41:59] <m_gol> if it loads :P
[09:42:26] <DaveMethvin> yeah
[09:42:52] <DaveMethvin> any other things we need to discuss?
[09:43:45] <m_gol> markelog: seems the effects code chokes up in IE8: http://swarm.jquery.org/result/1937999
[09:43:51] <m_gol> related to the rAF patch?
[09:44:23] <DaveMethvin> could be
[09:44:27] <markelog> shouldn't be but i will check it out
[09:44:36] <m_gol> http://bugs.jquery.com/ticket/15174
[09:45:43] <DaveMethvin> okay, looks like we're just about wrapped here
[09:46:24] <m_gol> trac, Y U SO SLOW
[09:46:25] <b-ot> m_gol: (屮'Д')屮
[09:46:33] <DaveMethvin> way too slow
[09:46:44] <m_gol> waiting 5 minutes for the page to refresh
[09:46:50] <DaveMethvin> spammers create about 200 logins a day
[09:46:54] <m_gol> :/
[09:47:01] <DaveMethvin> because we don't have email verification
[09:47:06] <m_gol> we should have this IP filter working or sth...
[09:47:35] <DaveMethvin> it looks like everything comes from a local ip because of the way the traffic is proxied
[09:47:41] <DaveMethvin> so we can't use ip filtering
[09:48:21] <DaveMethvin> okay, lets call this meeting over
[09:48:29] <DaveMethvin> thanks, see you back in -dev
[09:48:41] <DaveMethvin> i'm not traveling this week so i shoudl be around if you need me
