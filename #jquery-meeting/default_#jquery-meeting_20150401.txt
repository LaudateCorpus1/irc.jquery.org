[09:00:18] <scott_gonzalez> `uiteam
[09:00:18] <b-ot> scott_gonzalez: arschmitz jzaefferer fnagel mikesherov rxaviers rxaviers_ scott_gonzalez tj_vantoll tj_vantoll1
[09:01:54] <arthurvr> hey
[09:02:34] <scott_gonzalez> arschmitz: Update on button?
[09:03:07] <arschmitz> nope
[09:03:09] <arschmitz> :-/
[09:03:20] <arschmitz> been doing mostly mobile stuff the last week
[09:03:32] <scott_gonzalez> ok
[09:03:59] <scott_gonzalez> I've been pushing lots of updates to the amd-tests branch.
[09:03:59] <scott_gonzalez> https://github.com/jquery/jquery-ui/pull/1511
[09:04:14] <scott_gonzalez> I've added AMD support to QUnit and grunt-contrib-qunit.
[09:04:32] <scott_gonzalez> At this point, I think we're ready to finish updating all tests as soon as there's a new QUnit release.
[09:04:47] <scott_gonzalez> If anyone has been waiting to review, now's the time.
[09:05:02] <arschmitz> Yeah everything looked good to me once releases happened
[09:05:29] <tj_vantoll> I took a brief look and everything looked good to me too.
[09:05:57] <arschmitz> I really want to pull most of it out into its own modules once this lands though so i can share it with mobile
[09:06:04] <jzaefferer> I've asked leobalter to confirm that there are no blockers for a QUnit release. As soon as I hear from him (and can block some time), I can release QUnit 1.18
[09:06:26] <tj_vantoll> The diff of the test files themselves is sooooo nice.
[09:06:34] <scott_gonzalez> :-)
[09:06:46] <arschmitz> the common tests / domEqual / all the amd loading could all be used by mobile
[09:06:58] <scott_gonzalez> arschmitz: Yup, we'll work on that as soon as this lands.
[09:07:13] <jzaefferer> how much of that infrastructure can we reuse for demos?
[09:07:17] <jzaefferer> (do we want to?)
[09:07:25] <scott_gonzalez> I would definitely not want to reuse this for demos.
[09:07:33] <scott_gonzalez> It'd be awfully confusing to users.
[09:07:37] <arschmitz> i would almost prefer no amd for demos
[09:07:43] <arschmitz> scott_gonzalez: exactly what i was about to say
[09:08:35] <jzaefferer> so how is this helping to enable a split of core.js?
[09:09:03] <scott_gonzalez> I'm not against AMD in the demos, but that should just be standard use of requirejs.
[09:09:20] <jzaefferer> okay
[09:09:33] <jzaefferer> do we keep the require call inline on the page?
[09:09:43] <scott_gonzalez> yeah
[09:09:52] <jzaefferer> that way we'd mostly replace document-ready with define and drop some script tags
[09:10:16] <jzaefferer> that's more in line for using AMD in the first place, unlike our independent test files
[09:11:01] <jzaefferer> alright, next
[09:11:41] <scott_gonzalez> classes API docs
[09:12:01] <scott_gonzalez> arschmitz was supposed to send a PR for `classes: {}`
[09:12:08] <jzaefferer> I did that already
[09:12:11] <scott_gonzalez> oh
[09:12:33] <scott_gonzalez> So just waiting on review of the updates.
[09:12:36] <arschmitz> yup he beat me to it
[09:12:43] <scott_gonzalez> And related, I was going to look into nicer output for default values.
[09:13:07] <jzaefferer> What about these? https://github.com/jquery/api.jqueryui.com/pull/257#issuecomment-88532012
[09:13:23] <jzaefferer> I can address the first point, that seems fine
[09:13:45] <jzaefferer> I'm okay with the 2nd one, too
[09:14:37] <jzaefferer> scott_gonzalez: I'm currently putting the defaults into the option's <desc> element, inside a <pre><code> block, that seems fine and doesn't require any XSLT or CSS changes
[09:14:37] <scott_gonzalez> Yeah, I think it makes sense to document where the widgets use the common classes.
[09:15:01] <scott_gonzalez> Well, it breaks the semantics, right?
[09:15:02] <arschmitz> jzaefferer: this is in other places too though
[09:15:26] <jzaefferer> what semantics?
[09:15:27] <arschmitz> jzaefferer: anywhere we have a default thats an object or array etc
[09:15:34] <scott_gonzalez> If you're programatically reading the API, you wouldn't know the default values.
[09:15:34] * rxaviers on standby
[09:15:49] <arschmitz> scott_gonzalez: oh good point
[09:16:13] <arschmitz> and i know at least one thing in the wild actually doing that
[09:16:15] <jzaefferer> well, if we're making the change, let's support a <default> element
[09:16:24] <jzaefferer> putting multi-line objects inside an attribute sucks
[09:16:32] <scott_gonzalez> sure
[09:16:54] <jzaefferer> and remove the indent from that and other multi-line <code> blocks, so that we don't have to unindent them in the xml
[09:17:34] <scott_gonzalez> That's no so easy in XSL.
[09:17:52] <jzaefferer> preprocess xml with js :p
[09:17:56] <jzaefferer> oh well
[09:18:02] <jzaefferer> I'll comment on the issue
[09:18:31] <scott_gonzalez> Heh, we could potentially write a custom transform in node.
[09:18:52] <scott_gonzalez> As crazy as that sounds, we'd probably have better luck supporting that than the XSL :-P
[09:19:03] <arschmitz> ha ha
[09:19:18] <arschmitz> im fine with whatever you know what would work best better then i
[09:20:16] <jzaefferer> https://github.com/jquery/grunt-jquery-content/issues/64#issuecomment-88540986
[09:21:27] <scott_gonzalez> Oh, by custom transform I meant replace the XSL completely with a node script.
[09:22:31] <scott_gonzalez> Anyway, that gets us to the bugs we discussed last week.
[09:23:08] <scott_gonzalez> Since the never ending tooltip appending is due to a JAWS bug, I think we need to find someone to test.
[09:23:25] <scott_gonzalez> Can probably just ask Dylan since he did the initial testing and implementation.
[09:23:48] <jzaefferer> worth a try
[09:24:00] <scott_gonzalez> I'll send him an email
[09:24:49] <scott_gonzalez> And last on the agenda is the selectmenu height ticket.
[09:25:30] <scott_gonzalez> We didn't end up having much discussion about that after the meeting.
[09:25:30] <scott_gonzalez> http://bugs.jqueryui.com/ticket/11606
[09:26:53] <jzaefferer> width, height, everything is broken :/
[09:27:05] <jzaefferer> our bugs are two-dimensional!
[09:27:08] <scott_gonzalez> Well, native selectmenu heights are crazy.
[09:27:11] <scott_gonzalez> haha
[09:27:23] <arschmitz> as long as we dont have to start supporting 3d
[09:29:43] <jzaefferer> he writes "I've implemented...", was that the code that was removed?
[09:29:51] <scott_gonzalez> Firefox seems to have an actual fixed value for the max height.
[09:29:59] <jzaefferer> nope...
[09:30:06] <jzaefferer> (checked the diff)
[09:31:06] <jzaefferer> I guess the answer is to check what all the native selects do and find a reasonable sub/super set of that?
[09:31:33] <arschmitz> jzaefferer: there is the problem of mobile devices
[09:31:45] <arschmitz> jzaefferer: on a mobile native is a spinny thing
[09:31:46] <scott_gonzalez> OS X selects extend to the bottom of the page.
[09:31:52] <scott_gonzalez> And scroll up based on the item.
[09:32:00] <scott_gonzalez> So the menu overlaps the select.
[09:32:02] <arschmitz> jzaefferer: and scrolling a popup on mobile is not really a good idea
[09:32:19] <scott_gonzalez> Firefox uses a custom renderer and has a fixed max height.
[09:34:47] <scott_gonzalez> What if we just add `max-height: 20em` to the stylesheet?
[09:34:58] <scott_gonzalez> Then we get a default max height and it's easy to change.
[09:35:26] <scott_gonzalez> We still need to address the mobile issue, but that problem exists regardless.
[09:35:45] <arschmitz> well its actually a lot more friendly without the max-height on mobile
[09:35:49] <arschmitz> because you can scroll the page
[09:36:03] <arschmitz> but yeah i still dont think scrollingthe page is the best solution
[09:36:37] <arschmitz> is not the*
[09:36:48] <jzaefferer> eh?
[09:36:58] <arschmitz> sorry
[09:37:07] <jzaefferer> so you still think scrolling the page is the best solution for mobile?
[09:37:09] <arschmitz> i had it right first time ha ha ha
[09:37:24] <arschmitz> scrolling the page is NOT THE BEST solution for mobile
[09:37:29] <jzaefferer> alright
[09:37:34] <jzaefferer> so let's add max-height: 20em
[09:38:03] <arschmitz> for mobile devices i think we should detect a soft keyboard and fall back to native when its too big
[09:39:05] <scott_gonzalez> How do you detect that? Do you have to focus a text field and compare window heights?
[09:39:12] <arschmitz> no
[09:39:18] <arschmitz> check the height of a multiselect
[09:39:33] <arschmitz> vs a regular
[09:39:47] <arschmitz> if its going to popup a softkeyboard they are the same
[09:39:55] <arschmitz> on desktop multselects are multiline
[09:41:35] <scott_gonzalez> ok
[09:41:54] <arschmitz> so you can check once outside the widget
[09:41:55] <scott_gonzalez> Gotta force the height to auto to make sure it's a legit check.
[09:42:01] <arschmitz> yes
[09:42:43] <scott_gonzalez> Ok, anything else to discuss today?
[09:44:49] <scott_gonzalez> Thanks everyone. See you back in -dev.
