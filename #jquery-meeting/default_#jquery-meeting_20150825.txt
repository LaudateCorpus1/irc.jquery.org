[10:00:36] <sfrisk> Chassis Meeting Time!
[10:00:51] <arthurvr> hey
[10:00:57] <sfrisk> arschmitz, arthurvr, kristyjy
[10:01:13] <sfrisk> geekman-rohit already messaged me about not being available today
[10:02:29] <kristyjy> hi
[10:03:51] <sfrisk> Agenda: https://docs.google.com/spreadsheets/d/1FUdRcAq2d8njs8KAcfQmEyoZL74SXLsLp1rtc7E9z_I/edit?usp=sharing
[10:03:59] <sfrisk> Please add your name to the attending list
[10:07:11] <sfrisk> Okay so first up on the list is the great debate of BEM naming
[10:07:39] <sfrisk> since buttons have proved that using BEM naming convention for the modifiers for bem could get things a bit dicey
[10:08:51] <sfrisk> For further background information into this: https://github.com/jquery/css-chassis/issues/120
[10:09:04] <sfrisk> it seems that over the course of the week, the general decision has been "Option Number Three"
[10:09:24] <sfrisk> which is for modifiers, we should probably move away from BEM to prevent class names from getting out of control
[10:10:15] <kristyjy> so are we proposing using a BE solution (yeah I totally just made that up) or just loosing BEM all together?
[10:10:40] <sfrisk> I think Option three was basically making the modifier part be separate classes
[10:10:52] <sfrisk> in cases like buttons where there could be 5+ modifiers potentially
[10:11:32] <kristyjy> yeah that makes sense I guess. I guess I'm just wondering if the principle of using block and element type classes can be kept?
[10:12:34] <kristyjy> for example using .button-primary instead of .button .primary
[10:13:34] <sfrisk> I might also shorten .ui-button to ui-btn
[10:13:40] <kristyjy> if that's a discussion for another time I can shut up now :)
[10:13:45] <sfrisk> haha
[10:14:13] <sfrisk> I mean, you can argue that primary/success/error/warning is a modifier of the default .btn
[10:14:35] <sfrisk> the downside to this method is we will be overwriting styles in some cases (specifically bg color and font color a bunch)
[10:14:48] <sfrisk> which may or may not have a hit on performance
[10:14:51] <kristyjy> oh yeah good point I guess I was thinking about modifiers that were not likely to be changed with JavaScript
[10:15:36] <sfrisk> I know bootstrap goes with the "btn" and "btn btn-primary"
[10:16:09] <arschmitz> sorry conflicting meeting today here now
[10:16:14] <sfrisk> so that the basic button styles are in btn, and the color specific things are in btn-primary
[10:17:31] <arschmitz> modifiers will change with js constantly
[10:17:35] <sfrisk> we will be different from bootstrap though, that we'll have more options
[10:17:43] <arschmitz> thats a big part of the justification for this change in that issue
[10:18:28] <sfrisk> I think Kristy was refering to the fact that it was unlikely that the button-default/primary/success/info/etc was likely to change a bunch
[10:18:47] <sfrisk> vs stuff like the active/disabled/etc states
[10:18:53] <kristyjy> exactly
[10:19:04] <arschmitz> yeah i dont think thats true though think about a submit button they often change state based on result
[10:19:06] <arschmitz> things like that
[10:19:15] <sfrisk> although It's possible you might want to change a button color if you think a password isn't secure enough
[10:19:17] <sfrisk> or something
[10:19:21] <arschmitz> yup
[10:19:39] <arschmitz> states are likely to change
[10:19:43] <sfrisk> so a visual way of saying "I think having a password called 'Test123' is a dumb password are you sure you want to do that?"
[10:19:45] <arschmitz> thats why they are states and not static
[10:20:24] <sfrisk> but in general I think it's unlikely button colors get changed as often as the state
[10:20:39] <arschmitz> the color in many ways is a state though is what im saying
[10:20:40] <sfrisk> so it's worth discussing if we want a base "btn" class"
[10:20:45] <arschmitz> error state
[10:20:47] <arschmitz> warning state
[10:20:53] <arschmitz> success state
[10:21:42] <arschmitz> their very naming indicates they are states
[10:21:45] <sfrisk> I think most cases I've seen 'danger' state used has been a "by submitting your form you are deleting your account. are you sure you want to do that?"
[10:22:14] <arschmitz> yes but thats can often be toggled by say a checkbox
[10:22:17] <sfrisk> but I think kristy's question is more of a for styling a default button, to we want to have the classes on it to be "btn btn-default"
[10:22:22] <sfrisk> or "btn-default"
[10:22:29] <arschmitz> that determins what actions that button performs
[10:22:50] <arschmitz> i would say it should actually be just btn
[10:23:04] <arschmitz> there probably should not be a default class
[10:23:11] <sfrisk> so "btn btn-primary" if you're changing the state to a primary button?
[10:23:14] <arschmitz> default should be what happens when you add .btn
[10:23:17] <arschmitz> yes
[10:23:26] <arschmitz> though if primary only does a color change
[10:23:38] <arschmitz> it could also just be ui-btn ui-state-primary
[10:23:40] <arschmitz> or something
[10:23:48] <arschmitz> and not be scoped to the button
[10:23:56] <sfrisk> the basicaly states of primary/success/info/warning are color/background changes
[10:24:05] <arschmitz> yup
[10:24:15] <arschmitz> which are universal
[10:24:17] <sfrisk> if you have background colors scoped to the base 'btn' class
[10:24:21] <arschmitz> you could appy that to a random div
[10:24:45] <sfrisk> that does mean if you have a primary button with an active state, you're potentially changing the color/background 3x on the button before it is rendered
[10:24:59] <arschmitz> well not really
[10:25:04] <sfrisk> because you have the 'btn' color, the 'btn-primary' color and the 'btn-state-active' color
[10:25:05] <arschmitz> its not like it renders at each step
[10:25:11] <arschmitz> the browser compiles into a master sheet
[10:25:24] <arschmitz> and renders just once
[10:25:52] <arschmitz> there is a perf penelty you pay for it to determin which rule should apply
[10:26:09] <arschmitz> but it still only ever renders once
[10:26:19] <sfrisk> so is the perf penalty a concern then?
[10:26:40] <sfrisk> one of the goals of this project was high performance
[10:26:40] <arschmitz> not really
[10:26:56] <arschmitz> things like inheritance are far bigger
[10:27:04] <arschmitz> and specificity
[10:27:21] <sfrisk> okay
[10:27:33] <sfrisk> so for clarification, what we're discussing is having it be the following
[10:27:45] <sfrisk> base class: .ui-btn (or whatever we call it)
[10:28:02] <sfrisk> which will be the default button style, with the default button size, with no special active/disabled/focus state
[10:28:24] <sfrisk> if we're adding a class, like primary it will be:
[10:28:33] <sfrisk> .ui-btn .ui-btn-primary
[10:29:00] <arschmitz> yes
[10:29:00] <sfrisk> which will do a primary button style, with the default button size, with no special active/disabled/focus class state
[10:29:17] <arschmitz> im not super opinionated one way or the other on their being a primary class
[10:29:38] <arschmitz> you could make a good argument for having it seperate for the same reason i argued for the other ones being unscoped
[10:29:56] <sfrisk> ui.btn .ui-btn-error then
[10:30:10] <sfrisk> any of the basic colors a button could be
[10:30:15] <arschmitz> sp that you can apply default to other things
[10:31:16] <sfrisk> ui-btn*
[10:32:00] <arschmitz> here is an example using ui that shows why we should probably have universal state classes
[10:32:02] <arschmitz> http://jsbin.com/mahivazise/edit?html,css,output
[10:32:19] <arschmitz> it makes it easy to add a state to literally anything on your page
[10:32:27] <arschmitz> that is consistent with the chassis states
[10:33:02] <sfrisk> so would you want to use 'state' in cases of 'state-rounded-corner-left'
[10:33:08] <arschmitz> no
[10:33:15] <arschmitz> i dont think corners is a state
[10:33:24] <arschmitz> thats just a generic modifier
[10:33:35] <sfrisk> so state for stuff like colors, or active/focus/etc
[10:33:39] <arschmitz> yes
[10:33:58] <sfrisk> then stuff like rounded corners, or inline buttons vs block buttons are .ui-button specific things
[10:34:02] <arschmitz> in ui and mobile we have generic corner classes too
[10:34:09] <arschmitz> like ui-corner-top
[10:34:13] <arschmitz> ui-corner-bottom
[10:34:17] <arschmitz> ui-corner-tl
[10:34:34] <arschmitz> for the same reason easy re-use
[10:34:46] <sfrisk> we can have generic class names like that, but it might be good to have the styling associated with a .btn class in it
[10:35:00] <sfrisk> so that way if btns have different amount of rounded corners than other things, it is consistent
[10:35:03] <arschmitz> as a whole things like this and states i would call utility classes
[10:35:21] <sfrisk> Okay, well I'll do another pass at buttons
[10:35:35] <arschmitz> where really for chassis they could be baked in
[10:35:43] <arschmitz> but we should at least have them standalone to
[10:35:47] <sfrisk> might do it as a separate PR, just so we can compare/contrast the two buttons
[10:35:53] <sfrisk> and post the new link in the class discussion
[10:35:56] <arschmitz> for users to re use to make their designs consistent
[10:36:51] <arschmitz> there is a real appeal from a user perspective
[10:36:55] <arschmitz> to just be able to ui-btn
[10:37:01] <arschmitz> and get a default button though
[10:37:52] <arschmitz> same even for the states we could have both ui-btn-primary and ui-state-primary
[10:38:02] <sfrisk> well we could do something like 'ui-btn'
[10:38:17] <sfrisk> but to have ui-btn-primary to work you don't also need 'ui-btn'
[10:38:28] <arschmitz> but i think if we do that it should be only states that get that treatment no other modifier
[10:38:41] <sfrisk> Well, like I said
[10:38:51] <sfrisk> I'll do another pass at btns using option 3
[10:39:09] <sfrisk> submit it as a new PR so we'll have both examples, since I'm going to be rewriting about 95% of it
[10:39:19] <arschmitz> well this is still all option three just details of how to implement it
[10:39:32] <sfrisk> yeah I know
[10:39:43] <sfrisk> I'm gonna take what we discussed and do a new PR
[10:40:19] <kristyjy> I agree a new PR will probably be easier
[10:40:31] <arschmitz> yeah +1
[10:41:50] <arschmitz> kristyjy: i think thinking about it more im also +1 for baking states into the base classes
[10:42:00] <arschmitz> how often these change from js has no bearning
[10:42:13] <arschmitz> as long as that is the only modifier thats part of the base class
[10:42:29] <sfrisk> changing colors shouldn't be a big deal
[10:43:00] <sfrisk> basic class changes like that certainly aren't a huge deal in stuff like anguler.js for example
[10:43:07] <arschmitz> switching ui-btn to ui-btn-error is no harder from js then ui-btn ui-state-default to ui-btn ui-state-error
[10:43:24] <kristyjy> exactly
[10:43:36] <arschmitz> its only when multiple modifiers are involved it matters
[10:43:50] <arschmitz> so if we limit it to just states we are good
[10:44:18] <sfrisk> well it's unlikely other modifiers (like rounded corners) are going to be changing much
[10:44:28] <arschmitz> not actually true
[10:44:32] <arschmitz> think about a select menu
[10:44:40] <arschmitz> the button starts with 4 rounded corners
[10:44:51] <arschmitz> when you open it the button loses bottom rounding
[10:45:03] <arschmitz> and  the bottom corners are on the menu
[10:45:19] <sfrisk> yeah, but a relatively small amount of buttons are select menus like that
[10:45:31] <arschmitz> but you need to think broader then buttons
[10:45:36] <arschmitz> to other components
[10:45:37] <sfrisk> not to mention web design in general right now is moving away from rounded corners anyway
[10:45:42] <kristyjy> in that case wouldn't we want to style it using different classes as it's a drop down not a button?
[10:46:05] <arschmitz> kristyjy: the point is that corners should never be attached to the base class
[10:46:09] <arschmitz> no other modifier should
[10:46:18] <arschmitz> only state
[10:46:36] <arschmitz> or we are right back where we were with bem
[10:47:01] <sfrisk> well we weren't saying we're putting rounded corners on the base class
[10:47:09] <sfrisk> just saying they aren't being associated with 'state'
[10:47:25] <sfrisk> like primary/error/active/etc are
[10:47:43] <arschmitz> right that was the first thing i said about corners
[10:47:47] <arschmitz> is that it was not a state
[10:48:04] <arschmitz> not being a state though has nothing to do with how likely it is to change
[10:49:00] <sfrisk> All I said is rounded corners don't change as often, I didn't say they never changed at all, and this is kinda off topic anyway since we all agreed they should be seperate classes anyway
[10:49:27] <sfrisk> which I shall implement in the next week or so
[10:51:03] <sfrisk> and that discussion took up 50 minutes of the meeting
[10:51:18] <sfrisk> I have some PRs listed that need reviewing in the agenda
[10:51:37] <sfrisk> I would like to pull in the README improve wording, and the adding info about the IRC meetings in this week
[10:51:55] <sfrisk> so if I don't see any further comments on those by tomorrow, I'm pulling them in
[10:52:06] <kristyjy> sounds good
[10:52:50] <sfrisk> Also, I know arthurvr, you discussed a few weeks ago being interested in updating chassis to support node 0.12 if you're interested
[10:53:01] <arthurvr> Oh, yeah
[10:53:04] <arthurvr> sure
[10:53:05] <sfrisk> also if anyone wants to add jsass variables to typography, that's open
[10:53:10] <sfrisk> also finishing up the tables pr
[10:54:13] <kristyjy> I have to update the style guide based on the recent changes from our BEM discussions and based on my PR feedback but hopefully after that we can at least have a rough style guide to pull in?
[10:54:44] <sfrisk> once you update it,  leave a comment on the PR (since I don't get notifications about a PR update)
[10:54:51] <sfrisk> and we'll check it out
[10:54:56] <kristyjy> I will
[10:56:22] <sfrisk> Okay
[10:56:29] <sfrisk> well see you all in the issue
[10:56:31] <sfrisk> s
[10:56:39] <sfrisk> and in #css-chassis
