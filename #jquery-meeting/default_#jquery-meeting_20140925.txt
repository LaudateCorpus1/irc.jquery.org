[11:02:40] <arschmitz> agcolom: cgack: jasperdegroot: gabriel_schulhof: gseguin|away: meeting time
[11:02:48] <jasperdegroot> hi
[11:02:55] <cgack> howdy
[11:03:02] <gabriel_schulhof> Hey!
[11:03:07] <agcolom> Hi
[11:04:13] <arschmitz> agenda https://docs.google.com/spreadsheet/ccc?key=0AskujzE4Ig0QdG5nSmZiSUhjYm4ya29CdjhLZmJwSWc&usp=drive_web#gid=45
[11:06:13] <arschmitz> ok lets start with 1.4.5
[11:06:18] <arschmitz> we are going to need to do it
[11:06:32] <arschmitz> there have been a few pretty big ios8 issues reported
[11:06:35] <gabriel_schulhof> How do we wann handle the iOS8 crash?
[11:06:50] <arschmitz> most likely the setTimeout you suggested
[11:06:54] <gabriel_schulhof> OK.
[11:06:58] <gabriel_schulhof> I'll PR it.
[11:07:01] <arschmitz> but i have not had a chance to look too too close yet
[11:07:22] <arschmitz> iv spent a sadly large amount of time the last week dealing with our hacker foes
[11:08:00] <arschmitz> but anyway thats like very top of my priorioty list as thats really major
[11:08:12] <gabriel_schulhof> arschmitz: Should I file an issue against 1.5.0 to deprecate hideDuringFocus?
[11:08:23] <arschmitz> lets talk about that now
[11:08:36] <arschmitz> while this is super good for usability when it works
[11:08:42] <arschmitz> it generally does not work
[11:08:51] <arschmitz> and there is no good way to make it work
[11:09:13] <gabriel_schulhof> I would argue that the decision to insert the toolbars into the flow, or restore their fixed state is application-specific.
[11:09:29] <arschmitz> gabriel_schulhof: in general your also correct
[11:09:35] <gabriel_schulhof> We provide the switch for toggling between the two, but we cannot cover all use cases.
[11:09:39] <arschmitz> becuase what if you have a text input in a footer
[11:09:52] <arschmitz> right now its unusable
[11:09:53] <gabriel_schulhof> Exactly.
[11:10:12] <gabriel_schulhof> We could move it from the lib to the ... demos? *shrug* :/
[11:10:25] <arschmitz> yeah but then we still need to support it
[11:10:37] <arschmitz> and very simply it does not work with selectmenus
[11:10:38] <gabriel_schulhof> arschmitz: Well, we need to support that particular application of it.
[11:10:40] <arschmitz> but wait wait
[11:10:48] <arschmitz> you dont need it for select menus
[11:11:02] <gabriel_schulhof> o_O
[11:11:02] <arschmitz> selectmenus dont have on screen feedback
[11:11:19] <arschmitz> this is really only about textinputs
[11:11:24] <gabriel_schulhof> How do you mean? The viewport is still reduced to accommodate the native menu.
[11:11:42] <gabriel_schulhof> Just as it is with the softkeyboard.
[11:11:45] <arschmitz> right but you dont need to see the select button to use it
[11:11:53] <arschmitz> to use a text input you need to be able to see it
[11:12:11] <gabriel_schulhof> OK. That's fair.
[11:12:11] <arschmitz> for a selectmenu everything you need to see is in the softkeyboard it self
[11:12:34] <arschmitz> so maybe we deprecate and demo only on a textinput
[11:12:47] <arschmitz> where its most important and works 100%
[11:13:03] <gabriel_schulhof> arschmitz: Well, wait a sec. Why don't we simply change the selector to not include a <select>?
[11:13:06] <arschmitz> we can keep it as an extension if anyone thinks we should
[11:13:18] <arschmitz> but i think we should ditch selects with out question
[11:13:39] <arschmitz> im fine with keeping it as long as we can make it essentially bug free
[11:14:10] <gabriel_schulhof> arschmitz: If, as you say, input and textarea work 100%, then all the bugs stem from select.
[11:14:27] <arschmitz> gabriel_schulhof: input and textarea we can very simply use focus and blur
[11:14:43] <arschmitz> there is no special native magic like with selects
[11:15:14] <arschmitz> the one thing we need to check
[11:15:16] <gabriel_schulhof> Alright. In that case, we can claim to fix a bunch of bugs by removing the select from the selector.
[11:15:34] <arschmitz> is a timeout on showing
[11:15:45] <arschmitz> to account for using next prev buttons on softkeyboard
[11:16:02] <arschmitz> there is a fix for italready we just want to make sure it stays
[11:16:20] <gabriel_schulhof> You mean there's a PR?
[11:16:30] <arschmitz> no in the widget
[11:16:34] <arschmitz> there is a fix in place
[11:16:34] <jasperdegroot> I think we should keep it as an extension, just ditch selectmenu
[11:16:43] <arschmitz> jasperdegroot: i agree
[11:16:51] <arschmitz> because it can still be troublesome with footer
[11:16:53] <gabriel_schulhof> OKOK. Splitting hideDuringFocus into an extension is a 1.5.0 thing.
[11:17:00] <arschmitz> yes
[11:17:02] <gabriel_schulhof> arschmitz: Wait, no!
[11:17:04] <jasperdegroot> there is no benefit of dropping it and making it a demo
[11:17:08] <gabriel_schulhof> arschmitz: It's not troublesome!
[11:17:18] <jasperdegroot> still need to make it work
[11:17:21] <gabriel_schulhof> arschmitz: If the thing being focus is your child, don't hide yourself.
[11:17:22] <arschmitz> why?
[11:17:29] <arschmitz> gabriel_schulhof: yes
[11:17:32] <gabriel_schulhof> I do this in popup.
[11:17:35] <arschmitz> yup
[11:17:44] <arschmitz> i dont think we do that now though
[11:17:52] <arschmitz> so lets split this out and make sure its done right
[11:18:05] <gabriel_schulhof> OK. So that needs a PR, and we drop select, and then we're 100%.
[11:18:10] <arschmitz> lets do an issue and outline the api for this extension in it
[11:18:21] <gabriel_schulhof> ... and fix this for 1.5.0?
[11:18:28] <gabriel_schulhof> ... or later?
[11:18:35] <arschmitz> and the exact way it will handle edge cases
[11:18:38] <arschmitz> 1.5
[11:18:42] <gabriel_schulhof> OK.
[11:18:46] <arschmitz> because we need to fix these bugs
[11:18:48] <gabriel_schulhof> I can file the issue.
[11:18:54] <arschmitz> cgack: maybe you want to take this
[11:19:03] <arschmitz> you have a few other recent toolbar prs
[11:19:10] <arschmitz> and are doing the classes option for it
[11:19:15] <gabriel_schulhof> Right.
[11:19:42] <cgack> yeah, i'm trying to catch up with what we're talking about, but sure thing - i'll grab whatever
[11:19:51] <arschmitz> gabriel_schulhof: can you do a 1.4.5 pr for ios8
[11:19:54] <gabriel_schulhof> cgack: You're becoming Toolbar-Man :)
[11:19:59] <gabriel_schulhof> arschmitz: OK.
[11:20:05] <arschmitz> hey thats how i started
[11:20:07] <arschmitz> toolbar bugs
[11:20:13] * gabriel_schulhof queues epic music
[11:20:17] <cgack> Toolbar is the awesome
[11:20:17] <jasperdegroot> Cory "Toolbar" Gackenheimer
[11:20:23] <cgack> :)
[11:20:28] <arschmitz> evil fixed position extension
[11:20:50] <arschmitz> the workarounds one that is
[11:21:19] <gabriel_schulhof> arschmitz: Then you should have the honour of lopping it off.
[11:21:35] <gabriel_schulhof> Oh, wait. It's not a backcompat.
[11:21:36] <arschmitz> well when 2.3 is small enough to not support i will
[11:21:38] <gabriel_schulhof> Dang nab it!
[11:21:42] <arschmitz> but its going to be a while i think
[11:22:02] <gabriel_schulhof> arschmitz: Sorry!
[11:22:04] <arschmitz> actually i think there may be some old ios stuff that can go already
[11:22:07] <gabriel_schulhof> I got carried away.
[11:22:22] <arschmitz> yup
[11:22:59] <gabriel_schulhof> arschmitz: I'll grab https://github.com/jquery/jquery-mobile/issues/7685 (iOS crash) from you.
[11:23:10] <arschmitz> gabriel_schulhof: sounds good
[11:23:21] <arschmitz> let me know if you need testing on a real device my phone is on 8
[11:23:45] <arschmitz> sadly we can only remove an if statement from workarounds lol
[11:23:54] <gabriel_schulhof> arschmitz: Cool, and I now know that one of my cube-mates has one too.
[11:23:57] <arschmitz> the work around it self is still needed for android
[11:24:17] <arschmitz> but we dont need to do it for any currently supported ios
[11:24:41] <arschmitz> anyway
[11:24:54] <arschmitz> lets try to track down any of the ios8 issues
[11:25:04] <arschmitz> and get those fixed and do a super small patch for those
[11:25:11] <gabriel_schulhof> arschmitz: Should I use this._delay()? I thought it was on its way out.
[11:25:25] <arschmitz> gabriel_schulhof: delay i dont think so?
[11:25:45] <gabriel_schulhof> I thought I heard something like that from scott_gonzalez in Chicago. May have misheard though.
[11:26:05] <arschmitz> gabriel_schulhof: would be news to me
[11:26:34] <arschmitz> ok so on to 1.5 stuffs
[11:26:36] <gabriel_schulhof> Well, it's easy enough to convert to setTimeout(), so I'll use it.
[11:26:41] <scott_gonzalez> _delay() is definitely not on its way out.
[11:26:50] <gabriel_schulhof> scott_gonzalez: Thanks!
[11:27:15] <scott_gonzalez> Perhaps you're thinking of delayed focus?
[11:27:45] <arschmitz> gabriel_schulhof: yeah ui has a proxy of focus with a delay built in
[11:28:05] <gabriel_schulhof> scott_gonzalez: Nono. I thought I had overheard this particular statement, but you have dispelled that. Thanks!
[11:28:31] <arschmitz> ok so there have been a few classes implementation things that have come up
[11:28:38] <gabriel_schulhof> Yeah, I remember something about a superfluous delay.
[11:28:58] <arschmitz> i think i addressed most of them with cgack and gabriel_schulhof as they were just minor misunderstandings
[11:29:04] <arschmitz> but there are a few bigger ones
[11:29:14] <gabriel_schulhof> *cough*panel*cough*
[11:29:23] <arschmitz> yes lets get to that one after though
[11:29:26] <arschmitz> simple ones first :)
[11:29:37] <arschmitz> so toolbar uses a crazy mess of classes
[11:29:48] <arschmitz> almost none of which actually start with ui-toolbar
[11:30:11] <arschmitz> also a bunch of them are part of core css and should really be in a toolbar css
[11:30:16] <arschmitz> like ui-header
[11:30:19] <arschmitz> ui-footer
[11:30:28] <arschmitz> ui-btn-left
[11:30:29] <gabriel_schulhof> Guiding a class through a deprecation-period-enabled rename is easy.
[11:30:32] <arschmitz> ui-btn-right
[11:30:43] <arschmitz> gabriel_schulhof: we decided we wont do that
[11:30:53] <arschmitz> if we change a class name we will just change a class name
[11:31:06] <gabriel_schulhof> OK, good. No deprecation on class names. Cool!
[11:31:11] <arschmitz> its what we have done in that past
[11:31:22] <arschmitz> it will likely change when we have a new css framework
[11:31:28] <arschmitz> as it will have to be part of the api
[11:31:40] <arschmitz> but for now its not really it is but we cheat lol
[11:31:42] <gabriel_schulhof> arschmitz: In fact, the classes option will make it easy for people to add their own deprecation period.
[11:31:50] <arschmitz> gabriel_schulhof: yes
[11:32:04] <arschmitz> it also means now classes are 100% api
[11:32:08] <arschmitz> because they are options
[11:32:15] <arschmitz> so now is our last chance lol
[11:32:54] <gabriel_schulhof> arschmitz: ... and actually, we could provide a configuration script that consists solely of redefining the various class keys of the various widgets - if we wanted to provide that for convenience - but we probably don't.
[11:33:08] <arschmitz> yeah i dont think so lol
[11:33:10] <gabriel_schulhof> arschmitz: Yeah, so let's clean up as much as possible.
[11:33:27] <arschmitz> so jasperdegroot are you ok with moving all the toolbar classes into toolbar css
[11:33:32] <jasperdegroot> note that we use ui-btn-left/right for popup close button as well
[11:33:34] <arschmitz> and giving them ui-toolbar prefixes
[11:33:54] <jasperdegroot> arschmitz: yes
[11:33:59] <cgack> jasperdegroot: right - so this change would update those as well
[11:34:37] <arschmitz> jasperdegroot: is there even enough shared by the two cases to make it worth reusing the class?
[11:34:56] <arschmitz> it looks like almost every prop is overridden
[11:34:57] <jasperdegroot> arschmitz: will check
[11:35:10] <jasperdegroot> arschmitz: I think there won't be much shard
[11:35:23] <arschmitz> jasperdegroot: well there are 7 props over written in popup
[11:35:26] <jasperdegroot> maybe only position absolute :)
[11:35:32] <gabriel_schulhof> jasperdegroot: OK, so ui-popup-button-(left|right) and same for toolbar.
[11:35:34] <arschmitz> yeah that was my point
[11:35:43] <arschmitz> it should probably not even be using that class in the first place
[11:35:56] <jasperdegroot> so we can use a different class for popup close button
[11:36:02] <arschmitz> yup
[11:36:11] <arschmitz> along these same lines something i want to mention
[11:36:25] <arschmitz> there are going to be times where for example checkbox adds ui-button class
[11:36:33] <arschmitz> this will not be a key for checkbox
[11:36:36] <arschmitz> or a value
[11:36:45] <arschmitz> it will just add it with out any concern for classes
[11:36:47] <jasperdegroot> it would also be good if we make it more clear in the documentation that ui-btn-left/right are only for the header, not the footer
[11:37:04] <arschmitz> same with like ui-icon
[11:37:16] <cgack> ui-toolbar-header-button-left
[11:37:32] <jasperdegroot> cgack: yeah
[11:37:32] <arschmitz> now if these elements dont have any class of there own other then that we will make one up and add it
[11:37:48] <arschmitz> for example the icon in a checkbox will get class ui-checkbox-icon
[11:38:04] <arschmitz> but there will be no css associated with this class
[11:38:30] <gabriel_schulhof> Yeah, the classes option forces us to give at least one class to each element.
[11:38:42] <gabriel_schulhof> I'm kinda ambivolent towards ui-listview-item.
[11:39:00] <arschmitz> gabriel_schulhof: what do you mean?
[11:39:21] <gabriel_schulhof> arschmitz: Well, listview should have a key for the LIs, right?
[11:39:30] <arschmitz> yes it must
[11:39:37] <gabriel_schulhof> ... but then each LI gets at least the class key.
[11:39:44] <arschmitz> yes
[11:39:52] <gabriel_schulhof> So, we're doing superfluous DOM manip.
[11:40:03] <gabriel_schulhof> Right now, we leave LIs the way they are.
[11:40:12] <arschmitz> i dont think it will make much difference
[11:40:20] <arschmitz> since it wont have any associated css
[11:40:21] <gabriel_schulhof> I hope it won't thrash.
[11:40:29] <gabriel_schulhof> Right.
[11:40:32] <jasperdegroot> listview should get an enhanced option so you can add the class in your markup
[11:40:37] <gabriel_schulhof> Hope the browser's optimized enough.
[11:40:46] <arschmitz> jasperdegroot: it will once we get to it enough
[11:40:51] <gabriel_schulhof> Yes. Listview still needs to be reviewed.
[11:40:52] <arschmitz> or get time i mean
[11:41:03] <jasperdegroot> arschmitz: I think it will get associated CSS
[11:41:15] <arschmitz> jasperdegroot: there should not be any associated css
[11:41:19] <gabriel_schulhof> You mean there will be a .ui-listview-item {}?
[11:41:29] <arschmitz> gabriel_schulhof: there should not be
[11:41:33] <jasperdegroot> because we can solve an issue with it
[11:41:46] <arschmitz> oh you mean you want to add some?
[11:41:55] <gabriel_schulhof> jasperdegroot: What's the issue?
[11:41:58] <jasperdegroot> arschmitz: why not?
[11:42:08] <gabriel_schulhof> jasperdegroot: Enormous perf implications.
[11:42:24] <gabriel_schulhof> jasperdegroot: Adding a class to each list item will cause a reflow in a tight loop.
[11:42:35] <arschmitz> gabriel_schulhof: thats easy to fix
[11:42:42] <gabriel_schulhof> How?
[11:42:56] <arschmitz> detach it
[11:42:57] <jasperdegroot> https://github.com/jquery/jquery-mobile/issues/7670
[11:43:21] <gabriel_schulhof> arschmitz: That might flash on the screen, the way textarea flashes when we set the height to 0.
[11:43:35] <arschmitz> gabriel_schulhof: the page is hidden when its enhanced
[11:44:37] <arschmitz> gabriel_schulhof: iv thought of running tests on detaching the entire page from the dom before running enhancewithin
[11:45:06] <gabriel_schulhof> arschmitz: Oh, right, it is.
[11:45:24] <gabriel_schulhof> arschmitz: What about the start page though? Is that one also hidden?
[11:45:34] <arschmitz> then you dont even need to worry about it in individual widgets
[11:45:36] <arschmitz> gabriel_schulhof: yes
[11:45:38] <gabriel_schulhof> arschmitz: ... though I guess an app should not open on an enormous list.
[11:45:43] <arschmitz> we white out the entire screen
[11:45:52] <arschmitz> gabriel_schulhof: its hidden anyway
[11:46:08] <gabriel_schulhof> arschmitz: Wait a sec! Why do we even attach it to the DOM? I mean we run .page() inside pagecontainer.
[11:46:14] <gabriel_schulhof> arschmitz: We can run .page() before attaching it.
[11:46:19] <arschmitz> thats why we break on that old symbian ersion we never unhide it because js errors out
[11:46:30] <arschmitz> gabriel_schulhof: yes
[11:46:39] <arschmitz> but that would not work when its already there
[11:46:43] <arschmitz> like the first page
[11:46:58] <gabriel_schulhof> arschmitz: OK, so as a special case.
[11:47:24] <arschmitz> gabriel_schulhof: this can have side effects though
[11:47:26] <gabriel_schulhof> arschmitz: Yeah, if we detach/enhance/attach before we unveil the document, we should be good.
[11:47:38] <gabriel_schulhof> arschmitz: Yeah. Widgets cannot assume that they have parentage all the way to document.
[11:47:51] <arschmitz> like widgets that look for other widgets in the body
[11:48:00] <arschmitz> gabriel_schulhof: which they should not assume that anyway
[11:48:04] <gabriel_schulhof> arschmitz: Neither can any code that runs during the corresponding page container events.
[11:48:09] <arschmitz> forexample we dont implement default element
[11:48:11] <arschmitz> but we should
[11:48:24] <arschmitz> and we should never assume we are attached to the dom when enhancing
[11:48:37] <gabriel_schulhof> arschmitz: Wait a sec. this.document ... will that work if we instantiate while the page is detached?
[11:48:49] <arschmitz> yes thats the whole point
[11:49:02] <jasperdegroot> anyway, it's still not clear to me why ui-listview-item shouldn't have any CSS associated with it. If we add the class, why not use it in a selector?
[11:49:16] <arschmitz> you can do $.ui.checkboxradio() and it will create it detached from the dom
[11:49:31] <arschmitz> jasperdegroot: because then it has to render that css when its added
[11:49:41] <arschmitz> that causes reflows
[11:49:43] <gabriel_schulhof> arschmitz: That's good 'n all, but some widgets need to attach handlers to the document.
[11:50:00] <arschmitz> gabriel_schulhof: hence why we use this.document
[11:50:01] <jasperdegroot> arschmitz: ah ok, gotcha
[11:50:25] <arschmitz> jasperdegroot: but if we detach it only causes one reflow which is fine
[11:50:52] <jasperdegroot> yeah
[11:51:04] <arschmitz> also though
[11:51:28] <gabriel_schulhof> arschmitz: OK. Looking at UI's dialog as an example, I see that it uses this.document only during open and close.
[11:51:31] <arschmitz> pretty sure all modern browsers cache class changes in the same tick as long as nothing queries demensions or css etc
[11:52:01] <arschmitz> so listview will only get one reflow regardless of it being detached
[11:52:41] <arschmitz> but we can test this associated to the fix jasperdegroot wants
[11:53:18] <gabriel_schulhof> OK.
[11:53:34] <arschmitz> ok so moving on
[11:53:51] <gabriel_schulhof> I've commented on the issue.
[11:53:56] <arschmitz> i prototyped the new autoenhance module
[11:53:58] <gabriel_schulhof> ... to that effect.
[11:54:06] <arschmitz> which will be standalone
[11:54:12] <arschmitz> with some very good results
[11:54:19] <arschmitz> it is no longer dependant on load order
[11:54:27] <gabriel_schulhof> Yeah, that looks awesome!
[11:54:31] <gabriel_schulhof> Did you move to $.data()?
[11:54:33] <arschmitz> it no longer needs to proxy $.Widget from page
[11:54:42] <arschmitz> gabriel_schulhof: yes that was an oversite in the original
[11:54:48] <gabriel_schulhof> Oh, OK.
[11:54:59] <arschmitz> gabriel_schulhof: its even in out perf guidlines doc i made to never us $.fn.data
[11:55:18] <arschmitz> we need to remember to look at that lol
[11:55:26] <gabriel_schulhof> arschmitz: So, when you say "standalone", you mean a separate repo, or an AMD module in the lib?
[11:55:31] <arschmitz> amd module
[11:55:38] <arschmitz> only dependant on core and widget
[11:55:42] <gabriel_schulhof> Very nice!
[11:55:55] <arschmitz> so we have also removed the need for the defaults flag
[11:56:09] <jasperdegroot> nice
[11:56:15] <arschmitz> we can check a single prop just as quick as we can check them all now
[11:56:32] <gabriel_schulhof> Yeah ... I dunno how core does it, but wow! It can sure suck in attributes at a massive rate!
[11:56:34] <arschmitz> there is nearly zero penalty to data- options now
[11:57:16] <arschmitz> so one more change id like to make is remove everything execpt widget enhancment from enhancewithin
[11:57:25] <arschmitz> i think we should deprecate degrade inputs
[11:57:28] <arschmitz> its a terrible idea
[11:57:46] <arschmitz> we should deprecate nojs as i dont think it makes any sense
[11:57:56] <arschmitz> links is already deprecated
[11:57:58] <gabriel_schulhof> arschmitz: Which inputs do we exactly degrade (aside from range -> number)?
[11:58:03] <arschmitz> so is button markup
[11:58:09] <arschmitz> gabriel_schulhof: search to text
[11:58:12] <gabriel_schulhof> buttonMarkup is gooooooone!
[11:58:23] <arschmitz> so is fieldcontain
[11:58:41] <arschmitz> i think we should also deprecate keepNative
[11:58:57] <gabriel_schulhof> arschmitz: Actually, these degradations should be part of their respective widgets.
[11:59:26] <gabriel_schulhof> arschmitz: I wonder how kosher it is to overwrite this.element in _create().
[11:59:36] <gabriel_schulhof> arschmitz: Like, degrade, and then reassign this.element.
[11:59:37] <arschmitz> its not i would say
[11:59:50] <arschmitz> we should not be replacing elements
[11:59:59] <arschmitz> what if they have handlers
[12:00:25] <gabriel_schulhof> I wonder how people have been doing it so far.
[12:00:40] <gabriel_schulhof> What with our mercilessly yanking range and search inputs.
[12:00:46] <arschmitz> they are mostlikely doing it after he have replaced
[12:00:53] <arschmitz> because they are waiting for the page events
[12:01:40] <gabriel_schulhof> Riiight ... that's the canon ... .on( "pagecreate", ... )
[12:01:47] <arschmitz> yup
[12:02:18] <gabriel_schulhof> OK, but if we wanna get away from relying on being on a page, then we definitely can't go around yanking inputs out of the DOM.
[12:02:21] <arschmitz> i also want to look into getting rid of all this enhanceable nonsense
[12:02:46] <arschmitz> gabriel_schulhof: yup
[12:02:49] <gabriel_schulhof> Yeah, that looks overly complicated, and is mostly rooted in keepNative.
[12:02:53] <arschmitz> its a horrible idea to be replacing elements
[12:03:11] <arschmitz> i would like there to be exactly one way to prevent enhancment
[12:03:11] <gabriel_schulhof> arschmitz: We should just document that "That's how you get a slider".
[12:03:15] <arschmitz> change the initsleector
[12:04:11] <arschmitz> gabriel_schulhof: we should just document to use number not range as type
[12:04:16] <arschmitz> gabriel_schulhof: and text not search
[12:04:17] <gabriel_schulhof> Yeah, exactly.
[12:04:25] <arschmitz> because lets be realistic
[12:04:42] <arschmitz> any platform that supports the html5 inputs
[12:04:48] <arschmitz> is going to be running js
[12:05:02] <arschmitz> we dont need to worry about falling back on those platforms
[12:05:13] <gabriel_schulhof> You need not even go so far.
[12:05:25] <gabriel_schulhof> Any old platform with a range element is not going to have a native slider.
[12:05:36] <gabriel_schulhof> It'll just be a spinner, likely.
[12:06:19] <gabriel_schulhof> ... and besides, we're not breaking PE, because you can still enter the same values with the native input.
[12:06:58] <arschmitz> yup
[12:07:16] <arschmitz> so its going to be another big deprecation release it looks like
[12:07:19] <gabriel_schulhof> ... though I'm not sure about number. Does number also have min max and step ... *cringe*
[12:07:36] <arschmitz> yes
[12:07:46] <gabriel_schulhof> OK, then *wipe hands*
[12:08:14] <gabriel_schulhof> ... and you just /know/ that I perform this gesture IRL as well :)
[12:08:31] <arschmitz> lol
[12:08:48] <arschmitz> i think these deprecations are good though
[12:08:54] <arschmitz> its good to make our api more clear
[12:09:05] <cgack> agreed
[12:09:07] <arschmitz> right now we have 4 different slightly different ways to do the exact same thing
[12:10:06] <arschmitz> initSelector, keepnative, nojs, enhanceable, and data-role="none'
[12:10:11] <arschmitz> actually thats 5
[12:10:34] * gabriel_schulhof 's head is firmly aspin
[12:10:35] <arschmitz> and thats crazy
[12:10:46] <jasperdegroot> right
[12:10:56] <arschmitz> you can do it all through initSelector
[12:11:08] <arschmitz> and not adding data-role to thing you dont want enhanced lol
[12:11:20] <gabriel_schulhof> There's only one thing about initSelector.
[12:11:30] <gabriel_schulhof> It's really hard to restrict its scope.
[12:11:35] <gabriel_schulhof> ... without knowing its value.
[12:11:47] <arschmitz> but you do know its value?
[12:12:03] <gabriel_schulhof> Yes, but if you don't want to.
[12:12:03] <arschmitz> it has a default
[12:12:16] <gabriel_schulhof> There's no way of saying initSelector -= ".skipthiselement";
[12:12:25] <arschmitz> why do you need to
[12:12:30] <arschmitz> you know what it is we document it
[12:12:32] <gabriel_schulhof> For generality.
[12:12:42] <arschmitz> what does that get you
[12:12:43] <arschmitz> ?
[12:12:47] <jasperdegroot> that would be a noInitSelector
[12:12:56] <arschmitz> its not like there are 5 widgets with the same init selector
[12:13:01] <arschmitz> that would never work lol
[12:13:04] <gabriel_schulhof> Yes, but if you upgrade and we change the initSelector, you're stuck with the old one because you copied it in order to modify it.
[12:13:24] <arschmitz> gabriel_schulhof: thats why there are deprecation periods
[12:13:35] <arschmitz> we document initselector we cant just change it
[12:13:52] <gabriel_schulhof> Yeah ... I guess it becomes part of the maintenance burder.
[12:13:55] <arschmitz> we didnt always but we do now
[12:13:55] <gabriel_schulhof> burden.
[12:14:15] <arschmitz> gabriel_schulhof: but realisticly if your changing it your changing it to what you want
[12:14:19] <arschmitz> so you dont care what we change
[12:14:26] <arschmitz> what you want is what you want
[12:14:44] <gabriel_schulhof> TBH I was thinking about third-party widgets.
[12:14:53] <jasperdegroot> "what you want is what you want" - nice one :D
[12:15:00] <gabriel_schulhof> If they wish to enhance something we already enhance, they need to tell our widget to skip such-and-such.
[12:15:24] <arschmitz> the key use i see is changing things like input[type=text] to .textinput
[12:15:39] <arschmitz> then you just add the textinput class to your inputs you want enhanced
[12:15:46] <arschmitz> and we skip all others
[12:16:09] <gabriel_schulhof> Yeah. Let's not get bogged down in this.
[12:16:15] <arschmitz> that should be the way in which we encourage its use
[12:16:28] <arschmitz> ( its also a much faster selector )
[12:16:49] <arschmitz> ok so moving on for now
[12:17:32] <arschmitz> i think that covers everything unless someone else has something?
[12:17:42] <gabriel_schulhof> Yes. Panel.
[12:17:46] <arschmitz> ah yes
[12:17:50] <gabriel_schulhof> Although let's not hold up the meeting.
[12:17:55] <gabriel_schulhof> We can talk about that in -dev.
[12:17:56] <arschmitz> ok
[12:17:58] <arschmitz> sure
[12:18:51] <gabriel_schulhof> Aside from that, I'm good.
[12:19:09] <jasperdegroot> me too
[12:19:09] <arschmitz> jasperdegroot: you still here?
[12:19:10] <cgack> i'm good
[12:19:13] <arschmitz> ok good :)
[12:19:15] <jasperdegroot> I am
[12:19:18] <arschmitz> jasperdegroot: one more thing
[12:19:33] <arschmitz> can you try and see if you can get started on the css updates for button
[12:19:49] <arschmitz> some stuff is pretty broken visually in that branch right now waiting on that
[12:19:58] <arschmitz> makes it hard to test classes stuff
[12:20:43] <jasperdegroot> arschmitz: I am pretty busy upcoming week but try to make some time for it
[12:20:46] <arschmitz> jasperdegroot: i think its should be fairly simple from our previous talks
[12:20:51] <arschmitz> jasperdegroot: thanks
[12:20:51] <jasperdegroot> gabriel_schulhof: can you remove buttonMarkup?
[12:21:04] <gabriel_schulhof> It's already gone in ui-1-12.
[12:21:12] <jasperdegroot> gabriel_schulhof: ah ok, great!
[12:21:21] <arschmitz> yeah i did it in the inital cut
[12:21:32] <jasperdegroot> I missed that
[12:21:42] <gabriel_schulhof> I actually had to update some of the tests to no longer refer to it in $.testHelper.asyncLoad()
[12:21:47] <jasperdegroot> there was no ref at the ticket for removing buttonMarkup
[12:22:02] <arschmitz> jasperdegroot: ah sorry my bad
[12:22:11] <jasperdegroot> no problem
[12:22:17] <gabriel_schulhof> arschmitz: The eventual squash should close that ticket.
[12:22:25] <arschmitz> yeah
[12:22:32] <gabriel_schulhof> Not sure how to put a reminder on that :)
[12:24:22] <arschmitz> jasperdegroot: other then the icon switch its i think mostly a class search and replace
[12:25:12] <jasperdegroot> yeah, probably
[12:25:39] <arschmitz> but you will see once you start lol :)
[12:25:58] <jasperdegroot> yup
[12:27:13] <jasperdegroot> anything else for me?
[12:27:15] <jasperdegroot> have to go
[12:28:52] <gabriel_schulhof> Not from me :)
[12:30:19] <gabriel_schulhof> Are we good?
[12:30:22] <gabriel_schulhof> Hello?
[12:30:32] <jasperdegroot> I think so
[12:30:52] <jasperdegroot> see you on -dev
[12:30:59] <jasperdegroot> later all
[12:31:01] <gabriel_schulhof> Alright. Later, all!
[12:31:16] <gabriel_schulhof> I'll turn off the lights.
