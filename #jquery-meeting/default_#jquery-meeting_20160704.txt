[07:35:02] <jzaefferer> test
[07:40:44] <jzaefferer> hey flore77
[07:40:55] <flore77> Hi
[07:41:30] <flore77> Houw should we start? Should I describe what I have achived in the last week?
[07:45:19] <jzaefferer> Since no one else yet knows about this meeting, we might as well start early
[07:45:37] <jzaefferer> I've created a GDoc to take minutes, could put an agenda in there for future meetings as well: https://docs.google.com/document/d/1dq_2Asse7r7598WV2khJnbXf1KQ2tkEWtJiuBhzJ63Q/edit#
[07:45:54] <jzaefferer> And yes, an update on recent progress would be a good place to start
[07:46:12] <flore77> Alright!
[07:47:10] <flore77> I will talk about the progress achived on the JsReporters project in the last week
[07:47:48] <jzaefferer> Well, since its the first meeting, might as well start with the start of the program
[07:48:02] <jzaefferer> In less detail though
[07:48:12] <flore77> the main focus was to integrate js-reporters into browserstack-runner
[07:48:34] <flore77> ok
[07:49:20] <flore77> Main progress:
[07:49:47] <flore77> new way of testing using Mocha as a testing framework
[07:50:40] <flore77> created a test fixture for each framework, then run some integration tests
[07:51:40] <flore77> running each framework against its own test fixture with our adater attach on it
[07:51:59] <flore77> theb we are collecting the data and making asserttions on  it
[07:52:10] <flore77> mainly we are doing a deep equal
[07:52:37] <flore77> through this process we have discovered some bugs
[07:52:58] <flore77> and we have spent some time on fixing them
[07:53:44] <flore77> we have also updated the bundling process with rollup
[07:54:15] <flore77> make the tap adater tap13 compliant and also added some unit tests for it
[07:55:08] <flore77> I think this is it
[07:55:38] <jzaefferer> Okay, so last week?
[07:56:30] <flore77> last week was to integrate js-reporters into browserstack-runner
[07:56:57] <flore77> but I have met some difficulties and spent some time on debugging
[07:57:30] <flore77> I described everything on the open issue on the browserstack repo
[07:57:33] <jzaefferer> This is the branch you're working on, right? https://github.com/flore77/browserstack-runner/tree/integrate-js-reporters
[07:57:44] <flore77> Yes
[07:58:23] <jzaefferer> Okay. I'm looking at https://github.com/flore77/browserstack-runner/commit/44741a0cd760b647308f84ac0307e92d4533fe99 for the first time
[07:58:43] <jzaefferer> Except for the new JsReporters.JasmineAdapter(jasmine.getEnv()); all that should be shared for all adapters, right?
[07:58:52] <flore77> yes
[07:59:33] <jzaefferer> Why does it need to count passed and failed? We don't provide that in runEnd?
[07:59:58] <flore77> hmm..no
[08:00:06] <jzaefferer> no what?
[08:00:16] <flore77> no explicitly
[08:00:22] <flore77> we can count the tests
[08:00:39] <jzaefferer> runEnd should have runtime as well?
[08:00:49] <flore77> but I thought is would be easier to only listen to events and increment a variable
[08:01:07] <jzaefferer> Well, the less work this extra adapter needs to do, the better we designed the js-reporters API
[08:01:32] <jzaefferer> Its not just not having to write an adapter for each framework, it should also be easier to use than existing APIs
[08:01:33] <flore77> yes we provide the runtime
[08:01:51] <flore77> Yes, you are right
[08:02:09] <flore77> but that is not the finished adapter
[08:02:26] <flore77> i did not work so much on it
[08:02:32] <jzaefferer> https://github.com/js-reporters/js-reporters#event-data is not clear about what data runEnd provides, that's something to improve
[08:02:41] <flore77> I made it quick to check if it is working
[08:02:47] <jzaefferer> ok
[08:03:36] <jzaefferer> Okay, so what are you going to focus on this week?
[08:04:14] <flore77> I want to close https://github.com/js-reporters/js-reporters/pull/72
[08:04:40] <flore77> it is the pr that is testing each framework version with our adapters
[08:05:07] <flore77> I only want that the tests will pass
[08:05:35] <jzaefferer> close? by merging it?
[08:05:39] <flore77> and how you have said first to have some integrations in other tools
[08:05:53] <jzaefferer> close => put it on ice?
[08:06:11] <flore77> and maybe then making some investigations on the not working versions
[08:06:26] <flore77> by merging it, sorry
[08:06:36] <jzaefferer> Let's not run it on CI then
[08:06:43] <flore77> no?
[08:06:45] <jzaefferer> That's pointless while its still failing
[08:06:54] <jzaefferer> But its still useful to run this manually every now and then
[08:07:04] <jzaefferer> And we can improve it later
[08:07:09] <flore77> I don't know what is failing on node stable (v 6)
[08:07:14] <flore77> why*
[08:07:57] <flore77> ok, I will remove it from the travis file
[08:08:15] <flore77> the tests are passing locally also on travis for node v4
[08:08:38] <jzaefferer> ok
[08:08:42] <flore77> and then
[08:08:52] <jzaefferer> well, still, I don't think thats worth debugging right now
[08:09:02] <flore77> yes, indeed
[08:09:24] <flore77> it is more important to integrate in browserstack
[08:09:54] <flore77> I will make fixes based on the discussion
[08:09:59] <jzaefferer> Also https://github.com/js-reporters/js-reporters/pull/72/files#r69448678
[08:10:11] <flore77> on the browserstack-runner repo
[08:10:48] <jzaefferer> okay, we should create a PR soon.
[08:11:23] <flore77> yes, this week the pr should be finished
[08:11:27] <flore77> this is the main goal
[08:11:55] <jzaefferer> Any news from teenytest?
[08:12:00] <flore77> i think we still need to discuss about the solution for Mocha, but this we'll do on the issue
[08:12:18] <flore77> hmm
[08:12:51] <flore77> I didn't answer from the last answer of searl
[08:13:03] <jzaefferer> Should we work together on the answer?
[08:13:03] <flore77> I'm not sure what position to take
[08:13:12] <flore77> yes
[08:13:34] <jzaefferer> Do you have the issue URL at hand?
[08:13:55] <jzaefferer> there https://github.com/testdouble/teenytest/issues/15
[08:14:05] <flore77> https://github.com/testdouble/teenytest/issues/15
[08:14:14] <flore77> you were faster :))
[08:15:07] <jzaefferer> For the registration, I think dealing with browserstack-runner should give us a reference there
[08:15:16] <jzaefferer> though his suggestion looks fine to me
[08:15:47] <jzaefferer> As for his comment on interprocess, I wonder why he thinks that. Could ask for some examples/usecases
[08:16:30] <flore77> yeah that's why, I didn't understand what he was talking about
[08:16:39] <jzaefferer> I guess js-reporters could convert an event emitter into a json stream, where each line starts with the name of the events, then a json blob of the event data, separated by newlines
[08:17:02] <jzaefferer> Let's ask for clarification on that before we jump to conclusions, and skip the configuration until we have an answer there
[08:17:18] <flore77> yez, it would be better
[08:17:46] <flore77> will you ask for clarification ? or should I?
[08:17:56] <jzaefferer> Okay, I'll respond there. I'll send you a draft on Telegram later
[08:18:09] <flore77> ok. thanks!
[08:18:26] <jzaefferer> oh
[08:18:40] <flore77> what happend?
[08:18:49] <jzaefferer> once teenytest has a native js-reporters interface, it should be trivial to support it in browserstack-runner with our new "plugin"
[08:19:14] <jzaefferer> that should be a reason for seals to work on it...
[08:19:18] <jzaefferer> and a good test
[08:19:31] <jzaefferer> right?
[08:19:43] <flore77> yes it should be
[08:20:41] <flore77> if we integrate into browserstack and teenytest would have a native js-reporters compliant reporter interface
[08:20:53] <flore77> than it would be only one line away
[08:21:10] <flore77> that line which is different for each framework
[08:22:01] <flore77> "framework.register(reporter)"
[08:22:12] <jzaefferer> oops, I submitted immedaitely /o\
[08:22:24] <jzaefferer> anyway, review this instead: https://github.com/testdouble/teenytest/issues/15#issuecomment-230278254
[08:23:11] <jzaefferer> once we have this working for a few frameworks, we can gather idea for getting rid of that one framework-specific line as well...
[08:23:52] <flore77> yes, but this will require extra changes in each framework
[08:24:34] <flore77> to standardize the registering of reporters
[08:27:23] <jzaefferer> makes sense in the long run
[08:28:10] <flore77> yes, but I think we will achieve this in this summer :))
[08:28:20] <flore77> will not*
[08:28:27] <jzaefferer> I think between browserstack-runner and teenytest, we've got enough for the moment
[08:28:53] <jzaefferer> Once one or both are released, we've got something to reference when talking to Jasmine or Mocha
[08:29:20] <flore77> yes
[08:30:12] <jzaefferer> and meanwhile we can work on a native implementation in QUnit
[08:30:52] <jzaefferer> I've added notes on the doc I linked to above, did you take a look? Am I missing something?
[08:31:06] <jzaefferer> I also want to publish a copy on http://meetings.jquery.org/
[08:32:32] <flore77> I am looking at it right now
[08:34:20] <flore77> no, it's ok
[08:34:35] <flore77> about the native implemantion in qunit
[08:34:44] <flore77> we still have this issue pending
[08:34:47] <flore77> issues*
[08:34:51] <flore77> https://github.com/js-reporters/js-reporters/issues/65
[08:34:54] <flore77> https://github.com/js-reporters/js-reporters/issues/64
[08:35:28] <flore77> sorry this https://github.com/js-reporters/js-reporters/issues/62
[08:35:34] <flore77> instead of 64
[08:35:56] <flore77> we should solve them, update the spec in the readme
[08:36:11] <flore77> and then we can proceed to the implemantiom in qunit
[08:36:30] <flore77> or?
[08:37:01] <flore77> do you have another opinion on this?
[08:37:46] <jzaefferer> I've put both on the "later" item
[08:38:08] <jzaefferer> let's see if we can learn more about this from implementing in browserstack-runner or teenytest
[08:38:44] <flore77> ok
[08:39:21] <flore77> aftwr I finish with the browerstack integration
[08:39:27] <jzaefferer> yep
[08:39:27] <flore77> we can talk about qunit
[08:39:34] <jzaefferer> yeah
[08:39:42] <jzaefferer> alright, I think that's all
[08:39:48] <flore77> yep
[08:40:01] <jzaefferer> Ping me about specific browserstack-runner issues, we can discuss those separately
[08:40:28] <flore77> Sure, but I hope there will not be the case :))
[12:03:06] <timmywil> gibson042, m_gol, markelog https://docs.google.com/document/d/1uhcW9_TlSwD8JnO1_HNnSYJAriTK9WYZ8uQNDvtAAhA/edit
[12:03:12] <markelog> hey-hey
[12:03:27] <timmywil> hello!
[12:03:49] <timmywil> happy scare the crap out of your dog day
[12:03:57] <m_gol> hi
[12:04:06] <jbedard> lol, hello
[12:04:07] <timmywil> in the US, that is
[12:04:14] <markelog> happy holiday to states people
[12:04:53] <jbedard> Canada day was Friday, close enough :)
[12:05:04] <timmywil> oh canada
[12:05:42] <timmywil> so, https://github.com/jquery/jquery/issues/3194
[12:05:54] <timmywil> was there a decision made last week?
[12:06:03] <timmywil> I could go either way
[12:06:37] <m_gol> what would be the solution, though?
[12:06:43] <timmywil> backing out async behavior seems like a sad solution
[12:07:24] <markelog> no one ask for it though, right?
[12:07:41] <markelog> for the async behaviour
[12:07:44] <timmywil> that ask is that ready always run before load
[12:08:07] <gibson042> I don't want to do that
[12:08:25] <timmywil> me neither
[12:08:42] <gibson042> these problems actually already existed
[12:08:55] <timmywil> orly?
[12:09:19] <gibson042> the user code relies on race conditions, does it not?
[12:09:47] <markelog> is it?
[12:09:52] <markelog> in what way?
[12:10:12] <gibson042> jQuery ready was never guaranteed to precede window load
[12:10:28] <markelog> i think it was assumed
[12:10:36] <markelog> this is why we have our own `ready` event
[12:10:39] <timmywil> we may not have said that, but it did
[12:10:44] <markelog> because it happens earlier
[12:11:07] <markelog> it was optimisation around `load` event
[12:11:30] <markelog> with `DOMContentLoad` and scroll hack for old ie
[12:11:42] <gibson042> right
[12:12:08] <timmywil> the pages on which this is a problem are ones where the load event was fast enough
[12:12:17] <gibson042> but we always had a setTimeout, and holdReady too for that matter
[12:12:40] <gibson042> and even a window load fallback
[12:12:50] <markelog> also, it seems https://api.jquery.com/ready/ says we actually do guarantee it
[12:13:10] <timmywil> i.e. when there's a big image or something, the current ready will get called sooner
[12:13:17] <markelog> since we say we fire this event, right after dom loaded
[12:13:36] <markelog> whereas it also says load fires when everything is loaded
[12:13:56] <gibson042> markelog: what text on that page do you think guarantees jQuery ready before window load?
[12:14:13] <timmywil> I don't see a statement about order
[12:14:29] <markelog> Specify a function to execute when the DOM is fully loaded.
[12:14:57] <markelog> when spec for `load` event says
[12:15:00] <markelog> http://www.w3.org/TR/DOM-Level-3-Events/#event-type-load
[12:15:06] <gibson042> right, but a fully-loaded DOM is a necessary precondition for both ready and "load" event
[12:15:15] <markelog> A user agent must dispatch this event when the DOM implementation finishes loading the resource (such as the document) and any dependent resources
[12:15:34] <m_gol> "when the DOM is fully loaded" doesn't mean it has to happen immediately, it says nothing about the order relative to load
[12:15:48] <markelog> which implies that one fire after another
[12:15:55] <markelog> for me at least it is pretty clear
[12:16:02] <timmywil> ok, the implication is there
[12:16:02] <m_gol> I don't think so
[12:16:47] <timmywil> ready = DOM ready, load = DOM ready + assets loaded. I think that does imply that ready would trigger first.
[12:17:23] <timmywil> but I still don't want to go back to sync. lol
[12:17:31] <markelog> could be there a different solution?
[12:17:50] <timmywil> making load async, perhaps
[12:18:02] <markelog> also with setTimeout?
[12:18:05] <gibson042> could be a plugin
[12:18:08] <m_gol> I don't think it implies the order. It would only imply it if those operations were happening immediately, synchronously after the preconditions happen. Since they're async, the order doesn't seem guaranteed
[12:18:44] <timmywil> m_gol: following your thought, triggering them both async might be suitable
[12:18:55] <gibson042> I agree with m_gol, especially given the hacks to guarantee that ready happens no matter how or when things are loaded
[12:20:04] <markelog> sorry, but those arguments seems very weird to me
[12:20:11] <markelog> browser has only one flow
[12:20:15] <m_gol> Triggering load async might be a solution, I only worry that the handler is then receiving the event after the event already fired.
[12:20:23] <markelog> and one event loop
[12:20:31] <markelog> something should be put first in that stack
[12:20:50] <markelog> so that something should be executed first
[12:20:59] <markelog> if that wouldn't be the case
[12:21:10] <timmywil> another solution is giving .on('ready') sync behavior.
[12:21:15] <gibson042> http://api.jquery.com/jQuery.holdReady/
[12:21:22] <markelog> there would be situations when DOMContentLoaded could be executed after load
[12:21:30] <timmywil> and leaving $(fn) and equivalent async
[12:21:31] <markelog> which is impossible
[12:21:38] <markelog> so your interpretation is wrong
[12:21:38] <m_gol> timmywil: that'd IMO be the worst solution here
[12:21:49] <gibson042> we literally allow arbitrary delay of ready callback invocation
[12:22:40] <gibson042> if there's a fix, I think it should be a plugin that re-fires a load event
[12:23:02] <gibson042> core is doing the right thing now
[12:23:10] <m_gol> An async load would be a problem in IE 8 that destroys the event object after the event fired. Does it cause any problems in modern browsers?
[12:23:26] <timmywil> ok, last solution I can think of is document that .on("DOMContentLoaded") is usable in all our supported browsers and can be used in situations where ready must be fired before load.
[12:25:07] <timmywil> or the plugin idea
[12:25:32] <timmywil> where load handlers are called immediately if the event has already fired.
[12:25:34] <m_gol> there were many concerns about the current behavior being problematic for plugins
[12:25:43] <m_gol> plugins having to use other plugins doesn't sound appealing
[12:26:15] <gibson042> you mean like Migrate? ;)
[12:26:38] <m_gol> yes ;)
[12:27:00] <timmywil> come to think of it, is there a case where .on('DOMContentLoaded') wouldn't work–assuming it's bound before the event fires?
[12:27:12] <markelog> i think no
[12:27:19] <markelog> every browser should support it by now
[12:27:25] <markelog> going further
[12:27:25] <gibson042> that's what ready relies on anyway
[12:27:48] <markelog> we can try to remove `load` event fallback in `ready`
[12:28:11] <timmywil> right, but if it's in all our browsers, they can use that to get the same behavior as .on('load').
[12:28:29] <markelog> you mean users?
[12:28:33] <m_gol> markelog: we can't because you can load jQuery dynamically after DOMContentLoaded fired
[12:28:39] <timmywil> markelog: yea, users
[12:28:47] <m_gol> I even added a test that would now fail if you removed the fallback
[12:28:54] <m_gol> a few years ago
[12:29:02] <markelog> whaaaat?
[12:29:17] <markelog> timmywil: yeah, but old code would fail
[12:29:37] <timmywil> old code is failing already
[12:29:51] <markelog> don't we trying to fix it now? :)
[12:30:11] <m_gol> markelog: that was one of the first things that I wanted to remove when I was starting contributing to jQuery
[12:30:16] <markelog> without asking users to change anything
[12:30:18] <timmywil> yea, but the options are to fix it in our code, in a plugin, or document a workaround
[12:30:46] <m_gol> https://github.com/jquery/jquery/commit/32b066d3805a48f8c8312562ed52a1b5910b1d85
[12:30:47] <markelog> timmywil: ok, got your point
[12:32:27] <m_gol> It'd be easy to add a jQuery.load promise or sth like that. But that couldn't be used by code compatible with older jQuery anyway
[12:33:24] <markelog> alternatively, we could check `document.readyState`
[12:33:33] <markelog> but i remember there were some issues with that
[12:33:42] <markelog> nevertheless, it seems we degress
[12:34:14] <timmywil> ok, seems it's going to take more deliberation. I'll note the options we came up with.
[12:34:27] <m_gol> markelog: we do check document.readyState
[12:34:42] <m_gol> everywhere except IE<11
[12:34:59] <jbedard> What if we add a load event that forces any pending promise callbacks (on the ready promise) to be invoked first? Is something like that possible?
[12:35:27] <jbedard> (assuming adding load handlers during the load event would work)
[12:36:05] <markelog> i don't think it would work, since those callbacks were already invoked
[12:36:24] <markelog> they weren't just executed by the engine
[12:36:36] <markelog> they in the loop
[12:37:03] <markelog> m_gol: why it wouldn't work then?
[12:37:22] <markelog> from which case `load` event is saving us
[12:38:16] <gibson042> we could fulfill the ready promise in a load handler, but forced-async means other load callbacks would still be invoked first
[12:38:45] <markelog> m_gol: it seems `support` comment is there, because we can't use interactive mode
[12:38:50] <m_gol> markelog: document.readyState is making it possible for jQuery.ready to fire quickly, without waiting for the full load event if DOMContentLoaded already fired, that's all. What else could we use it for?
[12:39:10] <gibson042> the fix for old code really does seem to be synthesizing a load event... I just want to make sure that doesn't happen in jQuery Core
[12:39:47] <markelog> m_gol: that's why i'm asking - "from which case `load` event is saving us"?
[12:39:58] <markelog> if readyState works, why we need `load`
[12:40:02] <m_gol> gibson042: people are (mostly) not complaining about ready being always async but about non-determinism in the order of ready and load
[12:40:34] <timmywil> alright, let's move on.
[12:40:41] <m_gol> markelog: some plugins may need to have all images loaded on the site before they can do their thing or sth like that.
[12:40:47] <m_gol> perhaps not the most common use case
[12:40:48] <m_gol> ok
[12:41:11] <markelog> aaam, not sure what do you mean by that
[12:41:16] <timmywil> I think we've made progress. Let's stew on it some more. I'm not sure the best way to go yet.
[12:41:33] <timmywil> https://github.com/jquery/jquery/issues/3204
[12:41:43] <markelog> i will just remove the fallback and see what happens
[12:41:46] <markelog> :)
[12:42:05] <timmywil> if nothing else, it will be enlightening.
[12:42:30] <timmywil> m_gol: sounds like we won't be able to test this in browserstack soon, right?
[12:42:35] <timmywil> the edge 14 issue
[12:42:44] <timmywil> well, I guess it won't be fixed in 15 either
[12:42:49] <m_gol> only when MS releases it
[12:42:58] <m_gol> I hoped they'll be releasing more often
[12:43:13] <m_gol> it's been 7 months or sth from Edge 13
[12:43:36] <m_gol> or 8
[12:43:55] <m_gol> we could trim the value ourselves, couldn't we?
[12:44:04] <markelog> they so unpredictable with their releases
[12:44:16] <m_gol> with the exceptions of CSS variables where we mustn't trim
[12:44:22] <timmywil> would a trim hurt anything?
[12:44:38] <timmywil> oh, content
[12:44:45] <m_gol> IMO it shouldn't
[12:45:01] <m_gol> CSS already trims spaces in stylesheets
[12:45:06] <m_gol> timmywil: what about content?
[12:45:12] <timmywil> content: " "
[12:45:19] <markelog> ooh :)
[12:45:30] <m_gol> yes, what about it? the spaces can be trimmed there as well
[12:45:42] <timmywil> but the space is a valid value
[12:45:45] <m_gol> `content:     " "     ;` is equivalent to `content:" ";`
[12:46:00] <m_gol> it's not this space
[12:46:08] <markelog> different space?
[12:46:20] <markelog> huh, different universe
[12:46:24] <m_gol> this is about spaces around " ", not spaces inside it
[12:46:34] <timmywil> I see, would you set it like style.content = '" "'
[12:46:42] <m_gol> yes
[12:46:48] <timmywil> great then
[12:46:59] <m_gol> with CSS vars we can't trim, they're supposed to contain everything
[12:47:10] <timmywil> custom props?
[12:47:17] <m_gol> so we'll have to be careful about that (we already have a WIP PR adding support for them)
[12:47:17] <m_gol> yes
[12:47:36] <timmywil> ok, it sounds doable tho, and probably short
[12:47:38] <m_gol> but that's not too complicated
[12:47:43] <markelog> it seems pretty dangerous, we might break something else
[12:47:53] <timmywil> we can explore without landing
[12:48:10] <timmywil> and I wouldn't call it a blocker
[12:48:14] <m_gol> this does sound as an edge case
[12:48:27] <m_gol> maybe we should blacklist the test in Edge 14 and wait for an external bug report
[12:48:38] <markelog> how would it actually look?
[12:48:49] <markelog> like how jquery code look for this bug?
[12:49:07] <m_gol> markelog: what do you mean?
[12:49:17] <markelog> in issues i see only vanilla js
[12:49:31] <markelog> how can we repro it with jQuery methods?
[12:49:56] <markelog> like jQuery(...).css('position', ' ')
[12:50:03] <markelog> ?
[12:50:05] <m_gol> yup
[12:50:27] <markelog> weird code that is :)
[12:50:27] <m_gol> we have one failing test doing that
[12:50:50] <timmywil> https://github.com/jquery/jquery/issues/3212
[12:50:56] <markelog> so other solution would be to just comment out the test? :)
[12:50:56] <m_gol> In real code I'd expect it to be inside a variable that may be read from HTML etc.
[12:51:17] <timmywil> I'm inclined to agree with gibson042. My only concern is that .click must be prevalent.
[12:51:25] <m_gol> timmywil: I agree with gibson042 there
[12:51:37] <m_gol> about the load thing, that is
[12:51:50] <timmywil> yea, I don't want to add back load
[12:51:58] <timmywil> but should we deprecate remaining aliases?
[12:52:11] <timmywil> I think Dave would say yes too, but I shouldn't speak for him.
[12:52:13] <markelog> i think i'm the one who deprecated `load` so i have same opinion :)
[12:52:16] <m_gol> the thing about the shorthands is that $(sth).click() is nicely similar to the native node.click()
[12:52:31] <markelog> Rick would say yes too, but I shouldn't speak for him either :)
[12:52:46] <timmywil> oh, Dave did have an idea for jQuery 4
[12:53:02] <timmywil> making the aliases call the native methods
[12:53:29] <markelog> right, there is doc somewhere about this
[12:53:31] <m_gol> in any case, we should open a separate issue for that, this one was only about the load alias
[12:53:44] <markelog> we can close that issue though
[12:53:47] <timmywil> ok
[12:53:49] <markelog> i think we all agree here
[12:54:17] <gibson042> so, do we open one for shorthand deprecation?
[12:54:24] <timmywil> gibson042: yes
[12:54:25] <markelog> i am
[12:54:52] <markelog> that would break a lot of code though!
[12:54:54] <markelog> :)
[12:55:07] <timmywil> that's my concern
[12:55:58] <timmywil> and as soon as we can get the PRs landed for 3.1.0, we can release that. It probably won't be this week, but next.
[12:56:08] <m_gol> timmywil: I think https://github.com/jquery/jquery/issues/3167 should be moved to 3.1.1
[12:56:34] <m_gol> 3.1.0 was supposed to be a quick release fixing a regression with how jQuery interacts with Angular (and other libs wrapping their init code in ready)
[12:56:42] <m_gol> and the PR for that 3167 is not ready
[12:56:52] <timmywil> fair enough. I included it because it had a PR, but that PR needs too much work.
[12:56:52] <markelog> yeah, i think we should do that asap
[12:57:18] <markelog> it seems there is not a lot do there, in that pr?
[12:57:26] <markelog> just couple small things
[12:57:38] <timmywil> no CLA sig
[12:57:49] <timmywil> someone might have to take it over
[12:57:50] <markelog> i mean m_gol one
[12:57:55] <timmywil> ah
[12:57:56] <timmywil> right
[12:57:59] <timmywil> that one looks good to me
[12:58:27] <m_gol> I could change the mocking to use sinon, any other actionable items before landing that one?
[12:59:11] <markelog> Dave left couple comments there too
[12:59:36] <m_gol> markelog: yes but he LGTM'd it
[12:59:47] <m_gol> and the comments weren't about anything that I should do
[13:00:21] <timmywil> his comments seems to be supporting the sinon the change and leaving out the second throw
[13:00:27] <timmywil> -the
[13:00:38] <markelog> i think just https://github.com/jquery/jquery/pull/3210#r69360921
[13:00:44] <gibson042> I don't like the proposed fix :\
[13:00:57] <timmywil> ha
[13:01:02] <markelog> heh
[13:01:07] <m_gol> markelog: this link doesn't focus anything for me, is it correct?
[13:01:10] <gibson042> in 3173
[13:01:27] <markelog> sorry, https://github.com/jquery/jquery/pull/3210/files/#r69360921
[13:01:31] <timmywil> gibson042: ohh, ok
[13:01:40] <timmywil> we're tabling that one
[13:02:00] <gibson042> yeah, I was just catching up on it
[13:02:09] <timmywil> we're over an hour now. Let's stop here.
[13:02:15] <m_gol> for a moment I thought it's about my PR ;)
[13:02:19] <markelog> we gonna use readyException only for ready right?
[13:02:23] <markelog> ooh
[13:02:28] <markelog> me too :)
[13:02:41] <markelog> wanted to talk about one another thing
[13:02:47] <timmywil> Thanks everybody! Please continue comments in the PR if you'd like to change something, or discuss in -dev.
[13:02:48] <markelog> but i guess we can table that one too
[13:03:00] <markelog> have a good one
