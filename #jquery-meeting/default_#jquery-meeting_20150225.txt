[08:31:42] <jzaefferer> ping leobalter, Krinkle|detached, gibson042
[08:31:47] <leobalter> o/
[08:31:51] <arthurvr> Hi!
[08:32:24] <gibson042> here
[08:32:56] <jzaefferer> also arschmitz
[08:33:08] <arschmitz> hu
[08:33:10] <arschmitz> hi
[08:34:11] <leobalter> I don't have much updates on QUnit, but this week I made Goiabada, to try some ES6 features and understand what can I bring to QUnit.
[08:34:39] <jzaefferer> that's here: https://github.com/leobalter/goiabada
[08:34:41] <arthurvr> thatâ€™s https://github.com/leobalter/goiabada ?
[08:34:45] <leobalter> yes
[08:34:53] <arthurvr> and jzaefferer was quicker :)
[08:35:27] <leobalter> I wonder if it can use a ES6 groundship to make a QUnit.next
[08:35:35] <leobalter> *if we
[08:36:00] <jzaefferer> groundship?
[08:36:15] <leobalter> I just invented that word, maybe "base"
[08:36:18] <leobalter> ES6 base
[08:37:20] <leobalter> The only real pita is using browserify, I'm not sure but there might be some plugin to make browserify convert files to a UMD style, not AMD only
[08:37:24] <jzaefferer> you mean this could be a starting point for a new QUnit version?
[08:37:36] <leobalter> I think it could be, yes
[08:37:46] <jzaefferer> have you tried esperanto?
[08:38:25] <leobalter> esperanto focus on es6 modules, babel is a complete and robust ES6 and 7 transpiler
[08:39:27] <jzaefferer> so this isn't just about es6 modules
[08:39:53] <jzaefferer> if browserify supports AMD wrappers, can we get them to also support UMD?
[08:39:54] <leobalter> everything is working very fine with babel, as I mentioned, the only pita is the browserify level, that we might solve if we plug some UMD browserify plugin to make it browser friendly without using require.js
[08:40:01] <leobalter> that's the point
[08:40:11] <leobalter> if we solve this, we won't have any other issue
[08:40:33] <jzaefferer> that sounds like something goiabada makes easy to explore
[08:41:50] <leobalter> also, this will allow QUnit.next to be great for every environment
[08:42:12] <scott_gonzalez> Is there a way to use bable and leave the import/export statements alone?
[08:42:22] <scott_gonzalez> Then you could use esperanto in a second pass, which would be much saner.
[08:44:00] <leobalter> scott_gonzalez, babel and esperanto together would be too much
[08:44:11] <jzaefferer> how so?
[08:44:14] <scott_gonzalez> Why is that if babel + browserify isn't too much?
[08:44:51] <leobalter> babel transpile ES6/7 to CJS, we just need to transpile it to UMD
[08:45:38] <leobalter> I didn't explore too much, but there might be some UMD plugin to browserify
[08:45:45] <scott_gonzalez> That doesn't really answer the question.
[08:46:05] <arschmitz> either way your transpileing twice so whats the differcence?
[08:47:17] <leobalter> but babel + browserify you ship it just out of the box, without any new hacks on babel + esperanto
[08:47:26] <scott_gonzalez> es6.modules is a transformer, so presumably you can just exclude it and get what you need.
[08:47:40] <scott_gonzalez> babel + esperanto is no more of a "hack" than babel
[08:47:45] <scott_gonzalez> babel + browserify
[08:48:06] <arschmitz> yeah i still dont see the difference execpt we know how to easily make one way work
[08:48:11] <arschmitz> and we don't the other
[08:48:16] <arschmitz> ( in theory )
[08:48:58] <leobalter> babel goal is to transpile es6 content to CJS, browserify goal is to transpile CJS content to browser, esperanto goal is to transpile ES6 modules to cjs and browser
[08:49:25] <scott_gonzalez> I think that's not true.
[08:49:31] <scott_gonzalez> Babel will turn your ES6+ code into ES5 friendly code
[08:49:50] <scott_gonzalez> That has nothing to do with CJS.
[08:51:19] <leobalter> into ES5 and convert ES6 modules to CJS modules
[08:51:50] <leobalter> This solves de UMD problem on browserify: https://www.npmjs.com/package/deamdify
[08:52:44] <scott_gonzalez> So babel + browserify + deamdify?
[08:52:52] <scott_gonzalez> I fail to see how that's better than babel + esperanto.
[08:52:54] <arschmitz> but you can just not do the last part of that there is nothing saying you must go to cjs in babel or browserify even just that you can
[08:53:19] <leobalter> esperanto ships CJS modules to UMD?
[08:53:30] <scott_gonzalez> FORGET CJS
[08:53:38] <scott_gonzalez> es6.modules is a transformer, so presumably you can just exclude it and get what you need.
[08:53:45] <jzaefferer> esperanto transforms es6 modules to whatever format you want
[08:53:47] <scott_gonzalez> Babel is highly customizable.
[08:54:15] <scott_gonzalez> I can put together a test after the UI meeting.
[08:54:17] <scott_gonzalez> Perhaps that will help.
[08:54:31] <leobalter> ok, thanks
[08:54:55] <jzaefferer> alright
[08:55:10] <jzaefferer> I don't think there was anything else to discuss about QUnit
[08:55:21] <jzaefferer> or was there?
[08:56:23] <jzaefferer> otherwise...
[08:56:40] <jzaefferer> TestSwarm was moved to a new server; since nothing exploded, the move seemed to work fine
[08:56:49] <scott_gonzalez> :-)
[08:56:56] <jzaefferer> QUnit now runs tests via browserstack-runner on Travis, including PRs
[08:57:00] <leobalter> in case the QUnit.next proposal is accepted should we work on a different repo (jquery/QUnit.next)? We can start documenting what we need.
[08:57:06] <jzaefferer> Will do the same for Globalize once requirejs load issues are resolved
[08:57:15] <leobalter> jzaefferer++ on the browserstack-runner thing
[08:58:13] <scott_gonzalez> Why not just refactor the code as you go? Is it too much work?
[08:58:45] <jzaefferer> leobalter: separate repo likes yours is fine for prototyping, otherwise I don't see that as an option
[08:59:42] <leobalter> I'm talking about focusing on a new test, following the same API. For a next/2.0 version I believe it's fine
[08:59:53] <leobalter> new test tool*
[09:00:27] <leobalter> I need to join another meeting.
[09:00:42] <jzaefferer> with an outline of what you have in mind, that'd be easier to answer
[09:01:22] <jzaefferer> how is it "new"?
[09:01:35] <scott_gonzalez> UI time
[09:01:53] <jzaefferer> oh
[09:02:09] <scott_gonzalez> `uiteam
[09:02:09] <b-ot> scott_gonzalez: arschmitz jzaefferer fnagel mikesherov rxaviers rxaviers_ scott_gonzalez tj_vantoll tj_vantoll1
[09:02:13] <rxaviers> hello
[09:02:13] <fnagel> hey
[09:02:42] <arthurvr> hi guys!
[09:02:45] <scott_gonzalez> So, tickets have been coming in like crazy recently.
[09:03:10] <scott_gonzalez> I've been trying to stay on top of them.
[09:03:17] <scott_gonzalez> We've got a few to discuss today.
[09:03:53] <scott_gonzalez> I've got them on the agenda, so we'll get to them pretty soon.
[09:04:25] <scott_gonzalez> For classes, arschmitz pushed some updates to the PR yesterday, so I'll be doing another round of review.
[09:04:37] <scott_gonzalez> I don't think there's anything to discuss for classes or button though, is there?
[09:04:43] <arschmitz> nope
[09:05:00] <scott_gonzalez> fnagel: Datepicker PR? https://github.com/jquery/jquery-ui/pull/1432
[09:05:12] <scott_gonzalez> My understanding was that all you need to do was merge it.
[09:05:32] <fnagel> scott_gonzalez: right
[09:05:47] <fnagel> Will do as soon I find time for some UI dev
[09:06:20] <scott_gonzalez> ok
[09:06:56] <scott_gonzalez> So, on to new tickets...
[09:06:58] <scott_gonzalez> http://bugs.jqueryui.com/ticket/11198
[09:07:08] <scott_gonzalez> This is about the default width of selectmenu.
[09:07:18] <scott_gonzalez> It uses the width of the existing select.
[09:07:42] <scott_gonzalez> But since the styling is different, that leads to overflown text.
[09:08:17] <scott_gonzalez> Should we just keep it as is? I'm not really sure what we would do to fix this without potentially causing reflows of other inline elements.
[09:09:19] <fnagel> I would say the width of the generated button should not exceed the native select width by default.
[09:11:48] <arschmitz> i dont entirely agree i think the overflow by default behavior right now is kinda ugly.
[09:12:32] <arschmitz> if you just do .selectmenu() i think it should display properly
[09:13:05] <scott_gonzalez> I just checked what Kendo does, looks like they just have a width of 12.4em for all of their text-based controls.
[09:15:09] <scott_gonzalez> In our demos we use `select { width: 200px; }`
[09:15:15] <arschmitz> to me the problem is that by default you get cut off text basically 100% of the time and that does not really make sense
[09:15:35] <scott_gonzalez> Which I think looks better than auto width.
[09:15:55] <scott_gonzalez> arschmitz: You think basically 100% of developers are using auto width on selects?
[09:16:04] <scott_gonzalez> And not setting a width based on their form layout?
[09:16:11] <arschmitz> no
[09:16:25] <arschmitz> sorry i just mean that if you do nothing but call the widget on a select
[09:16:31] <arschmitz> the most default of defautl behivors
[09:16:39] <arschmitz> you get overflowed text
[09:16:50] <arschmitz> to be clear id be fine with a set width
[09:16:53] <fnagel> Quite a lot frameworks use width 100% and have a parent with specified width
[09:17:16] <arschmitz> i just dont like that it overflows by default
[09:17:41] <arschmitz> fnagel: yes mobile selects are 100% width by default
[09:17:48] <jzaefferer> what's the damage of selectmenu exceeding the native select width?
[09:18:02] <fnagel> arschmitz: Twitter Bootstrap too
[09:18:15] <fnagel> jzaefferer: breaking layouts
[09:18:39] <jzaefferer> can you be more specific?
[09:19:07] <scott_gonzalez> So let's say you set the width in CSS to 200px
[09:19:11] <jzaefferer> it sounds like it could be a purely theoretical problem...
[09:19:27] <scott_gonzalez> And then you use the default selectmenu option `{ width: null }`
[09:19:36] <scott_gonzalez> And the item is cut off, we would expand it to fit.
[09:19:41] <scott_gonzalez> And that could break your layout.
[09:20:05] <jzaefferer> okay
[09:20:10] <arschmitz> in mobile we handle that by saying you should target the generated button not the native selelct with your css
[09:20:13] <scott_gonzalez> There's another problem too.
[09:20:37] <scott_gonzalez> We could potentially have a `{ width: "fit" }`, but we'd need to fit every option, not just the selected one.
[09:20:46] <scott_gonzalez> And that would mean running the button rendering method.
[09:21:32] <scott_gonzalez> And how do you do that in a sane way from CSS with auto-generated replacmenets?
[09:21:39] <scott_gonzalez> Using sibling selectors?
[09:22:12] <arschmitz> scott_gonzalez: what do you mean liek .ui-selectmenu-button how would you target a specific one?
[09:22:21] <scott_gonzalez> A specific one.
[09:22:31] <arschmitz> add a class to it with the classes option :-D
[09:22:34] <scott_gonzalez> If there's "fit", there has to be "match"
[09:22:50] <jzaefferer> so what about using width:100%
[09:22:50] <scott_gonzalez> Match is the more sane option.
[09:23:01] <scott_gonzalez> jzaefferer: If the user specifies a width, there are no problems.
[09:23:06] <scott_gonzalez> The default is to match the width.
[09:23:32] <scott_gonzalez> The complaint is that matching auto-width results in overflow because of different styling for native vs. UI.
[09:24:10] <scott_gonzalez> What if someone just takes a stab at writing an extension to support `{ width: "fit" }`
[09:24:32] <arschmitz> scott_gonzalez: so what about adding a class with classes option and targeting that in css?
[09:24:49] <scott_gonzalez> That's not sane.
[09:24:53] <arschmitz> why?
[09:24:53] <scott_gonzalez> $( "select" ).selectmenu();
[09:25:07] <arschmitz> ok
[09:25:20] <scott_gonzalez> That becomes:
[09:25:24] <scott_gonzalez> $( "select" ).each(function() {
[09:25:30] <scott_gonzalez> $( this ).selectmenu({
[09:25:33] <arschmitz> scott_gonzalez: wait
[09:25:33] <scott_gonzalez> classes: {
[09:25:46] <arschmitz> the button gets a generated id based on the select id
[09:25:48] <arschmitz> just use that
[09:26:09] <scott_gonzalez> { width: null } means inline style.
[09:26:20] <scott_gonzalez> So have fun with using !important in your stylesheet ;-)
[09:26:40] <fnagel> Can somebody imagine a real use case for ticket? Like having a bunch of selects with totally diferent sizes does not sound very real world to  me.
[09:26:56] <fnagel> * for this ticket
[09:26:56] <scott_gonzalez> People do it.
[09:27:04] <arschmitz> lots and lots of people do it
[09:27:06] <scott_gonzalez> They leave selects completely unstyled.
[09:27:27] <scott_gonzalez> And some of them have shitty looking forms, some of them look decent.
[09:27:39] <arschmitz> presumably those are likely to be the same people doing $( "select" ).selectmenu()
[09:27:40] <scott_gonzalez> Like some will just not even style the labels to align.
[09:27:53] <arschmitz> and having all their buttons overflow
[09:28:40] <arschmitz> because they are putting in very very little effort
[09:28:49] <scott_gonzalez> But they're also the people who can end up with selects that look like this: http://jsbin.com/wecawawegu/1/
[09:29:07] <fnagel> arschmitz: Using $( "#myForm select" ).selectmenu() seems valid to me when "look same on every system" is the only requirement
[09:29:43] <arschmitz> fnagel: it is
[09:29:55] <arschmitz> and thats my point you have lots of people that are  not styling their selects
[09:29:58] <fnagel> OK, understand your point. Its a use case and we need to support it :-)
[09:30:40] <arschmitz> i think having the match option as it is now makes sense im jsut not sure about it being the default
[09:31:11] <jzaefferer> sounds like the only real solution is to set a specific width; since we can't guess what the correct width should be, setting width:100% by default might be our best bet (following mobile, bootstrap, keno). That makes it very obvious that the developer needs to set a width on the container, if they aren't already doing that
[09:32:12] <arschmitz> and if you style all your selects like right now we are assuming most do
[09:32:15] <scott_gonzalez> width: 100% would be a terrible default.
[09:32:32] <arschmitz> you could just do $( "select" ).selectmenu( { width: "match" } );
[09:34:00] <jzaefferer> "width: 100% would be a terrible default." - why? selectmenu isn't a 1:1 replacement for <select>
[09:34:33] <fnagel> jzaefferer: I guess people will use width: auto and start complaining again.
[09:34:41] <scott_gonzalez> http://jsbin.com/wecawawegu/1/
[09:34:49] <scott_gonzalez> That's what the unstyled users will end up with.
[09:34:59] <scott_gonzalez> First is what they have today, second is what they'd have with 100%.
[09:35:08] <scott_gonzalez> We'd be totally changing their layouts.
[09:35:23] <scott_gonzalez> And everyone that does the sane thing of settings widths will now have the same thing.
[09:35:27] <jzaefferer> which makes it pretty obvious that they need to specific a width
[09:35:44] <scott_gonzalez> And if they do that, then the current default works great for them.
[09:36:00] <scott_gonzalez> Once you're specifying widths, there is no problem.
[09:36:05] <scott_gonzalez> It's exactly the size you told it to be.
[09:37:56] <arschmitz> so the second case is exactly what we have in mobile
[09:38:04] <arschmitz> but thats because on phones it makes sense
[09:38:16] <arschmitz> i would suggest a set default width for UI like kendo
[09:42:28] <scott_gonzalez> I think I'd be ok with that.
[09:42:37] <scott_gonzalez> It's easy enough to change back to null.
[09:42:42] <arschmitz> yup
[09:42:48] <scott_gonzalez> Thoughts on that?
[09:43:06] <arschmitz> anyone that wants current just does $( "select" ).selectmenu( { width: null } );
[09:43:29] <jzaefferer> sounds fine to me
[09:43:45] <scott_gonzalez> Or even `$.ui.selectmenu.prototype.options.width = null;` if they want the old default back.
[09:43:45] <jzaefferer> btw. for menu we don't specific a width, so it defaults to width:100%
[09:43:50] <arschmitz> yup
[09:43:52] <jzaefferer> *specify
[09:44:08] <fnagel> +1
[09:44:31] <scott_gonzalez> Technically menu defaults to the element's width, which for blocks defaults to 100%.
[09:45:09] <scott_gonzalez> Ok, so what should that default be?
[09:45:42] <arschmitz> now thats a tricky question
[09:45:43] <scott_gonzalez> 200px?
[09:45:55] <arschmitz> should probably be em
[09:46:00] <scott_gonzalez> Can't be.
[09:46:05] <scott_gonzalez> um...
[09:46:29] <arschmitz> why?
[09:46:32] <scott_gonzalez> Perhaps, but certainly not supported today.
[09:46:45] <scott_gonzalez> Widget dimensions are always numbers, not CSS values.
[09:47:03] <arschmitz> why wouldnt we set the default dimensions in the css?
[09:47:16] <scott_gonzalez> Because that's not how the widget works.
[09:47:27] <scott_gonzalez> How would you make this work?
[09:47:27] <arschmitz> and just override inline if its not the same
[09:47:41] <scott_gonzalez> What does that mean?
[09:48:21] <arschmitz> i guess you would have to have a special default value like we do with null
[09:48:29] <scott_gonzalez> AHHHH
[09:48:32] <scott_gonzalez> No thanks.
[09:48:44] <scott_gonzalez> Let's move discussion of this to -dev.
[09:48:56] <scott_gonzalez> Next ticket.
[09:48:56] <scott_gonzalez> http://bugs.jqueryui.com/ticket/11223
[09:49:03] <scott_gonzalez> Tabs on pages with auth in the URL
[09:49:12] <scott_gonzalez> Just go read my comment :-)
[09:49:49] <scott_gonzalez> The question is do we manually strip auth or do we tell the user that they should use a better auth mechanism?
[09:50:12] <scott_gonzalez> Using auth in the URL isn't a good idea.
[09:50:31] <arschmitz> im very torn on this
[09:51:21] <arschmitz> but in the interest in moving forward id say just document it and how to fix if they want with an extension and encourage better auth
[09:51:45] <scott_gonzalez> That's what I would prefer as well.
[09:51:51] <fnagel> +1
[09:51:57] <scott_gonzalez> TBH, I didn't think people still did this.
[09:52:43] <scott_gonzalez> Ok, on to CSS dependencies.
[09:52:49] <scott_gonzalez> I think we're good to land the PR, correct?
[09:53:01] <arschmitz> i looked again and everything looked ok
[09:55:45] <scott_gonzalez> rxaviers: Do you want to land that?
[09:56:27] <rxaviers> scott_gonzalez, sure
[09:57:27] <scott_gonzalez> That brings us to the last set of tickets.
[09:57:44] <scott_gonzalez> .outerWidth() detection for old jQuery Core is slow: http://bugs.jqueryui.com/ticket/11197
[09:57:50] <scott_gonzalez> "slow"
[09:58:07] <scott_gonzalez> It is fairly expensive for something users can't avoid though.
[09:58:22] <scott_gonzalez> So, we can either stop doing a true feature detect and infer based on function lenght.
[09:58:28] <arschmitz> it says in 1.7 is this fixed in 1.8?
[09:58:29] <jzaefferer> I think any overhead from loading scripts is worth reducing
[09:58:38] <scott_gonzalez> yes
[09:58:51] <scott_gonzalez> The other option is to just make this excludable: http://bugs.jqueryui.com/ticket/9647
[09:59:00] <scott_gonzalez> Can we get the split into 1.12?
[09:59:17] <arschmitz> that would be creat for mobile too
[09:59:20] <arschmitz> great
[09:59:34] <jzaefferer> infer based on function length sounds fine to me
[09:59:38] <arschmitz> we pull in all of core when we don't want all the backcompat
[09:59:47] <jzaefferer> I'd rather not add anything that could further delay 1.12
[10:00:36] <scott_gonzalez> Ok, well I can land the function length inference.
[10:00:57] <scott_gonzalez> I really don't like inferring though.
[10:01:09] <arschmitz> is it really that much work to split up core?
[10:01:23] <jzaefferer> arschmitz: its always more work than you expect, see classes
[10:01:28] <arschmitz> lol
[10:01:42] <jzaefferer> (you as in anyone, not just you)
[10:01:50] <scott_gonzalez> The real work of splitting up core is getting dependencies correct in each file.
[10:02:15] <gibson042> you might also try performing that test against an element attached to the document, which has in many cases proven significantly faster
[10:03:57] <scott_gonzalez> gibson042: Good point. What do we need to do here since body might not exist yet?
[10:04:03] <scott_gonzalez> It's been a while since I've had to deal with that case.
[10:04:10] <gibson042> append to documentElement
[10:04:20] <scott_gonzalez> Just append the anchor directly to the documentElement?
[10:04:23] <scott_gonzalez> That's easy enough.
[10:04:49] <scott_gonzalez> I remember when we created body elements.
[10:04:59] * gibson042 shudders
[10:05:04] <scott_gonzalez> Ok, I'll see what that does in terms of perf.
[10:05:06] <jzaefferer> what's wrong with inferring in this case?
[10:05:11] <arthurvr> Content meeting time? cc agcolom
[10:05:24] <scott_gonzalez> Thanks everyone. Let's continue in -dev for those that have time.
[10:05:31] <arthurvr> Bye everybody!
[10:05:35] <agcolom> hi
[10:05:55] <agcolom> agenda at https://docs.google.com/document/d/10BtIFF5R_djDCAtwJQiIxy3oOxdQeyrogWFoSvybFHA/edit#heading=h.4z0xap36fb0
[10:05:58] <arthurvr> `contentteam
[10:06:02] <arthurvr> does that work yet?
[10:06:18] <agcolom> looks like a no ;-)
[10:06:25] <sfrisk> allo
[10:06:26] <arthurvr> agcolom: kswedberg: arschmitz: danheberden: AurelioDeRosa: RWhitbeck: gnarf: sfrisk:  meeting time!
[10:07:04] <agcolom> Karl can't make it today
[10:07:13] <arschmitz> im still here 3rd meeting in a row :-)
[10:07:22] <arthurvr> letâ€™s get started :-)
[10:07:42] <agcolom> Ok, while arschmitz is still here, we have an item on the agenda regarding his site spider
[10:07:51] <agcolom> Alex been working on it for a while. The idea is to have it on all content repo, and add it on a grunt task. It checks for errors and deadlinks, missing resources, etc. Currently reporting a lot of errors and Alex needs help from us to fix those. Alex will be trying to add the task to the repos over the next week or 2.
[10:08:01] <arthurvr> Awesome Alex!
[10:08:18] <arthurvr> def. worth having on our repos
[10:08:21] <arschmitz> my goal is to have it on all the repos by next meeting
[10:08:32] <arschmitz> eventually it will run nightly on all the sites
[10:08:38] <arschmitz> but we cant do that until it actually passes
[10:09:22] <agcolom> and apparently there are lots of errors reported... that will need fixing
[10:09:32] <arschmitz> so as people have time if you can just run the grunt task and plug away on fixing errors on the sites
[10:09:44] <arschmitz> eventually we will get there
[10:10:09] <agcolom> that's really great news and a move in the right direction!
[10:10:22] <agcolom> thanks Alex!
[10:10:31] <arthurvr> Sure!
[10:10:47] <scott_gonzalez> I've just enabled `contentteam
[10:10:55] <agcolom> thank you Scott!!!!
[10:10:58] <arthurvr> Yay! Thanks scott_gonzalez!
[10:11:23] <jzaefferer> arschmitz: if there are so many errors, is there a way to focus on critical issues?
[10:11:33] <arschmitz> yes
[10:11:44] <arschmitz> it seperatly reports 4xx and 3xx
[10:11:57] <arschmitz> 3xx are mostly working links that SHOULD be fixed
[10:12:01] <arschmitz> 4xx are real issues
[10:13:00] <agcolom> so 3xx are the easy to fix?
[10:13:08] <arschmitz> no they are all easy
[10:13:12] <arschmitz> they are all just mad links
[10:13:14] <arschmitz> bad
[10:13:19] <agcolom> right, ok
[10:13:30] <agcolom> I'll have more time after jquk!
[10:13:40] <agcolom> it's end of next week
[10:13:52] <arschmitz> though some can be tricky to find if they are in jquery-wp-content not the actual site :-)
[10:14:24] <arthurvr> oh right, success with your talk, agcolom!
[10:14:31] <agcolom> thanks!
[10:14:49] <agcolom> anything else to add on that item?
[10:15:15] <agcolom> ok, moving on...
[10:15:16] <agcolom> Email from Justin Crawford https://groups.google.com/forum/#!topic/jquery-content-team/MaXPstGj1os
[10:15:33] <agcolom> Awesome!
[10:15:33] <agcolom> Can we think of a response?
[10:15:53] <arthurvr> Yup, good to know they care :-)
[10:16:03] <agcolom> yes, for sure!
[10:16:36] <agcolom> maybe see with Karl and gnarf if we can send a response?
[10:16:59] <jzaefferer> is there a reason for that mailing list to be private?
[10:17:08] <agcolom> anyone can join
[10:17:12] <arthurvr> jzaefferer: nope (I donâ€™t think so)
[10:17:26] <agcolom> it was the old content mailing list
[10:17:27] <jzaefferer> sure, but I shouldn't have to join in order to read messages, right?
[10:18:10] <agcolom> no reason for it to be private that I can think of... would have to see whether all past messages are ok
[10:18:17] <arthurvr> Sure. I think we can make it public (except private info was shared in the past?)
[10:18:36] <agcolom> so action to check past message and make it public?
[10:18:42] <jzaefferer> (a little later, but...) "spider.js finds your mad links, bro!" -- tag line for spider.js
[10:18:59] <arthurvr> agcolom: Yes, I think so.
[10:19:18] <jzaefferer> can anyone join?
[10:19:25] <jzaefferer> then its not exactly private anyway
[10:19:58] <agcolom> I'm new to google groups!
[10:21:13] <agcolom> ok, I'll double check everything...
[10:21:38] <agcolom> regarding the review of articles on learn... ongoing
[10:22:11] <agcolom> I've contacted our legal team and I need to ask for consent for articles that were brought in
[10:22:32] <arthurvr> any outcome yet?
[10:22:35] <agcolom> just an email from the original authors is ok, and we'll keep in with the Foundation documents
[10:22:49] <agcolom> I've asked Remy and he said yes :-)
[10:23:13] <agcolom> so I'll just carry on... I've updated the google doc accordingly
[10:23:32] <agcolom> aiming to complete before next meeting
[10:23:48] <arthurvr> agcolom: Okay. Thanks! I had other focus past 2 weeks but will try to work on it too.
[10:24:01] <agcolom> cool, thanks.
[10:24:49] <agcolom> regarding the review, gnarf also mentioned that it will be an assignment for some students, so hopefully we'll get some help as well
[10:25:22] <agcolom> regarding the automated CLA check. Is that now fully in place and working everywhere?
[10:25:26] <arthurvr> Yes.
[10:25:34] <agcolom> great. so action compelted!
[10:25:35] <arthurvr> Itâ€™s enabled in all repos now. Works like a charm
[10:25:48] <agcolom> wonderful@
[10:25:56] <agcolom> Aurelio to see how we can get more help from the community
[10:25:56] <arthurvr> Some bugs (feature requests) in the jquery-license bug tracker.
[10:25:56] <agcolom> https://docs.google.com/document/d/1qeiwEtiIitFt1X8Iu1Cu2X0GgwM-MSb4FOOl50oerPY/edit
[10:26:01] <arthurvr> bug over all works great.
[10:26:09] <arthurvr> Aurelio isnâ€™t here, so?
[10:26:20] <agcolom> the article looks good
[10:26:28] <arthurvr> Yes.
[10:26:50] <agcolom> I've made a few tweeks and comments, so I think we're good to go after a final review from a native speaker
[10:27:12] <agcolom> e.g. kswedberg. I added a note in the article and in the notes
[10:27:37] <agcolom> what's the latest with protocol-relative URLs
[10:28:05] <agcolom> I will need to update api docs for mobile.
[10:28:20] <arthurvr> Itâ€™s done in api site and learn site.
[10:28:54] <agcolom> not for mobile.
[10:29:24] <arthurvr> Okay
[10:29:26] <agcolom> so I'll add that to my list (I need to also update to latest jquery core
[10:29:44] <agcolom> also, so I can do both those after my jquk talk!
[10:29:51] <arthurvr> agcolom: lgtm!
[10:29:57] <agcolom> :-)
[10:30:16] <agcolom> will be so good to be able to do that again ;-)
[10:30:33] <arthurvr> I assigned the ticket about using the latest version of core for the api site to me. Will do it when v3 releases.
[10:30:47] <agcolom> fab! Thanks!
[10:30:51] <arthurvr> I canâ€™t really do it yet, the cdn isnâ€™t available.
[10:31:03] <arthurvr> But other work for v3 is ongoing in v3.0.0-docs branch over there
[10:31:32] <agcolom> yes, I saw a few things going in and it's great that you're keeping up with everything!
[10:31:45] <arthurvr> agcolom: I try to do my best :-)
[10:32:20] <agcolom> you're doing great!
[10:32:31] <agcolom> really so glad to have you onboard!
[10:32:36] <arthurvr> thanks!
[10:32:53] <arthurvr> for the learn site, weâ€™re down to 4 open PRs.
[10:33:00] <arthurvr> which is awesome too! :-)
[10:33:05] <agcolom> and with regards to keeping repos at a healthy cadence, we're still -1 in two weeks ;-)
[10:33:24] <arthurvr> agcolom: is that right? -1?
[10:33:42] <agcolom> yes, -1 open issues and PRs altogehter!
[10:33:48] <agcolom> which is amazing!
[10:33:58] <agcolom> because quite a few issues got open!
[10:34:12] <arthurvr> That seems weird. The previous minutes mention 257 open tickets
[10:34:22] <arthurvr> Now the agenda states we have 252.
[10:34:49] <agcolom> 257 was 4 weeks ago
[10:34:56] <agcolom> 2 weeks ago 253
[10:35:01] <agcolom> today 252
[10:35:10] <arthurvr> hmmm http://meetings.jquery.org/category/content/
[10:35:15] <agcolom> maybe I made a mistake in the
[10:35:29] <agcolom> yes, I didn't update!
[10:35:41] <agcolom> Action: Anne to learn to copy notes properly!
[10:35:51] <arthurvr> Anyways letâ€™s donâ€™t care about it :-)
[10:36:04] <arthurvr> agcolom: lol :-)
[10:36:14] <agcolom> Yes, I can fix when I upload these new notes ;-)
[10:36:47] <arthurvr> agcolom: Any other points we have to discuss? Howâ€™s the gsoc going btw?
[10:36:53] <agcolom> so I can't wait to be back in helping out. And sorry for not being helping at all all the last few weeks
[10:37:01] <agcolom> all in.
[10:37:35] <agcolom> jzaefferer: is the gsoc application all done now and submitted?
[10:38:18] <agcolom> I think the deadline was 20th?
[10:38:30] * agcolom checks
[10:39:17] <agcolom> yes, the deadline was 20th
[10:39:27] <arthurvr> So, letâ€™s hope itâ€™s submitted :-)
[10:39:39] <agcolom> yes, it is
[10:39:41] <agcolom> http://www.google-melange.com/gsoc/events/google/gsoc2015
[10:39:50] <arthurvr> Wooohoo!
[10:40:25] <agcolom> JÃ¶rn added me as backup admin, so I guess we will hear sometime soon...
[10:40:52] <arthurvr> Okay
[10:40:55] <agcolom> We should know on 2nd March
[10:41:16] <agcolom> yes, really excited about this...
[10:41:35] <agcolom> and jzaefferer did a great job with the application
[10:41:48] <agcolom> I think this is it for today...
[10:42:07] <agcolom> anything else anyone needed to discuss or mention?
[10:43:45] <agcolom> ok, thanks everyone ;-)
[10:43:52] <arthurvr> k guys. My focus for upcoming 2 weeks will mainly be the api site, much open issues in there that can be taken care of easily. Success at jquk, Anne!
[10:44:04] <agcolom> Thank you Arthur!
[10:44:05] <arthurvr> Somebody will need to lock the channel?
[10:44:17] <agcolom> And thanks again for all the crazy work you're doing!
[10:44:21] <agcolom> yes please
[10:44:36] <arthurvr> Who can? :-)
[10:44:38] <agcolom> arschmitz: could you close the channel please?
