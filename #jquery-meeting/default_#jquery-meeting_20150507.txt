[09:00:28] <scott_gonzalez> `pepteam
[09:00:35] <scott_gonzalez> b-ot: You're killing me.
[09:00:44] <snover> but what good is a bot if it cannot‚Ä¶speak
[09:00:51] <scott_gonzalez> arschmitz jzaefferer
[09:01:21] <snover> you‚Äôll just have to remember who you are supposed to be working with :)
[09:01:32] <scott_gonzalez> That's too hard :-P
[09:02:00] <scott_gonzalez> Anyone that didn't get pinged isn't in the channel.
[09:02:07] <scott_gonzalez> So, let's get started.
[09:02:19] <scott_gonzalez> Style guide: https://github.com/jquery/PEP/pull/185
[09:02:22] <scott_gonzalez> Is this ready to land?
[09:03:31] <snover> yeah
[09:03:34] <snover> as far as i know anyway
[09:03:37] <scott_gonzalez> ok
[09:03:48] <snover> NO WAIT I WANT TO CHA‚Äî
[09:03:55] <snover> :)
[09:04:04] <scott_gonzalez> :-)
[09:04:15] <scott_gonzalez> How about functional tests? https://github.com/jquery/PEP/pull/184
[09:04:22] <scott_gonzalez> I implemented the custom command.
[09:04:43] <scott_gonzalez> And got rid of the changes to the W3C test harness reporter.
[09:05:06] <snover> nice. let me take another look.
[09:12:03] <jzaefferer> scott_gonzalez: there's two unresolved issues in 185
[09:12:17] <jzaefferer> jscs jquery preset update, readme change
[09:12:52] <scott_gonzalez> Well, I don't want to block on using the preset.
[09:13:39] <scott_gonzalez> The readme change is fine.
[09:16:19] <jzaefferer> so the files under tests/functional automate the manual steps from the W3C tests?
[09:16:32] <scott_gonzalez> yup
[09:17:30] <jzaefferer> seems like that could be useful for their testsuite as well
[09:17:55] <snover> scott_gonzalez: this all looks good. the only thought i had was to use require.toUrl for the /dist/pep.js in case the proxy URL ever changes in the future, but it‚Äôs not critical
[09:18:05] <scott_gonzalez> Yeah, I can bring it up in the next PEWG call.
[09:18:13] <arschmitz> Hey sorry went for a jog and lost track of time
[09:18:15] <scott_gonzalez> ok
[09:18:27] <snover> so i would approve landing üëç
[09:18:40] <jrossi1> oh yes scott_gonzalez please do
[09:19:04] <scott_gonzalez> So just change https://github.com/scottgonzalez/PEP/commit/6571d9b8031bbeb9eb387878574be50d987ad17d#diff-3babd163c102fdfdc29d7c17a2d27286R16 to `script.src = require.toUrl('/dist/pep.js')`?
[09:19:52] <snover> just 'dist/pep.js' i would presume, since baseUrl is the pep directory
[09:20:23] <scott_gonzalez> ok
[09:21:23] <scott_gonzalez> I'll get both of those PRs updated and merged.
[09:21:54] <scott_gonzalez> I started looking into the failing unit tests.
[09:22:04] <scott_gonzalez> jrossi1: I've got a quetsion about IE11.
[09:22:25] <scott_gonzalez> navigator.msPointerEnabled is true, and MSPointerEvent exists, but those events will never be fired, correct?
[09:22:33] <scott_gonzalez> Only the unprefixed events get fired?
[09:22:44] <scott_gonzalez> Assuming nobody is manually firing a MSPointerEvent.
[09:23:15] <jrossi1> sigh, yes
[09:23:20] <jrossi1> Microsoft Edge has not this nonsense
[09:23:41] <scott_gonzalez> ok
[09:23:45] <jrossi1> there was a time where that behavior actually improved compat, it is no longer necessary
[09:24:04] <scott_gonzalez> PEP is currently using navigator.msPointerEnabled to determine if it should expect prefixed events in the tests.
[09:24:04] <jrossi1> FWIW we still have navigator.pointerEnabled even though that's not in the spec
[09:24:08] <snover> jrossi1: just push edge to windows update now to solve the problem :)
[09:24:13] <scott_gonzalez> So that's the cause of some of the failures.
[09:24:14] <jrossi1> too much code out there using that for feature detection
[09:24:17] <jrossi1> snover: I'm on it
[09:24:20] <snover> critical security update
[09:24:31] <scott_gonzalez> I'll update it to something like window.MSPointerEvent && !window.PointerEvent
[09:24:56] <snover> scott_gonzalez: why does it not prefer the standard event and then fallback to the MSPointerEvent?
[09:25:24] <scott_gonzalez> This is just for tests determining if prefixed events should be tested.
[09:25:38] <scott_gonzalez> https://github.com/jquery/PEP/blob/master/tests/support/setup.js#L11
[09:25:55] <scott_gonzalez> https://github.com/jquery/PEP/blob/master/tests/unit/dispatcher.js#L47-L51
[09:25:55] <jrossi1> we didn't want to be firing two event dispatches X 60Hz updates
[09:26:07] <jrossi1> in a given page if both MSPointer and Pointer are listened to
[09:26:13] <snover> got it
[09:26:48] <scott_gonzalez> Honestly, this specific test can probably just go away.
[09:27:33] <scott_gonzalez> I need to look through all of the existing test and see what we are and aren't testing.
[09:28:30] <scott_gonzalez> M4rius: Do you have any update on the over/out events during capture?
[09:34:31] <scott_gonzalez> Guess he's not around.
[09:34:53] <scott_gonzalez> Anyone have anything else to discuss?
[09:36:09] <scott_gonzalez> Ok, thanks everyone.
[09:36:49] * jrossi1 waves goodbye
[11:03:00] <arschmitz> `mobileteam
[11:03:40] <arschmitz> gabriel_schulhof: agcolom: jasperdegroot: cgack: sfrisk: apsdehal: meeting time
[11:03:55] <agcolom> hi!
[11:04:02] <jasperdegroot> hola
[11:04:05] <gabriel_schulhof> Hey!
[11:04:11] <arschmitz> agenda https://docs.google.com/spreadsheets/d/1xGEVtftLDEHAA37YYlA23J_EZwIRyMUaseBY790byPM/edit#gid=370772533
[11:05:03] <arschmitz> ok lets get started
[11:05:11] <cgack> howdy
[11:05:19] <arschmitz> first 1.5-dev
[11:05:30] <arschmitz> the new autoinit has landed
[11:05:44] <arschmitz> this is one of our big 1.5 blockers so this is good news
[11:05:48] <gabriel_schulhof> Nice!
[11:05:58] <jasperdegroot> great
[11:06:01] <arschmitz> i also added / fixed some tests
[11:06:16] <arschmitz> the degradeinputs tests still pased even when i removed the module :-/
[11:06:29] <arschmitz> So when i put it back i added real tests
[11:07:12] <arschmitz> also found tons of tests using deprecated code
[11:07:32] <arschmitz> we need to do better about when we deprecate something making sure nothing is using the deprecated code
[11:08:34] <arschmitz> so updates from UI
[11:08:38] <gabriel_schulhof> arschmitz: Looking forward this should be simple by setting $.mobileBackcompat = false ...
[11:08:49] <sfrisk> hi everyone
[11:08:51] <arschmitz> gabriel_schulhof: yes
[11:09:07] <arschmitz> though some was in things like demo custom code that might not be obvious
[11:09:14] <arschmitz> so we should really be doing a search
[11:09:29] <arschmitz> in this case a lot of it was .trigger( "create" )
[11:09:34] <arschmitz> which is going to be a silent fail
[11:10:07] <gabriel_schulhof> arschmitz: Actually, for demos, we could turn off $.mobileBackCompat in a separate script tag, so it won't show up in view source.
[11:10:16] <arschmitz> we even had a lot of tests that used it that were still passing
[11:10:16] <gabriel_schulhof> Yeah, that's true.
[11:10:36] <arschmitz> because they did something like trigger create then destroy then check the dom
[11:10:53] <gabriel_schulhof> Ha! There's no way around that ...
[11:11:07] <arschmitz> execpt to make sure we do a search for the deprecated code in the whole repo
[11:11:28] <arschmitz> this could have been found had we originally done a search for ".trigger( "create" )"
[11:11:42] <arschmitz> which i take full responsibility for i did that feature but its a good example
[11:12:02] <jasperdegroot> besides doing a search you can also add things to the checklist in the ticket whenever you see something that uses code that we are going to deprecate
[11:12:30] <arschmitz> jasperdegroot: yup
[11:12:46] <arschmitz> this is pretty easy to avoid we just need to make sure we take that step of doing the search
[11:12:54] <arschmitz> so just somethign to keep in mind
[11:12:58] <jasperdegroot> especially if it's not as easy to find as a deprecated method
[11:13:17] <arschmitz> so in UI land we continue to make all gabriel_schulhof dreams come true
[11:13:23] <arschmitz> labels and form landed
[11:13:33] <arschmitz> reset is going to be a mixin
[11:13:41] <arschmitz> escapeSelector landed
[11:13:50] <arschmitz> reset scott_gonzalez is still working on
[11:14:19] <arschmitz> also looks like we are going to make $.widget accept an array of prototypes
[11:14:25] <arschmitz> so avoid having to use extend
[11:14:25] <gabriel_schulhof> I'm in lalaland.
[11:14:29] <jasperdegroot> lol
[11:15:14] <gabriel_schulhof> arschmitz: Oh, protos to be applied sequentially, as if you had called $.widget() several times, right?
[11:15:24] <arschmitz> so it will not be something like $.widget( "mobile.textinput", [ $.ui.reset-mixin, { prototype } ] );
[11:15:41] <gabriel_schulhof> OK, so no.
[11:15:53] <arschmitz> gabriel_schulhof: this is for mixings like reset where it just adds a method
[11:15:58] <arschmitz> and there is no overriding of methods
[11:16:07] <arschmitz> under the hood it would do
[11:16:24] <gabriel_schulhof> OK, so mixins can't override methods.
[11:16:37] <arschmitz> $.extend( {}, $.ui.resetMixin, { prototype } );
[11:18:06] <arschmitz> gabriel_schulhof: https://github.com/scottgonzalez/jquery-ui/commit/8d51824c579d88cc1763be6c4fe2dc519e0a39d5
[11:19:00] <arschmitz> so this will make using mixins like addfristlastclasses and reset a lot cleaner
[11:19:06] <arschmitz> we also decided on a naming convention
[11:19:17] <arschmitz> for mixins
[11:19:18] <arschmitz> $.ui.formResetMixin
[11:19:30] <arschmitz> rather then a namespace like we have no with behivors
[11:20:07] <arschmitz> this makes using things like this a lot easier and cleaner
[11:20:27] <arschmitz> it also draws a clean line between extensions and mixins
[11:21:03] <arschmitz> gabriel_schulhof: cgack: any questions both of you are working on widgets that will use this?
[11:21:17] <gabriel_schulhof> I'm good.
[11:21:32] <gabriel_schulhof> Just need to update the PR when this lands in mobile.
[11:21:34] <gabriel_schulhof> PRs.
[11:21:39] <arschmitz> yup
[11:21:58] <cgack> and i'll probably just look at gabriel_schulhof 's PR before i do anything crazy :)
[11:22:44] <arschmitz> jasperdegroot: oh so you asked me a while back why we were using a span on icons
[11:22:51] <arschmitz> for the sapce
[11:22:54] <jasperdegroot> i did
[11:23:03] <arschmitz> and not doing like :fisrt-child:after
[11:23:21] <arschmitz> :last-child does not work on ie8
[11:24:00] <jasperdegroot> yeah i know
[11:24:21] <arschmitz> and you need to change if the space is before or after if its a first or last child
[11:25:06] <jasperdegroot> so this is only for IE8?
[11:25:07] <arschmitz> so thats why we cant do that
[11:25:35] <arschmitz> thats the only reason i know of not to do it
[11:26:00] <arschmitz> sadly ie8 is the only reason we do a lot of things
[11:26:42] <jasperdegroot> right
[11:26:51] <arschmitz> it also does get a little weird with top and bottom
[11:27:36] <arschmitz> because you need to do something like .ui-icon.ui-widget-icon-block:first-child:after { content: "" }
[11:27:36] <jasperdegroot> i think it would be the same as it is now ... no span needed, no pseudo element needed
[11:28:12] <arschmitz> jasperdegroot: execpt if your doing it with a pseudo you need to remove the space some how
[11:28:27] <jasperdegroot> ah that's true
[11:28:48] <arschmitz> so its possible in ie8+ to do what you want but it does get a little weird
[11:28:51] <jasperdegroot> ok it is how it is
[11:29:08] <arschmitz> its something we can revisit when we drop ie8
[11:29:28] <jasperdegroot> Chasis won't support IE8, right?
[11:29:34] <arschmitz> it does
[11:30:03] <arschmitz> it will support ie8 until Microsoft drops support
[11:30:11] <arschmitz> likely same as us
[11:30:29] <jasperdegroot> ok
[11:31:52] <arschmitz> ok we kinda glossed over this before but want to check because its a big change
[11:32:01] <arschmitz> does any one have any questions on the new auto init?
[11:32:17] <arschmitz> or as it shall hence forth be known
[11:32:19] <arschmitz> the enhancer
[11:32:27] <jasperdegroot> not at the moment
[11:32:31] <arschmitz> sounds like an 80's action flick
[11:32:36] <jasperdegroot> lol
[11:33:02] <arschmitz> the big change here is this is 100% standalone and extendable
[11:33:24] <arschmitz> and it fixes all the load order issues
[11:33:32] <arschmitz> its load order independant
[11:33:55] <arschmitz> and oh and works with anything you want not just widgets
[11:34:01] <arschmitz> i guess thats kinda a big new thing
[11:34:18] <gabriel_schulhof> I lack the sufficient number of thumbs to raise.
[11:34:58] <arschmitz> to an extent it actually addresses scott_gonzalez oldest complaint about our autoinit
[11:35:15] <arschmitz> which is that it really does not matter because there will always be other stuff you need to do
[11:35:23] <arschmitz> now it can do it all lol
[11:36:30] <gabriel_schulhof> ... the chief purpose of it being that it translates between declarative and procedural ...
[11:38:03] <arschmitz> or really also now to batch container operations
[11:38:21] <arschmitz> this can be used anytime there is a set of things you need to do on a container of content
[11:38:28] <arschmitz> generally good for ajax stuff
[11:39:14] <gabriel_schulhof> Very cool, and it'll totally work with UI widgets.
[11:39:18] <arschmitz> yup
[11:39:28] <arschmitz> just include it after jquery ui
[11:39:31] <arschmitz> and your good to go
[11:39:45] <gabriel_schulhof> arschmitz: What about the data-role="widget1,widget2"? Is that Enhancer 2.0: The Revenge?
[11:39:54] <arschmitz> well i thought about that
[11:39:55] <jasperdegroot> lol
[11:39:56] <arschmitz> it wont work
[11:40:02] <gabriel_schulhof> No O_o ?
[11:40:12] <arschmitz> because data-role="widgetname" is a selector
[11:40:14] <arschmitz> not data
[11:40:22] <gabriel_schulhof> D'oh!
[11:40:26] <gabriel_schulhof> Of course!
[11:40:35] <arschmitz> yeah :-/
[11:40:42] <gabriel_schulhof> But then how do we instantiate two different kinds of widgets on the same element?
[11:40:45] <arschmitz> so we need to some up with something else
[11:40:54] <arschmitz> gabriel_schulhof: i still dont have the answer for that
[11:41:04] <gabriel_schulhof> arschmitz: What about fancy shmancy attribute matchers?
[11:41:17] <arschmitz> its possible
[11:41:25] <arschmitz> but i feel like it might be expensive
[11:41:32] <gabriel_schulhof> Yeah ...
[11:41:39] <arschmitz> well i think its possible
[11:41:44] <gabriel_schulhof> Wait!
[11:41:48] <gabriel_schulhof> [data-role]
[11:41:51] <gabriel_schulhof> Boom!
[11:41:58] <arschmitz> yes but then you need to filter
[11:41:59] <gabriel_schulhof> If it has it, it's gonna be /some kind/ of widget.
[11:42:07] <arschmitz> which is suppose is not horrible
[11:42:18] <arschmitz> we would have to create a hash though
[11:42:25] <arschmitz> because right now it does it on each widget
[11:42:36] <arschmitz> we would want to do it only once per call
[11:42:48] <gabriel_schulhof> Wait a sec ... this way you only need to run a single selector on the DOM ...
[11:43:05] <gabriel_schulhof> ... and then partition the results in your own loop.
[11:43:08] <arschmitz> gabriel_schulhof: not entirely true
[11:43:09] <jasperdegroot> this is currently not possible either, right?
[11:43:16] <gabriel_schulhof> OKOK ... let's move this to -dev.
[11:43:29] <arschmitz> gabriel_schulhof: the problem there is custom per widget ones
[11:43:39] <arschmitz> and the generator function
[11:44:17] <arschmitz> ok so moving on for now
[11:44:22] <gabriel_schulhof> OK. Yeah. Lots to consider. Generally, I'd say, since enhancer is a new thing, let's get it as right as possible the first time to avoid legacy later.
[11:44:44] <arschmitz> gabriel_schulhof: im going to talk to scott_gonzalez and see what he thinks
[11:44:49] <gabriel_schulhof> OK.
[11:44:53] <arschmitz> he may have an idea
[11:45:07] <arschmitz> so had something come up this morning
[11:45:25] <arschmitz> which is that you can disable fieldsets to disable all the inputs in them
[11:45:42] <arschmitz> we dont currently support this
[11:45:52] <jasperdegroot> never knew that
[11:45:52] <arschmitz> ui does not either
[11:46:04] <arschmitz> and neither us nor ui has ever had an issue filed
[11:46:29] <arschmitz> and because of a bug in core to find this out cross browser we would need to traverse up the entire dom
[11:46:29] <gabriel_schulhof> Woa! I don't think there's anything we can do about that, short of creating a fieldset widget.
[11:46:34] <jasperdegroot> is it in the specs?
[11:46:39] <arschmitz> jasperdegroot: yes
[11:46:44] <jasperdegroot> ok
[11:46:47] <arschmitz> gabriel_schulhof: its easy but expensive to fix
[11:47:02] <gabriel_schulhof> arschmitz: How do we get notified that the prop has changed?
[11:47:05] <arschmitz> scott_gonzalez: and i talked and we want to continue to ignore this
[11:47:13] <gabriel_schulhof> +1
[11:47:20] <arschmitz> gabriel_schulhof: im not sure what you mean?
[11:47:25] <gabriel_schulhof> Let's follow issue-driven development.
[11:47:51] <gabriel_schulhof> arschmitz: Like, $( "#my-fieldset" ).prop( "disabled", true );
[11:48:00] <gabriel_schulhof> How do now the children know that this has happened?
[11:48:04] <arschmitz> gabriel_schulhof: well you can do :disabled
[11:48:12] <arschmitz> and it works in all but ie
[11:48:14] <gabriel_schulhof> OK, but that's style alone.
[11:48:18] <arschmitz> no
[11:48:25] <arschmitz> .is( ":disabled" )
[11:48:56] <arschmitz> or since thats busted in core right now for ie it would be
[11:48:57] <gabriel_schulhof> Does this._on() filter for .is( ":disabled" ) before it runs your handler?
[11:49:16] <arschmitz> .parents( ":disabled" ).length
[11:49:22] <arschmitz> i mean
[11:49:28] <arschmitz> .parents( "[disabled]" ).length
[11:49:41] <gabriel_schulhof> But that's incorrect!
[11:49:43] <arschmitz> but no the factory does not but it could
[11:49:51] <gabriel_schulhof> Because the attr may not be set, but the prop may be.
[11:50:09] <arschmitz> gabriel_schulhof: well you could check that
[11:50:18] <arschmitz> this is simple to fix if we wanted to do it
[11:50:22] <gabriel_schulhof> Quintuple-yuck!
[11:50:23] <arschmitz> the point is i dont think we should
[11:50:50] <gabriel_schulhof> No! Definitely adopy issue-driven development.
[11:50:54] <gabriel_schulhof> adopt
[11:51:31] <gabriel_schulhof> You know, people may be unaware of this fieldset thing, just as jasperdegroot and I were.
[11:51:39] <gabriel_schulhof> Hence the lack of issues.
[11:51:57] <arschmitz> yeah jzaefferer didnt know either
[11:52:05] <arschmitz> he found out which is how this came up
[11:52:06] <gabriel_schulhof> So *wipe hands* and *look the other way*
[11:52:12] <jasperdegroot> let's remove this part from the log ;)
[11:52:27] <gabriel_schulhof> jasperdegroot: I now understand why they're not Google-searchable :)
[11:52:31] <arschmitz> this is not the only place we have done something like this
[11:52:33] <jasperdegroot> lol
[11:52:56] <arschmitz> we have chosen to ignore the fact that inputs can change forms
[11:53:06] <gabriel_schulhof> You know, in the glorious future with mutation observers and all that, this will be trivial.
[11:53:49] <gabriel_schulhof> arschmitz: Do we not use this.element[ 0 ].form?
[11:53:59] <gabriel_schulhof> That should be updated by the browser.
[11:54:01] <arschmitz> yes but we only set it onse
[11:54:08] <arschmitz> check it i mean
[11:54:15] <gabriel_schulhof> Hmmm ... OK ...
[11:54:27] <arschmitz> same things with radio groups
[11:54:31] <arschmitz> labels
[11:54:31] <gabriel_schulhof> Oh, when we set up the reset listener.
[11:54:52] <arschmitz> the association of any of these things can change
[11:55:01] <arschmitz> and we have chosen to ignore that
[11:55:01] <gabriel_schulhof> OKOK. Project management point: Our mission is to cover the widest use-cases, not to be spec-complete.
[11:55:14] <arschmitz> yup
[11:55:49] <arschmitz> because you can dream up perectly valid use cases for these things
[11:56:00] <arschmitz> but the simple fact is clearly people dont actually do them
[11:56:05] <gabriel_schulhof> Exactly.
[11:56:19] <gabriel_schulhof> I mean, spec writers do have some imagination - with all that that implies.
[11:56:40] <arschmitz> gabriel_schulhof: as they should
[11:57:13] <gabriel_schulhof> Oh, definitely, to their credit, especially for capturing the use cases that really make a difference, but some things just don't take off.
[11:57:33] <arschmitz> well and they have to address if it can happen what should result
[11:57:41] <gabriel_schulhof> Right.
[11:58:01] <arschmitz> and obviously its possible to move inputs around
[11:58:09] <arschmitz> so they MUST address what happens when you do
[11:59:04] <arschmitz> ok so download builder
[11:59:07] <arschmitz> any update?
[11:59:24] <gabriel_schulhof> I looked a little bit into the code, and found it to be highly UI-specific.
[11:59:47] <arschmitz> on master or in rxaviers branch?
[12:00:01] <gabriel_schulhof> Oh, there's a branch? *sigh* ...
[12:00:05] <gabriel_schulhof> I looked at master.
[12:00:15] <arschmitz> the link i gave you was to a PR
[12:00:47] <arschmitz> where it had the sample config
[12:01:14] <gabriel_schulhof> Yeah, I saw that ...
[12:01:41] <gabriel_schulhof> ... and I'm still studying the code as to how that fits in ...
[12:01:49] <arschmitz> thats fine
[12:02:15] <gabriel_schulhof> ... though the truth is, I may have bitten off more than I can chew, especially with all the still-outstanding classes PRs. *sigh* ...
[12:02:30] <arschmitz> gabriel_schulhof: lets focus on classes
[12:02:36] <gabriel_schulhof> OK.
[12:02:39] <arschmitz> and when you have time around that look into builder
[12:02:46] <arschmitz> because thats not even landed in ui
[12:02:46] <arschmitz>  yet
[12:02:50] <gabriel_schulhof> RIght.
[12:03:17] <gabriel_schulhof> Overall, I like this development process, where we develop mobile and UI together.
[12:03:48] <arschmitz> its how things will likely continue
[12:03:58] <arschmitz> since we want to share as much as possible
[12:04:14] <gabriel_schulhof> arschmitz: I personally think you're doing an awesome job bridging the two.
[12:04:26] <arschmitz> gabriel_schulhof: thank you i really really appreciate that
[12:04:34] <arschmitz> gabriel_schulhof: it has been my focus for sure
[12:04:50] <arschmitz> its a little challenging managing the interdependency some times lol
[12:04:51] <jasperdegroot> i agree with gabriel_schulhof
[12:05:10] <arschmitz> i think at times it slows development a big
[12:05:11] <arschmitz> bit
[12:05:12] <jasperdegroot> and it's great that arschmitz is on both teams
[12:05:26] <arschmitz> but i think the end product quality has improved greatly
[12:05:41] <gabriel_schulhof> Yeah, I can definitely see the value.
[12:06:31] <arschmitz> we are gaining a lot of modularization and have a lot more complete testing and development process
[12:07:20] <arschmitz> the input from both teams on things like button and checkboxradio has made the new impplementation incredibly well thought out and complete i think
[12:07:50] <arschmitz> the different perspectives have questioned a lot of different parts and aspects of the widgets
[12:08:37] <arschmitz> anyway we are out of time does any one have anything else they want to talk about?
[12:08:54] <jasperdegroot> i'm good
[12:09:01] <gabriel_schulhof> Same here.
[12:09:11] <arschmitz> ok sounds good
[12:09:24] <arschmitz> i saw a bunch of pr updates so ill review those in next few days
[12:10:07] <arschmitz> see every one back in -dev
[12:10:17] <gabriel_schulhof> K L8R
[12:10:23] <jasperdegroot> later
