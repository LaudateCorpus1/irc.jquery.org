[09:00:26] <timmywil> gibson042, DaveMethvin|away, m_gol, arthurvr big meeting!
[09:00:35] <arthurvr> Hey!
[09:01:02] <timmywil> hey arthurvr
[09:01:04] <m_gol> present
[09:01:27] <gibson042> hi
[09:01:58] <timmywil> So the big news this weeks is the Deferred PR landed!
[09:02:02] <timmywil> week*
[09:02:07] <timmywil> Thanks gibson042
[09:02:14] <arthurvr> yeppee!
[09:02:15] * m_gol claps
[09:03:16] <gibson042> DaveMethvin|away said it best: "like chewing an entire elephant"
[09:03:30] <timmywil> We have an issue open for running promise tests in real browsers. Is there anything we need to do in compat concerning Deferreds before beta release?
[09:04:10] <gibson042> probably not before the beta
[09:04:22] <timmywil> cool
[09:04:30] <markelog_> do we have a release date yet?
[09:04:44] <gibson042> but before full release, we should have at least one of in-browsers tests or node tests for compat
[09:05:21] <m_gol> yup
[09:05:38] <m_gol> IMO we should run tests on real browsers on master as well
[09:05:44] <m_gol> at least in one real browser
[09:05:52] <timmywil> right
[09:06:07] <m_gol> but we can release the beta before that happens
[09:06:11] <m_gol> let's not delay it further
[09:06:15] <timmywil> markelog_: we can start talking about that, but it depends on how much time we take on the remaining blockers
[09:06:31] <timmywil> Next on my list is the data one
[09:06:41] <gibson042> I'll have PRs for all of mine up before the next meeting
[09:07:02] <markelog_> so not this week then _
[09:07:03] <markelog_> )
[09:07:14] <timmywil> Nice, so let's hold off scheduling a date until next week. I'll also have data ready.
[09:07:25] <markelog_> sounds good to me
[09:07:49] <timmywil> Speaking of stuff landing, the last Sizzle blocker has been closed
[09:08:00] <timmywil> gibson042: did you get a chance to review my stuff?
[09:08:00] <markelog_> we can release, right?
[09:08:11] <markelog_> sizzle i mean
[09:08:16] <gibson042> I need to commit a follow-up to https://github.com/jquery/sizzle/commit/c5f386eb08a83661494845e23d471c1e68de89ae which is not yet ready
[09:08:29] <markelog_> so i can start working on removing sizzle expando
[09:09:04] <timmywil> gibson042: sounds good, do you think you'll have time for that this week as well?
[09:09:07] <gibson042> superMatcher doesn't correctly handle no `context` in all cases
[09:09:08] <gibson042> yes
[09:09:52] <m_gol> when do we want to have Sizzle drop older browsers workarounds?
[09:10:14] <timmywil> we can probably save Sizzle-trimming for after the beta
[09:10:15] <gibson042> not before jQuery 3.0
[09:10:23] <timmywil> after 3.0, yea
[09:10:27] <markelog_> i'd say we would need to talk about this after 3.0
[09:10:28] <markelog_> )
[09:11:05] <timmywil> Moving up the notes a bit, we only have a few failures in swarm
[09:11:06] <markelog_> it seems this change would be major for sizzle?
[09:11:24] <markelog_> but patch for jquery?
[09:11:32] <gibson042> yep
[09:11:36] <timmywil> markelog_: yup
[09:11:42] <timmywil> Is https://github.com/jquery/jquery/pull/2148 ok to land?
[09:11:57] <markelog_> would comment about it today
[09:12:01] <markelog_> *will
[09:12:07] <markelog_> but yes
[09:12:32] <timmywil> cool
[09:12:47] <timmywil> so, m_gol, feel free to land that
[09:13:46] <timmywil> We can save the migrate discussion for when Dave is here, but in terms of stuff to do for the beta, jquery-release just added changelog generation
[09:14:03] <timmywil> thanks to scott_gonzalez
[09:14:21] <timmywil> It all seemed fine to me
[09:14:26] <timmywil> https://gist.github.com/scottgonzalez/aa3c9ec76f71dc058f93
[09:14:47] <scott_gonzalez> The additional data in there is the issue list at the bottom.
[09:14:49] <timmywil> I guess I'm not sure what the "(none)" on the issues
[09:14:53] <scott_gonzalez> The "(none)"s are for the components.
[09:15:07] <timmywil> ah
[09:15:22] <scott_gonzalez> See jquery-mobile's issue lables for a reference.
[09:15:33] <scott_gonzalez> It looks for a label of "component: whatever"
[09:16:07] <scott_gonzalez> It's not super important as the issue list is really just for double checking that every issue was captured in the commit changelog.
[09:16:39] <scott_gonzalez> So in the case that the issue list provides data that was missing above, you end up having to write the changelog line yourself anyway.
[09:17:30] <timmywil> gotcha
[09:17:39] <scott_gonzalez> Having the issue list has caught a few missing things for several UI releases in the past.
[09:18:06] <scott_gonzalez> Either because the issue was closed after a fix hand already landed or because a reference was just forgotten in a commit message.
[09:18:55] <arschmitz> I used the issue list a lot when i did our 1.4 changelog when we were not as good about commit messages
[09:19:53] <markelog_> it's good for have solid policy on commit messages now )
[09:19:55] <arschmitz> since then we have got super anal about commit messages and i have had to manually add far less
[09:20:08] <arschmitz> if any at al
[09:21:31] <timmywil> Cool, well it looks good to me
[09:22:39] <timmywil> Standardizing invalid input behavior is still in review, but it's probably not something we need to discuss a ton before the beta
[09:22:55] <timmywil> Discussion here: https://github.com/jquery/jquery/issues/2134
[09:23:22] <timmywil> One issue that came out this week that sparked my interest was the outerHTML ticket https://github.com/jquery/jquery/issues/2151
[09:23:57] <arschmitz> They opened that on mobile first :-p
[09:24:17] <timmywil> I'm ambivalent on it and could easily be convinced either way :)
[09:24:50] <timmywil> On the one hand, all of the browsers we currently support have an outerHTMl property
[09:25:55] <timmywil> On the other hand, the argument that it would be abused, we'd get lots of issues, and that's it's super-easy for the user add themselves is still valid
[09:26:52] <timmywil> Does anyone have strong feelings one way or the other?
[09:27:05] <arschmitz> easy to do your self is almost more valid now that its natively supported everywhere we support anyway "just do $( "thing" )[0].outerHtml " seems like a valid answer
[09:27:06] <markelog_> i'd say not for 3.0 anyways
[09:27:35] <arschmitz> exectpt without typos
[09:27:37] <markelog_> arschmitz: or $(...).prop("outerHTML") as was said in the ticket
[09:27:46] <arschmitz> yup
[09:28:07] <gibson042> do the fake DOM node modules all have outerHTML?
[09:28:10] <timmywil> yea, that kinds seems short enough
[09:28:20] <arschmitz> i dont see what advantage a jquery method gives since its not chainable it will return a string
[09:28:58] <arschmitz> since in theory we wont be fixing any known browser inconsistencies at this point
[09:29:09] <markelog_> i remember there was a possobility to change it in old IE
[09:30:26] <gibson042> looking at it the other way, there's only one line of special logic in the html getter
[09:30:46] <gibson042> to hide attributes added by jQuery
[09:32:20] <timmywil> I kinda like that .prop("outerHTML") implies the user knows what they're doing with it.
[09:33:27] <markelog_> besides, if we would add it, it would be inconsistent naming, we have "html()", not "innerHTML()"
[09:33:47] <timmywil> true
[09:35:49] <timmywil> Ok, so it's closed
[09:36:21] <timmywil> I see someone added https://github.com/jquery/jquery/issues/2145
[09:36:34] <markelog_> also, there would be a problem if parent element is document fragment
[09:36:42] <markelog_> and i guess, more stuff like that
[09:36:55] <m_gol> yep, me
[09:37:31] <m_gol> DaveMethvin|away even suggested we might need a new 2.1.* for that
[09:39:29] <timmywil> ok, I've missed that issue, but I'm caught up. It does seem pretty crappy.
[09:40:47] <m_gol> yup
[09:41:15] <timmywil> this doesn't affect jQuery#each tho, right?
[09:41:33] <timmywil> since it has other properties besides numeric
[09:41:34] <m_gol> right
[09:42:23] <markelog_> fix seems pretty easy, although we be good to have a perf test for it
[09:42:49] <m_gol> timmywil: jQuery#each operates on jQuery objects which have length
[09:43:02] <m_gol> the problem are objects with numeric properties that lack the length property
[09:43:07] <timmywil> ah, yea, of course
[09:43:23] <timmywil> so it's gotta be really rare
[09:43:49] <markelog_> but fail really unexpectedly
[09:44:01] <timmywil> yea
[09:44:02] <markelog_> also, it might also affect desktop safari
[09:44:37] <markelog_> i assume we didn't try on it?
[09:45:10] <timmywil> we should test that, but even if it's just ios, I suppose it warrants a patch
[09:45:36] * timmywil facepalm
[09:45:54] <markelog_> you want to fix that before the 3.0?
[09:45:59] <gibson042> so we're not waiting to hear back, then?
[09:46:17] <m_gol> gibson042: from whom?
[09:46:55] <m_gol> Apple employees are gagged by design
[09:47:06] <gibson042> I thought Benjamin Poulain was looking into it
[09:47:21] <markelog_> timmywil: since 3.0 would be release soon and bug is really rare
[09:47:23] <timmywil> I suppose if they fix it quickly enough, propagating a jquery patch release would take about the same amount of time as waiting for people to upgrade ios
[09:48:01] <gibson042> not that I have any objection to another patch release, though
[09:48:34] <markelog_> i'd say we would need a perf results and test it in desktop safari
[09:48:44] <markelog_> but i would wait until 3.0
[09:49:05] <markelog_> didn't we said that the previous release would the last one before 3.0?
[09:49:17] <arschmitz> it does not effect desktop
[09:49:41] <markelog_> arschmitz: you checked it?
[09:49:43] <arschmitz> yes
[09:49:44] <m_gol> btw
[09:49:52] <m_gol> Safari doesn't exhibit the bug
[09:49:55] <m_gol> Safari 8, that is
[09:49:57] <m_gol> iOS 8.2 does
[09:50:12] <markelog_> although, it might affect the next release of desktop safari )
[09:50:20] <m_gol> ah, didn't see arschmitz :)
[09:50:25] <m_gol> this is pretty nasty
[09:50:32] <m_gol> if you define two functions returning length
[09:50:39] <m_gol> identical ones
[09:50:41] <m_gol> and JIT only the first one
[09:50:45] <timmywil> heh, if it makes it to Safari, we will have wanted to do a patch release
[09:50:53] <m_gol> then the JITted one will return length and the non-JITted one won't
[09:51:28] <m_gol> gibson042: Benjamin was looking into it and he might fix it for WebKit but he won't tell us if it makes into iOS patch release
[09:51:30] <timmywil> However, it's not worth a big perf hit
[09:51:35] <m_gol> and judging by past events it won't
[09:51:47] <markelog_> aam, desktop Safari doesn't jit?
[09:51:48] <gibson042> fair enough
[09:52:02] <m_gol> timmywil: I think Safari desktop is less important than Safari on iOS
[09:52:06] <m_gol> judging by number of users
[09:52:13] <gibson042> what operations will we be checking performance of?
[09:52:33] <m_gol> markelog_: of course it JITs, every modern browser does. It just for some reason doesn't exhibit the bug
[09:52:47] <gibson042> isArrayLike is called once per .each/.map/etc.
[09:52:51] <timmywil> m_gol: yea, I was still considering the case where it gets fixed in iOS, and then continues to be a problem
[09:53:20] <markelog_> m_gol: right, so this is i'm fear it could maid into the desktop
[09:53:28] <timmywil> yea, it's not in loop, so it's probably not bad
[09:53:29] <gibson042> or rather, each/map/makeArray
[09:53:29] <m_gol> it's going to be fixed in iOS only if management considers it breaking enough people
[09:53:35] <m_gol> they didn't consider that for the qSA bug
[09:54:04] <m_gol> we won't be able to write a test for that
[09:54:11] <m_gol> since it's not reproducible in the simulator
[09:54:25] <markelog_> but it might in phantom though )
[09:54:31] <m_gol> I mean, we will be able to write the test (and we should) but it will only get caught via manual testing
[09:54:33] <markelog_> douth it, but it might )
[09:54:48] <m_gol> markelog_: I don't think Phantom's JIT is in any way complicated enough :P
[09:55:14] <markelog_> worth a try
[09:55:42] <markelog_> but anyway, since it's pretty rare and 3.0 is around the corner...
[09:56:17] <markelog_> m_gol: if we would write that test, i would check env before executing it
[09:56:52] <m_gol> I don't have any data but my hinch would be that the qSA issue was rarer than this one
[09:57:16] <m_gol> AFAIK no one reported the qSA issue, I found it broke Sizzle tests and this issue is being reported by outsiders
[09:57:46] <arschmitz> numeric indices on arrays while not super common for sure exist in the wild
[09:57:53] <m_gol> I don't have the feeling that 3.0 is around the corner - the changes are pretty big, we will most likely need 1-2 betas & an RC, it may take 2-3 months at least
[09:57:58] <arschmitz> on object*
[09:58:21] <timmywil> yea, I think we should do a patch
[09:58:54] <markelog_> timmywil: with the perf test at least?
[09:59:10] <timmywil> yes, we should test it, but I don't expect it to be a big hit
[09:59:27] <timmywil> if it is, we'll reassess
[09:59:52] <markelog_> sounds good to me then!
[10:00:22] <timmywil> Ok, we'll save PR review for next time.
[10:00:49] <markelog_> see ya!
[10:00:51] <timmywil> Thank you everyone!
[10:01:02] <timmywil> see you in -dev
