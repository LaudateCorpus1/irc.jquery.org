[09:01:43] <timmywil> DaveMethvin, gibson042, m_gol, markelog_, arthurvr meeting time!
[09:01:48] <arthurvr> hey
[09:01:53] <DaveMethvin> aloha
[09:01:55] <markelog_> hey-hey
[09:02:40] <timmywil> Let's do issues first
[09:02:55] <timmywil> https://github.com/jquery/jquery/issues/2267 isArraylike(undefined | null)
[09:03:10] <timmywil> I'm +1, but did I bring you guys over?
[09:03:50] <DaveMethvin> it's worked like that for a long time, so we might as well make it legal
[09:03:54] <DaveMethvin> but no number or string!
[09:03:59] <gibson042> no, but I'm not going to fight over this one
[09:04:04] <timmywil> DaveMethvin: agreed
[09:04:56] <timmywil> gibson042: you sure? WE CAN FIGHT
[09:05:04] <gibson042> rain check?
[09:05:07] <timmywil> ok
[09:05:19] * DaveMethvin stops popping corn
[09:05:37] <timmywil> https://github.com/jquery/jquery/issues/2192 .toggleClass( cls, function )
[09:05:57] <timmywil> I'm not particularly committed to either direction, but why don't we use access here?
[09:06:43] <DaveMethvin> i dunno
[09:06:54] <timmywil> maybe it just doesn't quite line up
[09:07:16] <markelog_> what are the cons?
[09:07:27] <DaveMethvin> more complexity
[09:07:33] <markelog_> i remember this topic come up before though
[09:07:38] <markelog_> like two years ago
[09:07:39] <DaveMethvin> on toggleClass?
[09:07:41] <markelog_> or something
[09:07:42] <markelog_> yeah
[09:08:04] <markelog_> maybe i misremembering
[09:08:08] <markelog_> would need to check
[09:08:12] <timmywil> is anyone arguing that it's not useful?
[09:08:26] <timmywil> seems to be a complexity concern
[09:08:41] <DaveMethvin> i don't think it's useful, but i'm not a fan of any of the function args
[09:08:47] <markelog_> size too i suppose?
[09:09:47] <timmywil> I guess the next step is to see some code
[09:10:01] <DaveMethvin> yeah, maybe it's trivial?
[09:10:02] <timmywil> if it's not too big or complex, we'd most likely accept it
[09:10:31] <DaveMethvin> it would be great if someone who is a proponent would invest that time
[09:10:58] <DaveMethvin> i doesn't have to happen in 3.0
[09:11:28] <markelog_> http://bugs.jquery.com/ticket/12639
[09:11:31] <timmywil> DaveMethvin: agreed, this isn't time senstive
[09:12:26] <timmywil> heh, looks like we were pretty neutral on that ticket to
[09:12:27] <timmywil> too
[09:12:32] <timmywil> +1, +0, -1
[09:12:36] <markelog_> seems controversal )
[09:12:42] <timmywil> lol
[09:13:08] <timmywil> https://github.com/jquery/jquery/issues/2103 $.Promise constructor
[09:13:40] <arschmitz> just to toss my opinion in that sort of signature seems to work in most other methods so it seems like it would make sense to add
[09:13:44] <timmywil> I'd be a little nervous about opening up the possibility of replacing our internal use of Deferreds with any promise implementation
[09:13:58] <arschmitz> assuming it does not add a lot of bloat or complexity
[09:14:01] <markelog_> timmywil: +1
[09:14:13] <markelog_> arschmitz: consistancy vs complexity )
[09:14:25] <timmywil> arschmitz: yea, that's where we landed
[09:14:27] <arschmitz> markelog_: yup totally
[09:14:41] <timmywil> arschmitz: gonna wait for some code to review
[09:14:48] <DaveMethvin> i'm concerned that $.Promise will be confused by people who get different results on different platforms
[09:14:56] <arschmitz> timmywil: sure iv never tried to do it or anything just makes sense
[09:15:10] <markelog_> and we probably would need to use it internally
[09:15:18] <arschmitz> sorry i was late to that talk ill let you get back now :-)
[09:15:21] <markelog_> would weird otherwise
[09:15:35] <markelog_> but deferred or deferred.promise is not the same as window.Promise
[09:15:37] <timmywil> And there doesn't seem to be as much of a need now that Deferred consumes standards thenables
[09:15:53] <DaveMethvin> markelog_ yeah but there are things like effects that need Deferred so we can't use $.Promise
[09:16:07] <timmywil> Promise libraries can wrap our promises
[09:16:11] <DaveMethvin> yeah
[09:16:14] <markelog_> yep
[09:16:17] <DaveMethvin> it's something other people can do if they need to do it
[09:16:25] <DaveMethvin> us making a little stub hides what is going on
[09:16:47] <timmywil> Ok, I think we're pretty much in agreement here.
[09:16:52] <markelog_> although i remember paul_irish and main argument, to use dom promises internally since it would help with dev tools
[09:16:58] <m_gol> sorry, I'm late
[09:16:59] <DaveMethvin> and the API would behave very differently depending on whether there were native Promise or not
[09:17:13] <markelog_> DaveMethvin: yeah!
[09:17:33] <DaveMethvin> most of our apis aim to normalize things
[09:17:48] <markelog_> it might intersting thing to explore, but i concern about impl
[09:17:52] <DaveMethvin> so i'm -1 on $.Promise for those reasons
[09:18:03] <gibson042> same here
[09:18:42] <arthurvr> me too
[09:19:03] <m_gol> me too
[09:19:15] <markelog_> don't see the easy way to do it right
[09:19:55] <timmywil> https://github.com/jquery/jquery/issues/2100
[09:20:01] <markelog_> timmywil: nice pharsing )
[09:20:19] <timmywil> thanks ;)
[09:20:26] <markelog_> deja vu
[09:20:34] <markelog_> didn't we tried that?
[09:20:44] <DaveMethvin> yep
[09:21:01] <DaveMethvin> i thought there was a "here be dragons" comment in the source?
[09:21:07] <timmywil> And it worked. I think we were happy to get rid of it, tho.
[09:21:10] <markelog_> me too )
[09:21:30] <DaveMethvin> it was ie9 at least
[09:21:48] <markelog_> ie 10
[09:21:56] <markelog_> looking at the original bug thread
[09:22:07] <markelog_> so either we check for ie
[09:22:14] <markelog_> and don't use there
[09:22:19] <markelog_> and use it everywhere else
[09:22:25] <markelog_> which seems weird
[09:22:38] <markelog_> and what is the point?
[09:22:52] <DaveMethvin> yeah, does the document run a lot faster or something?
[09:23:10] <markelog_> i don't think anyone actually checked it
[09:23:10] <timmywil> TBH, I don't quite understand the issue.
[09:23:19] <markelog_> i don't think it would
[09:24:00] <timmywil> IE9 only sets to "complete" on load event?
[09:24:05] <markelog_> i remember jquery take a hit for this one, we released another the patch or something because of that
[09:24:46] <DaveMethvin> we got into this problem before because someone advocated it strongly and shamed us into doing it without proving it worked
[09:25:10] <DaveMethvin> so i think we should close this until someone proves it's okay and shows it gives a perf gain
[09:26:26] <markelog_> +1
[09:27:26] <timmywil> Maybe I'm slow, but the code in domready doesn't seem like it would fire sooner
[09:27:43] <timmywil> it's just not using interactive when documentElement.doScroll exists
[09:28:05] <DaveMethvin> which avoids the case where IE breaks
[09:28:18] <timmywil> iiiiiiiiiiiiiiii seeeeeeeeeeeeeeee
[09:28:31] <timmywil> sorry, I am slow this morning, apparently
[09:28:31] <DaveMethvin> but i'm not convinced that's going to fire ready faster
[09:28:52] <timmywil> it's allowing scripts to fire when interactive in other browsers
[09:29:01] <timmywil> so, maybe will be slightly faster
[09:29:04] <DaveMethvin> maybe
[09:29:16] <DaveMethvin> but we don't know
[09:29:16] <markelog_> like .00000000001ms
[09:29:21] <DaveMethvin> and last time we didn't know we broke stuff
[09:29:24] <DaveMethvin> :)
[09:29:29] <timmywil> then again, the ones that support interactive are the ones getting to load faster
[09:29:41] <DaveMethvin> are the?
[09:30:06] <DaveMethvin> i don't know when interactive state is reached vs loaded
[09:31:14] <DaveMethvin> in IE at least, the doc reaches interactive but not all scripts are run until loaded
[09:31:32] <DaveMethvin> but what is the diff between interactive and loaded in chrome for example?
[09:32:03] <timmywil> interactive > complete in modern. loading > loaded > interactive > complete in IE
[09:32:29] <DaveMethvin> yeah i meant s/loaded/complete/
[09:33:37] <DaveMethvin> when DOMContentLoaded fires is the doc interactive, or is it complete?
[09:33:42] <timmywil> interactive should be equivalent to DOMContentLoaded, but IE didn't see it that way for a while.
[09:34:13] <DaveMethvin> what happens in modern browsers btwn interactive and complete?
[09:34:39] <timmywil> same as what happens between DOMContentLoaded and the load event
[09:35:33] <DaveMethvin> oh then i remember it all wrong, didn't think complete was all assets loaded
[09:35:43] <timmywil> I'm looking at https://html.spec.whatwg.org/multipage/dom.html#current-document-readiness
[09:35:49] <timmywil> scroll up a bit
[09:36:03] <timmywil> and https://msdn.microsoft.com/en-us/library/ms534359%28v=vs.85%29.aspx
[09:36:08] <timmywil> for old IE
[09:37:29] <timmywil> so it seems like it could be useful to use interactive when it actually works right
[09:37:37] <DaveMethvin> yeah, i agree
[09:38:18] <DaveMethvin> but only if there wasn't DOMContentLoaded?
[09:38:25] <timmywil> I'm not sure about using the doScroll check, but I can take this one and do some testing
[09:39:04] <timmywil> we won't pull the trigger until I've got a PR in
[09:39:12] <timmywil> and we review
[09:39:17] <DaveMethvin> Also does our change to Deferred to always wait a turn affect this?
[09:39:29] <DaveMethvin> oh prob not, let me look
[09:39:36] <timmywil> I don't think so
[09:39:46] <timmywil> that's just a matter of waiting a cycle
[09:39:50] <m_gol> doesn't the doScroll check demand a lot from the CPU, though?
[09:40:10] <DaveMethvin> we're just using it for a feature test
[09:40:13] <timmywil> m_gol: domready.js seems to be using it like a user agent sniff
[09:40:14] <DaveMethvin> not actually running it
[09:40:21] <m_gol> ah
[09:40:37] <DaveMethvin> i think the only gain we get here is if we *don't* wait a turn
[09:40:46] <DaveMethvin> and can run immediately for scripts at the bottom
[09:40:59] <DaveMethvin> otherwise DOMContentLoaded will fire anyway
[09:41:12] <timmywil> when you say wait a turn, aren't you referring to setTimeout(fn)?
[09:41:33] <DaveMethvin> yeah, not running synchronously
[09:41:48] <timmywil> I think that will still be before "complete"
[09:41:48] <DaveMethvin> i'd have to walk through the logic again
[09:42:02] <DaveMethvin> it will, but DOMContentLoaded will fire
[09:42:29] <timmywil> oh, yea, but the issue is will scripts registered between DOMContentLoaded and load
[09:42:38] <timmywil> s/will/with
[09:42:47] <timmywil> so it would miss the event
[09:42:59] <m_gol> yeah, that seems more important
[09:43:23] <DaveMethvin> if the promise has resolved they will run
[09:43:45] <DaveMethvin> https://github.com/jquery/jquery/blob/master/src/core/ready.js#L13
[09:44:11] <timmywil> not if jquery is one of the scripts loaded late
[09:44:24] <timmywil> such as with require
[09:44:41] <DaveMethvin> oh yeah, which brings us back to the original premise of this ticket, sheesh
[09:45:25] <timmywil> :)
[09:45:58] <DaveMethvin> carry on!
[09:46:00] <timmywil> ok, I've got a long list of PRs, but these can be reviewed offline. I want to land mine today barring any objections
[09:46:23] <timmywil> also wanted to make sure m_gol saw our recommendation for https://github.com/jquery/jquery/pull/2183
[09:46:46] <gibson042> timmywil: can you wait for the show/hide one to land? I'm trying to resolve it against compat now
[09:46:50] <m_gol> so I should just commit a separate index.html with the test included?
[09:47:09] <timmywil> gibson042: sure
[09:48:00] <m_gol> (& remove from regular ones obviously)
[09:48:10] <timmywil> m_gol: yea, I'm not exactly sure about the names, but the idea is to keep integration tests separate from unit tests
[09:48:25] <m_gol> sure, I'll fix the PR today & land later this week if no objections arrive
[09:48:27] <timmywil> but still have them somewhere we can run them
[09:48:33] <timmywil> cool
[09:48:43] <markelog_> m_gol: you can do that without qunit too )
[09:49:03] <m_gol> yeah, QUnit is overkill for one test ;)
[09:49:06] <markelog_> i rememeber about the issue
[09:49:21] <markelog_> for integration and unit tests separation
[09:49:30] <markelog_> will create one )
[09:49:41] <m_gol> k
[09:49:49] <timmywil> last thing for today. does anyone object to landing this? https://github.com/jquery/jquery/pull/2276 "auto" margins
[09:50:01] <timmywil> it's big, but it's right
[09:50:03] <markelog_> oh,oh
[09:50:12] <markelog_> can i have a day to check it out
[09:50:15] <timmywil> sure
[09:50:17] <timmywil> no rush
[09:50:24] <m_gol> it's requiring double reflows to check the margin, right?
[09:50:26] <markelog_> cool )
[09:50:49] <m_gol> or margin, left :wink:
[09:51:03] <timmywil> m_gol: I'm not sure. I was trying to recreate the reflows and I'm starting to wonder if Firefox and Chrome are starting to cache some results so there's only one reflow between setters
[09:51:22] <m_gol> that'd be nice
[09:51:30] <m_gol> it's hard to check those things in Firefox, though
[09:51:42] <timmywil> true
[09:51:48] <m_gol> their timeline panel still has a long way to go to Chrome's/Edge's
[09:52:40] <timmywil> Ok, thanks everybody! We'll continue discussions in tickets and stuff. Have a good week!
[09:52:45] <m_gol> ok, maybe that'll make Fx fix the bug :D
[09:53:02] <markelog_> see ya
