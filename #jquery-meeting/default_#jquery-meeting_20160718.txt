[08:21:59] <flore77> we can start now
[08:22:03] <flore77> sorry for the delay
[08:22:18] <jzaefferer> Alright
[08:22:21] <jzaefferer> Agenda/Minutes: https://docs.google.com/document/d/1dq_2Asse7r7598WV2khJnbXf1KQ2tkEWtJiuBhzJ63Q/edit#
[08:22:59] <jzaefferer> Want to start with a summary of last week?
[08:23:20] <flore77> yes
[08:23:49] <flore77> in the last week I finished the pr against browserstack
[08:24:14] <flore77> also changed to report tracebacks to _progress instead of _report
[08:24:43] <flore77> I think we have released also a new patch version of js-reporters
[08:25:11] <jzaefferer> Right, 1.0.1
[08:25:21] <flore77> yes
[08:25:32] <flore77> that's all
[08:25:41] <jzaefferer> Alright, plans for this week?
[08:25:52] <jzaefferer> nested suites and suite names?
[08:25:54] <flore77> now we should focus on nested suite names
[08:26:09] <flore77> exactly
[08:26:10] <flore77> suite names is first
[08:26:25] <flore77> also the browserstack pr will benefit from that
[08:27:51] <flore77> and then reboot communication with mocha?
[08:27:55] <flore77> and jasmine
[08:28:22] <flore77> but how? to integrate our adapters directly into it? or to adpot the js-reporters natively?
[08:29:21] <jzaefferer> I think native integration is the way to go. Our adapters work fine as an intermediate solution, but eventually they shouldn't be necessary anymore. I see no advantage of integrating our adapters into frameworks though
[08:29:33] <flore77> ok
[08:29:41] <flore77> I will ping boneskull
[08:30:01] <flore77> he showed us some interest at the beginning of the summer
[08:30:12] <jzaefferer> Okay, let's do that now, shouldn't wait anymore
[08:30:46] <flore77> ok.
[08:30:49] <jzaefferer> How about a native implementation in QUnit? They're interested, but need help implementing it
[08:31:15] <flore77> i will talk to them, i have seen that they have some open pr on this
[08:31:27] <flore77> they have already done some work
[08:31:31] <jzaefferer> As for boneskull (what's his real name?), might make sense to contact him (her?) privately. Could you do that, CC me?
[08:31:59] <jzaefferer> you mean this PR? https://github.com/jquery/qunit/pull/882
[08:32:39] <flore77> yes
[08:33:26] <jzaefferer> I wonder if we could integrate our testsuite with QUnit's native implementation
[08:33:48] <flore77> to change frok Mocha to Qunit?
[08:33:53] <flore77> from*
[08:34:39] <jzaefferer> No..
[08:34:52] <jzaefferer> In the PR I just linked to, Leo added a bunch of test
[08:35:03] <jzaefferer> Could we instead run the tests we've got in the js-reporters repo?
[08:35:27] <jzaefferer> kind of like https://github.com/tc39/test262 - the "Official ECMAScript Conformance Test Suite"
[08:36:23] <jzaefferer> Instead of testing QUnit + js-reporters QUnitAdapter, we'd test QUnit with its native js-reporters implementation
[08:36:38] <flore77> hmm. ok
[08:36:47] <flore77> I will take a better look this week
[08:37:29] <jzaefferer> Alright, looks like there's plenty to do then
[08:38:16] <jzaefferer> I'll let you know when I hear back from BrowserStack, though since you're on CC, you should get replies as well. With Shirish apparently not working there anymore, it might take a while :/
[08:39:13] <jzaefferer> Anything else you'd like to discuss?
[08:39:26] <jzaefferer> suite names?
[08:40:13] <flore77> yeah, i received your email
[08:40:17] <flore77> i will email boneskull and put you in cc
[08:40:17] <flore77> sounds ok?
[08:40:32] <flore77> hmm, we can discuss on github
[08:40:33] <jzaefferer> yep
[08:40:40] <jzaefferer> Alright
[08:40:48] <jzaefferer> happy coding!
[08:40:49] <flore77> also I think I have put all the idea there
[08:41:01] <jzaefferer> (and testing, discussing, planning, designing...)
[08:41:20] <flore77> ok.
[08:42:03] <flore77> so this week: work on that 2 issues and reboot communication with the major testing frameworks (qunit, mocha, jasmine)
[08:44:02] <jzaefferer> sounds good
[08:44:50] <flore77> ok. great
[08:44:56] <flore77> have a nice week!
[12:00:38] <timmywil> DaveMethvin, jbedard, m_gol, gibson042 https://docs.google.com/document/d/1uhcW9_TlSwD8JnO1_HNnSYJAriTK9WYZ8uQNDvtAAhA/edit
[12:01:35] <timmywil> Do we have quorum? :D
[12:01:51] <gibson042> I'm here
[12:02:22] <jbedard> here
[12:03:14] <DaveMethvin> me too
[12:03:33] <m_gol> present
[12:05:01] <timmywil> ok, first off, just a note not to merge PRs scheduled for later milestones.
[12:05:07] <timmywil> and mark the milstone when you know it
[12:05:17] <m_gol> on the PR, that is
[12:05:24] <timmywil> right
[12:05:27] <m_gol> as so far we've been mostly only attaching milestones to issues
[12:05:35] <m_gol> which makes it easy to forget a PR shouldn't have been merged just uet
[12:05:37] <m_gol> * yet
[12:06:47] <timmywil> For testing slim/ready-no-deferred. I could add this to the list of things to do manually before a release.
[12:07:11] <timmywil> Oh, also selector-native
[12:07:22] <m_gol> this will mean testing on one browser only, though
[12:07:38] <timmywil> true
[12:07:39] <m_gol> running it on the full browser set manually is not feasible
[12:07:51] <m_gol> unless we have a special Jenkins run that we can schedule manually
[12:08:04] <m_gol> or periodically in a similar job to the one we now have as jQuery Periodic/Weekly
[12:08:13] <timmywil> DaveMethvin: I'm ok with deciding on deprecations, but we have several 3.1.1 issues to get to first
[12:08:25] <DaveMethvin> sure np just getting them into the agenda
[12:08:27] <timmywil> they have priority
[12:09:30] <timmywil> m_gol: good point
[12:10:52] <timmywil> perhaps periodic jobs is the way to go
[12:12:09] <m_gol> unfortunately I don't know how to create new TestSwarm projects, I'll have to ask Krinkle
[12:12:28] <m_gol> we could just put them in the periodic job but the browser sets are disjoint so the table would get very wide for no reason
[12:14:39] <m_gol> so, do we discuss our tasks for 3.1.1?
[12:14:45] <DaveMethvin> so what's critical in the 3.1.1 milestone? I grabbed the ajax one just now
[12:15:52] <DaveMethvin> https://github.com/jquery/jquery/issues/3226 seems important
[12:16:00] <timmywil> DaveMethvin: +1
[12:16:05] <timmywil> and 3224
[12:16:21] <timmywil> 3224 moreso I think
[12:16:28] <timmywil> optgroups are just wrong
[12:16:29] <DaveMethvin> agreed
[12:16:43] <gibson042> I will fix that this week
[12:16:46] <DaveMethvin> several of the rest could be landed in 3.1.1 but don't seem critical
[12:16:47] <m_gol> we've had someone interested in 3226, we should ping them to see if they really have time
[12:17:12] <m_gol> do we mark those 2 as blockers?
[12:17:30] <gibson042> I don't think so
[12:17:54] <timmywil> I think 3224 consitutes a blocker
[12:18:26] <timmywil> If I define blocker as an issue that should be addressed in order to release
[12:18:26] <gibson042> I won't object
[12:18:54] <DaveMethvin> and 3226 as well, tho it sounded like UI would work around it anyway?
[12:19:06] <Krinkle> m_gol: File a task in infra and I'll create a new project. Mostly documented though (manageProject.php)
[12:19:11] <timmywil> I can take the whitespace-releated tickets
[12:19:53] <m_gol> timmywil: in 3204 it's be great if it was possible to do it without perf penalty in other browsers
[12:20:01] <m_gol> not sure if that's 100% possible
[12:20:10] <m_gol> but I guess one additional `if` won't hurt too much
[12:20:20] <timmywil> I can do a perf test
[12:20:23] <m_gol> Krinkle: ok, will do
[12:20:53] <timmywil> the others I'm willing to punt if we don't get to them
[12:21:12] <m_gol> yeah, there's always 3.1.2 or 3.2.0
[12:21:31] <timmywil> now our favorite thing: deprecations!
[12:21:37] <DaveMethvin> oh boy!
[12:22:00] <timmywil> I believe I lost the battle on event shorthands
[12:22:05] <m_gol> (I'll look into https://github.com/jquery/jquery/issues/2144 for 3.1.1)
[12:22:23] <timmywil> m_gol: thanks
[12:22:46] <DaveMethvin> the main caution i have is that the slim build may take breaking changes if we move things to deprecated.js on a minor version
[12:23:00] <DaveMethvin> and plugins etc may be using the stuff https://github.com/jquery/jquery/issues/2958#issuecomment-211138159
[12:23:25] <m_gol> we should probably announce the policy in the blog post (and maybe in a more permanent place as well)
[12:23:31] <timmywil> we can reiterate that in the blog post
[12:23:52] <DaveMethvin> we could add deprecations to Migrate and change docs, but wait to move to deprecated.js until the major
[12:24:09] <timmywil> or that
[12:24:30] <m_gol> that will get messy...
[12:24:48] <m_gol> if we're afraid about breaking changes in the slim build then we shouldn't exclude deprecated.js there
[12:24:51] <DaveMethvin> i know that bootstrap *just* started talking about using slim but if that comment above is right we would break bs if we move the code immediately
[12:25:12] <timmywil> well, I'm normally fine with deprecations getting removed in slim, but this one is different as we don't plan to remove them any time soon in the normal build.
[12:25:20] <DaveMethvin> yeah
[12:25:37] <m_gol> them = which ones?
[12:25:43] <DaveMethvin> look at this long list we have in the notes
[12:25:54] <DaveMethvin> we're going to deprecate them and remove immediately from slim in 3.2?
[12:26:02] <DaveMethvin> that would be very little notice
[12:26:09] <DaveMethvin> but we shoudl document that they are deprecated ASAP
[12:26:20] <DaveMethvin> so i think we need to separate docs from moving the methods
[12:26:25] <timmywil> I think all but event shorthands are low impact
[12:26:37] <timmywil> oh, except ready
[12:26:39] <DaveMethvin> that comment above says proxy would break bootstrap tho
[12:26:46] <DaveMethvin> etc etc :)
[12:27:03] <DaveMethvin> maybe m_gol is right and we don't take out deprecated, i dunno
[12:27:38] <m_gol> ok, so the policy is that we don't want to remove deprecated stuff immediately but maybe quicker than in the full build?
[12:27:41] <timmywil> bootstrap uses proxy? huh
[12:27:51] <DaveMethvin> that's what the comment said
[12:27:55] <DaveMethvin> i didn't verify
[12:28:07] <m_gol> i.e. some deprecated APIs may not get removed in Core v4 because of widespread usage but *would* get removed from the slim build in v4?
[12:28:19] <gibson042> recently-deprecated.js :)
[12:28:23] <DaveMethvin> yup https://github.com/twbs/bootstrap/blob/10606a73bcbfc6c723d60e2a1069c921afff0d2a/js/modal.js#L30
[12:28:37] <m_gol> gibson042: I was thinking about sth like that ;)
[12:28:47] <timmywil> originally, the policy for slim was that it would immediately remove deprecated code, but I don't think I was expecting such major deprecations.
[12:28:48] <DaveMethvin> it's like deprecated-next or something
[12:29:02] <DaveMethvin> even minor deprecations would cause this tho
[12:29:07] <m_gol> deprecated-next suggests it will be deprecated in the next version and not now
[12:29:26] <jbedard> discouraged vs deprecated?
[12:29:37] <timmywil> maybe remane deprecated.js to will-remove.js
[12:29:39] <DaveMethvin> deprecated3?
[12:29:42] <m_gol> haha
[12:29:42] <timmywil> rename*
[12:29:48] <DaveMethvin> that is, deprecated in the v3 cycle
[12:29:56] <m_gol> but do we generally agree it's a good idea to have two files?
[12:30:00] <DaveMethvin> and those move into deprecated.js if they aren't removed in v4
[12:30:17] <DaveMethvin> kind of like two bikesheds i guess, yeah m_gol
[12:30:19] <DaveMethvin> :)
[12:30:28] <timmywil> moving ready might be weird
[12:30:37] <DaveMethvin> i think that may just be docs
[12:30:50] <DaveMethvin> i'm okay with leaving some remnants
[12:30:50] <m_gol> so now we're talking 3 kinds of deprecations :P
[12:30:57] <DaveMethvin> not really
[12:30:58] <m_gol> I think it's going a little too far
[12:31:06] <DaveMethvin> the stuff we can easily segregate we do
[12:31:21] <m_gol> ah, ok, if that's the reason then sure
[12:31:42] <DaveMethvin> the reason for deprecating is to tell people we don't think its good practice
[12:32:11] <m_gol> most people won't notice if they don't use Migrate TBH
[12:32:21] <timmywil> would it be best if slim didn't remove deprecated.js?
[12:32:23] <DaveMethvin> always a problem i agree
[12:32:27] <timmywil> that sounds simpler
[12:32:27] <m_gol> people read docs only if sth doesn't work
[12:32:32] <markelog> timmywil: +1
[12:32:37] <m_gol> timmywil: yeah, maybe that's the best idea
[12:32:41] <DaveMethvin> yeah i think so timmywil
[12:32:47] <m_gol> esp. that it's not that big a module
[12:32:48] <timmywil> ok then
[12:33:02] <DaveMethvin> not that much in there NOW
[12:33:04] <m_gol> I'd be more happy if slim didn't include deferreds :-)
[12:33:07] <DaveMethvin> wait until we're finished :)
[12:33:11] <timmywil> I'll change that in the build. It wasn't removing much yet.
[12:33:29] <DaveMethvin> jquery-super-skinny
[12:33:31] <timmywil> m_gol: heh, no
[12:34:06] <m_gol> we've talked about that in NYC IIRC
[12:34:08] <timmywil> ok, given that, I'm fine with all of the deprecations
[12:34:18] <DaveMethvin> me too
[12:34:21] <markelog> honestly, i would just remove slim version and would wait for version builder
[12:34:43] <m_gol> And the reason it didn't get removed was that we wanted to have a way to retroactively add ajax OR effects to the slim build and we have to take deferreds from somewhere then.
[12:35:18] <m_gol> I hope we'll find a proper solution one day; I don't think people that exclude AJAX & effects use Deferreds, generally
[12:35:40] <markelog> we don't have to guess, we have the stats
[12:35:51] <m_gol> markelog: kind of late for that decision :-)
[12:36:03] <timmywil> I think slim is in a good place, and I don't want to make any major changes on it for a while.
[12:36:03] <markelog> for 4.x i think it might be doable?
[12:36:27] <DaveMethvin> breaking changes on a major, sure
[12:36:34] <timmywil> give people a chance to work with it
[12:36:35] <m_gol> markelog: I'm not sure if stats will tell us that much. Way more people will use the slim build than will build sth themselves
[12:36:46] <m_gol> and we have no way of knowing what APIs do slim build users use
[12:36:53] <DaveMethvin> yeah, true
[12:36:53] <markelog> yeah, probably
[12:37:11] <DaveMethvin> we'll have to go full ES6 modules one day
[12:37:21] <markelog> could be soon!
[12:37:31] <markelog> relatively
[12:37:54] <DaveMethvin> i've seen so many bad impls of that, many people let the module resolution happen at load time
[12:38:07] <DaveMethvin> duolingo.com for example
[12:38:50] <m_gol> the simplest way to keep the current infra would be to just use Babel to transpile to AMD and then fire up our current builder
[12:39:08] <m_gol> the more sophisticated one would be to use rollup like PEP does but then we need to figure out what to do with var-modules
[12:39:24] <m_gol> so that we don't see size increase
[12:39:39] <m_gol> in any case, I'd like to get it done for 4.0 if possible
[12:39:43] <m_gol> lots of people are asking
[12:39:53] <DaveMethvin> rollup probably would work better, we could always get rid of the var-modules if needed
[12:39:58] <markelog> for ES6?
[12:39:59] <m_gol> and with Babel using CommonJS by default we're not using the best format possible
[12:40:25] <m_gol> DaveMethvin: the purpose of var-modules was to not increase the final bundle size
[12:40:35] <m_gol> by needless wrappers when we know a simple assignment is enough
[12:40:44] <DaveMethvin> yeah i know, i just wonder how much it would add
[12:40:47] <m_gol> it's a little quirky, though :)
[12:41:09] <timmywil> I was thinking about it and the module could be written in a more verbose way and have the same effect.
[12:41:10] <markelog> why we would need babel?
[12:41:30] <markelog> not sure if i understand
[12:41:32] <DaveMethvin> ultimately it's frustrating because the ecosystem doesn't track dependencies and 90% will still need the full build, so all this work is to make the 10% be quiet
[12:42:00] <timmywil> instead of `rasdf.js` being define() { return /asdf/; }, it would be define() { var rasdf = /asdf/; return asdf; }
[12:42:08] <m_gol> markelog: we'd use Babel only if we transpiled to AMD and then fired up our current custom builder. If we use Rollup and transpile directly to the bundle then Babel is not needed.
[12:42:48] <timmywil> since we remove the returns
[12:42:52] <markelog> mm, we are talking about version builder?
[12:43:25] <m_gol> markelog: our custom builder that compiles our AMD modules to the full file (not sure what's a version builder?)
[12:43:58] <markelog> we use r.js for that now, right?
[12:44:09] <timmywil> Also, if we're talking about building from es6 modules, we might be adding a lot of work since r.js does a lot for us.
[12:44:12] <markelog> version builder would be an UI thing
[12:44:14] <m_gol> yes but we also apply our own transformations
[12:44:32] <markelog> like jquery-ui
[12:44:35] <m_gol> timmywil: that wouldn't be a problem if we first transpiled to AMD and then fired what we have
[12:44:49] <timmywil> true, but then why are we using es6 modules
[12:44:55] <m_gol> timmywil: but it might be worth checking if rollup isn't good enough
[12:44:59] <markelog> i think we need a ticket for that
[12:45:09] <timmywil> btw, es6 modules is in the roadmap
[12:45:16] <m_gol> timmywil: e.g. so that other tools that are compatible with ES6 modules can use them
[12:45:32] <m_gol> it's much easier to use ES6 modules with various tools like Webpack than AMDN
[12:45:34] <m_gol> * AMD
[12:46:06] <markelog> is there big difference between webpack 2 and rollup?
[12:46:23] <m_gol> Webpack is a bigger tool
[12:46:37] <timmywil> in that case, webpack might be the right tool for building
[12:46:52] <markelog> anyhow, i think ticket would be a best place to talk about it, if we want to do it soonish
[12:47:07] <timmywil> true, if it's 4.0
[12:47:08] <m_gol> ok
[12:47:45] <m_gol> I worked with Webpack a lot recently, it'd be interesting for me to try
[12:48:01] <DaveMethvin> sgtm
[12:48:38] <markelog> m_gol: i think, these days, we all do work with webpack :)
[12:48:46] <markelog> no running away from it
[12:49:00] <timmywil> that or browserify
[12:49:24] <timmywil> I'm working with both, depending on the project
[12:49:43] <m_gol> :)
[12:50:04] <timmywil> sooooo, typeof elem.getAttribute === 'undefined' or elem.getAttribute???
[12:50:17] <timmywil> I like the latter if it's safe
[12:50:25] <DaveMethvin> let's change style if it's safe now, i think it should be
[12:51:04] <timmywil> I remember several times when people intuitively did the latter, and we changed it to typeof
[12:51:33] <m_gol> are we sure we can use it everywhere now?
[12:51:42] <m_gol> I vaguely remember IE 9 had some issues as well
[12:51:58] <timmywil> maybe, we can check
[12:52:12] <markelog> it seems we can just remove the rule?
[12:52:26] <markelog> and not to add anything else
[12:52:30] <DaveMethvin> if we change the code and it dies on ie9 we'll know :)
[12:52:31] <markelog> to the code style
[12:52:43] <timmywil> yea, I think it was treated as an exception. I'd have to look again.
[12:53:06] <markelog> that means we have to check first, before proposing this to the code style repo
[12:53:21] <m_gol> I found it
[12:53:43] <DaveMethvin> i have to go but i'd also vote for landing 3151 in 3.2 since it doesn't make Firefox any worse and it makes Chrome better
[12:53:45] <m_gol> https://github.com/jquery/jquery/blob/e4fd41f/src/manipulation/getAll.js#L9-L10
[12:53:58] <markelog> that is a weird rule anyhow
[12:54:23] <markelog> i would remove it regardless if we need it for IE or not
[12:54:34] <timmywil> wow, IE11?
[12:54:42] <gibson042> I have open comments on 3151
[12:55:28] <markelog> btw
[12:55:32] <timmywil> any objection to landing 3176?
[12:55:36] <markelog> since we are talking about code style
[12:55:39] <m_gol> I haven't looked at all the comments for 3151 because I wasn't sure we want to do it
[12:55:45] <m_gol> if we do, I'll get to them
[12:55:50] <gibson042> oh, I like the change in general
[12:55:50] <markelog> we currently can't use indent rule of eslint
[12:56:06] <markelog> which is an important rule
[12:56:08] <gibson042> +1 to 3176
[12:56:14] <markelog> we have like 1000 violations with it
[12:56:21] <m_gol> k, I'll get to tweaking 3151 then
[12:56:25] <timmywil> markelog: example?
[12:56:43] <markelog> inconsistent indentation all over
[12:56:54] <markelog> but what prohibits us for enabling it, is https://github.com/eslint/eslint/issues/6690
[12:56:55] <gibson042> https://github.com/jquery/jquery/blob/e4fd41f/src/manipulation/getAll.js#L9-L10 is probably due to XML and/or SVG documents
[12:57:20] <markelog> basically because of the amd
[12:57:29] <m_gol> gibson042: yup: https://bugs.jquery.com/ticket/15151
[12:57:41] <m_gol> $(new ActiveXObject("msxml2.domdocument.6.0"))
[12:57:52] <m_gol> Edge would probably be fine
[12:57:56] <timmywil> ah, amd
[12:58:26] <m_gol> this may be fixed by migrating to ES6 modules :-) :evil-laugh:
[12:58:30] <markelog> so we either remove the rule, create our own, or lobby for it to be included in eslint
[12:58:44] <m_gol> I'd just wait for ES6 modules
[12:58:54] <m_gol> and try to enable it afterwards
[12:58:57] <markelog> or that m_gol said, although still not sure what we are talking about haha
[12:59:15] <m_gol> we want to do it eventually anyway, I don't think it's worth hacking around the rule in the meantime
[12:59:33] <markelog> ES6 modules might create a lot of overhead, at the moment, i wouldn't consider it as a done deal
[12:59:36] <timmywil> yea, if we're going to eventually switch away from AMD, it's not worth lobbying for a rule
[12:59:48] <timmywil> I also don't want to do a blanket sweep indenting everything
[12:59:58] <timmywil> so I'd say leave it for now
[13:00:15] <m_gol> yes, especially that moving to ES6 modules would require to de-indent again
[13:00:16] <markelog> we have a lot of inconsistencies with indentation
[13:00:20] <m_gol> breaking blame everywhere
[13:00:53] <m_gol> indent is a tricky rule overall, there are lots of cases which aren't so obvious
[13:01:05] <m_gol> so it's no surprise it's not that easy to adhere to a linter here
[13:01:10] <markelog> there is that, but those are mostly edge cases
[13:01:34] <timmywil> I still wouldn't say it's high priority enough to make any big changes.
[13:02:03] <timmywil> ok, that's all folks!
[13:02:13] <markelog> my recommendation is to enable indent rule now, but do not follow "IIFE" case
[13:02:44] <timmywil> markelog: it sounded like that wasn't possible
[13:03:02] <timmywil> without another rule
[13:03:10] <markelog> we would just indent everything in `define` function
[13:03:16] <markelog> whereas we don't now
[13:03:36] <timmywil> that's what I'd like to avoid
[13:04:05] <markelog> i don't you reliaze that ES6 modules might increase the size considerably
[13:04:14] <markelog> *i don't think
[13:04:22] <markelog> which would be a no go
[13:04:32] <timmywil> true, but we'll see
[13:04:35] <timmywil> anyway, need to stop here. thanks everybody
[13:04:35] <markelog> that's what i mean
