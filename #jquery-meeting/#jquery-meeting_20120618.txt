[09:01:42] <DaveMethvin> .
[09:02:01] <DaveMethvin> anybody home?
[09:02:49] <mikesherov1> hi
[09:02:53] <mikesherov1> ugh
[09:03:08] <gibson042> hello
[09:03:18] <DaveMethvin> yay!
[09:03:19] <mikesherov1> apparently I'm mikesherov1 today
[09:03:20] <rwaldron> howdy
[09:03:21] <ircjsbot> rwaldron, you have one new message, from snover (2 days and 19 hours ago). Tell me if you want to read it (“read”).
[09:03:21] <bot-t> (77 hours 40 mins ago) <jzaefferer> tell rwaldron could use your help on QUnit docs once more. I prepared QUnit.log as a reference - https://github.com/jquery/api.qunitjs.com/issues/3
[09:03:21] <socialhapy> ★ Issue #3 on api.qunitjs.com (jzaefferer; 3d, 6h ago): Document callbacks
[09:03:24] <DaveMethvin> i'll start in just a minute
[09:03:45] <jzaefferer> holy moly meeting time!
[09:04:07] <jzaefferer> mhm, bot-t took 77 hours to deliver that message
[09:04:12] <mikesherov> .
[09:04:17] <mikesherov> that's better
[09:06:34] <DaveMethvin> i sure wish bot-t was feeling better
[09:06:51] <DaveMethvin> okay
[09:07:12] <DaveMethvin> so we were aiming for tomorrow, but i'll be traveling then so it's unlikely i can get a release out
[09:07:30] <DaveMethvin> rwaldron i should work with you so you can do one of the beta releases
[09:07:31] <mikesherov> wait, a release for beta?
[09:07:39] <DaveMethvin> sorry that's what i meant
[09:07:55] <DaveMethvin> oh, so you're not READY for final release? :P
[09:07:59] <DaveMethvin> well neither am it
[09:08:14] <DaveMethvin> and jenkins doesn't think we are ready
[09:08:16] <mikesherov> I'm not even confident on BETA
[09:08:21] <mikesherov> I was going to say that
[09:08:28] <mikesherov> there is that intermittent error in Opera
[09:08:29] <DaveMethvin> yeah there are a coupla things that should go in
[09:08:46] <DaveMethvin> oh i was gonna try to fix the ie one today
[09:08:48] <rwaldron> DaveMethvin sure
[09:08:54] <rwaldron> I'll be around all day
[09:09:00] <rwaldron> so whenever you want to do it.
[09:09:30] <DaveMethvin> since it's beta i don't mind an occasional fail or two in jenkins
[09:09:34] <jzaefferer> things got a little worse with that last commit: http://swarm.jquery.org/user/jquery
[09:09:41] <mikesherov> to reiterate on the IE failures, it's because QUnit doesn't use IE=Edge, and so we go into compatibility mode, and we have a browser sniff that fails
[09:09:54] <DaveMethvin> at least that is what we think
[09:10:04] <DaveMethvin> i am not sure why the browser is in ie=8 mode int he first place
[09:10:11] <jzaefferer> mikesherov: IE=Edge?
[09:10:17] <jzaefferer> Is that something to patch in QUnit?
[09:10:23] <DaveMethvin> most likely jz
[09:11:00] <jzaefferer> If someone can provide me with details or a patch, I can land that in QUnit
[09:11:00] <mikesherov> Right, we have a browser sniff for IE8, but it's falling back to compatibility IE7 mode
[09:11:23] <DaveMethvin> https://github.com/jquery/jquery/commit/a416e2ba0d10bf1e1e94b5d023543d38ad08fcfb
[09:11:24] <socialhapy> ★ Commit on jquery by Dave Methvin (2d, 1h ago): Ensure that IE stays in Big Boy mode.  Although we use a lot of iframes in the test, the IE document mode is set by the parent document so we just need a single X-UA-Compatible in the main file.  http://msdn.microsoft.com/en-us/library/cc288325(v=vs.85).aspx
[09:12:04] <DaveMethvin> when we're run in TestSwarm the IE=Edge in our document can get overridden because we're in an iframe
[09:12:28] <DaveMethvin> so TS needs to have that tag in its html document
[09:13:10] <DaveMethvin> so it's worth a try
[09:13:13] <jzaefferer> oh, so that needs to land in testswarm, not qunit
[09:13:18] <jzaefferer> okay, I can get that deployed
[09:13:21] <DaveMethvin> right, thanks
[09:13:36] <DaveMethvin> in any case we shouldn't be using browser sniffs in the unit tests :D
[09:13:41] <mikesherov> and it *may* need to be a config option to add META headers, because that is something people may want to test... forcing compatmode
[09:13:53] <DaveMethvin> ah true
[09:13:59] <DaveMethvin> although not us, at least for now
[09:14:02] <mikesherov> sure
[09:14:03] <mikesherov> YAGNI
[09:14:08] <DaveMethvin> too many combos if you ask me
[09:14:22] <DaveMethvin> compat mode is a horrible crutch
[09:14:39] <mikesherov> sure
[09:14:42] <DaveMethvin> alright, so unit tests will pass soon and we will be all unicorns and butterflies
[09:14:46] <DaveMethvin> next
[09:15:07] <DaveMethvin> any tickets that we must address before beta?
[09:15:11] <mikesherov> OK, one thing I reopened for 1.8:
[09:15:16] <DaveMethvin> curCSS
[09:15:20] <mikesherov> right
[09:15:25] <DaveMethvin> slowly i turned...
[09:15:32] <mikesherov> save three bytes, lose compatibility?
[09:15:47] <jzaefferer> DaveMethvin: view-source:http://swarm.jquery.org/
[09:15:48] <jzaefferer> already includes
[09:15:49] <jzaefferer> <meta charset="UTF-8">
[09:15:49] <jzaefferer> <meta http-equiv="X-UA-Compatible" content="IE=edge">
[09:15:54] <gibson042> I'd like to see something land for http://bugs.jquery.com/ticket/11795
[09:16:03] <DaveMethvin> well jzaefferer then we should fix our side and see if that helps
[09:16:08] <jzaefferer> yeah
[09:16:27] <DaveMethvin> gibson042: i agree, i think that's part of the $.parseHTML discussion too
[09:16:32] <mikesherov> I mean, seems like ui should make the switch from $.curCSS to $.css, but maybe we should wait one more release?
[09:16:58] <DaveMethvin> i wonder if there are any other items that essentially require it anyway
[09:17:03] <gibson042> mikesherov: maybe, but hasn't it been deprecated for a long time?
[09:17:11] <mikesherov> sure has
[09:17:22] <mikesherov> but not long enough for jQueryUI to get rid of it ;-)
[09:17:26] <gibson042> lol
[09:17:27] <DaveMethvin> so i think we should just go for it
[09:17:40] <DaveMethvin> i know scott has been cleaning out deprecated stuff lately
[09:17:47] <gnarf> hey
[09:17:51] <DaveMethvin> hey gnarf
[09:18:14] <mikesherov> sure, I'm fine either way on curCSS. Just thought it warranted an extra minute to discuss.
[09:18:21] <DaveMethvin> yeah, i agree
[09:18:32] <DaveMethvin> if scott isn't yelling for us to keep it i wouldn't worry
[09:18:40] <mikesherov> OK, I'm closing it again then
[09:19:29] <DaveMethvin> so as far as the other tix go, if something isn't high prio we can push it, just want to get the 1.8 list down to stuff we really intend to land
[09:19:30] <gnarf> gibson042: i submitted that -WIP branch as a pull
[09:19:43] <gibson042> ok; nice
[09:19:45] <gnarf> but i wont have time today to solve that last issue we had
[09:19:55] <gibson042> I'll try to look at it
[09:20:07] <gnarf> if not- we can still land the branch as is I think
[09:20:15] <mikesherov> http://bugs.jquery.com/ticket/8387 gnarf, I can close because you have no unit test to write?
[09:20:17] <gnarf> also - there aren't any unit tests against the new callbacks there
[09:20:21] <gibson042> yeah; it's a small thing
[09:20:22] <gnarf> mikesherov: yes
[09:21:39] <DaveMethvin> the tix for createContextualFragment and insertAdjacentHTML i think will have to wait for 1.9 (or later)
[09:21:55] <DaveMethvin> those are likely to be pretty hefty rewrites
[09:22:00] <mikesherov> agreed
[09:22:29] <DaveMethvin> if/when we land those i am thinking we may want to eliminate the fragment cache entirely
[09:22:42] <DaveMethvin> afaict the main reason for the frag cache is to make benchmarks look good
[09:23:26] <DaveMethvin> the promise stuff is probably about as good as we can make it w/o breaking a lot of code
[09:24:04] <DaveMethvin> WTF? http://bugs.jquery.com/ticket/11929
[09:24:11] <DaveMethvin> excuse me i need to drink heavily
[09:25:03] <mikesherov> plus, PromiseA leaves a lot to be desired in the exception department anyway
[09:25:11] <mikesherov> jaubourg outlined it all already
[09:25:15] <DaveMethvin> yeah
[09:25:29] <DaveMethvin> the guys advocating change have tiny little libs with very few users
[09:25:37] <DaveMethvin> we have a gazillion users
[09:25:44] <rwaldron> DaveMethvin +1 on waiting until 1.9 on those
[09:25:54] <DaveMethvin> and they want us to break all that code in the name of their libs
[09:25:58] <mikesherov> sure, rah rah and all that good stuff
[09:25:59] <rwaldron> I was even thinking 2
[09:26:03] <DaveMethvin> gibson042: on that script ticket, there is some discussion on the standards mailing list about it
[09:26:07] <DaveMethvin> rwaldron: agreed
[09:26:09] <rwaldron> because we're just adding weight
[09:26:14] <jzaefferer> Btw. Deferred as it is is totally awesome. Since Backbone's fetch method returns that object, it makes working around stupid APIs so much easier
[09:26:18] <mikesherov> we're not going to do it both for back-compat and design philosophy reasons
[09:26:29] <rwaldron> when we get to the "no more oldIE" build phase of 2.0, then those will be good
[09:26:49] <DaveMethvin> it's like baby shampoo: no more tears
[09:26:53] <rwaldron> re: the absurd argument about Promise/A...
[09:27:02] <timmywil> hi
[09:27:07] <DaveMethvin> hi timmywil
[09:27:12] <timmywil> sorry I'm late
[09:27:14] <timmywil> meeting
[09:27:17] <rwaldron> I'm blown away by how silly they are
[09:27:23] <gnarf> I think that there is some benifit to scott_gonzalez's suggestion for promise, but we can't do anything about it unless we kill sync ajax
[09:27:33] <mikesherov> so then I'll move 10426 and 10515 to 1.9
[09:27:40] <mikesherov> One I wanted to get in for 1.8 is http://bugs.jquery.com/ticket/10373'
[09:27:43] <rwaldron> I'd love to see a use case where Q, when, dojo and jQuery are on the same page
[09:27:43] <mikesherov> ugh: http://bugs.jquery.com/ticket/10373
[09:27:50] <rwaldron> and need to share deferreds
[09:28:03] <gnarf> but the promise/A argument lost before it began in my opinion
[09:28:07] <rwaldron> It's interesting from an academic stand point
[09:28:21] <rwaldron> gnarf +1
[09:28:23] <DaveMethvin> the Promise/A description is so vague
[09:28:24] <rwaldron> totally
[09:28:39] <DaveMethvin> to interoperate there needs to be a lot more specified
[09:28:49] <rwaldron> not only that, Q and when can afford to change API, because 5 people use them
[09:28:56] <timmywil> gibson042: I'm working on the array of indexes now
[09:28:57] <DaveMethvin> so now these guys have implemented something de facto and our older impl isn't the same
[09:29:02] <DaveMethvin> well I'M SORRY
[09:29:17] <gibson042> timmywil: no need for a PR from me, then?
[09:29:21] <rwaldron> and whent the API changes, they can shout out the window "Yo Paulie! Adrian's deferreds API changed!"
[09:29:33] <rwaldron> no phone necessary.
[09:29:33] <timmywil> gibson042: I'd like your input tho, so I'll ask you to critique me before I push to master
[09:29:34] <gnarf> so the document.defaultView -> window -- there was a browser that stopped us
[09:29:35] <DaveMethvin> lol
[09:29:45] <jzaefferer> can't you guys just write a Promise/Q spec for what jQuery does?
[09:29:45] <mikesherov> http://bugs.jquery.com/ticket/10373 this is currently on rwaldron, he previously wrote a PR, we just need to resurrect it
[09:29:48] <timmywil> gibson042: no need
[09:29:53] <DaveMethvin> jzaefferer: yeah
[09:29:57] <DaveMethvin> we should
[09:30:00] <mikesherov> gnarf: FF3.6 stopped us
[09:30:02] <rwaldron> mikesherov lookinggggg
[09:30:10] <mikesherov> and only for an edge case that jdalton found
[09:30:16] <rwaldron> neat
[09:30:18] <jzaefferer> isn't FF3.6 dead?
[09:30:21] <mikesherov> since FF3.6 support is goine, we're clear
[09:30:22] <rwaldron> lemme rebase that branch
[09:30:22] <DaveMethvin> mikesherov gnarf i didn't see that many places where it changed anything
[09:30:23] <mikesherov> Yes, it is
[09:30:32] <mikesherov> rwaldron, good look with that
[09:30:33] <gnarf> yeah, rwaldron and I were digging into that looking for that edge case
[09:30:38] <gnarf> dalton found it
[09:30:55] <gibson042> oh, I'd also like to see #11539 in 1.8
[09:31:03] <mikesherov> probably just better off rewriting.... that area of the code has been gibson compressed
[09:31:06] <gibson042> timmywil, any thoughts on https://github.com/jquery/sizzle/pull/100?
[09:31:06] <socialhapy> ★ Pull request on sizzle by gibson042 (2m, 1w ago): jQuery ticket 11539: Sizzle.contains(container, textNode)
[09:32:05] <timmywil> gibson042: it's not high priority. Also compareDocumentPosition now takes precedence, so I don't know if that makes a difference.
[09:32:22] <gibson042> hmm, I'll look into it offline then
[09:32:30] <mikesherov> k
[09:33:03] <gnarf> so, that ticket 11797 branch i submitted a pull for - gibson042 can push anything else he needs to it, but we should land it before beta
[09:33:19] <rwaldron> mikesherov haha rebase... yarite.
[09:33:22] <rwaldron> ;)
[09:33:31] <mikesherov> http://bugs.jquery.com/ticket/10373 so this is rwaldron and he's rewriting it... should be nice savings. I want this to land before beta if possible
[09:33:35] <gnarf> i gotta run afk a bit - busy first day back from TXJS
[09:33:36] <DaveMethvin> such a short word for such a lot of pain
[09:33:37] <rwaldron> re-do!
[09:33:42] <DaveMethvin> cyl gnarf
[09:33:44] <gnarf> ill be around in -dev if anyone needs me
[09:33:47] <mikesherov> k
[09:33:52] <mikesherov> gnarf: just one sec
[09:33:54] <rwaldron> I'll have this done in minutes
[09:33:58] <DaveMethvin> so timmywil gibson042 etc thoughts about $(html) behavior?
[09:34:06] <mikesherov> I can take this ticket: http://bugs.jquery.com/ticket/11457
[09:34:07] <gnarf> fast mikesherov - walking out the door with the boss ;)
[09:34:20] <mikesherov> its the magival fix that does need a unit test
[09:34:22] <mikesherov> I got it covered
[09:34:30] <gnarf> coo
[09:34:33] <gnarf> go for it
[09:34:38] <timmywil> DaveMethvin: my thought is the regex can be adjusted, but I'm not sure i have time for it before tomorrow with all the Sizzle stuff I want to get done.
[09:34:45] <mikesherov> taken
[09:35:11] <timmywil> as far as optionally not executing scripts, idk
[09:35:17] <DaveMethvin> timmywil: any problem with just saying the string has to start with < ?
[09:35:48] <DaveMethvin> like, why use a regex if we can just check the first char?
[09:35:58] <timmywil> yea, because I think the flexibility is a good thing
[09:36:21] <DaveMethvin> timmywil: do you have some examples?
[09:36:36] <DaveMethvin> like $("something<p>para</p>")
[09:36:48] <gibson042> DaveMethvin: can you summarize the chatter around script execution?
[09:37:05] <DaveMethvin> well basically there is a document.parse proposed standard
[09:37:08] <timmywil> I imagine even some of our tests would break
[09:37:11] <DaveMethvin> and they're tryna figure out what to do with scripts
[09:37:20] <DaveMethvin> timmywil: one or two yes
[09:37:33] <DaveMethvin> all the same issues we've been discussing and tryna fix lately
[09:37:44] <timmywil> xss is a valid concern, but not high priority. I think it goes with passing unexpected things will render unexpected results
[09:38:13] <DaveMethvin> but the problem is, we magically make unexpected things expected, $(selector)  whoops selector is html
[09:38:15] <rwaldron> I think they will be stuck with abiding innerHTML's script behaviour... I'd like to proven wrong.
[09:38:17] <rwaldron> be*
[09:38:25] <timmywil> DaveMethvin: that can be fixed
[09:38:37] <DaveMethvin> but the damage can be limited
[09:39:11] <DaveMethvin> that's what we did in 1.7 with $("#<html stuff>")
[09:39:16] <DaveMethvin> but only for that one case
[09:39:20] <gibson042> well it's easy to keep the scripts in, it's just not clear when to execute them
[09:39:38] <DaveMethvin> yeah document.parse they were saying it would parse scripts but not execute until inserted into a document
[09:39:54] <gibson042> we can do that
[09:39:55] <DaveMethvin> rwaldron: do you have a link to the archives? let me try to find one
[09:40:25] <DaveMethvin> gibson042: right but we have to be careful not to reexecute if removed and reinserted
[09:40:30] <gibson042> and keep it undocumented so we can update when the consensus is different from our implementation ;)
[09:40:33] <DaveMethvin> lol
[09:40:42] <DaveMethvin> totally agree with the last part
[09:40:51] <timmywil> There's a broad philosophy at work here as well. it's a question of how strict we want jQuery to be. jQuery's popularity is at least somewhat due to its overarching flexibility and if we keep making things more and more strict, it could be more annoying than helpful.
[09:41:24] <gibson042> DaveMethvin: is that where we want to go? evaluate each script element (and clones?) exactly once, on first insert into a document?
[09:41:26] <mikesherov> One of my devs ran into the rexecute upon remove and reinsert bug the other day
[09:41:44] <rwaldron> mikesherov this is a killer
[09:41:51] <mikesherov> it's *unexpected* to say the least
[09:41:53] <rwaldron> window.getComputedStyle => getComputedStyle
[09:41:58] <rwaldron> 33210        (+7)  dist/jquery.min.js.gz
[09:42:07] <mikesherov> NOOOOOOOO
[09:42:07] <DaveMethvin> yes, the whole script executing on manipulation thing is horrible
[09:42:09] * rwaldron shudders
[09:42:22] <timmywil> agreed
[09:42:37] <DaveMethvin> but i'd also like some way for people to process html without exeucting any embedded scripts
[09:42:42] <DaveMethvin> there are important reasons to want that
[09:42:42] <gibson042> I think I can do this, maybe even for 1.8, but it might be heavy
[09:42:45] <mikesherov> wait, rick, we're talking about document.defaultView -> window is +7 bytes?
[09:43:14] <rwaldron> just that first change was +7
[09:43:42] <mikesherov> interesting... the whole thing has to be a loss... that's amazing
[09:43:58] <DaveMethvin> gibson042 timmywil: http://lists.w3.org/Archives/Public/public-webapps/2012AprJun/1232.html
[09:44:09] <DaveMethvin> follow previous in thread a couple back as well
[09:44:26] <mikesherov_> Mobile now.
[09:44:33] <DaveMethvin> basically they're using jQuery's current behavior as reasoning and i'm not sure we could stand behind what we do atm
[09:44:44] <mikesherov> no, what we do is silly
[09:44:46] <timmywil> DaveMethvin: agreed
[09:45:01] <mikesherov> awesome and silly at the same time
[09:45:10] <timmywil> but it seems to me script execution in manipulation is a different issue than what to recognize as html in $(html)
[09:45:23] <gibson042> timmywil +1
[09:45:24] <DaveMethvin> yes
[09:45:33] <mikesherov_> Agree
[09:46:19] <timmywil> DaveMethvin: I'm not opposed at all to ignoring all scripts in manipulation
[09:46:38] <timmywil> we have other methods that can do that explicitly
[09:46:47] <gibson042> do we?
[09:46:52] <DaveMethvin> well that's one of the things i want $.parseHTML to do, optionally
[09:47:04] <DaveMethvin> but the user should say, "I expect scripts here"
[09:47:18] <timmywil> that's fine too
[09:47:22] <DaveMethvin> but for manipulation i agree we should be ignoring scripts
[09:47:26] <DaveMethvin> and not running them
[09:47:29] <timmywil> gibson042: getScript is what I was thinking of
[09:48:00] <DaveMethvin> for backcompat, we are faced with the issue of what to do if a script is append()ed for example
[09:48:10] <gibson042> mmm, that's definitely weaker than what we currently do in domManip
[09:49:02] <mikesherov_> I mean. Its hard, but I can't imagine anyone is expecting multiple executions upon multiple insertion.
[09:49:18] <DaveMethvin> definitely not
[09:49:24] <rwaldron> mikesherov_ starting to see some win here...
[09:49:25] <rwaldron> -8
[09:49:30] <timmywil> Perhaps at least for back compat reasons, $('<script>').append should continue to work, but the option to disable script execution in manip is good
[09:49:31] <DaveMethvin> the problem is that people are sprinking scripts in the docs they're manipulating
[09:50:05] <timmywil> DaveMethvin: +1
[09:50:10] <gibson042> if I understand correctly, what we'd like (given the path that lead us here) is to preserve the script elements, and execute them whenever they enter a document for the first time, and to skip execution of clones created within domManip
[09:50:24] <jzaefferer> XSS protection can't be opt-in
[09:50:30] <DaveMethvin> right jzaefferer
[09:50:44] <DaveMethvin> it currently is basically opt-in and it's a total fail
[09:50:45] <timmywil> jzaefferer: neither is it fully the reponsiblity of jQuery
[09:51:04] <DaveMethvin> we can't make failure to easy to achieve, that's the main point
[09:51:16] <timmywil> ok
[09:51:16] <jzaefferer> timmywil: I know, I'm not a fan of that area either. Scott killed html injection for autocomplete in UI, people complained for a year and then not anymore
[09:51:42] <jzaefferer> Its annoying to deal with, but if you don't outright ignore it, it has to be opt-out
[09:52:19] <DaveMethvin> so if we leave scripts in the doc, there are several cases where a reinjected script may be re-run
[09:52:36] <gibson042> such as?
[09:52:37] <timmywil> DaveMethvin, jzaefferer: the main problem then is the change in behavior, which I'm okay with but probably won't be able to happen before 1.8 beta
[09:52:45] <gibson042> we can easily deal with them in our codebase
[09:53:22] <gibson042> and if someone wants to mix libraries for DOM manipulation, isn't that just too bad?
[09:53:50] <timmywil> gibson042: wrap comes to mind
[09:54:03] <timmywil> but I agree it can be dealt with
[09:54:07] <DaveMethvin> anytime a script is removed from the dom and reinserted it will rerun, right?
[09:54:15] <DaveMethvin> if we know it's already in the dom we know we ran it
[09:54:51] <gibson042> and can thus suppress the re-run
[09:55:04] <DaveMethvin> but before we can make any changes to the current behavior, we need to give people a preferred way to do it
[09:55:10] <DaveMethvin> that's what $.parseHTML() was about
[09:55:19] <gibson042> agreed
[09:55:21] <timmywil> all manip will then have a wrapper to determine disconnected, right?
[09:55:29] <gibson042> yes
[09:55:49] <rwaldron> by restoring getComputedStyle to window.getComputedStyle in support, but omitting "window." from getComputedStyle in css.js I get the best savings
[09:55:53] <rwaldron> -17
[09:55:58] <rwaldron> kwazy.
[09:56:10] <DaveMethvin> if we want to prevent re-execution... or perhaps we could tag the script element itself...
[09:56:29] <DaveMethvin> add an expando  .executed=true
[09:56:31] <DaveMethvin> ?
[09:57:01] <gibson042> I was thinking .data, but yeah
[09:57:36] <DaveMethvin> either will break if the stuff is serialized to a string and reinserted, but meh
[09:58:16] <gnarf> back
[09:58:18] <gibson042> also meh on a cloned script looking like it's already been run
[09:58:27] <DaveMethvin> okay, so as far as 1.8 goes i think we just need to tell people what our future goals are for $(), $.fn.append() etc  and define $.parseHTML
[09:58:27] <gibson042> amirite
[09:58:36] <DaveMethvin> gibson042: yeah
[09:58:38] <gibson042> yeah, that's fair
[09:58:43] <rwaldron> gnarf howdy
[09:59:05] <rwaldron> DaveMethvin re: API...
[09:59:35] <rwaldron> there is jQuery.parseXML, jQuery.parseJSON etc
[09:59:40] <rwaldron> kind of gross
[09:59:54] <rwaldron> would be nice to put them all on a jQuery.parse object
[10:00:17] <rwaldron> jQuery.parse { xml: function, json: function, html: function }
[10:00:18] <rwaldron> maybe?
[10:00:25] <rwaldron> might be too much hassle
[10:00:29] <DaveMethvin> i think it complicates the signature, yeah
[10:00:39] <rwaldron> this and jQuery.everythingHooks stinks
[10:00:55] <DaveMethvin> well some of it i think we just live with
[10:01:01] <DaveMethvin> so what is sane semantics and syntax for $.parseHTML() ?
[10:01:06] <rwaldron> fair enough
[10:01:13] <rwaldron> i think i just needed to say it outloud
[10:01:16] <rwaldron> now I'm over it.
[10:01:20] <mikesherov_> WOah
[10:01:26] <rwaldron> mikesherov_ you missed this
[10:01:29] <rwaldron> by restoring getComputedStyle to window.getComputedStyle in support, but omitting "window." from getComputedStyle in css.js I get the best savings
[10:01:44] <mikesherov_> fun
[10:01:51] <rwaldron> -17
[10:01:54] <mikesherov_> nice
[10:01:54] <rwaldron> I'm testing now
[10:02:02] <mikesherov_> that's funny
[10:02:22] <DaveMethvin> $.parseHTML(string, { options? })
[10:02:28] <rwaldron> sure
[10:02:34] <gnarf> there must be a lot of "window." in the support ;)
[10:02:46] <DaveMethvin> the only option i have right now is  "don't run scripts"
[10:02:47] <rwaldron> just move the logic from jQuery( string, { opts })
[10:02:58] <gnarf> DaveMethvin: $.parse( string, { options } ) ?
[10:02:59] <rwaldron> gnarf there is
[10:03:03] <rwaldron> and they are all very close
[10:03:07] <DaveMethvin> but should it also strip them from the html completely?
[10:03:18] <DaveMethvin> again, thinking in terms of security issues
[10:03:25] <gibson042> I say no
[10:03:29] <gnarf> that way it could potentially have $.parse( string, { json: true } ) ?
[10:03:33] <DaveMethvin> if we don't run them it seems unusual to leave them in
[10:03:43] <gibson042> they're just elements
[10:03:46] <DaveMethvin> ah gnarf so html the default?
[10:03:56] <gibson042> if they were in the input, they should be in the output
[10:04:01] <mikesherov_> I hav to go guys. I'll catch up with you all in dev
[10:04:01] <gnarf> DaveMethvin: just a thought, i mean we already have parseJSON
[10:04:09] <DaveMethvin> cya mikesherov
[10:04:17] <gnarf> xml / html are so similar
[10:04:59] <DaveMethvin> as far as the rest of the agenda is concerned ... any items that shoudl be noted?
[10:05:12] <DaveMethvin> jzaefferer got our -git build workign again, yay!
[10:06:27] <DaveMethvin> alright, how about we continue the chaos in -dev then?
[10:07:02] <DaveMethvin> i'll close the room here and turn out the lights
[10:07:22] <timmywil> thanks all
