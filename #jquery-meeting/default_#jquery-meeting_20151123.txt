[12:01:44] <timmywil> gibson042, markelog, DaveMethvin, m_gol meat
[12:01:49] <markelog> hey-hey
[12:01:53] <timmywil> https://docs.google.com/document/d/1BadwSO6Sn91RBfr05s77r81ncEi0oMBJ5mZS-k215vg/edit#
[12:02:32] <timmywil> so, how is 1.12 coming along markelog?
[12:02:52] <gibson042> üçñ
[12:03:06] <DaveMethvin> here
[12:03:09] <markelog> didn't had time for it on previous week, but i will some on this one
[12:03:24] <markelog> did we confirmed 2.2?
[12:03:27] <markelog> changes that is
[12:03:28] <timmywil> ok
[12:03:35] <markelog> it is all good?
[12:03:37] <timmywil> I didn't get to it. I will before Thursday
[12:03:38] <gibson042> I didn't get a chance... what's the URL?
[12:03:45] <markelog> i see we are still falling with opera 12.17
[12:03:47] <timmywil> https://github.com/jquery/jquery/issues/2723
[12:04:33] <timmywil> and latest job http://swarm.jquery.org/job/1731
[12:04:36] <markelog> since if there some commits that shouldn't be there it would be good to know, before i would start on 1.12
[12:05:14] <timmywil> I see
[12:05:32] <timmywil> ok, we'll get on verifying that for you
[12:05:50] <timmywil> https://github.com/jquery/jquery/issues/2736
[12:05:52] <markelog> timmywil: would you mind posting comment about it in the issue?
[12:05:54] <gibson042> right now "Questionable commits" are in, right?
[12:05:58] <markelog> yes
[12:06:23] <markelog> so right after that comment, i would be sure we are solid with 2.2
[12:07:00] <timmywil> ok, will do
[12:07:04] <timmywil> I'm sure others will comment too
[12:07:25] <markelog> so i need to wait until all of us will comment there?
[12:08:02] <DaveMethvin> i would not wait for everyone, maybe set a deadline?
[12:08:33] <timmywil> good idea
[12:08:36] <markelog> i'm afraid of the situation, when i would did the job and afterwards, i would found that i need to pull some commits from 1.12
[12:08:49] <timmywil> how about by Wednesday?
[12:09:11] <markelog> sounds go to me
[12:09:13] <DaveMethvin> well the "Questionable commits" were mostly about getting the merge conflicts fixed, right?
[12:09:45] <markelog> no, they could  be inappropriate for this release
[12:09:57] <markelog> there is also list of the "hard reverts"
[12:10:09] <markelog> which might have some mistakes
[12:10:20] <markelog> those reverts are all about gibson042 changes :-)
[12:10:33] <DaveMethvin> as long as they don't change existing behavior i'm okay with them being in, but i'll look by wednesday and let you know
[12:10:34] <timmywil> typical ;)
[12:10:41] <gibson042> yep
[12:10:54] <markelog> also, there is might be some commits that we should include, that i missed
[12:11:10] <timmywil> right, I'll check that with git cherry
[12:11:32] <markelog> i doubt it, but it is a possibility
[12:11:40] <DaveMethvin> we need to go back to the issues and re-set the milestones?
[12:11:44] <timmywil> so, the above issue is about the proposed default rejection handler for Deferred
[12:11:52] <markelog> DaveMethvin: yeah, i will do that
[12:11:55] <DaveMethvin> k
[12:12:01] <DaveMethvin> yeah, rejection handler
[12:12:07] <timmywil> I'm back and forth
[12:12:08] <markelog> both for 2.2 and 1.12
[12:12:23] <timmywil> but does anyone want to mock it up, before I assign myself?
[12:12:27] <DaveMethvin> this is why jaubourg didn't want to catch them :)
[12:12:29] <markelog> that change is pretty unconventional
[12:12:44] <markelog> and also will add for our size
[12:12:50] <markelog> might be considerable
[12:12:57] <markelog> looking at the blurbird module
[12:12:57] <timmywil> well, let's see how big it is
[12:13:03] <markelog> bluebird
[12:13:03] <timmywil> bluebird does it?
[12:13:06] <DaveMethvin> it depends on what the default one does and where it goes
[12:13:06] <markelog> yeah
[12:13:07] <gibson042> what is "it"?
[12:13:14] <gibson042> what are you actually proposing?
[12:13:23] <markelog> https://github.com/jquery/jquery/issues/2736
[12:13:33] <gibson042> there are many suggestions there
[12:13:37] <DaveMethvin> i'm proposing that we not swallow exceptions, beyond that i'm open to suggestoins on how and how well
[12:13:45] <timmywil> my proposal was to have a default rejection handler that ensures errors make it to the console, but removing it as soon as a user adds a rejection handler
[12:13:50] <markelog> and there would be false positives
[12:14:04] <markelog> and there will be situation, when we can't recommended to use standart promises
[12:14:08] <gibson042> you might want to follow https://github.com/tc39/ecma262/pull/76
[12:14:20] <DaveMethvin> false positives aren't a problem as long as users can put in a custom handler ... i think that's much less likely to be a problem than the case of swallowed exceptions
[12:14:33] <gibson042> even the inbound native HostPromiseRejectionTracker defaults to no-op
[12:14:54] <DaveMethvin> yeah but browser dev tools let you know
[12:15:04] <markelog> if that would be a native
[12:15:11] <markelog> whereas we don't use native
[12:15:12] <gibson042> and the suggested "typical" description notifies on both unhandled rejections AND invalidated previous notifications
[12:15:14] <markelog> for some reason :-)
[12:15:46] <gibson042> this is *the* issue with compatibility‚Äîexceptions become rejections
[12:15:53] <gibson042> we already bought in
[12:16:21] <DaveMethvin> think about how the average jQuery user uses our lib, i think they are gonna end up with no hair trying to debug code that uses our new exception swallowers
[12:16:39] <timmywil> gibson042: that seems to follow the path I'm thinking
[12:16:49] <timmywil> oops, I hadn't scrolled down
[12:17:01] <gibson042> more sugary libraries add stuff like `.done`
[12:17:15] <DaveMethvin> yeah but done is now considered an antipattern
[12:17:18] <markelog> DaveMethvin knows all about that :-)
[12:17:30] <markelog> why?
[12:17:42] <DaveMethvin> let me dig out the thread
[12:17:57] <markelog> in any case, it would help our situation though :/
[12:18:13] <markelog> since if user didn't add `catch` their will might also forget to add `done`
[12:18:29] <DaveMethvin> https://github.com/domenic/promises-unwrapping/issues/19
[12:18:31] <timmywil> If users add their own handlers, like we recommend, my proposal would not interfere.
[12:18:32] <markelog> *it wouldn't
[12:19:00] <markelog> what is own handlers?
[12:19:01] <DaveMethvin> look out on the internet, the horse has escaped and there are SOOOO many examples without error handling
[12:19:10] <DaveMethvin> especially considering we just threw before this
[12:19:25] <markelog> DaveMethvin: what is the general idea there?
[12:19:29] <markelog> long thread
[12:19:44] <gibson042> is there a reason why "plugin" is not an acceptable answer here?
[12:20:06] <DaveMethvin> gibson042: but keep the default swallowing behavior? I think that would be bad for debugging
[12:20:33] <markelog> it will be :/
[12:20:34] <gibson042> there's just no clear answer about _how_ to resolve that
[12:20:38] <DaveMethvin> for the people who need to attach handlers later in a deferred's lifecycle the ability to change the default handler lets them keep the console clean
[12:20:48] <markelog> the other question, if we can do something about it
[12:20:54] <markelog> something correct
[12:20:58] <gibson042> if we have an opinion, it will suck
[12:21:16] <gibson042> and will bloat file size
[12:21:26] <markelog> it will bloat it regardless
[12:21:37] <DaveMethvin> i'm not suggesting anything fancy
[12:21:44] <timmywil> my thinking is to add a .catch(function(error) { if (noHandler) { throw error; } }) to everything
[12:22:07] <markelog> so, revert previous behaviour :-)
[12:22:15] <DaveMethvin> "undefined is not a function" should throw a warning ASAP since it's 99% likely to be a programming error
[12:22:22] <DaveMethvin> i want to know the location of that error
[12:22:48] <markelog> timmywil: there will be false positive with that logic
[12:23:03] <timmywil> markelog: how so? if they have a handler, nothing happens
[12:23:13] <markelog> they might add that handler later
[12:23:26] <timmywil> but then noHandler would be false
[12:23:41] <gibson042> timmywil: not at the time that it mattered
[12:24:14] <gibson042> also, you would have to keep track of user-added handlers, since your anonymous function itself is a handler
[12:24:54] <gibson042> and you're presumably not reporting about invalidations of earlier notifications as recommended by https://github.com/tc39/ecma262/pull/76
[12:25:12] <markelog> hm, but it will interfear with the promise chain?
[12:25:18] <timmywil> if there's no handler at that time, then it's unhandled, right?
[12:25:28] <gibson042> no, because then and catch both create new promises
[12:26:03] <gibson042> timmywil: rejections can become handled arbitrarily far into the future
[12:26:13] <timmywil> ah, of course
[12:26:15] <gibson042> there's only "currently unhandled"
[12:26:19] <DaveMethvin> right so there's always the chance we were too hasty
[12:26:20] <DaveMethvin> BUT
[12:26:34] <gibson042> so it's a false positive if you report unhandled and then a handler is later added
[12:26:40] <DaveMethvin> a programming thing like ReferenceError is unlikely to be a normal rejection
[12:26:45] <timmywil> so, the only other solution I see is an event
[12:27:06] <gibson042> I see many solutions
[12:27:14] <timmywil> then name them
[12:27:24] <DaveMethvin> if you try to do something async you end up losing the stack without some special effort, aka bloat
[12:27:34] <DaveMethvin> that's why i proposed something simple
[12:27:45] <gibson042> array of unhandled rejections, event, async throw, callback, ...
[12:27:53] <gibson042> and I don't think any belong in core
[12:28:00] <DaveMethvin> look for the "undefined is not a fucntion" kin dof errors and warn immediately on them
[12:28:12] <DaveMethvin> but the problem is, that means by default we are swallowing errors
[12:28:16] <DaveMethvin> that will make it a mess to debug
[12:28:19] <gibson042> AS REQUESTEDC
[12:28:25] <DaveMethvin> haha
[12:28:31] <markelog> "array of unhandled rejections" sounds interesting to me
[12:28:33] <DaveMethvin> but they fixed std promise with dev tools
[12:28:36] <markelog> why not in the core?
[12:28:48] <timmywil> keeping an array doesn't help unless the user asks for the array
[12:28:53] <DaveMethvin> it's gonna get to be a lot of extra code
[12:29:00] <timmywil> and I'm not sure what "callback" is
[12:29:11] <markelog> event would also be as bad as always  adding `catch`
[12:29:24] <DaveMethvin> let me do something that everyone can shoot at to solve the problem I posed in the jsbin in that issue
[12:29:36] <DaveMethvin> and make a PR for that
[12:29:41] <markelog> timmywil: yeah, right for the debugging it would help
[12:30:06] <DaveMethvin> you will tell me it sucks, and i will agree, but what i'm thinking of will solve the immediate problem without a lot of code
[12:30:10] <markelog> `async throw` could also work
[12:30:21] <timmywil> async throw has the same problem as sync throw. it could still be handled later.
[12:30:24] <markelog> sounds like a lot of work :-)
[12:30:26] <DaveMethvin> then you need to keep the stack
[12:30:49] <DaveMethvin> my goal here is decent debugging of developer mistakes
[12:31:04] <gibson042> you mean like using Promises?
[12:31:09] <gibson042> har har har
[12:31:13] <markelog> timmywil: yeah, although i think there is a way to workaround that
[12:31:34] <markelog> hard to explain without the code though
[12:31:46] <markelog> i see two solutions
[12:31:51] <markelog> array of rejections
[12:31:55] <gibson042> for the record, sync throw isn't even possible
[12:31:56] <markelog> which could be bad for memory
[12:32:08] <markelog> and using natives
[12:32:15] <markelog> i like the second :-)
[12:32:28] <markelog> although i liked for it year now :)
[12:32:39] <markelog> proposed this back then
[12:32:44] <DaveMethvin> kind of wipes out compatibility though
[12:32:53] <markelog> it is?
[12:33:06] <markelog> did we try it?
[12:33:19] <timmywil> using native Promises? don't they have the same problem?
[12:33:26] <markelog> yes!
[12:33:26] <markelog> BUT
[12:33:29] <DaveMethvin> they have dev tool support
[12:33:29] <markelog> :-)
[12:33:33] <timmywil> ah
[12:33:33] <markelog> exactly
[12:34:00] <markelog> you know what though?
[12:34:00] <DaveMethvin> they swallow exceptions and (eventually) yell about unhandled rejections
[12:34:12] <markelog> we can start work on some solution
[12:34:15] <markelog> like DaveMethvin one
[12:34:25] <markelog> but can table it until 3.1
[12:34:31] <timmywil> might as well start with DaveMethvin's PR
[12:34:31] <markelog> if we wouldn't have the time for it
[12:34:50] <markelog> or 3.0.1 even
[12:34:53] <timmywil> gibson042: but you're opposed to all of this, right?
[12:35:08] <gibson042> I'm willing to look at a PR
[12:35:10] <markelog> since that wouldn't be api change for some cases
[12:35:15] <DaveMethvin> i think it will be almost impossible to work with our impl if it swallows exceptions, remember all the code out there already that people will try to move to 3.0
[12:35:32] <DaveMethvin> i think we need a solution badly, glad to propose a really bad solution in a PR :)
[12:35:50] <timmywil> DaveMethvin: ok, I think we can start with that then
[12:35:52] <markelog> i guess you have pretty clear idea how to do it :-)
[12:35:55] <gibson042> I agree that what we're doing now sucks, it's just that it sucks as specified and requested
[12:36:15] <DaveMethvin> yes gibson042 it's definitely to spec
[12:36:31] <DaveMethvin> and don't get jaubourg started :)
[12:36:37] <timmywil> ha
[12:36:41] <gibson042> it's like "follow the spec, but protect me in ways disallowed by it"
[12:36:56] <timmywil> ya
[12:37:04] <DaveMethvin> all we can do is say, "um, this looks funny" and give people a way to say "shut up!"
[12:37:14] <gibson042> the spec hates you all
[12:37:34] <markelog> it seems they moved this issue to the environment right?
[12:37:48] <gibson042> basically
[12:37:51] <timmywil> yea, looks like they will have a Node-specific solution
[12:37:55] <markelog> like node has now and browsers will also have some ways to track it
[12:38:26] <markelog> event on window also we good idea actually :-)
[12:38:31] <DaveMethvin> right, kind of like module loading, just put a big TBD on it and punt from the spec
[12:38:43] <DaveMethvin> BUT WE HAVE A SYNTAX!
[12:38:47] <timmywil> https://github.com/jquery/jquery/pull/2718 Last question up for debate is whether to hide this 2nd arg in globalEval
[12:39:03] <markelog> would be surprise which way DaveMethvin will choose :-)
[12:39:10] <DaveMethvin> i'm good either way!
[12:39:12] <DaveMethvin> so there.
[12:39:13] <DaveMethvin> :)
[12:39:16] <markelog> i'd say hide it
[12:39:38] <markelog> my arguments is in the issue
[12:39:43] <timmywil> It could be useful in very niche circumstances, but it hasn't actually been asked for
[12:39:43] <markelog> and i already have a pr for it
[12:39:49] <gibson042> no strong feelings from me
[12:40:03] <markelog> we could ask other teams
[12:40:07] <timmywil> ok, we may as well hide it. we can always expose it later.
[12:40:15] <markelog> yeah, cool!
[12:40:24] <markelog> so i'm gonna land my thing then?
[12:40:29] <timmywil> yea
[12:40:34] <markelog> coolsies
[12:40:34] <DaveMethvin> land that thing!
[12:40:38] <markelog> ))
[12:40:55] <timmywil> and there's a minor question left unanswered on https://github.com/jquery/jquery/pull/2697
[12:41:20] <DaveMethvin> oh , guidelines or principles?
[12:41:23] <timmywil> yea
[12:41:28] <DaveMethvin> either fine with me
[12:41:37] <timmywil> me too
[12:41:55] <markelog> so at gibson042 discretion
[12:42:03] <markelog> i have one issue to discuss
[12:42:08] <timmywil> shoot
[12:42:20] <markelog> sizzle
[12:42:34] <markelog> soon might have a new method `escape`
[12:42:35] <markelog> https://github.com/jquery/sizzle/pull/364
[12:42:45] <timmywil> mhmm
[12:42:49] <markelog> should we also expose through our API?
[12:42:55] <gibson042> yes
[12:43:02] <timmywil> well, it will be on jQuery.find.escape
[12:43:10] <timmywil> but could be better
[12:43:15] <markelog> yeah
[12:43:24] <gibson042> https://github.com/jquery/jquery/issues/1761 is the jQuery issue
[12:43:32] <timmywil> like jQuery.escapeSelector or something
[12:43:45] <markelog> we would also need to document that?
[12:43:49] <markelog> 3.0 right?
[12:43:57] <timmywil> yea
[12:43:59] <gibson042> or 3.1
[12:44:03] <timmywil> or that
[12:44:14] <markelog> i will put it as 3.0 for now )
[12:44:20] <markelog> since we have a pr for it already
[12:45:04] <timmywil> if we put it on the jQuery API, and not just Sizzle's, we will need an equivalent for selector-native
[12:45:04] <markelog> okay, it is all from me
[12:45:24] <markelog> expose it as CSS.escape?
[12:45:45] <gibson042> huh?
[12:45:47] <markelog> i mean point to the native method
[12:45:48] <timmywil> it's just not supporte din IE, Opera, Safari
[12:46:02] <gibson042> no, this is _our_ escape method
[12:46:09] <markelog> yeah, but selector-native doesn't offer full api
[12:46:26] <markelog> why not?
[12:46:41] <markelog> we point to qSA with our methods
[12:46:50] <markelog> so we could point to CSS.escape
[12:46:59] <gibson042> are you asking about selector-native specifically?
[12:47:04] <markelog> yeah
[12:47:08] <gibson042> oh, ok
[12:47:13] <gibson042> yeah, CSS.escape would be fine
[12:47:26] <markelog> we could use CSS.escape inside the Sizzle too though
[12:47:32] <gibson042> nope
[12:47:34] <markelog> with couple decorators
[12:47:37] <gibson042> not worth the checks
[12:47:52] <markelog> did you try it?
[12:48:09] <gibson042> to determine what?
[12:48:13] <markelog> size?
[12:48:21] <markelog> we are talking about the size right?
[12:48:39] <gibson042> it's guaranteed extra, since we need our own implementation anyway
[12:48:48] <markelog> for now, yeah
[12:49:23] <markelog> remember how we used it Date.now?
[12:49:37] <markelog> when we supported old browsers?
[12:49:58] <markelog> i think we could do the same?
[12:50:07] <gibson042> that was the one time I can remember not regretting a sometimes-native implementation
[12:50:25] <gibson042> jQuery.trim is a much better analog, I think
[12:50:33] <markelog> we used to do it all over
[12:50:35] <gibson042> better not to have a fork
[12:50:42] <markelog> like in the attr module
[12:50:48] <gibson042> my point is that native String.trim disagreed
[12:50:49] <markelog> why not?
[12:51:09] <timmywil> we are providing additional functionality to what is specced, right? So, we may not ever be able to switch to CSS.escape.
[12:51:10] <gibson042> so we have to figure out not just if the native method exists, but if it works
[12:51:16] <gibson042> right
[12:51:19] <markelog> if there would be any issues we will found about it and can fill the issue to w3c
[12:51:38] <markelog> for what case?
[12:51:42] <DaveMethvin> yeah, every attempt to use the bare CSS/DOM functionality has been a bit painful
[12:51:47] <DaveMethvin> even JSON.parse
[12:51:53] <gibson042> another good example
[12:51:57] <DaveMethvin> we handled undefined differently
[12:52:01] <markelog> remembering android 2.3?
[12:52:15] <markelog> spec changed for it
[12:52:37] <markelog> i think it always good to use native first
[12:52:46] <markelog> even if it is a bit painful
[12:52:49] <timmywil> lodash has proved that false
[12:52:59] <markelog> because of the speed?
[12:53:10] <timmywil> and avoiding bugs
[12:53:13] <markelog> not for every case though
[12:53:25] <markelog> i think it is good to found bugs that way
[12:53:29] <timmywil> no, not for every case, but the blanket statement is disconcerting
[12:53:33] <markelog> workaround them on our sade
[12:53:34] <markelog> side
[12:53:42] <markelog> and fill the ticket to the w3
[12:53:43] <markelog> c
[12:53:53] <DaveMethvin> i think it *feels* better to use the native fn but often it makes no difference
[12:53:54] <timmywil> we can do that regardless
[12:54:06] <markelog> otherwise, we will stuck to use to the rest of the days
[12:54:23] <markelog> our impl i mean
[12:54:25] <markelog> and not the native
[12:54:38] <markelog> we would want to use native eventually right?
[12:54:53] <timmywil> anyway, we can continue this discussion elsewhere
[12:54:58] <markelog> ok-ok
[12:55:07] <markelog> i had a comment in the issue about it
[12:55:13] <markelog> so we can discuss it there
[12:55:25] <markelog> the main point is that we want to expose and document it
[12:55:29] <timmywil> Thanks all. Happy Thanksgiving, Amurica!
[12:55:36] <markelog> see ya!
