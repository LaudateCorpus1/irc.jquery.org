[09:01:27] <timmywil> DaveMethvin|away, m_gol, gibson042, arthurvr meeting time
[09:01:38] <arthurvr> Yo!
[09:01:52] <timmywil> hi arthurvr!
[09:01:53] <gibson042> wooo
[09:01:55] <timmywil> who's here?
[09:02:16] <timmywil> I constantly try to tab complete names in google docs :/
[09:02:36] <gibson042> just copy from IRC and paste :)
[09:02:48] <timmywil> heh
[09:03:01] <DaveMethvin> here
[09:03:09] <arthurvr> hey DaveMethvin
[09:03:18] <timmywil> So, first up
[09:03:18] <DaveMethvin> hey!
[09:03:20] <timmywil> I have a puppy
[09:03:25] <DaveMethvin> yay!
[09:03:32] <timmywil> He's super cute and a lot of work
[09:03:39] <arthurvr> lol
[09:04:03] <timmywil> Also, I'm leaning towards reverting the undefined to null thing
[09:04:13] <DaveMethvin> do it for the puppy
[09:04:21] <timmywil> ha
[09:04:24] <DaveMethvin> unfortunately, if it breaks ui it prob breaks a lot of stuff
[09:04:31] <timmywil> and mobile
[09:05:01] <markelog> that is what i was afraid of (
[09:05:02] <timmywil> is anyone particularly opposed to that?
[09:05:05] <gibson042> I'm not seeing sufficient cause yet
[09:05:15] <DaveMethvin> i like the consistency but the bc breakage will cause a lot of issues so i'd revert it
[09:05:29] <gibson042> UI fixes went in because they're all-around better
[09:05:29] <DaveMethvin> other than consistency, what are the pros?
[09:05:59] <markelog> none
[09:06:05] <gibson042> it's only consistency
[09:06:28] <DaveMethvin> are there any other changes in 3.0 that will break it for older ui or mobile?
[09:06:33] <timmywil> this seems like one of those times where we like the change, but it's probably easier on our users to not do it
[09:06:53] <gibson042> Deferred changes broke the Mobile _tests_, but I don't know about the code
[09:07:31] <timmywil> deferred is the other breaker, but I'm ok with that
[09:07:52] <markelog> +1
[09:07:59] <gibson042> https://github.com/jquery/jquery/issues/1767 (PR forthcoming) will break some stuff, if we do it
[09:08:35] <markelog> +1 to that too
[09:08:38] <timmywil> yup, but not changing may cause show/hide to become more irrelevant
[09:09:18] <DaveMethvin> i would like to see the show/hide stuff put in, at least until it's proven to be catastrophic to a bunch of code
[09:09:20] <gibson042> https://github.com/jquery/jquery/issues?q=is%3Aclosed+is%3Aissue+milestone%3A3.0.0+label%3Abehavior-change
[09:09:48] <DaveMethvin> the rest of those seem pretty edge casey
[09:10:00] <markelog> or were deprecated
[09:10:07] <markelog> for long time now
[09:10:14] <timmywil> agreed
[09:10:29] <DaveMethvin> if migrate can help better with these we can put more in there
[09:11:44] <gibson042> .attr can definitely be patched by migrate
[09:11:50] <scott_gonzalez> Ping me when the show change happens and I'll let you know if it breaks anything in UI.
[09:11:58] <gibson042> will do, scott_gonzalez
[09:12:15] <timmywil> scott_gonzalez: what are your thoughts on keeping the undefined -> null change after talking to gibson042
[09:12:31] <markelog> i might do the follow up, as we discussed, so there might be need in additional checking
[09:12:43] <scott_gonzalez> I think there's likely to be some broken code in the wild.
[09:13:22] <timmywil> ok, the majority opinion is to revert then
[09:13:32] <scott_gonzalez> There was a lot of concern from members of the UI team.
[09:13:43] <markelog> timmywil: no one is opposed i guess )
[09:13:44] <m_gol> present
[09:13:47] <scott_gonzalez> Not about the changes in UI, but about the change in core.
[09:14:10] <timmywil> ok, so we'll back it out
[09:14:20] <gibson042> I'm opposed to backing it out, but will yield to majority opinion
[09:14:34] <scott_gonzalez> I think the thing that's unfortunate is that it's not easy to find these cases in your code.
[09:14:42] <markelog> gibson042: even if it will break a lot of stuff?
[09:15:02] <DaveMethvin> the alarm bell for me was the UI and Mobile breakage
[09:15:09] <timmywil> DaveMethvin: ditto
[09:15:12] <scott_gonzalez> I will say though that this will cause fewer breakages than the attr/prop split.
[09:15:16] <gibson042> we are already communicating backwards incompatibility by increasing the major version, and providing a bridge with jQuery Migrate
[09:15:23] <DaveMethvin> well YEAH scott_gonzalez  )
[09:15:30] <timmywil> implies that plugins will also have issues, which just makes 3.0 adoption much slower for everyone
[09:15:49] <gibson042> and the fixes involve replacing `[!=]== undefined` with `[!=] null`
[09:15:49] <DaveMethvin> the issue with putting something like this in Migrate is that the warning doesn't go away if you do things right
[09:15:56] <markelog> is there like super-major bump? where we could do every thing we want?
[09:15:58] <markelog> )
[09:16:21] <DaveMethvin> screwYouQuery
[09:16:31] <gibson042> DaveMethvin: that's a good point
[09:16:46] <gibson042> markelog: major is the limit
[09:16:52] <arthurvr> That would actually be an awesome release, though :D
[09:16:59] <gibson042> semver treats all backwards incompatibility equally
[09:16:59] <timmywil> markelog: yes and no. It is a major version bump, true, but I'd like like to weigh each breakage and decide whether it is worth it.
[09:17:04] <scott_gonzalez> gibson042: So the question is do we want to take a stand and say that you should never care about undefined vs. null in any code?
[09:17:07] <markelog> gibson042: Richard, i was joking )
[09:17:23] <scott_gonzalez> Because if we want to take that stance, then the search/replace is easy, which means the upgrade path is easy.
[09:17:34] <gibson042> no, I don't want to take that stand
[09:17:42] <DaveMethvin> i think we do care, it's got different meanings
[09:18:01] <DaveMethvin> so $().attr(anything) is undefined because there's no element
[09:18:02] <gibson042> but DOM bindings don't use undefined
[09:18:08] <scott_gonzalez> Right, so then we're saying that if you want to upgrade to jQuery 3.0, you should check every instance of "[!|=]== undefined" in your code.
[09:18:11] <gibson042> like... ever
[09:18:16] <DaveMethvin> but $(elem).attr(anything) should be null
[09:18:26] <markelog> i'd say we don't know if it's right thing to do, but we want to be consistent with the spec
[09:18:52] <DaveMethvin> but in reality most jquery users don't care about the spec and have only been working with what we returned
[09:19:03] <gibson042> yeah
[09:19:11] <markelog> DaveMethvin: yep
[09:19:12] <scott_gonzalez> I understand the motivation behind the change. I'm not strongly opposed to the change.
[09:19:18] <gibson042> I don't feel terribly strongly about this either
[09:19:21] <timmywil> the value just isn't high enough in this case
[09:19:22] <scott_gonzalez> The question is just do we think the value outweighs the pain for end users tracking down what code needs to be changed.
[09:19:35] <DaveMethvin> and i think the answer there is yes, high pain low gain
[09:19:50] <DaveMethvin> ugh
[09:19:55] <DaveMethvin> to be clear, i think we should back it out
[09:20:10] <DaveMethvin> i'm not typey enough today
[09:20:21] <timmywil> typey-wimey
[09:20:25] <timmywil> boom, Doctor Who reference
[09:20:30] <markelog> ))
[09:20:42] <timmywil> ok, so, beta release
[09:20:48] <timmywil> Dave has the blog post started
[09:20:58] <timmywil> link is in the agenda
[09:21:18] <timmywil> have a look at it and tell Dave all the mistakes he made and how bad he is
[09:21:54] <DaveMethvin> give it to me straight
[09:21:56] <DaveMethvin> :)
[09:22:09] <DaveMethvin> everybody shoudl have comment
[09:22:44] <timmywil> for migrate, I think we're doing very well staying on top of stuff. I'm just leaving that note in there to remind us every week.
[09:23:28] <DaveMethvin> yeah i am working on the remaining prs today
[09:23:53] <timmywil> Next is Sizzle. gibson042 has a shiny PR to address the oldIE cache cloning issue without expsosing the expando.
[09:24:14] <markelog> didn't have the chance to look at it, but it sounds awesome!
[09:24:59] <timmywil> So the question is, is it ready to land?
[09:25:05] <timmywil> and can we release Sizzle this week?
[09:25:17] <gibson042> we can definitely release Sizzle this week
[09:25:23] <markelog> when?
[09:25:26] <timmywil> awesome!
[09:25:28] <gibson042> that PR is ready now, assuming everyone is cool with it
[09:25:33] <m_gol> what about dropping older browsers in Sizzle? do we want it before the beta?
[09:25:42] <gibson042> no, not before the beta
[09:25:44] <timmywil> m_gol: we're waiting on that
[09:26:01] <m_gol> just doing it later or waiting for a final decision?
[09:26:08] <timmywil> doing it later
[09:26:17] <DaveMethvin> i'm interested in how much of a perf advantage you get with the cache, esp if it simplifies and shrinks code ... but that's for another issue i guess
[09:26:18] <m_gol> k
[09:26:41] <markelog> timmywil: support list would be more like jQuery one?
[09:26:49] <timmywil> DaveMethvin: yea, gibson042 and I were talking about the same thing. I think he's right that it helps a lot for certain cases
[09:26:52] <markelog> when Sizzle release is sheduled?
[09:27:04] <timmywil> but I'm not sure we have actual perf tests available
[09:27:19] <gibson042> I'll shoot for late Thursday (EDT)
[09:27:32] <timmywil> markelog: right, it would match the jQuery list
[09:28:15] <markelog> cool, will try to check out the pr tomorrow
[09:28:38] <gibson042> I want to slip in https://github.com/jquery/sizzle/issues/322 (restoring ".className" selectors for SVG) and _maybe_ cache setDocument data
[09:29:11] <DaveMethvin> good idea since that's a regression
[09:29:12] <timmywil> that would be great, but not blocking
[09:29:16] <gibson042> correct
[09:29:43] <m_gol> markelog timmywil: rather compat than 1
[09:30:27] <timmywil> m_gol: right
[09:30:29] <m_gol> i.e. IE6/7 are out
[09:30:47] <markelog> m_gol: node support is still there
[09:30:55] <markelog> )
[09:31:09] <markelog> so in the middle between the compat and master )
[09:31:15] <m_gol> so compat + master ;)
[09:31:16] <m_gol> nvm
[09:31:28] <timmywil> yea, pretty much
[09:32:51] <timmywil> For the iOS bug, it looks like webkit mixed up greater than and right shift and has fixed it, but we're still going to do a patch.
[09:33:29] <timmywil> I'll put in a fix this week.
[09:34:23] <DaveMethvin> anything else that should go into the release that's a similar low-risk item?
[09:34:24] <timmywil> Is there anything else that needs to go in?
[09:34:31] <DaveMethvin> jinx!
[09:34:40] <DaveMethvin> prob not too much since we did one in December
[09:35:07] <DaveMethvin> there was some discussion on that ajax cross-domain detection code timmywil
[09:35:14] <m_gol> we're doing beta soon anyway, let's not backport anything not critical ;)
[09:35:26] <DaveMethvin> yeah
[09:35:40] <markelog> agreed
[09:35:49] <DaveMethvin> we can always do another small patch to 1.x/2.x if we need to
[09:36:16] <timmywil> DaveMethvin: true, but I didn't think that was a blocker. Do you think that should go in?
[09:36:31] <DaveMethvin> i don't think it's a blocker but it is security related
[09:36:43] <timmywil> I should probably open an issue for that
[09:37:04] <DaveMethvin> i think we were keeping it relatively low key due to the security issue
[09:37:19] <DaveMethvin> there was a ticket and pr for the change and it's in 3.0 already
[09:37:42] <DaveMethvin> the worry was about compat issues that might arise
[09:37:48] <timmywil> oh, I'm thinking of another issue
[09:38:07] <timmywil> that same origin check for Safari 8.0.3
[09:38:25] <m_gol> DaveMethvin talks about "a" (to sound cryptic), right?
[09:38:27] <gibson042> https://github.com/jquery/jquery/commit/b635ee2d36f2ace7a75239de859da9fd777aa0cd
[09:39:20] <DaveMethvin> well it was originally supposed to simplify the url parsing, but in the end a bunch of IE bugs caught up to it and i think it wasn't simpler
[09:39:31] <DaveMethvin> but it was more secure for determining cross domain
[09:40:05] <timmywil> I'm confused as to why this is a security issue. If we incorreclty determine whether it is cross-domain, wouldn't the browser throw an error?
[09:40:06] <gibson042> I do see some candidates in https://github.com/jquery/jquery/commits/compat?page=2
[09:40:16] <scott_gonzalez> I've spent so many hours dealing with location object bugs over the years in the tabs widget.
[09:40:22] <DaveMethvin> https://github.com/jquery/jquery/issues/1875
[09:40:52] <DaveMethvin> lots of followup commits and patches in the PR https://github.com/jquery/jquery/pull/1880
[09:41:01] <DaveMethvin> and the one gibson042  was yet another one
[09:41:38] <gibson042> $.when callbacks order: https://github.com/jquery/jquery/commit/efb98f85bab7f2ec9f38d6991d7b1bc683a514ce
[09:41:38] <gibson042> drag as MouseEvent: https://github.com/jquery/jquery/commit/5b0b1b77dbc41c144959ef2fe8de603555beb39b
[09:41:38] <gibson042> Callbacks fixes: https://github.com/jquery/jquery/commit/f5a8c649b54e8b7fde6253bd56972347f9bbe012, https://github.com/jquery/jquery/commit/fc7477f4927100f23f83c22b5142a42d1eac8502
[09:41:38] <gibson042> tag-hyphenated elements: https://github.com/jquery/jquery/commit/f19595cef4a01d52ade451e90b0a1d2ceb5afe43, https://github.com/jquery/jquery/commit/5d522f5c740f1f919a630a5f6ec3d40fad840ff7
[09:41:55] <scott_gonzalez> DaveMethvin: So it's only looking at protocol and host?
[09:42:13] <timmywil> hostname and port
[09:42:15] <DaveMethvin> scott_gonzalez: no it's looking at port as well
[09:42:35] <DaveMethvin> the mouseevent for drag would be safe to add
[09:42:56] <scott_gonzalez> Yeah, that's included in host.
[09:43:17] <scott_gonzalez> You should be safe from most of the bugs if that's all you're looking at.
[09:43:47] <DaveMethvin> there are a bunch of ie strange things but i think they all have Support comments
[09:44:06] <timmywil> so, all of this seems like too much to add to the patch.
[09:44:12] <scott_gonzalez> Maybe you can use origin at some point :-)
[09:44:41] <DaveMethvin> https://github.com/jquery/jquery/blob/b091fdbafac33123cba329e6bb48b9281323ca38/src/ajax.js#L515
[09:45:53] <gibson042> it feels like a matter of taste... we know what we *must* include; https://github.com/jquery/jquery/compare/compat@%7B2014-12-17%7D...compat is a strict superset of what we *can* include
[09:46:38] <DaveMethvin> it's definitely not critical, and if there's any concern about those we should just wait and reveal them in 3.0
[09:46:48] <gibson042> agreed
[09:47:00] <timmywil> +1
[09:47:57] <timmywil> So, we'll stick with fixing the iOS bug in the patch
[09:48:29] <timmywil> Someone kindly added https://github.com/jquery/jquery/issues/2177 to the agenda
[09:48:49] <m_gol> me
[09:48:50] <timmywil> using the right setTimeout is hard
[09:49:12] <DaveMethvin> i think Firefox should fix that :)
[09:49:19] <m_gol> my position is at https://github.com/jquery/jquery/issues/2177#issuecomment-87398613
[09:49:39] <m_gol> i.e. since we allow people to pass their own window, we should take setTimeout from there if it's there
[09:49:43] <m_gol> we're inconsistent
[09:49:54] <markelog> DaveMethvin: that would be against their policy for sdk (
[09:50:13] <markelog> m_gol: or just don't use window
[09:50:23] <DaveMethvin> if we take setTimeout from window how might that affect node, where window is fake?
[09:50:26] <m_gol> markelog: what do you mean?
[09:50:37] <m_gol> DaveMethvin: what do you mean?
[09:50:43] <markelog> just like now )
[09:50:51] <m_gol> DaveMethvin: jsdom does define its own window.setTimeout
[09:50:58] <DaveMethvin> oh, ok
[09:51:03] <DaveMethvin> that's what i wondered
[09:51:07] <m_gol> it basically invokes the global one but has a hook that on window.close() cancels all pending timeouts
[09:51:19] <DaveMethvin> oh yeah that was discussed
[09:51:20] <m_gol> so it would be more correct to use that instead of the global one
[09:51:22] <gibson042> I agree with m_gol on principle, but am only in favor of fixing this edge case if it looks allright in practice
[09:51:41] <markelog> gibson042: same position
[09:51:45] <DaveMethvin> the only way we ever know if it looks ok in practice is to ship it :)
[09:51:45] <m_gol> I can try to prepare an acceptable patch, following various suggestions near the end of the thread
[09:52:10] <m_gol> btw
[09:52:16] <m_gol> we're still not testing our factory in the intro
[09:52:17] <m_gol> at all
[09:52:23] <m_gol> that is more important to fix
[09:52:23] <timmywil> m_gol: that would be good. Would probably easier to make a decision if we see some code in action.
[09:52:25] <m_gol> and now we can
[09:52:43] <m_gol> in Node
[09:53:01] <DaveMethvin> sounds like a good idea!
[09:53:15] <m_gol> so I'd start with writing some tests for existing assumptions and then go to the mentioned issue
[09:53:22] <m_gol> I'll create an issue
[09:53:29] <timmywil> m_gol: well, we sort of do with the node smoke test
[09:53:41] <m_gol> timmywil: yes, but only one of the scenarios
[09:53:44] <gibson042> I'm all for making it more complete
[09:53:53] <timmywil> m_gol: true
[09:54:06] <timmywil> yea, it would be good to add
[09:54:54] <timmywil> so yea, let's get a PR going and keep thrashing
[09:55:01] <m_gol> https://github.com/jquery/jquery/issues/2181
[09:55:34] <timmywil> m_gol: thanks
[09:56:09] <timmywil> We can get through PRs real quick. Just 2 I want to mention. I think https://github.com/jquery/jquery/pull/2154 (jsdom) is ready to land
[09:56:18] <m_gol> k, will do
[09:56:27] <timmywil> and DaveMethvin, any reason we can't land https://github.com/jquery/jquery/pull/2003 ?
[09:56:40] <DaveMethvin> it's ready, i can land it
[09:56:51] <timmywil> cool
[09:57:02] <timmywil> thanks everybody!
[09:57:09] <markelog> see ya!
[09:57:10] <DaveMethvin> later!
[09:57:16] <m_gol> cu
