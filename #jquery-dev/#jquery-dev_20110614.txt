[05:20:40] <KanKouni> hello
[05:20:47] <KanKouni> if i'm loading a page $("#div").load("path/page.html"); , how can i make sure if its already loaded or not
[08:18:01] <ben_alman> here's my #1 issue with the commonjs spec
[08:18:14] <rpflo> lemme guess!
[08:18:28] <ben_alman> and i'm not sure if commonjs can be made to work with the plugin site requirements
[08:18:37] <ben_alman> but a repo can have multiple plugins inside of it
[08:18:37] <voodootikigod> too common?
[08:18:47] <rpflo> You can't define more than one "script" or "plugin", drives me nuts too.
[08:18:53] <ben_alman> so the .json metadata file i use should be able to describe one or more plugins
[08:19:13] <ben_alman> commonjs assumes it's describing a single thing with sub-assets
[08:19:14] <voodootikigod> ben_alman: have you seen this: https://github.com/isaacs/npm/blob/master/doc/json.md
[08:19:26] <ben_alman> voodootikigod, yes, i've been over it a bunch
[08:19:28] <voodootikigod> thats izs descrip of how npm liberally used the spec
[08:19:50] <ben_alman> yes, and overall i like npm package.json structure
[08:19:54] <ben_alman> and keys, etc
[08:19:57] <ben_alman> it seems practical
[08:19:58] <rpflo> can also type `npm help json` in the terminal to get that doc
[08:20:10] <voodootikigod> re: describing single thing
[08:20:17] <voodootikigod> confused of how that is an issue?
[08:20:22] <ben_alman> but it still doesn't help me with the situation where multiple plugins need to be described
[08:20:44] <ben_alman> every time i've ever seen package.json or the like, it's basically one package per repo
[08:20:51] <ben_alman> at the root level of said repo
[08:21:04] <ben_alman> but what happens when you have 2 jQuery plugin in one repo
[08:21:10] <rpflo> the npm implementation requires  "main" script, that maps to `require("foo")` ... I want to be able to have one repo, one package.json, and be able to require multiple scripts.
[08:21:13] <ben_alman> or 8?
[08:22:02] <ben_alman> so this is my first brick wall i'm up against
[08:22:32] <ben_alman> i could do this: { "plugin1name": {...plugin1data...}, "plugin2name": {...plugin2data...} }
[08:22:42] <ben_alman> but that's a total departure from the spec
[08:22:51] <voodootikigod> sorry working so I am back and forth on attention
[08:22:54] <ben_alman> having separate .json files could get really messy too
[08:22:55] <ben_alman> np
[08:23:19] <voodootikigod> why would you ever have 2 plugins ina repo that aren't namespaced?
[08:23:23] <voodootikigod> give me an example
[08:23:31] <ben_alman> jquery ui
[08:23:35] <ben_alman> there are a bunch of plugins
[08:24:04] <ben_alman> i'm working on a deparam plugin, it has a core "deparam" with just $.deparam and then some extras "deparam plus" that depend on deparam that add a bunch of other $.whatev methods
[08:24:14] <voodootikigod> var jqui = require("jqui").calendar
[08:24:16] <voodootikigod> ok
[08:24:16] <ben_alman> so there will be 2 plugins, deparam and deparam plus
[08:24:22] <ben_alman> most of the docs will be shared, tests, etc
[08:24:30] <ben_alman> but i need 2 separate distribution plugins
[08:24:34] <voodootikigod> is the desire to allow all download
[08:24:38] <voodootikigod> or all and single
[08:24:49] <ben_alman> well, to allow 2 separate plugins to be downloaded
[08:25:03] <ben_alman> but to make it sane to develop, they sohuld both be in the same repo
[08:25:38] <voodootikigod> it used to be in npm
[08:25:41] <voodootikigod> but i believe izs removed it
[08:25:45] <voodootikigod> that you could do top dir
[08:25:46] <ben_alman> and ideally, in an arbitrary directory structure
[08:25:51] <voodootikigod> and have a package.json there
[08:25:53] <voodootikigod> and sub dirs
[08:25:53] <ben_alman> ok
[08:25:58] <voodootikigod> with package.json in each
[08:26:05] <ben_alman> hmmn
[08:26:07] <voodootikigod> and you could then have it like
[08:26:08] <voodootikigod> jqui
[08:26:12] <voodootikigod> and jqui/calendar
[08:26:16] <voodootikigod> as the naming
[08:26:27] <voodootikigod> and the toplevel is just a dependency tree on the other two
[08:26:30] <voodootikigod> err
[08:26:34] <voodootikigod> other sub dirs
[08:26:51] <ben_alman> interesting
[08:27:01] <ben_alman> lots to parse
[08:27:02] <voodootikigod> https://github.com/mikeal/node-utils
[08:27:06] <voodootikigod> used to be the "example" of it
[08:27:13] <voodootikigod> mikeal was a champ of that model
[08:27:34] <voodootikigod> see i am not just a boozehound :)
[08:27:39] <ben_alman> heh
[08:27:39] <voodootikigod> i haz knowledge
[08:28:02] <ben_alman> ok, so that's interesting
[08:28:14] <ben_alman> would the root level package.json point to the other ones?
[08:28:52] <voodootikigod> yea
[08:29:06] <voodootikigod> and then you essentially handle versioning at each level
[08:29:09] <voodootikigod> i gotta run
[08:29:11] <voodootikigod> be back in 30
[08:29:11] <ben_alman> cya
[08:29:15] <ben_alman> k thx
[08:31:09] <rpflo> ben_alman: the sub directories thing w/ a package.json is what I was showing you at TXJS, it's a lot of package.json though!
[08:31:27] <ben_alman> yeah
[08:31:33] <ben_alman> and it assumes a directory structure
[08:31:37] <ben_alman> which kinda sucks
[08:31:49] <ben_alman> plus it's a lot more parsing
[08:32:21] <ben_alman> and doesn't allow shared data between plugins, like author or whatever. each would be totally separate
[08:32:24] <ben_alman> still, it's not a bad idea
[08:39:34] <rpflo> ben_alman: Agree with everything you just said :)
[08:40:51] <ajpiano> i'm into not assuming directory strucutre or a lot of duplicative information in many separate packages
[08:41:42] <ajpiano> especially if it's just for parity with a spec for something that is always going to be slightly different than what we're trying to do with jq plugins
[08:46:15] <ben_alman> i'm just trying to explore every possiblity so we can make a super-educated decision
[08:51:48] <rpflo> ben_alman: I think following a spec is a good idea so that the code can be used/built in different environments.  If I follow the CommonJS spec, or NPM's implementation of it, then I increase the chances that I can build/use my script with other tools.  The only question is, what's the cost?
[08:52:09] <ben_alman> yeah
[08:52:17] <ben_alman> but how hard is it to build an adapter to an existing tool
[08:52:40] <ben_alman> also, what's the use case for using this in a pre-existing tool that's clearly doing something different?
[08:52:57] <ben_alman> what would a pre-existing tool DO with a 2-plugin repo?
[08:54:16] <ajpiano> yeah - and if we're providing a simple build tool for plugins that does it "right" why would you use another tool ?
[08:54:33] <rpflo> This is a bit janky, I know, but the case with NPM:  If jquery-ui had a directory for every plugin with a package.json, you just write a script that publishes each folder as a separate module, NPM doesnt know about the repo, just the module.
[08:55:18] <ajpiano> uch, i really need to bone up on my npm knowledge
[08:56:29] <rpflo> I was telling ben that I'm about 30 minutes away form having all of jquery-ui published on npm and buildable with ender's cli, for nothing more than a proof-of-concept and a way for me to script my jq builds :)
[08:56:42] <ajpiano> woahhh
[08:57:00] <rpflo> actually, i'm 'a do it this morning.
[09:11:19] <rpflo> ajpiano, ben_alman: I lied, I was only 5 minutes away from it, screen cast coming
[09:13:33] <ajpiano> uch, liar.
[09:16:59] <rworth> 5 minutes are officialy up
[09:18:48] <rpflo> rworth: phone :( ... anyway, it's uploading now :)
[09:19:02] <rpflo> http://screencast.com/t/8v0Dn0vOdn
[09:19:04] <rworth> :)
[09:19:12] <rpflo> ajpiano: ben_alman video is up
[09:19:21] <ben_alman> ok guys, i just posted a long message to the plugins team group
[09:19:48] <ajpiano> watchin rpflo
[09:21:12] <ben_alman> hmmn... my thing uses static lists of files to build
[09:21:27] <ben_alman> so like, for a plugin it needs x, y, z assets
[09:21:47] <rworth> rpflo: no css?
[09:21:50] <ben_alman> if you wanted to "add" something, you'd need to modify plugin.json
[09:22:03] <rpflo> ben_alman: yeah, not sure what to do about the assets yet, but jquery.ui scripts are totally buildable with ender as of right now.
[09:22:18] <ben_alman> right, you just need a whole ton of package.json files?
[09:22:33] <rpflo> one for each script yeah
[09:22:40] <ben_alman> rpflo, https://github.com/cowboy/node-jqbuild
[09:23:09] <rpflo> ben_alman: :D  awesome
[09:23:11] <ben_alman> mine is more about creating specific plugins and not creating a totally configurable build process
[09:23:20] <ben_alman> so they do quite different things, i think
[09:23:55] <ben_alman> but it would be easy to creat your own "custom" plugin in plugin.json that includes all the stuff you care about
[09:23:59] <ben_alman> then build that
[09:24:08] <ben_alman> actually, you can specify your own plugin.json as well
[09:24:14] <ben_alman> and build all the things in just that file
[09:24:46] <ben_alman> so you could concat a bunch of things into one .js to make your own custom build :)
[09:24:49] <rpflo> ben_alman: That's my point about following the spec, multiple tools can use the package.json--I have no idea what the right answer is though.
[09:25:15] <rpflo> well, attempting to follow the spec, as much as you can
[09:25:30] <rpflo> I'm super stoked for your tool though, can't wait to use it
[09:26:01] <ben_alman> rpflo, unfortunately, main doesn't really account for a minified file name
[09:26:59] <ben_alman> and how do you define that a script has multiple source files?
[09:27:07] * ben_alman is unfamiliar
[09:29:59] <rpflo> In the end I'm fairly pragmatic.  I think you should follow the spec where you can, and then add to it.  Like we were talking about before, define a bunch of packages in one package.json with the keys for the names, like you had.
[09:30:27] <rpflo> and then be really noisy about what you need out of the spec
[09:34:16] <ajpiano> the big plus to staying as close to the spec as possible is avoiding a bunch of whiners whining about those stupid jQuery clods just coming up with their own thing and not following along with the tide of commonjs/npm
[09:34:33] <ajpiano> and assuming the worst about our motives
[09:35:12] <ajpiano> ok meeting times for me
[09:44:48] <ben_alman> i plan on using this for non-jquery projects, since it's just a build tool really
[09:45:07] <ben_alman> so the more jquery-agnostic i can be, the better
[09:45:35] <ben_alman> the only thing in my code right now that even mentions jquery is the global var i allow in jshint, 'jQuery'
[09:45:40] <ben_alman> and the name of the tool
[09:46:01] <ben_alman> change that and you could build any client-side javascript
[09:47:18] <ben_alman> i like the name jqbuild tho, i have nothing else in my shell that starts with jq so it completes easily
[09:48:16] <rpflo> why not ☃build? I'm sure nothing starts with ☃ in your shell.
[09:48:29] <ben_alman> heh
[09:48:40] <rworth> why not just ☃?
[09:49:26] <ben_alman> rpflo, in case you want to follow along http://groups.google.com/group/jquery-plugins-team/browse_thread/thread/8f559bd79ec5c70a
[09:49:30] <ben_alman> i think you can see that thread
[09:49:42] <ben_alman> there are other germane posts in that group about the plugin.json spec
[09:50:27] <rpflo> ben_alman: I can, thanks.  I've been battling this myself for months now trying to decide what to do.
[09:50:33] <ben_alman> ok
[09:50:43] <ben_alman> well your input might help us out so feel free to poke around
[11:15:09] <jami> anyone feel like reviewing a bugfix for ajax.js?
[11:15:39] <jami> with corresponding unit test :)
[11:48:24] <ben_alman> ajpiano, sam and i just had a super long conversation about how plugin.json, now package.json can't have multiple plugins in it
[11:48:29] <ben_alman> /cc rworth
[11:49:12] <ajpiano> care to bring me up to speed
[11:49:19] <ajpiano> i'm stil trying to to read his reply and your e-mail
[11:51:24] <ajpiano> ok now i'm caught up
[11:51:31] <ajpiano> except for whatever you guys just talked about
[11:52:18] <ben_alman> my head fucking hurts
[11:53:55] <ben_alman> long story short: my tool is reinventing the wheel, we should use make. front end developers have no idea what they're doing, and everything should be left to the engineers. having more than one plugin in package.js is a bad thing
[11:54:04] <ben_alman> er package.json
[11:54:24] <ben_alman> let's see, what else have i missed?
[11:54:40] <ben_alman> dunno.. my head hurts
[11:54:50] <ben_alman> not really looking forward to rewriting my shit
[11:57:42] <rpflo> ben_alman: I missed something, sounds like you've 180'd, what happened?
[11:57:53] <ben_alman> sam talked to me
[11:57:56] <ben_alman> he makes a lot of sense
[11:58:02] <ben_alman> but it's too much information for me to process
[11:58:11] <ben_alman> i feel like taking a week off from programming now
[11:58:18] <ben_alman> he wasn't condescending to me, specifically
[11:58:21] <ben_alman> just in general i think
[11:58:28] <ben_alman> it was hard to deal with
[11:58:47] <rpflo> well, when your head clears, I'd like to hear what you plan to do.
[11:59:26] <ben_alman> woll let's take a step back
[11:59:35] <ben_alman> any tag on a repo is for the whole repo
[11:59:48] <ben_alman> so you tag the repo 1.0.0 and everything in that repo is version 1.0.0
[12:00:02] <ben_alman> there's no room for multiple plugins in a repo to be at different versions, right?
[12:00:08] <ben_alman> can we agree on that at least?
[12:00:18] <rpflo> yeah, that's been my biggest struggle, actually.
[12:00:26] <ben_alman> ok, so now that we're agreed on that
[12:00:27] <jami> if anyone feels like fixing a bug in ajax.js; https://github.com/jquery/jquery/pull/411
[12:00:34] <ben_alman> we have a few options
[12:01:29] <ben_alman> a plugin's package.json file describes 1) a single plugin, or 2) a "plugin suite"
[12:01:52] <ben_alman> a plugin suite would be a collection of sub-plugins where each plugin takes on the version # of the entire suite
[12:02:10] <rpflo> MooTools more does that, and it's awful.
[12:02:15] <ben_alman> the package.json file would describe a SINGLE entity
[12:02:23] <ben_alman> like commonjs or npm specs
[12:02:46] <ben_alman> now, a plugin suite could contain multiple distribution files
[12:02:47] <ben_alman> for example
[12:02:51] <ben_alman> say you have a suite
[12:04:43] <ben_alman> { "name": "jquery-ui", "dist": { "jQuery UI Accordion": { "dev": "dist/ui-accordion.js", "prod": "dist/ui-accordion.min.js" }, "jQuery UI Tabs": { "dev": "dist/ui-tabs.js", "prod": "dist/ui-tabs.min.js" }, ... } }
[12:04:46] <rworth> I just read Sam's email
[12:04:56] <rworth> I've actually been having similar thoughts of late
[12:05:12] <timmywil> .
[12:05:29] <rworth> not quite to the level of like "let's break UI into 20 repos, one for each widget" but you know, sanity for the general case
[12:05:29] <ben_alman> you could have a totally separate build process but the actuall distribution files could be split up into all the sub-plugins of the suite
[12:05:45] <ben_alman> like in my json above
[12:06:00] <rpflo> That's not awful
[12:06:07] <ben_alman> but i kinda wish sam was looped in on this stuff 8 months ago
[12:06:15] <ben_alman> because we've had a LOT of talks about this
[12:06:18] <rworth> yeah
[12:06:23] <ben_alman> and he could've saved us (me) a LOT of effort maybe
[12:06:27] <rworth> :)
[12:06:45] <rpflo> bb 20min
[12:15:07] <ajpiano> ben_alman, it is what it is, i think you still probably got a lot of learning out of it
[12:15:25] <ben_alman> it was just time spent tbh
[12:15:41] <ajpiano> at least we're all having the discussions
[12:15:56] <ben_alman> yay for that
[12:16:06] <ben_alman> i responded to the thread with an alternative format
[12:17:51] <ajpiano> i think that maintaining a single version number across all plugins in the repo is definitely wise
[12:18:08] <ben_alman> so you only want to consider situations in which that makes sense
[12:18:19] <ben_alman> anything other than that, like my "misc plugins" repo is a bad idea
[12:18:38] <ben_alman> it really needs to be one plugin per repo where a plugin can have variants
[12:18:44] <ben_alman> like deparam and deparam+
[12:18:59] <ben_alman> but i don't know how that works with jquery ui
[12:28:27] <timmywil> was anyone wanting to get anything in before 1.6.2rc?
[12:35:30] <rwaldron> timmywil would be nice to do or die on the withinElement re-write
[12:36:35] <rwaldron> Especially considering the "document is the related target because xul is dumb" bug no longer exists in new versions of Firefox
[12:36:57] <rwaldron> and it appears to only go as high as document.body anyway
[12:37:15] <timmywil> ok, I think we can land taht
[12:38:14] <rwaldron> ok, so that also clears abunch of garbage from the PR queue
[12:38:21] <rwaldron> 2 others can go
[12:38:32] <rwaldron> or wait, maybe only one other
[12:38:52] <rwaldron> yeah this one: https://github.com/jquery/jquery/pull/395 can be closed
[12:39:56] <rwaldron> i believe it also closes this one: https://github.com/jquery/jquery/pull/364
[12:40:13] <timmywil> testing
[12:40:42] <rwaldron> cool cool
[12:40:58] <rwaldron> not mine, but this one is harmless and can easily land; https://github.com/jquery/jquery/pull/410
[12:41:25] <rwaldron> this one is mine, but is also harmless: https://github.com/jquery/jquery/pull/409
[12:41:51] <rwaldron> jaubourg should review the new ajax related patch
[12:41:59] <rwaldron> but it also appears straight forward
[12:42:16] <rwaldron> i reviewed and had the OP make some code cleanup changes
[12:42:22] <jqcommit> [jquery] timmywil pushed 1 new commit to master: http://bit.ly/mpHjVV
[12:42:22] <jqcommit> [jquery/master] Landing pull request 397. withinElement rewrite in event. Fixes #6234, #9357, #9447.... - rwldrn
[12:48:13] <timmywil> rwaldron: I think 364 might still apply
[12:48:22] <timmywil> it's in liveHandler
[12:48:36] <rwaldron> yeah i wasnt 100%
[12:48:52] <rwaldron> i gave it it a cursory glance
[12:49:14] <timmywil> I'm not sure I like it though
[12:50:22] <timmywil> adding a contains call outside of the mouseenter/mouseleave if doesn't seem right
[12:51:27] <rwaldron> looking
[12:51:41] <jqcommit> [jquery] timmywil pushed 1 new commit to master: http://bit.ly/lHqAbT
[12:51:41] <jqcommit> [jquery/master] Landing pull request 410. Moves jQuery attachment comment to outro.... - Greg Hazel
[12:53:01] <rwaldron> timmywil on first read through, this feels like a place where we could clean up and dry out
[12:53:05] <rwaldron> i maye be wrong
[12:56:25] <timmywil> not sure, I'm not so familiar with the namespace testing, but the rest looks necessary to me.  matches selector, checks for disabled, extra child checking for mouseenter/mouseleave, then add the elems
[12:56:35] <timmywil> but i generally leave the event stuff to smarter people ;)
[13:00:05] <rwaldron> I think you're on the ball with it
[13:00:20] <rwaldron> i was just letting my imagination get the best of me
[13:01:22] <jqcommit> [jquery] timmywil pushed 1 new commit to master: http://bit.ly/kj8IfH
[13:01:22] <jqcommit> [jquery/master] Landing pull request 409. Adds fillOpacity to internal cssNumber. Fixes #9548.... - rwldrn
[13:02:35] <jqcommit> [jquery] timmywil pushed 1 new commit to master: http://bit.ly/jN1G5T
[13:02:35] <jqcommit> [jquery/master] Landing pull request 378. Comment typo in core.js.... - Schalk Neethling
[14:16:15] <kinblas> anyone available to answer a liveHandler question?
[14:16:54] <kinblas> I'm trying to figure out why $(document).live("mobileinit", function(){}); isn't firing in jQuery Mobile
[14:17:18] <timmywil> use bind
[14:17:23] <kinblas> and it looks like the closest() function in liveHandler is filtering out document
[14:17:44] <timmywil> there's no point to live if bound to the document
[14:18:10] <kinblas> true
[14:18:10] <gnarf> timmywil++
[14:18:56] <kinblas> timmywil: thanks ... that was a duh on my part
[14:19:16] <timmywil> kinblas: np ;)
[14:42:47] <eddiemonge> shadow: !!!collapsibleParent.length,  ? can someone explain the !!! to me?
[14:43:16] <gnarf> thats like two to many !
[14:44:14] <eddiemonge> thats what i thought but im wondering if theres some reason to use it like that that i dont know of
[15:04:25] <JohnResig> just released jQuery 1.6.2rc1:http://j.mp/jq162rc1
[15:05:58] <jqcommit> [jquery] jeresig pushed 1 new commit to master: http://bit.ly/ljnBgJ
[15:05:58] <jqcommit> [jquery/master] Updating version in release notes script. - John Resig
[15:06:44] <jqcommit> [jquery] jeresig pushed 1 new commit to master: http://bit.ly/ktxshD
[15:06:44] <jqcommit> [jquery/master] Re-updating QUnit, oops. - John Resig
[15:06:52] <timmywil> hehe
[15:07:04] <timmywil> also, 1.6.3pre
[15:07:26] <timmywil> JohnResig: ^
[15:08:54] <JohnResig> timmywil: what's up?
[15:09:04] <JohnResig> it's still 1.6.2pre
[15:09:11] <JohnResig> until we release 1.6.2, then it's 1.6.3pre
[15:09:21] <timmywil> right
[15:09:26] <timmywil> my bad
[15:09:43] <timmywil> so used to seeing the next pre
[15:30:13] <gnarf> JohnResig: any thoughts on how long we should let color sit in "beta"?
[15:40:52] <eddiemonge> forever!
[20:42:29] <danheberden> gnarf https://github.com/harthur/color-convert
