[03:58:01] <Sinless> I'm trying to get the UI to display for qUnit. I have no other style on the page besides the qunit.css and I have added the div#qunit yet I get no ui
[03:58:05] <Sinless> can anyone help me?
[04:06:29] <Sinless> sorted it
[04:06:37] <Sinless> nuget packages are broken
[07:20:05] <DaveMethvin> looks like I'll miss the meeting, i won't be around until 12:30 or so. I got an agenda put together tho!
[07:43:11] <jqcommit> [13jquery] 15mariansollmann opened pull request #1411: Remove not needed assigning in 'traversing.js' (06master...06master)  02http://git.io/qvIQ2g
[08:38:04] <doesallmagic2> Project jQuery Migrate Core 1.x build #125: SUCCESS in 2 min 32 sec: http://jenkins.jquery.com/job/jQuery%20Migrate%20Core%201.x/125/
[08:40:26] <jqcommit> 01[13jquery01] 15gibson042 pushed 1 new commit to 06master: 02http://git.io/x0lvWw
[08:40:26] <jqcommit> 13jquery/06master 14ced9d15 15Richard Gibson: Fix #14459: Use jQuery.parseJSON instead of JSON.parse
[08:49:47] <doesallmagic2> Project jQuery Core build #978: SUCCESS in 9 min 34 sec: http://jenkins.jquery.com/job/jQuery%20Core/978/
[08:49:47] <doesallmagic2> richard.gibson: Fix #14459: Use jQuery.parseJSON instead of JSON.parse
[09:03:48] <doesallmagic2> Yippie, build fixed!
[09:03:49] <doesallmagic2> Project jQuery Core 1.x build #282: FIXED in 14 min: http://jenkins.jquery.com/job/jQuery%20Core%201.x/282/
[09:03:49] <doesallmagic2> richard.gibson: Fix #14459: Use jQuery.parseJSON instead of JSON.parse
[10:34:23] <jqcommit> 01[13jquery01] 15markelog pushed 1 new commit to 06master: 02http://git.io/IeLbwg
[10:34:23] <jqcommit> 13jquery/06master 14ebabb33 15Oleg: No ticket. Remove useless comment
[10:38:35] <markelog> timmywil ping
[10:39:49] <timmywil> woops, time flew by!
[10:41:21] <markelog> hey, about this bower thing
[10:41:41] <timmywil> sup
[10:41:45] <markelog> i was thinking we could use this bower task - https://github.com/yatskevich/grunt-bower-task
[10:42:17] <markelog> which would not break any conventions and let's remove bower from global dependency
[10:43:23] <markelog> and we could get dispose from paths like this ../bower_components/qunit/qunit/qunit.css
[10:43:32] <markelog> but
[10:43:37] <markelog> it turns out
[10:43:44] <markelog> https://github.com/jquery/jquery/pull/1408
[10:43:44] <b-ot> markelog: Pull request #1408 by sindresorhus (2d 23h ago): Add Bower as a devDependency instead of install script
[10:44:33] <timmywil> yea, I noticed that, but if we could specify file locations for each module separately, that would be nice
[10:45:19] <timmywil> s/module/component
[10:45:23] <markelog> we could do that and we could remove files that we do not need like "CONTRIBUTING.md" file from qunit repo
[10:46:24] <timmywil> I'm fine with doing that for components jQuery doesn't support, but QUnit should probably update its bower.json to exclude unneeded files
[10:47:48] <timmywil> ah, it does, but I guess it was decided Contributing.md should be included. That's ok, then. I'm fine excluding that ourselves.
[10:48:22] <markelog> so we go with grunt task?
[10:48:31] <timmywil> affirmative
[10:49:18] <markelog> i'm feel kinda bad about sindresorhus pull, cause this feature is kinda awesome too
[10:49:52] <doesallmagic2> Project jQuery Core build #979: FAILURE in 15 min: http://jenkins.jquery.com/job/jQuery%20Core/979/
[10:49:52] <doesallmagic2> markelog: No ticket. Remove useless comment
[10:50:14] <markelog> scott_gonzalez any thoughts about this?
[10:50:17] <timmywil> well, I imagine bower is a sub-dependency of grunt-bower-task, so we're still making use of it
[10:50:38] <timmywil> and we're getting more out of it
[10:50:43] <markelog> alrighty
[10:51:14] <markelog> i will close sindresorhus pull, if no one objects, and open my own
[10:51:58] <timmywil> markelog: The task should run on npm install. Also, in the same commit, we should probably have a script that checks that grunt works and suggests installing it before running the task.
[10:52:16] <timmywil> similar to the way we check for bower currently
[10:52:35] <markelog> right
[10:52:44] <timmywil> cool
[10:52:54] <scott_gonzalez> TBH, I don't really care. I find all of this Bower and AMD stuff to be silly.
[10:53:24] <timmywil> scott_gonzalez: you're silly
[10:54:10] <scott_gonzalez> We just keep adding more and more processes on top of stuff to make things "easier"
[10:55:06] <scott_gonzalez> It seems to me like customizing how Bower handles an install is just trouble waiting to happen.
[10:55:47] <timmywil> scott_gonzalez: the alternative is git submodules right? Nobody likes that.
[10:55:58] <scott_gonzalez> No, that's *an* alternative.
[10:56:59] <timmywil> suggestions?
[10:57:29] <scott_gonzalez> My suggestion is still the same as it's always been. Take five seconds to manually handle updates.
[10:57:42] <scott_gonzalez> At some point in the future, Bower will actually be useful.
[10:57:44] <scott_gonzalez> Presumably.
[10:57:51] <scott_gonzalez> Based on their roadmap.
[10:58:14] <scott_gonzalez> At that point, using it will make sense.
[10:58:24] <timmywil> I think a lot of people would disagree with you on how useful it is right now
[10:58:26] <scott_gonzalez> But if we're constantly changing stuff just to use Bower, I don't see what benefit we're really getting.
[10:58:37] <scott_gonzalez> Who's a lot of people?
[10:58:45] <scott_gonzalez> Users certainly aren't benefiting from it.
[10:58:46] <timmywil> bower users
[10:58:55] <timmywil> heh, well I am
[10:58:57] <scott_gonzalez> It literally only helps the person that decides to update a dependency.
[10:59:09] <scott_gonzalez> How are you as a user benefiting from jQuery internally using Bower?
[10:59:54] <timmywil> ah, you weren't talking about bower in general?
[11:00:29] <scott_gonzalez> No, I was talking about how we're using it, not in general.
[11:00:57] <scott_gonzalez> The amount of time we've spent discussing and implementating changes around Bower would probably cover the time for all dependency updates for the next 5 years.
[11:01:15] <timmywil> ah, well in that case, it's been useful for me in that Sizzle is always stable in the master branch
[11:01:58] <timmywil> although, we could have switched to checkout out tags with submodules, but it happened at the same time and was conveniently insured
[11:02:08] <scott_gonzalez> Is that because we're doing something terrible and using version ranges?
[11:02:33] <scott_gonzalez> version ranges = unpredictable future builds of past releases, rights?
[11:03:22] <timmywil> sry, I'm not sure what you mean
[11:03:41] <timmywil> the latest stable version of sizzle is the one we use
[11:03:45] <scott_gonzalez> jQuery is using Sizzle ~1.10.11
[11:04:02] <scott_gonzalez> If we tag 2.1.0 today.
[11:04:24] <timmywil> oh, I see, so 1.10.12 would be included because we're using ~
[11:04:32] <scott_gonzalez> yeah
[11:04:41] <scott_gonzalez> Building old versions of jQuery becomes unpredictable.
[11:04:53] <scott_gonzalez> This is something we avoided in the past by using explicit SHAs.
[11:04:54] <timmywil> while that's true, it's not what gets packaged
[11:05:27] <timmywil> since we will commit bower dependencies in the package
[11:05:58] <scott_gonzalez> package = tag or package = only something hosted on some service like Bower/npm?
[11:06:08] <timmywil> both
[11:06:38] <scott_gonzalez> So bower_components gets committed with the tag?
[11:06:42] <timmywil> yes
[11:07:04] <scott_gonzalez> That's new?
[11:07:19] <scott_gonzalez> As is this was added to the release process after the most recent beta?
[11:07:35] <timmywil> not really, but there hasn't been much discussion outside of the core team
[11:07:53] <scott_gonzalez> If it's not new, then it's broken.
[11:08:02] <scott_gonzalez> Because bower_components is not part of the tags.
[11:08:14] <timmywil> sry, it is new in terms of releases, but it's been talked about for a while
[11:08:26] <scott_gonzalez> ok
[11:11:09] <timmywil> i still need to update the release script for dave, but I have sample project on npm right now for the beta: https://npmjs.org/package/jquery-temp
[11:12:50] <scott_gonzalez> Is there a tag associated with that somewhere?
[11:14:18] <timmywil> no, but it would just be a matter of a headless commit published to NPM with the same contents as what is in that package.
[11:14:34] <timmywil> and that tag would act as the bower package as well
[11:20:32] <timmywil> I know seeing a 'bower_components' folder isn't the prettiest thing, but the grunt task for bower will customize our folder locations so sizzle could again go in the 'src' folder. Also, the built jquery files are there along with the source modules. The "main" in our package.json will be pointed at dist/jquery.js.
[11:22:10] <m_gol> so maybe we should just remove the ~ from Sizzle & QUnit version numbers?
[11:25:35] <timmywil> yea, that sounds fine to me
[14:54:31] <jqcommit> 01[13jquery01] 15gibson042 pushed 2 new commits to 06master: 02http://git.io/gUAL-g
[14:54:31] <jqcommit> 13jquery/06master 14f9d41ac 15Richard Gibson: Fix #14379: AJAX requests on unload
[14:54:31] <jqcommit> 13jquery/06master 14705216d 15Richard Gibson: No ticket: Small ajax/xhr size optimizations
[15:09:28] <doesallmagic2> Project jQuery Core build #980: STILL FAILING in 15 min: http://jenkins.jquery.com/job/jQuery%20Core/980/
[15:09:28] <doesallmagic2> * richard.gibson: Fix #14379: AJAX requests on unload
[15:09:29] <doesallmagic2> * richard.gibson: No ticket: Small ajax/xhr size optimizations
