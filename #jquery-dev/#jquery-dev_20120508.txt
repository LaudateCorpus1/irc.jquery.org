[02:41:24] <jq-jenkins> Yippie, build fixed!
[02:41:25] <jq-jenkins> Project QUnit build #119: FIXED in 2 min 46 sec: http://swarm.jquery.org:8080/job/QUnit/119/
[02:41:25] <jq-jenkins> joern.zaefferer: Update node-testswarm
[03:56:16] <joobie> hey guys.. is there an easy to use jquery module / code that can present a table with multiple columns, sortable when you click the header and an index at the bottom to allow for multiple pages?
[06:16:17] <jaubourg> DaveMethvin: so where IS the jQuery Training Center?
[06:16:19] <jaubourg> :P
[06:16:44] <DaveMethvin> it's a lovely place on the side of a mountain
[06:17:12] <DaveMethvin> OH NOES I DONT UNDERSTAND THINGS, YOU MUST CHANGE JQUERY
[06:17:21] <DaveMethvin> SO I DON"T SCREW UP AGAIN
[06:18:40] <jaubourg> haha
[06:19:50] <jaubourg> well, we can give sound development advises, you know: DON'T
[06:22:44] <DaveMethvin> hey rwaldron
[06:28:15] <rwaldron> DaveMethvin good morning
[06:28:15] <bot-t> (7 hours 3 mins 50 secs ago) <snover> tell rwaldron what the christ is this quasis? how is this different/better than invoking a function?
[06:28:28] <DaveMethvin> hey
[06:28:32] * rwaldron shudders
[06:28:56] <DaveMethvin> just cleaning off trac
[06:29:00] <rwaldron> cool
[06:29:02] <rwaldron> need help?
[06:29:07] <rwaldron> I like doing that
[06:29:49] <DaveMethvin> i think i just about got it done
[06:29:53] <rwaldron> nuts
[06:30:10] <rwaldron> DaveMethvin did you see this?
[06:30:10] <rwaldron> https://twitter.com/#!/rwaldron/status/199641806382698496
[06:30:11] <socialhapy> ★ Tweet from rwaldron: Thanks to the tireless efforts of @awbjs the latest ES.next draft is available! http://t.co/zNsDrxoP includes Array.of &amp; Array.from !!! ★ http://bit.ly/KChPjU
[06:30:13] <rwaldron> :D
[06:30:34] <DaveMethvin> nope, looks interesting
[06:30:38] <rwaldron> I wrote that
[06:30:40] <rwaldron> https://gist.github.com/1074126
[06:30:53] <rwaldron> and lobbied like a whoa
[06:31:12] <rwaldron> did an online survey, dave herman from mozilla presented the data at the last tc39 face-to-face
[06:31:54] <DaveMethvin> oooh, i like .from() and .of()
[06:32:33] <rwaldron> [].slice.call( arrayLike ) or Array.prototype.slice.call( arrayLike ) can be replaced with Array.from( arrayLike )
[06:32:49] <rwaldron> Array.of( 1 ) is the new Array(1) that never was
[06:33:07] <rwaldron> Array.of( 1, 2, 3, 4, 5, 6, 7 ) => [ 1, 2, 3, 4, 5, 6, 7 ]
[06:33:22] <rwaldron> it matches the rest operator
[06:33:42] <rwaldron> where Array.from( arrayLike ) matches the spread operator
[07:40:57] <socialhapy> ★ Tweet from jquerymobile: jQuery Mobile iScrollview, Version 1.1+ - nice iscroll plugin - https://t.co/UZrWpLr9 ★ http://bit.ly/JbzCdG
[11:49:39] <scott_gonzalez> jzaefferer: Any idea what's going on here? http://swarm.jquery.org/job/46
[12:35:46] <gibson042> .
[13:04:32] <scott_gonzalez> DaveMethvin: Stop cranking up the ticket count :-P
[13:04:42] <DaveMethvin> it's just a number!
[13:04:57] <DaveMethvin> plus we have to keep track of these somehow, think of how good it will look when i close them all
[13:05:14] <scott_gonzalez> Yeah, we've got a ton of these tickets in UI.
[13:05:32] <scott_gonzalez> For example: http://bugs.jqueryui.com/report/10?P=accordion
[13:06:07] <DaveMethvin> i just had a list sitting here and realized they all shoudl have tix before i started to mess with them
[13:06:17] <DaveMethvin> esp since it will be handy for the release notes
[13:06:41] <scott_gonzalez> yup
[13:06:50] <scott_gonzalez> Core should make a report like this: http://bugs.jqueryui.com/report/29
[13:08:30] <nacin> scott_gonzalez: oooh. can I have the SQL or trac language for that one/
[13:09:12] <scott_gonzalez> https://gist.github.com/50df26961aca251dc06a
[13:09:15] <danheberden> nacin http://pastebin.com/yZaNsHDb
[13:09:17] <danheberden> lol scott_gonzalez
[13:09:35] <nacin> nice. saves me a few minutes
[13:09:46] <DaveMethvin> yeah, i can hack my way on that
[13:09:49] <DaveMethvin> thanks scott_gonzalez
[13:10:08] <nacin> some of our reports are 100-150 lines of SQL. that isn't bad.
[13:10:28] <DaveMethvin> yeah that's downright readable
[13:10:30] <DaveMethvin> shame on you
[13:10:48] <scott_gonzalez> It took me forever to figure out that query.
[13:11:07] <scott_gonzalez> I think the COALESCE() and CONVERT() are what kept tripping me up.
[13:13:45] <DaveMethvin> right, i guess you wanted to see the category even if it had no bugs
[13:14:00] <DaveMethvin> but when the heck would that ever happen? doesn't sound like a real-life situation
[13:14:46] <DaveMethvin> could have just filed a placeholder ticket "10231: This ticket is to make Scott's report work"
[13:15:02] <scott_gonzalez> haha
[13:15:19] <scott_gonzalez> We actually have four components with 0 bugs :-)
[13:15:27] <scott_gonzalez> 2 are meta components, but still...
[13:15:32] <DaveMethvin> i hope one of them is progress bar
[13:15:36] <DaveMethvin> i mean, what could go wrong?
[13:15:45] <scott_gonzalez> Yeah, one is progressbar :-)
[13:15:51] <DaveMethvin> YES!
[14:15:37] <Krinkle> jzaefferer: Did you call me earlier? I was having connectivity issues with my irc client. I saw this tab light up but I couldn't get at it
[14:15:50] <Krinkle> (or someone else in this channel, over the last 10-20 minutes)
[15:11:12] <jzaefferer> Krinkle: I didn't, though now I did /o\
[15:11:53] <Krinkle> ok :)
[15:12:54] <jzaefferer> though while you're here, any idea what's going on here? http://swarm.jquery.org/job/46
[15:13:13] <jzaefferer> looks similar to the latest job, which is still in progress: http://swarm.jquery.org/job/57
[15:13:14] <Krinkle> what am I looking ofr
[15:13:28] <jzaefferer> the timeouts in IE6
[15:13:46] <jzaefferer> those tests were working earlier: http://swarm.jquery.org/job/54
[15:14:22] <Krinkle> timeout means the test took too long (test runner aborts iframe), or the browser crashed and the server determined timeout at some point.
[15:14:32] <Krinkle> dunno
[15:14:42] <jzaefferer> but those should rerun, right?
[15:14:46] <Krinkle> yep
[15:14:50] <Krinkle> and they will
[15:14:56] <Krinkle> but... they won;t
[15:15:07] <Krinkle> because testswarm-browserstack currently only needs IE6
[15:15:11] <Krinkle> so it keeps them running
[15:15:29] <Krinkle> which sounds good, but is bad for re-running, because re-runs require a different client id (e.g. a browser refresh or different client alltogether)
[15:15:44] <Krinkle> so it won't distribute it to the already connected client that ran the test
[15:16:14] <jzaefferer> oh, right
[15:16:23] <Krinkle> I discussed this with John Resig  the other day. I think we should keep that behavior and make testswarm-browserstack cycle terminate/start when only re-runs are left for a certain browser
[15:16:27] <jzaefferer> even though we get new browserstack clients every two minutes?
[15:16:42] <Krinkle> we don't get new clients every 2 minutes
[15:16:55] <Krinkle> if a browser is need for an hour it will stay on for an hour
[15:17:01] <jzaefferer> okay
[15:17:14] <jzaefferer> I obviously still don't really understand how testswarm-browserstack works
[15:17:16] <jzaefferer> need to fix that
[15:17:25] <Krinkle> or... well, except that we don't ping them so browserstack will probably kill them for timing out (browserstack-api-worker-timeout that is)
[15:17:32] <jzaefferer> its just… in the log I could see it shooting down IE6, while starting IE6
[15:17:34] <jzaefferer> etc.
[15:17:44] <Krinkle> yes, see previous line :)
[15:17:55] <jzaefferer> but the timeout is several minutes, isn't t?
[15:18:01] <jzaefferer> like 13 or something?
[15:18:01] <Krinkle> If the browserstack-api-worker-limit used is < 2 minutes, it will appear that way
[15:18:14] <jzaefferer> used?
[15:18:17] <jzaefferer> what do we use?
[15:18:26] <Krinkle> if you say so
[15:18:27] <Krinkle> it should be more than 2minutes
[15:18:30] <Krinkle>  no need to cycle vms all the time
[15:19:36] <jzaefferer> I wondering if its the browserstack default or if testswarm-browserstack is actually setting something
[15:20:24] <Krinkle> jzaefferer: tatb overload, I'm writing 12 comments on 3 different sites in 12 tabs. I need to finish this first.
[15:20:24] <Krinkle> brb
[15:21:04] <jzaefferer> looks to me like its all defaults
[15:22:08] <jzaefferer> I don't claim to understand what testswarm-browserstack actually does, but your description of the behaviour doesn't match with what I'm observing
[15:29:14] <jzaefferer> I'll try to dig into the code...
[15:29:47] <jzaefferer> Could try to add support for running reruns
[15:29:58] <jzaefferer> shouldn't be that much different from the changes I did in node-testswarm
[15:30:36] <jzaefferer> I'll be in Amsterdam tomorrow - Saturday (Mobilism on Thursday/Friday), so not sure if I'll get around to it this week
[15:31:08] <jzaefferer> scott_gonzalez: node-testswarm and testswarm-browserstack still have limitations regarding reruns, we're still working on that, details above...
[15:31:32] <jzaefferer> related: https://github.com/clarkbox/testswarm-browserstack/issues/14 and https://github.com/jzaefferer/node-testswarm/issues/3
[15:31:33] <socialhapy> ★ Issue #14 on testswarm-browserstack (Krinkle; 1w, 2h ago): Start workers for pending re-runs as well
[15:31:39] <Krinkle> (if you could hold on until I get my mess sorted)
[15:36:29] <Krinkle> k, done
[15:39:52] <jzaefferer> I need to get up rather early tomorrow for the train, but I can as well spare a few more minutes :-)
[15:40:14] <jzaefferer> working through emails, AGAIN
[15:40:21] <Krinkle> reading your irc stuff now
[15:41:45] <Krinkle> jzaefferer: the max and default timeout in browserstack/api is 1,800 seconds (timeout=30) - timeout is in minutes in thte API
[15:41:46] <Krinkle> the*
[15:41:53] <Krinkle> https://github.com/browserstack/api
[15:42:30] <jzaefferer> 30 minutes?
[15:42:33] <Krinkle> yes
[15:42:39] <Krinkle> the default in testswarm-browserstack is 10 mintues
[15:42:41] <Krinkle> 10 minutes
[15:42:56] <Krinkle> browserstack itself terminates these after the timeout, which is given during creation of the worker
[15:42:59] <jzaefferer> where can I see that in the code?
[15:43:14] <Krinkle> per ^, there is no such code
[15:43:25] <Krinkle> the default is set here: https://github.com/clarkbox/testswarm-browserstack/blob/master/testswarm-browserstack.cli.js#L72
[15:43:57] <jzaefferer> ah, okay
[15:44:20] <jzaefferer> I looked at testswarm-browserstack.js and didn't see any timeout stuff there...
[15:44:33] <Krinkle> look for clientTimeout
[15:44:36] <clarkbox> those defaults should prob go in the commander.js decleration
[15:44:49] <clarkbox> declaration
[15:45:12] <jzaefferer> so an IE6 client can run for ten minutes, during that time, it won't rerun anything, as its the same client id during that time
[15:45:56] <jzaefferer> looking the homepage, I can see one IE6 connected, so that's probably stuck somewhere, and if we wait a few more hours (or days), it should finish everything?
[15:46:08] <jzaefferer> as every ten minutes at the latest, we get a new IE6 client?
[15:46:52] <jzaefferer> clarkbox, while you're here, can you confirm that?
[15:47:00] <clarkbox> i cant say for sure
[15:47:08] <clarkbox> thats in krinkles arena of swarm
[15:47:31] <clarkbox> the number on the home page is the connected clients
[15:47:41] <clarkbox> regardless of there status (running/idle)
[15:47:55] <clarkbox> not sure about first Q "so an IE6 client can run for ten minutes, during th...."
[15:48:31] <Krinkle> Yes, assuming we only have one simultaneous IE6 client at a time
[15:48:51] <Krinkle> if we need IE6 and we can get only 1 at a time, we cycle every 10 minutes
[15:49:09] <Krinkle> in those 10 minutes it does all re-runs
[15:49:19] <Krinkle> but.. if they fail again, they need another re-run until it reaches max
[15:50:07] <Krinkle> so if a test always fails in IE6 it takes max * browserstack-testswarm-timeout minutes to re-runs all re-runs (assuming all re-runs can be run within the timeout)
[15:50:20] <Krinkle> max=jobrun runmax
[15:50:55] <jzaefferer> okay
[15:51:21] <jzaefferer> though both node-testswarm and testswarm-browserstack ignore reruns currently, so it can't really work yet
[15:51:44] <jzaefferer> Krinkle, regarding https://github.com/jquery/testswarm/pull/175 let's fix the typos, then land it (that is, go ahead and merge to master)
[15:51:44] <socialhapy> ★ Pull request on testswarm by Krinkle (1d, 7h ago): Refactor browserSets
[15:51:46] <Krinkle> so what I propose we do: fix the re-run display to take the number of potential runs itself into account (right now if 5 runs have runs < max, it says 5 pending re-runs. but if they failed once and max=4 and they will fail again, 5 runs = 20 reruns)
[15:52:33] <jzaefferer> That might be an option, but I'm not worrying about the homepage too much, as long as we have builds that don't finish
[15:52:47] <Krinkle> yeah, right now re-runs are not part of the main flow
[15:52:56] <Krinkle> and as long as we keep it that we, there is no problem.
[15:52:57] <jzaefferer> Again, this would be much less of an issue if we could just drop IE6 from TestSwarm, it drags everything down :/
[15:53:05] <Krinkle> if one thing takes it, all need to do it and need to do it well.
[15:53:17] <clarkbox> testswarm-browserstack shouldnt need to change. just change what /api.php?action=swarmstate returns
[15:53:50] <jzaefferer> clarkbox: see https://github.com/clarkbox/testswarm-browserstack/issues/14
[15:53:50] <socialhapy> ★ Issue #14 on testswarm-browserstack (Krinkle; 1w, 2h ago): Start workers for pending re-runs as well
[15:54:07] <Krinkle> clarkbox: that depends.. if there is only 1 run (which may take 10 seconds to run in IE6) that needs re-running 3 times, right now it takes testswarm-browserstack 40 minutes !!
[15:54:25] <clarkbox> ah ok
[15:55:26] <Krinkle> because the IE6 client will save to testswarm: fails. then testswarm will increase runs = runs +1 (e.g. runs = 2, max = 4). Which means it still needs a re-run, the number on the home page doesn't' change. and testswarm-browserstack will see it still needs IE6 so it keeps it running.
[15:55:39] <Krinkle> eventhough it can't do that run again until it is recycled
[15:56:20] <clarkbox> i dont even think we should bother re-runing in same source twice if failed first.
[15:56:38] <Krinkle> define source
[15:56:45] <clarkbox> source = cookied client (not session based client id's)
[15:57:08] <Krinkle> client IDs are not in the session IDs
[15:57:17] <Krinkle> s/session IDs/session
[15:57:36] <clarkbox> when does client ID get set?
[15:57:42] <Krinkle> client IDs are only saved in the active DOM state. otherwise multiple tabs wouldn't work
[15:57:54] <Krinkle> it is created when you access RunPage
[15:58:08] <clarkbox> well we dont even want multiple tabs? could cause issues?
[15:58:25] <Krinkle> no, causes no issues that testswarm should care about
[15:58:27] <Krinkle> anyway that is not relevant
[15:58:28] <clarkbox> and set the ID in cookie
[15:58:39] <Krinkle> how does that fix anything ?
[15:58:51] <clarkbox> well it makes the integration of browserstack much easier
[15:58:55] <Krinkle> nope
[15:59:10] <Krinkle> for one each worker will (should!) have a clear cookie memory
[15:59:24] <clarkbox> ah yes good point
[15:59:32] <Krinkle> and the client Ids aren't the issue
[16:00:09] <Krinkle> testswarm requires that a re-run does not run in the same exact parent frame. a simple browser refresh is sufficient to get a new client ID
[16:00:30] <Krinkle> which is why saving in cookies will be problematic as well
[16:00:44] <clarkbox> ya forget cookies
[16:00:48] <Krinkle> and multiple tabs is an issue for jquery-ui, testswarm in general should handle it
[16:00:58] <Krinkle> and does
[16:01:08] <Krinkle> okay ahm.. so moving on... what do we have
[16:04:06] <jzaefferer> Let's drop IE6, and all will be good \o/
[16:04:15] <clarkbox> well the endpoint could NOT return a client if a reset is needed
[16:04:24] <jzaefferer> In any case, let's land https://github.com/jquery/testswarm/pull/175
[16:04:24] <socialhapy> ★ Pull request on testswarm by Krinkle (1d, 7h ago): Refactor browserSets
[16:04:38] <clarkbox> there would be a lag based on the polling nature of  testswarm-browserstack
[16:04:49] <jzaefferer> I need to get some sleep. I should be online tomorrow, working on some UI ARIA issues...
[16:05:04] <jzaefferer> Au revoir mes amis!
[16:05:12] <Krinkle> jzaefferer: k,I'l fix 175 and land it
[16:05:13] <Krinkle> thx :)
[16:07:45] <Krinkle> clarkbox: Do you mind if I change testswarm-browserstack to measure in seconds instead of minutes to match the browserstack API ? this conversion is confusing and wrong in some places
[16:07:55] <Krinkle> like the example uses clientTimeout: 6000, which is bull shit
[16:08:12] <clarkbox> ya go for it
[16:08:24] <clarkbox> or just log an issue and ill have some time this week to fix
[16:08:26] <Krinkle> dunno who set that there, might have been me :P
[16:08:27] <Krinkle> ok
[16:10:46] <clarkbox> swarm knows if a particular browser needs to be reset yes? in that case, swarmstate would NOT return the browser agent, and testswarm-browserstack would shut that worker down. swarmstate could then return the browser again again. thats assuming swarmstate is only used for testswarm-browserstack.
[16:11:26] <Krinkle> Hm.. lemme read that agian.
[16:11:50] <Krinkle> swarm does not expose if a browser clients need a reset, no
[16:12:08] <clarkbox> but it could?
[16:12:24] <Krinkle> it can't because clients themselves don't need resets per se. It could be anything (some issues like terrible browser plugins or broken DLL files on windows) are not fixed by a refresh
[16:12:46] <Krinkle> in perspective of swarmstate, it keeps track of runs themselves, not the clients.
[16:14:43] <Krinkle> I suppose it is possible to write a query that will check all runs, check that against all clients and determine if the swarm is in the state of "stuck" (e.g. there are clients and runs to run, but there are runs that have invalid clients)
[16:14:45] <Krinkle> clarkbox:
[16:14:56] <clarkbox> yaaa
[16:15:01] <clarkbox> maybe something like that
[16:15:22] <Krinkle> not an easy query though, and may require a sight database change in order to not take hours to run on a large swarm :P
[16:15:26] <clarkbox> i dont have any perfect ideas
[16:15:31] <Krinkle> brb
[16:34:30] <Krinkle> clarkbox: https://github.com/clarkbox/testswarm-browserstack/pull/17
[16:34:31] <socialhapy> ★ Pull request on testswarm-browserstack by Krinkle ( ago): use seconds instead of minutes for timeout
[20:12:32] <jqcommit> [testswarm] Krinkle force-pushed issue170 from a4c3676 to 7fb7c3a: http://git.io/J70Bxw
[20:12:32] <jqcommit> [testswarm/issue170] Refactor browserSets - Timo Tijhof
[20:12:47] <jqcommit> [testswarm] Krinkle pushed 1 new commit to master: http://git.io/_9YX2Q
[20:12:47] <jqcommit> [testswarm/master] Merge pull request #175 from jquery/issue170 - Timo Tijhof
[20:16:29] <jqcommit> [testswarm] Krinkle pushed 1 new commit to master: http://git.io/0ShuRg
[20:16:29] <jqcommit> [testswarm/master] Replace generic "Chrome" with regular versions. - Timo Tijhof
[21:36:42] <jqcommit> [testswarm] Krinkle pushed 1 new commit to master: http://git.io/CgUXuQ
[21:36:42] <jqcommit> [testswarm/master] Add AboutPage (showing version information) - Timo Tijhof
[21:41:21] <jqcommit> [testswarm] Krinkle force-pushed master from e8f914e to a4e2bbc: http://git.io/9_ezCQ
[21:41:21] <jqcommit> [testswarm/master] Add AboutPage (showing version information) - Timo Tijhof
[23:34:59] <joobie> hey guys.. how would i reference a "ul" with id "blah" using jquery?
