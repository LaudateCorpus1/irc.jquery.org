[04:20:14] <wheresrhys> Not sure if this is the right channel to ask this on, but I'm developing a large plugin at the moment and I plan on having a few alternative builds which deliver tiny subsets of its functionality aimed at satisfying specific use cases without the code bloat. I would like to list at least one of these sub plugins separately with a different name - how should I structure the plugin(s) on github to achieve this?
[05:23:33] <dclaude> i have a strange problem with document.ready in IE in combination with the print() command
[05:24:13] <dclaude> in the jquery channel they couldn't help me
[05:24:24] <dclaude> and i think it is more a technical problem
[05:24:53] <dclaude> unfortunately i am not able to prepare a simple example which reproduce the problem
[05:25:59] <dclaude> even in the original application it occurs sporadic
[05:42:07] <carldanley> rwaldron: do you know anything about #12851 ?
[07:02:29] <sizcommit> 01[13sizzle01] 15gibson042 pushed 1 new commit to 06master: 02http://git.io/hkGpPQ
[07:02:29] <sizcommit> 13sizzle/06master 144de5e92 15Richard Gibson: Fix gh-203: Remove unused getElementsByName code
[07:18:11] <carldanley> DaveMethvin: can you elaborate a little more on #12851 when you get a chance - on the ticket would be preferable
[07:45:58] <rwaldron> carldanley ping
[07:47:13] <rwaldron> background for #12851: all of jQuery's prototype methods operate on an array-like collection of elements
[07:47:48] <rwaldron> there are several static methods defined on the jQuery function object itself that operate on single elements
[07:49:17] <rwaldron> eg. jQuery("selector").data("a", "alpha"); will store a data property named "a" with the value "alpha" for _all_ elements matching "selector" (seperately)
[07:50:09] <rwaldron> jQuery.data(elem, "a", "alpha"); will store a data property named "a" with the value "alpha" for just |elem|
[07:50:41] <rwaldron> there was a notion that we might extend this to all existing prototype methods
[07:52:27] <carldanley> oh wow
[07:52:43] <rwaldron> many already exist
[07:54:09] <rwaldron> At this point, it's not likely to happen since we're maintaining API parity across two code bases and avoiding new APIs as much as possible
[07:54:19] <rwaldron> this might make a fun plugin project though
[07:54:28] <rwaldron> if someone were interested ;)
[07:56:06] <carldanley> lol
[07:56:21] <carldanley> I was going to say +1 to your support comment
[08:45:46] <scott_gonzalez> CR of Pointer Events v1 is coming up :-)
[08:54:54] <snover> any good fixes?
[08:57:40] <scott_gonzalez> snover: There's a list of changes since Last Call at the bottom of the spec: https://dvcs.w3.org/hg/pointerevents/raw-file/tip/pointerEvents.html#revision-history
[08:58:46] <snover> so, no, then? :)
[09:02:38] <scott_gonzalez> What changes are you looking for?
[09:15:33] <jqcommit> 01[13jquery01] 15rwldrn pushed 1 new commit to 06master: 02http://git.io/ieOIrg
[09:15:33] <jqcommit> 13jquery/06master 14332ebeb 15Rick Waldron: Fixes #13779. Remove nodes in document order (uses for loop matching empty())....
[09:20:14] <doesallmagic> Project jQuery Core build #784: STILL FAILING in 4 min 44 sec: http://swarm.jquery.org:8080/job/jQuery%20Core/784/
[09:20:15] <doesallmagic> Rick Waldron: Fixes #13779. Remove nodes in document order (uses for loop matching empty()).
[09:30:33] <jqcommit> 01[13jquery01] 15rwldrn pushed 1 new commit to 06master: 02http://git.io/14CwLg
[09:30:33] <jqcommit> 13jquery/06master 147a66283 15Rick Waldron: Fixes #13779. Remove nodes in document order (test)...
[09:32:03] <DaveMethvin> carldanley rwaldron I agree that ticket is probably not needed anymore
[09:32:38] <DaveMethvin> i think we may be able to make promises optional, at that point jquery's minimal build size is small
[09:32:48] <DaveMethvin> not really worth a bunch of refactoring 
[09:33:33] <DaveMethvin> rwaldron i agree on the removal in doc order but wonder what the code looks like that broke :)
[09:34:00] <rwaldron> DaveMethvin same here
[09:34:25] <doesallmagic> Project jQuery Core build #785: STILL FAILING in 4 min 5 sec: http://swarm.jquery.org:8080/job/jQuery%20Core/785/
[09:34:25] <doesallmagic> Rick Waldron: Fixes #13779. Remove nodes in document order (test)
[09:34:25] <rwaldron> Considering the test I had to write to reasonably determine that removal happened out of order?
[09:34:43] <rwaldron> or rather, in order*
[09:35:02] <gibson042> given that we don't document the order of `.remove`, why did this merit a commit?
[09:35:31] <DaveMethvin> we probably dont' document the order of insertion either :)
[09:35:51] <gibson042> nor should we; all we promise is the end result
[09:35:56] <gibson042> is this not the same?
[09:36:35] <DaveMethvin> well that's why i wanted to see the code, although i was leaning towards thinking someone might have dependencies
[09:36:44] <DaveMethvin> i just didn't know how!
[09:37:00] <DaveMethvin> now boris won't show us his code
[09:37:33] <gibson042> it just seems very strange to change our code for supporting a duckpunched private method 
[09:38:18] <DaveMethvin> jQuery.cleanData has an open ticket to provide a better interface
[09:38:43] <DaveMethvin> but it's a critical path so i'm not sure how much we want to mess with it
[09:38:54] <gibson042> yeah, I remember that one
[09:48:12] <scott_gonzalez> DaveMethvin: On a related note, using special events doesn't provide a clean alternative to duckpunching cleanData :-/
[09:50:16] <rwaldron> gibson042 in the ticket Boris notes that he would need to write two different versions of whatever code it is that's breaking
[09:50:41] <rwaldron> I agree that the whole thing is suspicious, but that also breaks our conditional comment promise
[09:50:59] <scott_gonzalez> That was clearly an empty claim.
[09:51:27] <rwaldron> ...?
[09:51:56] <scott_gonzalez> "Also it is difficult to write code that will work both with previous versions and new versions, if the client needs to remove in a specific order..."
[09:52:11] <scott_gonzalez> If the client needs to remove in a specific order, then they should do so.
[09:52:21] <scott_gonzalez> elems.each(function() { $( this ).remove(); });
[09:52:36] <rwaldron> could be that he's using mutation events?
[09:52:50] <rwaldron> I don't know
[09:53:12] <rwaldron> I'm also not entirely sure why this is such a big deal
[09:53:30] <scott_gonzalez> Because we now have tests and a guarantee for code that we have no use case for.
[09:54:22] <rwaldron> observable behaviour differences between 1.x and 2.x isn't good enough reason?
[09:54:31] <rwaldron> I know there are differences that we planned for
[09:54:43] <rwaldron> but this wasn't one of those
[09:54:51] <gibson042> rwaldron 1.x-master matched master on this
[09:55:05] <gibson042> it's a difference between 1.9 and 1.10
[09:55:24] <gibson042> along with fixing the selector argument for positionals
[09:55:26] <rwaldron> gibson042 so clarify: 1.x now does it in reverse order?
[09:55:40] <gibson042> at the moment, yes
[09:55:53] <rwaldron> confirm: is that the path forword?
[09:56:01] <rwaldron> ward*
[09:56:21] <gibson042> unless someone persuades us otherwise
[09:56:24] <rwaldron> great
[09:56:28] <rwaldron> then I will revert
[09:56:30] <rwaldron> thank you
[10:00:05] <sizcommit> 01[13sizzle01] 15gibson042 pushed 1 new commit to 06master: 02http://git.io/MeHtVw
[10:00:05] <sizcommit> 13sizzle/06master 148f2d3e4 15Richard Gibson: Ref 2dca62f5: More robust test for jQuery QUnit suite
[10:01:14] <jqcommit> 01[13jquery01] 15rwldrn 04force-pushed 06master from 147a66283 to 14562ca75: 02http://git.io/9cZXpQ
[10:01:37] <rwaldron> gibson042 scott_gonzalez rolled back and I've cc'ed you on an email to Boris
[10:01:44] <scott_gonzalez> thanks
[10:02:05] <rwaldron> No, thank _you_ for the heads up
[10:03:39] <gibson042> thanks rwaldron
[10:04:27] <rwaldron> gibson042 you're welcome and thank you also for the heads up
[10:05:06] <DaveMethvin> sorry i was on a cal
[10:05:07] <DaveMethvin> call
[10:05:13] <rwaldron> DaveMethvin np
[10:05:17] <doesallmagic> Project jQuery Core build #786: STILL FAILING in 4 min 15 sec: http://swarm.jquery.org:8080/job/jQuery%20Core/786/
[10:05:20] <rwaldron> the changes have been reverted
[10:05:33] <DaveMethvin> and we still haven't seen the code :)
[10:05:34] <rwaldron> because 1.x actually does removal in reverse order now
[10:05:38] <rwaldron> that too
[10:05:50] <DaveMethvin> definitely don't want a difference if we can avoid it
[10:05:55] <rwaldron> +1
[10:05:59] <DaveMethvin> and this is pretty much inside baseball stuff in any case
[10:06:35] <DaveMethvin> "normal" code wont' see any problems, only code from people who read jquery and exploit undocumented behavior
[10:09:07] <arkel> rwaldron you pointed out that empty() loop and remove() does not match each other
[10:09:14] <arkel> it seems they should?
[10:25:30] <jqcommit> [13jquery] 15orkel opened pull request #1242: No ticket: use while loop instead of for-loop (06master...06empty-remove)  02http://git.io/Vkuk3A
[10:46:25] <gnarf> rwaldron: force push on jquery/jquery?
[10:46:38] <rwaldron> gnarf had a revert
[10:46:50] <rwaldron> and I doubt anyone pulled in the few minutes
[10:47:24] <gnarf> rwaldron: prolly better to use git revert to patch the anti-patch, but fair nuff, short-term i don't really care ;)
[10:47:39] <rwaldron> gnarf ok, thanks... I'll do so in the future
[10:47:49] <rwaldron> I jad used Tower's "roll back to this commit" feature
[10:47:52] <rwaldron> had*
[10:47:54] <gnarf> if you push back, the next pusher might end up pushing your sha back on head ya know
[10:48:00] <rwaldron> sorry for making chaos
[10:48:27] <gnarf> and they wouldn't know they messed it up cuz it's still just a fast-forward
[10:49:13] <gnarf> eh - i care about this much: "
[10:49:15] <gnarf> :)
[10:49:28] <gnarf> we can get out of any trouble we make
[10:49:30] <gnarf> it's git
[10:54:55] <scott_gonzalez> rwaldron: Am I missing something or is the broken code buried inside the observable plugin?
[10:55:15] <scott_gonzalez> I don't see anything actually in the fiddle that shows what's happening (from a code perspective).
[12:50:35] <rwaldron> scott_gonzalez I havent looked
[12:52:33] <rwaldron> scott_gonzalez so, I dont get... these are both the same link
[12:52:52] <scott_gonzalez> Yeah, he sent a corrected URL after.
[12:52:58] <rwaldron> for fucks sake
[12:53:05] <rwaldron> http://jsfiddle.net/BorisMoore/YFNbC/
[12:53:18] <scott_gonzalez> Yeah, also not very helpful.
[12:53:18] <rwaldron> now we're really not going to fix this
[12:53:49] <rwaldron> duck punching undocumented methods === void warranty
[12:54:10] <DaveMethvin> did anyone figure out how the order of removal broke the code?
[12:54:32] <scott_gonzalez> nope
[12:54:42] <scott_gonzalez> He provided an example which doesn't show it at all.
[12:54:58] <scott_gonzalez> I have a thought about what problem he's facing though.
[12:55:14] <rwaldron> share please
[12:55:21] <scott_gonzalez> Let me see if I can find the example I'm thinking of.
[12:56:33] <scott_gonzalez> found it: http://jsfiddle.net/GNF7E/
[12:56:36] <scott_gonzalez> <3 IRC logs
[12:56:45] <rwaldron> ok, so... wait he's not really duck punching cleanData
[12:57:13] <rwaldron> he's right though, document order has always been a thing
[12:57:33] <rwaldron> I believe it was a big announcement by john or maybe even dave at one point that all things were in document order
[12:57:43] <DaveMethvin> predates me, even
[12:57:45] <DaveMethvin> so it's OLD
[12:58:01] <scott_gonzalez> It was John who made that announcement.
[12:58:03] <scott_gonzalez> I think.
[12:58:04] <scott_gonzalez> BUT
[12:58:09] <rwaldron> TBH, I think it's annoying that we're having this conversation
[12:58:09] <scott_gonzalez> That was only about elements within the set.
[12:58:17] <scott_gonzalez> Not the order in which the methods run.
[12:58:27] <rwaldron> 1. There is literally zero benefit from reverse order change
[12:58:47] <DaveMethvin> I am trying to figure out how someone NOT duck punching would see this
[12:58:51] <rwaldron> 2. it doesn't match a nearby for loop
[12:59:03] <rwaldron> 3. it wasnt tested, but it existed
[12:59:14] <rwaldron> and as it turns out, order matters
[12:59:48] <rwaldron> I dont actually care about the problems Boris is encountering
[13:00:07] <DaveMethvin> i just want to understand it first
[13:00:16] <rwaldron> I care because this change was actually not useful and its existence has sucked up too much of my time today
[13:00:16] <DaveMethvin> to see if it's a reasonable case
[13:00:19] <rwaldron> no benefit.
[13:01:01] <DaveMethvin> face it, you tried and you failed ... the lesson kids, is don't even try. -- Homer Simpson
[13:01:19] <rwaldron> thats not what I'm saying
[13:02:06] <rwaldron> before I made that change earlier I also made a jsperf to check myself before committing to making the change
[13:03:06] <rwaldron> no benefit
[13:03:33] <rwaldron> sometime reverse while is faster, sometimes for loop with cached length is faster and vice versa
[13:03:36] <rwaldron> in the same browser
[13:03:47] <rwaldron> so, the change was of no benefit to the library
[13:03:52] <DaveMethvin> rwaldron i appreciated you jumping on it, since we're planning on a release soon and stuff needs to get done! I just wanted to convince myself that I understood what was going on that removal order would break things
[13:04:07] <DaveMethvin> as far as the perf goes, i doubt the loop construct makes the diff
[13:04:31] <DaveMethvin> they're all wicked fast compared to the rest of cleanData
[13:05:14] <dclaude> hi
[13:05:15] <rwaldron> DaveMethvin I tested the complete remove() vs an alternative remove (named "discard")
[13:06:16] <dclaude> can anybody explain me, why jQuery holds a copy of window.document?
[13:07:00] <dclaude> in the library is written: "Use the correct document accordingly with window argument (sandbox)"
[13:07:21] <DaveMethvin> dclaude is there a problem with it?
[13:08:12] <dclaude> i have a problem in IE in combination with the print() function sporadic, which i don't understand
[13:08:30] <DaveMethvin> sounds like you should ask for help on #jquery or StackOverflow
[13:08:57] <dclaude> i have already asked on #jquery, but nobody could help me
[13:09:06] <dclaude> and i think it is more a technical problem
[13:09:13] <DaveMethvin> but it's not a jquery problem
[13:10:01] <dclaude> it would not be a problem, if document would not be hold as a copy in jQuery
[13:10:25] <rwaldron> DaveMethvin I know why now.
[13:10:34] <DaveMethvin> rwaldron whyzat?
[13:10:44] <rwaldron> I'm willing to close this as "warranty voided"
[13:10:46] <dclaude> and because of the comment, i thought, that somebody has a deeper understanding of the magic, the IE does in the background
[13:11:07] <DaveMethvin> dclaude ask on StackOverflow, we're kinda busy
[13:11:32] <dclaude> ok, i will do
[13:12:02] <dclaude> thanks anyway
[13:12:07] <rwaldron> DaveMethvin in http://borismoore.github.io/jsviews/jquery.views.js he's overriding cleanData with a function that first calls his own "clean" function to remove the marker nodes
[13:12:14] <rwaldron> in that file, control-f for "function clean"
[13:12:19] <DaveMethvin> right saw that
[13:12:32] <rwaldron> ok, so we're on the same page
[13:12:37] <DaveMethvin> yep
[13:12:45] <rwaldron> this mechanism operates in document order
[13:12:52] <rwaldron> we should tell him to duck punch all the things
[13:13:55] <DaveMethvin> you mean, punch .remove() and .empty() as well?
[13:14:32] <DaveMethvin> seems to me that at least some of this complexity is coming in b/c he's trying to do a bunch of stuff behind jQuery's back
[13:15:19] <DaveMethvin> just not sure if this is realistic enough to formally support
[13:19:01] <rwaldron> DaveMethvin its not
[13:19:03] <rwaldron> not at all
[13:19:31] <rwaldron> Also, I'm a little put off that I was taken in to easily.
[13:22:27] <rwaldron> DaveMethvin, drafted response: "So, the issue is clearer now, but less sympathetic to your position. Redefining jQuery APIs (especially undocumented methods) voids the warranty. Removal in document order was never guaranteed and an implementation detail (that's only observable when you rewire the library) is completely at our discretion and effectively off limits. If we wanted to "parallelize" the operation by removing the
[13:23:18] <DaveMethvin> yeah it seems bad to get ourselves nailed down too much on the order
[13:23:26] <rwaldron> right
[13:23:49] <rwaldron> is that response cool?
[13:24:14] <DaveMethvin> got truncated after "parallelize" here
[13:24:35] <rwaldron> "If we wanted to "parallelize" the operation by removing the nodes 2 at a time starting at the beginning and middle, then nothing would prevent that, because we have no documented guaranteed execution order. "
[13:25:00] <rwaldron> guarantee of execution order*
[13:25:15] <rwaldron> also, I hate that this lib makes magical elementss
[13:25:22] <rwaldron> just sayin'
[13:25:29] <DaveMethvin> yeah that's a dangerous game
[13:34:32] <rwaldron> DaveMethvin: so? yes, no?
[13:34:47] <DaveMethvin> yes
[13:34:55] <DaveMethvin> that looks good
[13:35:00] <rwaldron> ok
[13:35:19] <DaveMethvin> we're not guaranteeing a specific order, only that if you say "remove these 4" that they'll be gone upon your return :)
[13:37:06] <rwaldron> right
[13:37:35] <rwaldron> orkel ping
[13:37:39] <rwaldron> read back ^^^^^
[13:37:45] <orkel> hey!
[13:37:48] <rwaldron> hey!
[13:37:54] <rwaldron> I'm going to reclose that ticke
[13:37:56] <rwaldron> ticket
[13:38:08] <orkel> why?
[13:38:14] <rwaldron> unless you strongly disagree with the discussion above?
[13:38:26] <orkel> gimme a sec
[13:38:29] <rwaldron> sure thing
[13:38:32] <rwaldron> take your time
[13:38:41] <DaveMethvin> orkel: so to summarize, we aren't going to guarantee removal order
[13:45:46] <orkel> DaveMethvin okey
[13:47:10] <orkel> DaveMethvin It's a matter of principle?
[13:47:47] <DaveMethvin> if we say we're guaranteeing the order of removal, then we should be doing it everywhere i suppose
[13:47:53] <DaveMethvin> that is, all loops are forward
[13:48:04] <rwaldron> or backward
[13:48:15] <DaveMethvin> and we'd want unit tests for them all
[13:48:23] * rwaldron nods
[13:48:59] <DaveMethvin> that would be a lot of additional guarantees
[13:49:11] <orkel> okey i understand :-)
[13:49:12] <DaveMethvin> at the moment it doesn't affect code size/perf that much
[13:49:27] <DaveMethvin> but it would limit us in the future possibly
[13:49:50] <orkel> btw i checked couple of MV*-frameworks no one does this
[13:50:03] <rwaldron> orkel of course not
[13:50:05] <rwaldron> it's insane
[13:50:07] <DaveMethvin> honestly i could go either way ... but if we don't need to change this i would prefer to not do it
[13:50:25] <rwaldron> dumping junk into the document as "markers"? no thanks
[13:50:26] <DaveMethvin> it's just a question of how much code this breaks
[13:50:49] <orkel> ember dumps as recall
[13:51:10] <orkel> but ember is not using cleanData for it
[13:51:16] <rwaldron> right
[13:51:20] <DaveMethvin> well the trick is that those markers need to stay out of the way of jQuery which makes it even tougher
[13:51:21] <rwaldron> ember can do what it wants to do
[13:51:31] <rwaldron> they have their own mechanisms for handling it
[13:51:36] <DaveMethvin> wycats__ know better :)
[13:53:27] <orkel> DaveMethvin offtopic: when 2.0 scheduled to be released?
[13:54:01] <DaveMethvin> thursday i hope ... if there seems to be a lot of changes i may want an RC
[13:55:22] <orkel> we need to release it this week?
[13:55:41] <DaveMethvin> i think we need either the final or a solid rc
[13:55:51] <DaveMethvin> so....are you thinking about other changes? :)
[13:56:25] <DaveMethvin> nothing like a release date to get people thinking about major rewrites :)
[13:57:04] <orkel> yeah :-)
[13:57:29] <orkel> but I might not make it in time
[13:57:39] <DaveMethvin> there's always 2.1!~
[13:57:43] <orkel> i wanted to do https://github.com/jquery/jquery/pull/1151 only for 2.0
[13:57:44] <b-ot> orkel: Pull request #1151 by orkel (2mon 2w ago): #13355 - Uglifyjs compression options and variable sequence optimization 
[13:57:44] <DaveMethvin> it's never too late
[13:58:21] <DaveMethvin> i feel so blind without testswarm
[13:58:28] <DaveMethvin> so much of a pain to run it all here
[13:59:20] <orkel> welcome to my world :-)
[13:59:55] <DaveMethvin> orkel it would be good to update to the latest uglify as well
[14:00:36] <orkel> i wanted to do advanced version of this changes, but i think it could wait until 2.1
[14:00:52] <DaveMethvin> probably so
[14:01:01] <DaveMethvin> we can always afford to lose more bytes!
[14:01:19] <orkel> i can always have time to play with 1.10 :-)
[14:01:54] <DaveMethvin> in 1.10 i think we should remove elements from the inside out :D
[14:02:26] <orkel> yeah, though document.write, will remove them all!
[14:49:10] <sizcommit> 01[13sizzle01] 15gibson042 pushed 1 new commit to 06master: 02http://git.io/_dL8jQ
[14:49:10] <sizcommit> 13sizzle/06master 1426d2cef 15Richard Gibson: No ticket: Miscellaneous improvements
[14:49:18] <jqcommit> 01[13jquery01] 15gibson042 pushed 1 new commit to 06master: 02http://git.io/kfhW_w
[14:49:18] <jqcommit> 13jquery/06master 14db0326b 15Richard Gibson: Fix #13596; #13722: .replaceWith consistency. Close gh-1216.
[14:49:28] <jqcommit> 01[13jquery01] 15gibson042 pushed 1 new commit to 061.x-master: 02http://git.io/vk_lEA
[14:49:28] <jqcommit> 13jquery/061.x-master 14bdc4f3e 15Richard Gibson: Fix #13596; #13722: .replaceWith consistency. Close gh-1216.
[14:52:07] <gnarf> kswedberg: you there?
[15:03:26] <jqcommit> 01[13jquery01] 15rwldrn 04deleted 0613471 at 14640300c: 02http://git.io/LtbWVg
[15:18:56] <rwaldron> timmywil did you read the entire discussion before posting to guthub?
[15:18:59] <rwaldron> github*
[15:19:26] <rwaldron> (here)
[15:19:54] <doesallmagic> Project jQuery 1.x Core build #129: STILL FAILING in 30 min: http://swarm.jquery.org:8080/job/jQuery%201.x%20Core/129/
[15:19:55] <doesallmagic> richard.gibson: Fix #13596; #13722: .replaceWith consistency. Close gh-1216.
[15:24:54] <doesallmagic> Project jQuery Core build #787: STILL FAILING in 4 min 59 sec: http://swarm.jquery.org:8080/job/jQuery%20Core/787/
[15:24:55] <doesallmagic> richard.gibson: Fix #13596; #13722: .replaceWith consistency. Close gh-1216.
[15:25:22] <doesallmagic> Project jQuery Core build #788: STILL FAILING in 24 sec: http://swarm.jquery.org:8080/job/jQuery%20Core/788/
[15:52:40] <wycats__> What do we have our own mechanisms for handling?
[17:05:45] <DaveMethvin> wycats__: https://github.com/jquery/jquery/commit/332ebeb3105a4cab0091dc6f3f6ba8c17b9265bb
[17:05:46] <b-ot> DaveMethvin: Rick Waldron (7h 50m ago): Fixes #13779. Remove nodes in document order (uses for loop matching empty()).  Signed-off-by: Rick Waldron <waldron.rick@gmail.com>
[18:11:49] <jqcommit> [13jquery] 15rwldrn opened pull request #1243: Fixes #13779. Remove nodes in document order (uses for loop matching empty()). (06master...0613779)  02http://git.io/D16Bow
[18:55:33] <DaveMethvin> rwaldron it looks like cleanData is a lot slower in 2.0 ... if if i comment out the cleandata call 2.0 is actually faster  http://jsperf.com/jquery-1v2-cleandata-perf 
[19:18:07] <rwaldron> DaveMethvin I'll look into it tomorrow
[19:18:16] <DaveMethvin> cool
[19:19:09] <jqcommit> 01[13jquery01] 15rwldrn pushed 1 new commit to 06master: 02http://git.io/MZW-ow
[19:19:09] <jqcommit> 13jquery/06master 1477d7f26 15Rick Waldron: Fixes #13779. Remove nodes in document order (uses for loop matching empty()).
[19:19:31] <DaveMethvin> AND STAY IN ORDER!
[19:22:53] <doesallmagic> Project jQuery Core build #789: STILL FAILING in 3 min 58 sec: http://swarm.jquery.org:8080/job/jQuery%20Core/789/
[19:22:54] <doesallmagic> Rick Waldron: Fixes #13779. Remove nodes in document order (uses for loop matching empty()).
[19:26:20] <wycats__> I highly doubt that changing removal order will affect ember
[19:26:34] <wycats__> Seems much more likely to affect jQuery UI
[19:26:45] <wycats__> which monkey patches removal
[19:26:53] <jqcommit> 01[13jquery01] 15rwldrn pushed 1 new commit to 061.x-master: 02http://git.io/RkoVow
[19:26:53] <jqcommit> 13jquery/061.x-master 14e572eed 15Rick Waldron: Fixes #13779. Remove nodes in document order...
[19:27:09] <DaveMethvin> wycats__ i think it was hosing boris' code because he has "hidden" elements that he needs to preserve
[19:27:44] <wycats__> Weird
[19:27:53] <DaveMethvin> Seconded.
[19:27:53] <wycats__> Why does order matter then?
[19:28:13] <doesallmagic> Project jQuery 1.x Core build #130: STILL FAILING in 1 min 30 sec: http://swarm.jquery.org:8080/job/jQuery%201.x%20Core/130/
[19:28:14] <doesallmagic> Rick Waldron: Fixes #13779. Remove nodes in document order
[19:28:15] <DaveMethvin> i looked at the code and STILL wasn't sure
[19:29:25] <DaveMethvin> he's monkey patching a bunch of methods and making assumptions about their internal impls
[19:29:38] <doesallmagic> Project jQuery Core build #790: STILL FAILING in 1 min 24 sec: http://swarm.jquery.org:8080/job/jQuery%20Core/790/
[19:29:56] <DaveMethvin> if you can't say something nice swarmy, just shut up
[19:30:27] <DaveMethvin> rwaldron our long national nightmare is over. thanks.
[19:34:40] <rwaldron> I wonder if gibson042 knows that replaceWith is broken in 2.x?
[19:35:00] <DaveMethvin> is it failing unit tests?
[19:35:43] <rwaldron> big time
[19:35:51] <DaveMethvin> hmmm
[19:36:03] <rwaldron> the removal tests are fine
[19:36:09] <rwaldron> just a bunch of replaceWith tests are broken
[19:36:31] <DaveMethvin> i'm beating on pull 1205, will look at it if i wrestle this rebase to the ground
[19:36:53] <rwaldron> DaveMethvin I'm about to push a small change to make the loops match the for ( ; (elem = elems[i]) != null; i++ ) { style
[19:37:03] <DaveMethvin> np
[19:37:11] <rwaldron> if i roll back to pre-replacewith everything is fine
[19:37:22] <rwaldron> but I'm not going to peel his work off
[19:37:39] <DaveMethvin> better to make a new commit anyway
[19:38:02] <DaveMethvin> with swarmy all busted it's hard to tell when something is really broken
[19:38:17] <jqcommit> 01[13jquery01] 15rwldrn pushed 1 new commit to 06master: 02http://git.io/ANIQXw
[19:38:17] <jqcommit> 13jquery/06master 142c7b1b8 15Rick Waldron: Loop cleanup...
[19:38:21] <rwaldron> truth
[19:38:26] <rwaldron> ok, i'm out for the night
[19:38:31] <doesallmagic> Project jQuery Core build #791: STILL FAILING in 24 sec: http://swarm.jquery.org:8080/job/jQuery%20Core/791/
[19:38:31] <doesallmagic> Rick Waldron: Loop cleanup
[19:38:32] <DaveMethvin> gnight
[19:38:37] <rwaldron> I'll work on cleanData tomorrow
[19:38:42] <rwaldron> thanks for the perf case
[19:38:43] <DaveMethvin> thanks
[19:44:44] <rwaldron> DaveMethvin one quick thing... I wonder if we could defer operations to the next execution turn in cleanData?
[19:44:47] <rwaldron> anyway
[19:45:10] <DaveMethvin> rwaldron hmmmm, yeah
[19:54:30] <gnarf> thats not a half bad idea rwaldron - there doesn't seem to be a reason i can think of that the actual operations of searching for data needs to be sync
[19:54:50] <DaveMethvin> yeah once it's been taken out of the doc we can have a garbage can we clean off later
[19:54:53] <gnarf> you could do the find * before you remove, push to an array of "checkForClean" and buffer em up
[19:55:11] <gnarf> +1
[19:55:18] <gnarf> though our unit tests would hate us
[19:55:24] <DaveMethvin> lol yeah
[19:55:26] <gnarf> since they all check for clean data
[20:15:23] <jqcommit> 01[13jquery01] 15dmethvin pushed 1 new commit to 06master: 02http://git.io/AFfB0Q
[20:15:23] <jqcommit> 13jquery/06master 14ea5c22e 15Renato Oliveira dos Santos: Fix #13483. Let slideDown() work after stop(). Close gh-1205.
[20:15:41] <doesallmagic> Project jQuery Core build #792: STILL FAILING in 28 sec: http://swarm.jquery.org:8080/job/jQuery%20Core/792/
[20:15:41] <doesallmagic> Dave Methvin: Fix #13483. Let slideDown() work after stop(). Close gh-1205.
[20:20:33] <rwaldron> gnarf cool, i'll give it try tomorrow :)
[20:39:51] <timmywil> rwaldron: I thought I did. what did I miss?
[20:53:12] <timmywil> I read it again and my comment stands. We gain too little sticking to our guns here.
[22:44:51] * JamesMGreene is debating if he should bring ear plugs as a peace offering to whoever becomes his jQCon roommate
[22:44:51] <b-ot> JamesMGreene: You have 1 new message, use `read when you wish to read it.
[22:44:57] <JamesMGreene> `read
[22:44:58] <b-ot> JamesMGreene: From rwaldron, 1d 14h ago: this is rad https://github.com/JamesMGreene/qunit-assert-html
[22:44:58] <bot-t> (38 hours 30 mins ago) <rwaldron> tell JamesMGreene this is rad https://github.com/JamesMGreene/qunit-assert-html
[22:45:13] <JamesMGreene> Thanks, rwaldron! :)
[22:47:04] <JamesMGreene> rwaldron: It's too bad the oldIE support is so hard for it, thus it remains an UNofficial QUnit plugin
[23:23:06] <doesallmagic> Project jQuery Color build #102: SUCCESS in 1 min 40 sec: http://swarm.jquery.org:8080/job/jQuery%20Color/102/
[23:23:06] <doesallmagic> Corey Frang: README: Add build status badge and minor clean up
[23:25:35] <gnarf> Krinkle: that build status badge caches badly
[23:25:45] <gnarf> had to open in dev tools to get the real build status
[23:25:53] <gnarf> also - sorry
[23:26:03] <gnarf> er nvm
[23:26:14] <gnarf> the sorry was cuz i saw my name, but you have author
[23:26:41] <Krinkle> See, I can always blame you :P
[23:27:03] <Krinkle> Yeah, caching looks bad.
[23:27:07] <Krinkle> Probably absent
[23:27:10] <gnarf> bbiab
[23:27:38] <Krinkle> gnarf: (when you;re back) what's the status on the new jenkins server? It not exposing Jenkins' built-in server will likely help things
[23:27:44] <Krinkle> For one, we'd be able to cache things better.
[23:28:55] <Krinkle> Setting up expiry headers for /job/*/badge/icon and/or static mime-types like png, html, js, css
[23:29:39] <Krinkle> Though best be careful with html,js,css, could get ugly when versions are mixed up. Lets stick to just badge at first.
[23:50:07] <gnarf> Krinkle: the box is up, dns is pointed, we could start moving stuff if we wanted
[23:50:09] <gnarf> i've been hoping to have you or jzaefferer around to work on it w/ me, but i've been really afk
[23:50:13] <gnarf> this week is terrible (bout to head to bed, don't wanna start that up now)
[23:50:15] <gnarf> then im flying to UK 
[23:50:17] <gnarf> tomorrow/thurs
[23:50:25] <gnarf> well today i guess
[23:50:27] <gnarf> whatever
[23:51:43] <Krinkle> I'm heading to bed now as well
[23:52:49] <Krinkle> gnarf: If you like we can chat about it tomorrow around the time the ci meeting is usually (its bi-weekly, not this week)
[23:52:52] <Krinkle> or otherwise next week.
[23:52:53] <Krinkle> cya
