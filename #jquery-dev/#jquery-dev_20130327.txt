[05:47:28] <jqcommit> [13jquery] 15nathansobo opened pull request #1213: Replace `this.constructor` references with `jQuery` in core (06master...06allow-inheritance)  02http://git.io/XVWNXA
[06:34:49] <rwaldron> gibson042 ticket "13666"
[06:34:55] <rwaldron> ...is living up to that number
[06:35:18] <rwaldron> text(null)
[06:35:36] <gibson042> you think so?
[06:35:36] <b-ot> gibson042: You have 1 new message, use `read when you wish to read it.
[06:35:40] <gibson042> read
[06:35:44] <gibson042> b-ot: read
[06:35:50] <rwaldron> gibson042 yes
[06:35:58] <gibson042> `read
[06:35:58] <b-ot> gibson042: From timmywil, 1d 10h ago: Trying to get a failing test. Let me know if you have any suggestions: https://github.com/timmywil/sizzle/compare/jquery_13378
[06:36:16] <gibson042> it's invalid input
[06:36:33] <gibson042> rwaldron: I figure we shouldn't even really care about it
[06:36:56] <rwaldron> gibson042 oh, in that case
[06:36:58] <rwaldron> boom done
[06:37:00] <rwaldron> <3
[06:37:02] <rwaldron> I agree
[06:37:32] <gibson042> :D
[06:39:51] <rwaldron> gibson042 Closing as wont-fix, based on the information presented by gibson042
[06:39:51] <rwaldron> `null` is not a valid argument to `text()`
[06:39:51] <b-ot> rwaldron: memorised ‚Äúnull`‚Äù.
[06:39:59] <rwaldron> cool?
[06:40:15] <gibson042> rwaldron +1
[06:47:16] <rwaldron> DaveMethvin ping
[06:47:37] <DaveMethvin> sup rwaldron
[06:48:47] <rwaldron> DaveMethvin, if we change occurrences of  "this.constructor" to jQuery (in jQuery core), is this going to break jQuery.sub?
[06:48:55] <rwaldron> And if yes, do we care?
[06:49:18] <rwaldron> ?13677
[06:49:21] <bot-t> [#13677]  (assigned bug) - http://jqbug.com/13677
[06:49:25] <rwaldron> docs#13677
[06:49:26] <bot-t> [#13677]  (assigned bug) - http://jqbug.com/13677
[06:49:33] <DaveMethvin> yeah i'm glad gibson042 caught that ... although .sub is deprecated i think we need to keep it working
[06:49:47] <DaveMethvin> via the migrate plugin
[06:50:02] <rwaldron> oh i didnt see that gibson042 had commented
[06:50:10] <rwaldron> I've had the tab open since I accepted the bug earlier
[06:50:23] <gibson042> rwaldron it was on the PR, not the ticket
[06:50:30] <rwaldron> yep
[06:50:34] <rwaldron> didnt see that yet either
[06:50:37] <rwaldron> :D
[06:50:55] <gibson042> I wanted to see exactly what the OP was driving at
[06:50:59] <rwaldron> I think we should want to support actual subclassing
[06:51:03] <gibson042> before commenting
[06:51:13] <gibson042> me too
[06:51:16] <rwaldron> it's easy
[06:51:29] <gibson042> wrapping is possible (and better) without changing inheritance
[06:51:32] <gibson042> IMO
[06:51:54] <rwaldron> class Foo extends jQuery {...} (in ES6 or CoffeeScript)
[06:52:01] <rwaldron> this.constructor will be Foo
[06:52:08] <rwaldron> which sucks and is wrong
[06:53:03] <gibson042> I think what ey really wants is more like myWrapperInstance.getJQuery()‚Ä¶
[06:53:52] <gibson042> because it's really weird when jQuerySubInstance.eq(0) gives you a jQuery instance instead of a subclass instance
[06:54:07] <rwaldron> gibson042 yes
[06:54:38] <rwaldron> this is exactly the same issue we had with Array.prototype.map
[06:55:05] <rwaldron> that ultimately led to changing the spec
[06:55:17] <rwaldron> let A be new Array
[06:55:38] <rwaldron> => let A be new this()
[06:55:42] <rwaldron> or soemthing similiar
[06:55:45] <rwaldron> similar
[06:55:46] <gibson042> yeah
[06:56:15] <rwaldron> I'm going to re-assign the bug to you
[06:56:21] <rwaldron> looks like you have it under control
[06:56:38] <gibson042> allright
[07:08:28] <DaveMethvin> btw rwaldron gibson042 timmywil thanks for all your effort on these tickets ... i've been swamped with work, one of them is for a March Madness site so it's kind of time critical :D
[07:10:09] <rwaldron> DaveMethvin my pleasure
[09:43:40] <JamesMGreene> scott_gonzalez: Any gotchas to watch out for when upgrading from jQuery UI 1.8.x to 1.10.x other than following the API redesign migration guides (for both 1.9.0 and 1.10.0)?
[09:43:54] <scott_gonzalez> nope
[09:44:03] <JamesMGreene> cool, thx
[09:44:04] <scott_gonzalez> JamesMGreene: If you do run into any, let me know.
[09:44:19] <scott_gonzalez> It either means there's an unknown regression or we missed something in the upgrade guides.
[09:50:55] <JamesMGreene> scott_gonzalez: Is there any way to download custom builds for particular legacy patch versions (other than 1.9.2)
[09:51:00] <JamesMGreene> ?
[09:52:18] <scott_gonzalez> nope
[09:52:46] <scott_gonzalez> I mean, you can go through the trouble of setting up a local download builder.
[09:53:02] <scott_gonzalez> But it's easier to just concat + minify manually.
[09:57:22] <JamesMGreene> k thx
[10:01:19] <JamesMGreene> scott_gonzalez: $.datepicker still has memory leak issues in IE7 due to crappy DOM support for removing tables, right?
[10:01:49] <scott_gonzalez> JamesMGreene: maybe
[10:02:10] <scott_gonzalez> http://bugs.jqueryui.com/ticket/8964
[10:08:24] <JamesMGreene> scott_gonzalez: Is $.widget._on intended as a public API?
[10:08:42] <scott_gonzalez> By public do you mean for widget developers?
[10:08:45] <scott_gonzalez> If so, yes.
[10:09:00] <scott_gonzalez> http://api.jqueryui.com/jQuery.widget/#method-_on
[10:10:41] <JamesMGreene> Right, it's being used by the BlueImp FileUpload plugin, thus prompting our whole belated jQuery UI upgrade :)
[10:11:01] <JamesMGreene> re: that bug: yup, that's exactly what we saw with datepicker, too
[10:11:11] <JamesMGreene> But do you know what the most interesting part is?
[10:11:29] <JamesMGreene> For us, it appears that the memory leak goes away if you USE datepicker
[10:11:43] <scott_gonzalez> That's crazy.
[10:11:48] <JamesMGreene> i.e. it was only a problem is the datepicker was on the page but not used
[10:12:12] <JamesMGreene> This was over 1 year ago but I'm pretty sure that's accurate
[10:13:00] <JamesMGreene> IIRC, the datepicker script inclusion followed by use of ANY jQuery UI widget was causing memory leakage
[10:13:24] <JamesMGreene> didn't make any sense to me but that's what we saw while profiling
[10:14:01] <JamesMGreene> crazy ole IE7
[11:12:49] <scott_gonzalez> mikesherov: From bz "Note that if you're using offsetWith/Height/Top/Bottom you already lose, because they return integers."
[11:13:17] <scott_gonzalez> Regarding the offset* hackery that's proposed for shadow DOM.
[11:27:10] <mikesherov> scott_gonzalez: right
[11:27:19] <mikesherov> I already knew that part :-)
[11:27:34] <mikesherov> that's the same hack when we had code review
[11:28:09] <scott_gonzalez> Yeah, it instantly made me think of us scratching our heads and going crazy.
[13:22:33] <peol> mikesherov, ping
[13:23:17] <mikesherov> you rang, peol?
[13:23:26] <peol> yeah, sorry to disturb you :)
[13:23:33] <mikesherov> no problem :-)
[13:23:37] <peol> do you know if deferred is planned to change for 2.0?
[13:23:54] <peol> like, follow the promise/a spec
[13:24:04] <mikesherov> peol: I don't think it will
[13:24:12] <mikesherov> especially regarding exceptions
[13:24:17] <peol> that's the one
[13:24:20] <peol> too bad
[13:24:44] <peol> and specific reasons (i couldn't find any discussions online)?
[13:25:56] <mikesherov> just summon jaubourg and you'll get a mourhful
[13:26:00] <mikesherov> or DaveMethvin 
[13:26:39] <peol> yeah, jaubourg was my first thought, but couldn't find him :)
[13:27:06] <peol> i'll investigate, we might need to switch to an external lib at work because of the exception thing
[13:27:43] <scott_gonzalez> So the answer is going to be loss of error info when forwarding event objects.
[13:27:52] <mikesherov> scott_gonzalez: AWWW
[13:28:07] <mikesherov> I wanted a scavenger hunt
[13:28:30] <scott_gonzalez> And if the newer browsers handle that just fine, the answer will be API parity with 1.9.x.
[13:29:23] <peol> makes sense
[13:29:35] <DaveMethvin> peol: also there is no "spec", even now
[13:29:50] <peol> i actually didn't know about it until yesterday when a colleague (sitting in another project in the same codebase) came and asked me
[13:30:09] <DaveMethvin> for better or worse, everyone can probably agree that jQuery promises are the most common by an order of magnitude or more in javascript
[13:30:24] <peol> i'm not totally read into the problematics so i thought i'd poke around here to see if it was planned for 2.0
[13:30:35] <scott_gonzalez> DaveMethvin: I don't think that's a good argument though.
[13:30:48] <scott_gonzalez> It was forced upon users after gaining critical mass.
[13:30:58] <DaveMethvin> it's not an argument, it's an observation
[13:31:29] <DaveMethvin> all our other breaking changes would pale compared to rejiggering promisees
[13:31:46] <DaveMethvin> for example, i'd say a 404 is not a failure
[13:31:49] <DaveMethvin> it's not an exception
[13:31:59] <DaveMethvin> the request finished and returned a status code
[13:32:09] <DaveMethvin> so it doesn't belong on the fail path
[13:32:43] <DaveMethvin> we've mixed a bunch of concepts and we're stuck with them in the current api unless we want to break a bunch of stuff
[13:32:51] <peol> but being manually able to throw an error i done() to have consecutive .fail() to trigger would be ideal thought, i think that's what my colleague was pondering
[13:33:48] <DaveMethvin> i talked with jaubourg about putting promise/a semantics into .then and leaving the rest as-is, that might be a compromise that limited breakage
[13:33:59] <DaveMethvin> but yo'd need to change .done and .fail then
[13:35:38] <peol> i agree, it's not an easy thing to poke at since it's so popular now. my second thought was that a plugin/monkeypatch might do in our case, if there's enough logic exposed to enable it that is
[13:37:23] <DaveMethvin> there are a couple of related issues with the same root cause
[13:37:43] <DaveMethvin> one is that jquery's own state tracking gets out of whack when user code throws an error
[13:37:58] <DaveMethvin> that could be fixed if we could use `finally` reliably but oldIE prevents that
[13:38:13] <DaveMethvin> so we can fix that in 2.0 but only if we accept the two versions won't work the same
[13:38:36] <DaveMethvin> the other problem is user code wanting to have errors and trap them in promises
[13:38:59] <DaveMethvin> we can do that only if we are willing to try/catch every error and throw away the error info
[13:39:06] <DaveMethvin> which is not good for debugging at all
[13:39:52] <scott_gonzalez> It doesn't get thrown away, it gets passed to the fail handler.
[13:39:52] <DaveMethvin> the best you can do is re-throw iff no .fail handler was specified
[13:40:06] <DaveMethvin> if there is a fail handler
[13:40:47] <scott_gonzalez> So you could have an uncaughtException handler.
[13:40:52] <DaveMethvin> i talked about this with yehuda, right now if you don't attach one it just silently doesn't do whatever you asked
[13:41:02] <DaveMethvin> but no promises impl seems to do that
[13:41:04] <peol> yeah, that would be a pretty neat way to handle it imo. the .fail() being the try-catch, and if there's no .fail(), re-throw it
[13:41:07] <scott_gonzalez> That wouldn't violate Promises/A
[13:41:21] <DaveMethvin> right, because it's such a damned vague description
[13:41:24] <DaveMethvin> which is how we got here
[13:41:36] <DaveMethvin> Promises/A+++++
[13:41:42] <snover> no promises do what?
[13:41:48] <DaveMethvin> pretty soon it's gonna look like ebay feedback
[13:41:59] <DaveMethvin> throw on uncaught exceptions
[13:42:01] <peol> another option would be to log the error with a console.warn or whatevs so the dev can start debugging it
[13:42:23] <DaveMethvin> oh definitely, we could add an entire debugging layer to jQuery
[13:42:25] <peol> if no .fail() exist that is
[13:42:44] <peol> that's not what i meant :)
[13:42:53] <DaveMethvin> if we were just dealing with recent browsers this would be easier
[13:42:56] <DaveMethvin> since they have .stack
[13:43:17] <DaveMethvin> but mainly i'm worried about the situation of having to debug silently swallowed errors
[13:43:37] <DaveMethvin> people don't even pay attention to the console half the time!
[13:43:56] <scott_gonzalez> You don't need silently swallowed errors though.
[13:44:02] <peol> then neither re-throwing it, console.warn or nothing would make a difference
[13:44:10] <scott_gonzalez> $.uncaughtException( error );
[13:44:44] <DaveMethvin> right, and that should be specified by Promises/A
[13:44:56] <DaveMethvin> or A++ 
[13:45:16] <scott_gonzalez> That's hard to specify.
[13:45:26] <scott_gonzalez> And not really necessary.
[13:45:55] <DaveMethvin> true, not "necessary"
[13:46:18] <DaveMethvin> more like "your life will be miserable if you don't have a fail handler and this isn't present"
[13:47:52] <DaveMethvin> anyway i think our impl isn't THAT far away from Promises/A, they don't even say our sometimes-async behavior is wrong
[13:47:57] <scott_gonzalez> DaveMethvin: https://github.com/domenic/promise-tests/blob/master/lib/tests/promises-a.js#L67
[13:48:22] <peol> or you could, if the fail count is accessbile, add in a one-line plugin that adds the .fail() logic if no .fail()'s are present
[13:48:22] <scott_gonzalez> sometimes-async is so annoying
[13:48:53] <DaveMethvin> I agree, why doesn't Promises/A forbid it.
[13:49:13] <DaveMethvin> and unfortunately we (and others) have code depending on it now
[13:49:46] <scott_gonzalez> I didn't want to start this discussion again.
[13:50:08] <scott_gonzalez> I should've just let peol go on the scavenger hunt :-P
[13:50:25] <mikesherov> see scott_gonzalez 
[13:50:31] <mikesherov> now you know the wisdom of my ways
[13:50:37] <scott_gonzalez> :-)
[13:50:39] <DaveMethvin> i just end up frustrated b/c we are not able to change things now even if we wanted
[13:50:45] <peol> scott_gonzalez, haha
[13:51:02] <DaveMethvin> that's why long term i'd prefer to let people replace promises, ajax, effects with other modules
[13:51:27] <DaveMethvin> $.ajax has evolved into a monster
[13:57:50] <peol> thanks for the discussion all of you, appreciate it
[17:04:22] <jqcommit> 01[13qunit01] 15Krinkle pushed 1 new commit to 06master: 02http://git.io/EbpamA
[17:04:22] <jqcommit> 13qunit/06master 144817861 15Timo Tijhof: Emit moduleStart before testStart even if test isn't in a module.
[17:06:03] <doesallmagic> Project QUnit build #279: SUCCESS in 1 min 52 sec: http://swarm.jquery.org:8080/job/QUnit/279/
[17:06:04] <doesallmagic> Timo Tijhof: Emit moduleStart before testStart even if test isn't in a module.
[19:05:42] <jqcommit> 01[13qunit01] 15Krinkle pushed 1 new commit to 06master: 02http://git.io/mxCuPg
[19:05:42] <jqcommit> 13qunit/06master 1470d15f0 15Timo Tijhof: Test: Different titles for index.html and logs.html
[19:06:37] <doesallmagic> Project QUnit build #280: SUCCESS in 1 min 8 sec: http://swarm.jquery.org:8080/job/QUnit/280/
[19:06:37] <doesallmagic> Timo Tijhof: Test: Different titles for index.html and logs.html
[19:33:59] <jqcommit> 01[13qunit01] 15Krinkle 04force-pushed 06master from 1470d15f0 to 148328122: 02http://git.io/C3z23Q
[19:33:59] <jqcommit> 13qunit/06master 148328122 15Timo Tijhof: Test: Different titles for index.html and logs.html
[19:35:04] <doesallmagic> Project QUnit build #281: SUCCESS in 1 min 18 sec: http://swarm.jquery.org:8080/job/QUnit/281/
[19:35:04] <doesallmagic> Timo Tijhof: Test: Different titles for index.html and logs.html
[20:56:09] <JamesMGreene> scott_gonzalez DaveMethvin|away et al: Do jQuery core and UI not use the same underlying Trac? i.e. it seems I do not have an account for the jQuery UI tracker despite having one for core. Does this sound right?
[20:57:30] <snover> JamesMGreene: that is correct.
[21:05:20] <JamesMGreene> scott_gonzalez: Added my past observations [that I shared with you earlier] on that crazy IE7 datepicker memory leak to the bug: http://bugs.jqueryui.com/ticket/8964#comment:9
[21:06:48] <JamesMGreene> Strangest frickin' bug ever
[21:11:02] <snover> has anyone rewritten datepicker yet? if not, not really strange
[21:23:14] <JamesMGreene> Not sure
[21:23:24] <JamesMGreene> Probably not, probably still based on Marc G.'s original
[21:26:00] <JamesMGreene> LOL, of the CSS of 2007: http://marcgrabanski.com/articles/google-uses-ui-datepicker (check out the image)
[21:26:05] <JamesMGreene> *oh the CSS
[21:27:10] <snover> and now they don‚Äôt, which is even better news
[21:27:26] <JamesMGreene> indeed
[21:27:58] <JamesMGreene> Man, it took me a while to track down its original commit into the UI project
[21:28:16] <JamesMGreene> Lots of file name and dir name changes over time (looking at you, rworth! :))
[21:28:39] <JamesMGreene> https://github.com/jquery/jquery-ui/commit/ab281b36d7cc10913a77f2f8da9ff7b7c011b3ee#ui/source/ui.datepicker.js
[21:28:39] <b-ot> JamesMGreene: Paul Bakaus (58mon 4d ago): 
[21:28:54] <JamesMGreene> [No commit message... oh the horror]
[21:39:02] <JamesMGreene> P.S. Whoever thought of `$.uiBackCompat = false;`, I love you
[21:39:52] <JamesMGreene> or, more accurately, I suppose the default: `$.uiBackCompat = true;`
