[00:00:13] <gnarf> this shit is useful: https://github.com/gnarf37/.dotfiles/blob/master/.gitconfig#L24
[00:32:38] <jqcommit> [13jquery] 15ros3cin opened pull request #1244: No ticket: Refactoring in Effects.js. Using data_priv. (06master...06master)  02http://git.io/9fWGhA
[05:10:48] <_|Nix|_> Hey, all! Is there a way to escape periods in a by-id selector?
[05:11:45] <_|Nix|_> So, if I have <div id="abc.def"></div>, how would I select that?
[05:11:56] <_|Nix|_> Apparently periods are legal in IDs.
[05:12:20] <_|Nix|_> ... and sure enough, /someone/ is using them: https://github.com/jquery/jquery-mobile/issues/5893 :/
[05:12:20] <b-ot> _|Nix|_: Issue #5893 by thojo (21m 22s ago): selects with an id containing a period don't open their popup
[05:23:06] <scott_gonzalez> _|Nix|_: http://api.jquery.com/category/selectors/
[05:35:16] <_|Nix|_> scott_gonzalez: Got it! Thanks!
[07:34:40] <scott_gonzalez> DaveMethvin: Looks like you guys got a lot done at TTWF.
[07:51:46] <rwaldron> DaveMethvin http://jsperf.com/jquery-1v2-cleandata-perf/2
[07:56:20] <rwaldron> DaveMethvin http://jsperf.com/jquery-1v2-data-perf
[08:02:52] <DaveMethvin> rwaldron yeah, the .data() part is faster ... it just takes longer to clean up
[08:03:08] <DaveMethvin> this is where attaching to the element and letting the browser remove might help
[08:03:08] <rwaldron> I'm doing each seperately
[08:03:11] <rwaldron> also, you
[08:03:12] <rwaldron> ack
[08:03:29] <rwaldron> yours used jQuery.cleanData vs jQuery.cleanData ;)
[08:03:37] <DaveMethvin> lol
[08:03:45] <DaveMethvin> never trust me 
[08:03:47] <rwaldron> <3
[08:04:05] <rwaldron> oddly enough, the results are similar
[08:04:13] <rwaldron> which is sort of boggling
[08:04:21] <rwaldron> I'm going to tweak cleanData a bit
[08:04:31] <DaveMethvin> it would have beeen using the 2.0 cleanData, either with or without data attached i guess
[08:04:37] <rwaldron> yes
[08:04:41] <rwaldron> the last jQuery in
[08:05:06] <DaveMethvin> so i like the async idea but that seems way too ambitous to get into 2.0 ... seems like a 2.1 thing
[08:05:32] <rwaldron> let me try first?
[08:05:38] <rwaldron> it might be simpler then we think
[08:05:51] <rwaldron> I also want to just re-order some ops in cleanData first
[08:05:51] <DaveMethvin> you'll need to run unit tests for UI and boris' stuff
[08:06:01] <DaveMethvin> since they punch it
[08:06:02] <rwaldron> see if some simple things can be beneficial
[08:07:17] <rwaldron> I was also thinking about that parallel thing I mentioned
[08:07:25] <rwaldron> elems / 2
[08:33:54] <rwaldron> DaveMethvin http://jsperf.com/jquery-1v2-cleandata-perf/2
[08:37:25] <m_gol> nice
[08:37:30] <m_gol> still slower on Chrome, though
[08:38:43] <m_gol> (this "slower" is still 1.5 faster than in Firefox...)
[08:38:56] <DaveMethvin> right, so that is probably a good tradeoff
[08:39:25] <DaveMethvin> we can revisit in 2.1/1.11 and should
[08:39:44] <DaveMethvin> it's really too late for major reorg for 2.0
[08:39:52] <m_gol> yeah
[08:40:38] <m_gol> so, apart from rwaldron's work, one pr left for 2.0
[08:40:47] <DaveMethvin> right
[08:40:57] <DaveMethvin> and retest everything manually
[08:41:10] <m_gol> swarmy's not behaving good? ;)
[08:41:21] <DaveMethvin> not for the last month ... :(
[08:53:33] <dragongun100> Hello, German anyone ?
[08:54:09] <dragongun100> Hello, German anyone ?
[08:55:50] <jqcommit> 01[13jquery01] 15gibson042 pushed 1 new commit to 06master: 02http://git.io/qvZoeQ
[08:55:50] <jqcommit> 13jquery/06master 1403db1ad 15Richard Gibson: Fix #12838: hook point for non-jQuery.ajax synchronous script fetch/execute in domManip. Close gh-1051.
[08:59:06] <m_gol> https://github.com/jquery/jquery/pull/1241/files#L0R517
[08:59:06] <b-ot> m_gol: Pull request #1241 by yiminghe (2d 10h ago): make left/top auto value consistent across browsers
[08:59:16] <m_gol> I don't like the number of bytes it requires :(
[08:59:22] <dragongun100> Hello, German anyone ?
[08:59:42] <DaveMethvin> dragongun100 no
[09:00:00] <dragongun100> no body?
[09:00:09] <DaveMethvin> m_gol we can wait until a patch release to land that if we want
[09:00:12] <doesallmagic> Project jQuery Core build #793: STILL FAILING in 4 min 29 sec: http://swarm.jquery.org:8080/job/jQuery%20Core/793/
[09:00:12] <doesallmagic> richard.gibson: Fix #12838: hook point for non-jQuery.ajax synchronous script fetch/execute in domManip. Close gh-1051.
[09:00:16] <DaveMethvin> maybe something better will come up
[09:00:29] <m_gol> I thought it's not required but it seems it is
[09:01:10] <m_gol> since WebKit returns the computed value there and position() is not what we want for elements positioned relatively
[09:01:33] <m_gol> Firefox is correct, again, see: http://jsfiddle.net/m_gol/QzvH5/12/
[09:01:42] <m_gol> divs 5-7
[09:04:06] <m_gol> DaveMethvin, what do you think about this change: https://github.com/jquery/jquery/pull/1241/files#L1R92 ?
[09:04:11] <b-ot> m_gol: Pull request #1241 by yiminghe (2d 10h ago): make left/top auto value consistent across browsers
[09:04:58] <DaveMethvin> m_gol yeah it seems like one call to gCS is better than two
[09:05:21] <DaveMethvin> yiminghe has done a few patches, seems like a sharp guy
[09:05:43] <m_gol> yeah :)
[09:06:11] <m_gol> I had a few remarks but he corrected them quite quickly
[09:13:59] <m_gol> DaveMethvin: mikesherov indicated we might do sth different to what's officially returned by getComputedStyle according to CSSOM
[09:14:10] <m_gol> and, for example, always return pixels
[09:14:20] <DaveMethvin> yes
[09:14:31] <DaveMethvin> definitely want px if possible
[09:14:35] <m_gol> or we could just say .css() is unreliable on non-positioned elements and not care about it
[09:14:49] <m_gol> hah, because currently we kind of decided to keep the current behavior
[09:15:15] <m_gol> i.e. to follow CSSOM more closely, i.e. return the computed value for non-positioned elements
[09:15:27] <m_gol> so it could be 'auto' or '1%'
[09:15:36] <m_gol> depending on the browser
[09:15:46] <mikesherov> yeah, I mean, we should pave over actual browser bugs
[09:15:58] <m_gol> that's why I asked yiminghe for a specific check for position static in this workaround
[09:16:01] <DaveMethvin> yeah we've talked about how the spec needs ways to get the non-px values
[09:16:02] <mikesherov> but if the spec says auto is the actual right thing to return, we should return that
[09:16:30] <m_gol> spec currently says 1% should be returned for a non-positioned element having left: 1% specified :)
[09:16:39] <m_gol> now THAT's ridiculous
[09:16:47] <DaveMethvin> the spec is an ASS
[09:17:13] <DaveMethvin> but we must respect the spec's authority i suppose...if we can
[09:17:56] <m_gol> ok, but this requires lines 512-514 & 517-519 here: https://github.com/jquery/jquery/pull/1241/files
[09:17:56] <b-ot> m_gol: Pull request #1241 by yiminghe (2d 10h ago): make left/top auto value consistent across browsers
[09:18:36] <m_gol> maybe with some changes regarding my comments
[09:18:45] <m_gol> anyway, now we still do NOT respect the spec completely
[09:19:02] <DaveMethvin> I just KNOW we are going to get complaints no matter which way we go
[09:19:12] <m_gol> since even with this patch we'll be returning 'auto' for {position: static; left: 1%;} in WebKit
[09:19:19] <m_gol> and 1% in Firefox
[09:19:33] <DaveMethvin> which seems double-wrong
[09:19:49] <m_gol> IE returns pixels there, btw
[09:19:50] <DaveMethvin> it's not spec, and it's not px
[09:19:52] <m_gol> full circus ;(
[09:19:57] <m_gol> yea
[09:19:58] <m_gol> h
[09:20:02] <DaveMethvin> i'm starting to like IE
[09:20:04] <DaveMethvin> :(
[09:20:07] <DaveMethvin> :)
[09:20:33] <DaveMethvin> px are the most useful values i think for doing something with the element
[09:20:40] <m_gol> yeah
[09:20:44] <DaveMethvin> and consistent with gCS
[09:21:32] <m_gol> so we have to choose between being wrong but convenient in all browsers (px everywhere) and being right in Fx but being wrong and completely not sane in WebKit
[09:21:32] <DaveMethvin> man i ended up trolling this guy hard in http://bugs.jquery.com/ticket/12799
[09:22:04] <DaveMethvin> didn't really  mean to but didn't notice he had left out CDATA until near the end
[09:22:23] <DaveMethvin> oh, and I hate XHTML
[09:22:32] <DaveMethvin> XHTML is JUNK
[09:22:43] <DaveMethvin> ?XHTML is JUNK
[09:22:43] <b-ot> DaveMethvin: memorised ‚ÄúXHTML‚Äù.
[09:23:03] <bot-t> DaveMethvin, #7727 (get() always expects xml when used on the local filesystem ... - http://bugs.jquery.com/ticket/7727
[09:23:23] <DaveMethvin> why thank you bot-t
[09:23:51] <m_gol> :)
[09:24:34] <m_gol> XML syntax with dynamic documents and zero tolerance for errors is a hazard
[09:25:00] <DaveMethvin> i think about 1/3 of the docs i've seen have an XHTML doctype and NO HOPE of ever validating
[09:25:29] <m_gol> about what I said... the good thing about returning a non-useful and incorrect value in WebKit is that we can just blame them and close it
[09:25:58] <DaveMethvin> lol
[09:26:04] <m_gol> oth I *really* doubt anyone will come complain about .css() not returning 'auto' on non-positioned elements
[09:26:05] <DaveMethvin> i like your style m_gol!
[09:26:22] <jqcommit> 01[13jquery01] 15gibson042 pushed 2 new commits to 061.x-master: 02http://git.io/A0mAHQ
[09:26:22] <jqcommit> 13jquery/061.x-master 140100bec 15Richard Gibson: Fix #12838: hook point for non-jQuery.ajax synchronous script fetch/execute in domManip. Close gh-1051....
[09:26:22] <jqcommit> 13jquery/061.x-master 1412a1017 15Richard Gibson: Followup #13779: Backwards-compatible unit test
[09:26:28] <m_gol> ;)
[09:26:28] <DaveMethvin> right, "auto" is like "who knows"
[09:26:40] <DaveMethvin> ok let me land that ros3cin pull
[09:26:49] <m_gol> nice :)
[09:29:38] <m_gol> But I doubt we should be making such a change for 2.0, too soon to test all the implications. And current yiminghe solution adds lots of bytes so it's not ideal as well.
[09:29:55] <DaveMethvin> agreed
[09:29:59] <m_gol> the thing is, we all agree the spec is broken and each of 3 major engines reports sth different
[09:30:19] <DaveMethvin> maybe we need a random number generator
[09:30:21] <m_gol> so it's not unreasonable to not care about the spec here and have our own .css(prop) spec
[09:30:26] <m_gol> :D
[09:31:30] <m_gol> I'd really like to just not care about non-positioned elements but I know people will complain about it, no matter what we'll write in docs
[09:31:50] <m_gol> oh man, this mess does bug me
[09:38:24] <jqcommit> 01[13jquery01] 15dmethvin pushed 1 new commit to 06master: 02http://git.io/bDSOFQ
[09:38:24] <jqcommit> 13jquery/06master 145179fa0 15ros3cin: Refactor code in effects to use data_priv. Re- Close gh-1244.
[09:45:22] <m_gol> so we'll now waiting for rwaldron's patch, then we need to test everything manually and then the final comes?
[09:45:34] <DaveMethvin> that sounds like the plan
[09:45:39] <DaveMethvin> and i have to write the blog post
[09:46:11] <m_gol> the full 2.0 changelog? that will be sth :D
[09:46:34] <DaveMethvin> yeah a bit of a pain to generate 
[09:46:48] <DaveMethvin> i'll need to cross check with the 1.x changes that may not have a 2.0 tag
[09:47:11] <DaveMethvin> oh well the github commit log will have most of the ticket numbers too
[09:49:08] <rwaldron> DaveMethvin I've successfully improved performance in chrome and IE9
[09:49:23] <rwaldron> (ie. better then 1.9.1)
[09:49:31] <m_gol> nice!
[09:49:34] <DaveMethvin> great!
[09:49:41] <rwaldron> in Firefox and IE10 it's better then 2, but not better then 1.9.1
[09:49:46] <rwaldron> Here's what I've learned:
[09:50:40] <rwaldron> 1. maintainability of this path means less code, but lower performance because we're sharing abstracted operations. Abstracted operations imply more function calls on the stack
[09:51:28] <rwaldron> 2. performance was better in 1.9.1 but the code path was insane with several different methods of handling data cleanup for different platforms
[09:51:49] <rwaldron> (no concept of re-use)
[09:52:18] <rwaldron> Compare:
[09:52:28] <rwaldron> A. 1.x https://github.com/jquery/jquery/blob/1.x-master/src/manipulation.js#L743-L794
[09:52:39] <rwaldron> B. 2.x https://github.com/jquery/jquery/blob/master/src/manipulation.js#L430-L461
[09:53:29] <DaveMethvin> oh i see, we cheated and looked directly at the cache object for speed
[09:54:02] <DaveMethvin> the new code is definitely cleaner
[09:54:22] <rwaldron> C. dev https://github.com/rwldrn/jquery/compare/cleandata-execution-turn
[09:54:33] <rwaldron> Yes
[09:54:47] <rwaldron> And look here, I've had to do the same thing for the delete operation
[09:55:26] <DaveMethvin> unfortunate but this IS a critical path for a lot of code
[09:55:39] <DaveMethvin> esp MV* frameworks that whack a whole view as HTML
[09:55:44] <rwaldron> Now, as I understand it, IE11 has WeakMaps which means I will be willing to suffer two code paths for that boost
[09:55:52] <DaveMethvin> and have to throw away the old view
[09:56:01] <DaveMethvin> well i like the idea of trying async cleanup for this in 2.1
[09:56:25] <rwaldron> async cleanup wont work
[09:56:34] <rwaldron> I tried some variations this morning
[09:57:03] <doesallmagic> Project jQuery 1.x Core build #131: STILL FAILING in 30 min: http://swarm.jquery.org:8080/job/jQuery%201.x%20Core/131/
[09:57:04] <doesallmagic> * richard.gibson: Fix #12838: hook point for non-jQuery.ajax synchronous script fetch/execute in domManip. Close gh-1051.
[09:57:04] <doesallmagic> * richard.gibson: Followup #13779: Backwards-compatible unit test
[09:57:07] <rwaldron> well, let's say: so far no dice
[09:57:13] <rwaldron> but let's think about it for the future
[09:57:43] <m_gol> btw, http://gs.statcounter.com/#browser_version_partially_combined-ww-weekly-201306-201315
[09:57:44] <m_gol> It seems IE9 will become irrelevant before IE8 does
[09:58:00] <rwaldron> m_gol agreed
[09:58:11] <DaveMethvin> very possible, since ie9 will just about all get auto-upgrade to ie10
[09:58:13] <DaveMethvin> which is good!
[09:58:17] <rwaldron> this is the nice thing about fast release cycles and auto-update
[09:58:25] <rwaldron> yes, very very good
[09:58:26] <m_gol> everywhere except Vista which loses market share
[09:58:40] <DaveMethvin> oh well, we will keep plugging on this stuff ... rome wasn't burned down in a day
[09:58:59] <rwaldron> ok, so I'll go ahead and push these optimizations I guess
[09:59:00] <m_gol> and if we dropped IE9 we could utilize classList, up until then the implementations should mature enough
[09:59:18] <DaveMethvin> m_gol does android 2.3 have it? 
[09:59:28] <rwaldron> m_gol no classList until all implementations support multiple arguments
[09:59:34] <rwaldron> daaaamn.
[09:59:40] <rwaldron> I've been babysitting that ticket for years
[09:59:50] <rwaldron> everyone wants a piece of the classList action
[09:59:52] <rwaldron> what gives?
[10:00:21] <m_gol> Android 2.3 doesn't
[10:01:14] <rwaldron> android 2.3 can DIAF
[10:01:23] <rwaldron> ugh this sucks
[10:01:31] <rwaldron> I really don't want to access data like this
[10:01:42] <rwaldron> we might as well just go back to the bad old days
[10:02:19] <m_gol> I guess newer Androids don't support multiple arguments, anyway
[10:02:31] <m_gol> it's quite fresh
[10:02:42] <m_gol> also, apparently we won't have multiple arguments for toggleClass
[10:02:49] <m_gol> I mean, classList.toggle
[10:02:52] <doesallmagic> Project jQuery Core build #794: STILL FAILING in 5 min 46 sec: http://swarm.jquery.org:8080/job/jQuery%20Core/794/
[10:02:53] <doesallmagic> * richard.gibson: Followup #13779: Backwards-compatible unit test
[10:02:53] <doesallmagic> * Dave Methvin: Refactor code in effects to use data_priv. Re- Close gh-1244.
[10:03:11] <m_gol> because the second parameter is reserved for a toggle flag...
[10:03:56] <m_gol> I mean, they could be more flexible there, after all it's not so hard to distinguish string from boolean...
[10:05:39] <rwaldron> what is the toggle flag?
[10:05:56] <m_gol> classList.toggle( 'className', false )
[10:06:12] <m_gol> == remove( 'className' )
[10:06:17] <rwaldron> By looking at it, I have no idea what that means
[10:06:23] <rwaldron> interesting
[10:06:27] <rwaldron> I hate it.
[10:06:37] <m_gol> Chrome supports it, Firefox has a ticket for it
[10:06:48] <rwaldron> toggle('className') should remove 'className' if it exists
[10:06:56] <m_gol> well, jQuery's toggleClass accepts boolean as well
[10:06:58] <rwaldron> and add it if it doesnt
[10:07:05] <rwaldron> that still awful
[10:07:18] <m_gol> I don't know, I find it useful sometimes
[10:07:37] <m_gol> toggleClass( 'className', someBooleanFlagIComputedEarlier )
[10:08:26] <m_gol> way shorter than putting ifs everywhere
[10:09:34] <rwaldron> function classOp(flag) { return (flag ? "add" : "remove") + "Class"; }
[10:09:40] <rwaldron> elems[ classOp(someBooleanFlagIComputedEarlier) ]( 'className' )
[10:09:44] * rwaldron shrugs
[10:09:44] <b-ot> rwaldron: ¬Ø\_(„ÉÑ)_/¬Ø
[10:11:25] <m_gol> I find the former easier to human-parse
[10:11:36] <m_gol> btw, that's defined here: http://www.w3.org/TR/domcore/#domtokenlist
[10:15:40] <m_gol> anyway, even with this boolean flag, I don't really understand why this prevents them from allowing token list in toggle
[10:15:57] <m_gol> and this does suck
[10:20:56] <rwaldron> DaveMethvin I think I found another way to optimize
[10:21:08] <DaveMethvin> k
[10:21:21] <rwaldron> the call to jQuery.event.remove( elem, type )
[10:21:43] <rwaldron> inside jQuery.event.remove it gets the priv data again
[10:21:51] <rwaldron> so what if, instead of that...
[10:21:59] <rwaldron> we changed the call to jQuery.event.remove( elem, type, undefined, undefined, undefined, data );
[10:22:03] <rwaldron> and added the data at the end
[10:22:16] <rwaldron> and in jQuery.event.remove
[10:22:17] <rwaldron> elemData = elemData || data_priv.get( elem );
[10:22:35] <rwaldron> where elemData is what I meant by "data" in that args list
[10:22:43] <rwaldron> it's way ugly, but works
[10:23:17] <DaveMethvin> in a mtg..
[10:23:38] <rwaldron> ok
[10:33:05] <rwaldron> DaveMethvin when you're out of the meeting... something to look at: http://jsperf.com/jquery-cleandata-perf
[10:41:33] <m_gol> are there some milestone restrictions here: http://bugs.jquery.com/admin/ticket/milestones? I can remove/add everything in other categories but nothing here
[10:41:48] <m_gol> and we need 2.next & 1.next/2.next (analogous to 1.10/2.0 etc.)
[10:41:58] <rwaldron> those are ok with me
[10:42:08] <rwaldron> anything else is historic
[10:42:35] <m_gol> I mean I wanted to add them but apparently I can't
[10:46:01] <Krinkle> rwaldron: My condolences on _evalSrc. I feel your pain ;-)
[10:46:41] <Krinkle> _evalUrl 8
[11:44:32] <gibson042> rwaldron: lol @ that logic. it parallels the "needless, internal second argument of jQuery.cleanData" from the recently-landed https://github.com/jquery/jquery/pull/1234
[11:44:32] <b-ot> gibson042: Pull request #1234 by orkel (1w 2d ago): Use data_priv methods instead of jQuery._removeData and jQuery._data; 
[11:58:41] <rwaldron> gibson042 I hope it was clear that it turned my stomach to even think about
[11:58:56] <gibson042> absolutely
[11:59:09] <rwaldron> good :)
[11:59:53] <DaveMethvin> Sometimes you just have to close your eyes and think of England
[12:00:33] <gibson042> and if we were to go that route, I'd advocate either an closure variable or a property on jQuery over that parameter chain
[12:01:36] <snover> short of building it myself is there a place i can find info on the latest jquery 2 filesize?
[12:01:50] <gibson042> e.g., `data_lastRetrieved || data_priv.get(‚Ä¶)`
[12:02:23] <scott_gonzalez> snover: You can check the size of http://code.jquery.com/jquery-git2.js
[12:02:34] <DaveMethvin> snover, we have the gzip size when it's built... last i looked it was about 29300 or so
[12:02:46] <scott_gonzalez> closure compiler says Original Size:	215.49KB (65.8KB gzipped)
[12:03:02] <scott_gonzalez> That's my goto tool for checking file size :-P
[12:03:12] <DaveMethvin> goto considered incorrect
[12:04:28] <scott_gonzalez> DaveMethvin: That was uncompressed.
[12:04:46] <scott_gonzalez> It actually failed to compress.
[12:04:52] <snover> heh
[12:04:55] <snover> glad i asked!
[12:05:15] <DaveMethvin> -git2 isn't supposed to be compressed
[12:05:32] <scott_gonzalez> I mean that Closure Compiler failed to compress it.
[12:05:34] <scott_gonzalez> http://closure-compiler.appspot.com/home
[12:05:49] <scott_gonzalez> Dump -git2 in there and you'll get a bunch of errors.
[12:05:55] <snover> tl;dr i am trying to counterpoint someone claiming that jquery is ‚Äúpretty sizable these days‚Äù
[12:06:24] <DaveMethvin> well, min/gz the full 2.0 is 29300 or so
[12:06:44] <DaveMethvin> with the alternate selector engine and no optional modules it's like 9200 min/gzip
[12:07:00] <DaveMethvin> the readme in the repo has the list of modules you can exclude
[12:07:40] <DaveMethvin> the 9200 still includes selection/traversal/manipulation
[12:07:51] <snover> that‚Äôs good enough for me
[12:08:17] <DaveMethvin> the only major thing left is to make callbacks/deferred optional
[12:08:38] <DaveMethvin> but some code will need to be changed to remove the dependency .ready() has on deferreds
[12:09:15] <snover> so that‚Äôs selection, traversal, manipulation (but not css manipulation?), and deferreds
[12:09:22] <snover> and the utility functions
[12:09:35] <DaveMethvin> right
[12:09:50] <DaveMethvin> .css() can be done with add/removeClass which is there
[12:14:49] <snover> any thought on how much less that would be decomposed to not include deferreds?
[12:15:10] <DaveMethvin> not sure
[12:15:28] <snover> ok, that‚Äôs fine
[12:15:29] <snover> thanks
[12:15:32] <DaveMethvin> the overall size will grow b/c the .ready() code will need to do its own loop
[12:15:40] <DaveMethvin> but not by that much
[12:15:59] <DaveMethvin> and i would like to eliminate that as a requirement, but prob not until 1.11/2.1
[12:16:31] <snover> just tell everyone they need to load jquery before </body> ;)
[12:16:55] <DaveMethvin> except in ie6
[12:17:09] <snover> doesn‚Äôt matter to me!
[12:17:11] <DaveMethvin> we must serve the 0.01%!!!
[12:17:45] <DaveMethvin> only you can prevent .ready() abuse 
[12:19:26] <snover> technically it‚Äôs the 0.29% dave
[12:19:36] <snover> and the ie7 0.64%
[12:19:57] <DaveMethvin> First they came for the IE6, and I said nothing
[12:20:32] <DaveMethvin> then they came for IE7 and IE8, and i said, "Now that's more like it!"
[12:28:47] <snover> well at least the ACLU filed a complaint with the FTC about how carriers aren‚Äôt upgrading their old android phones ;)
[12:29:03] <snover> my civil liberties as a developer are being unreasonably impinged by this
[12:30:44] <DaveMethvin> i would think android 2.3 is a civil rights issue
[12:31:47] <DaveMethvin> life, liberty, and the pursuit of Ice Cream Sandwich
[13:20:37] <m_gol> as for civil rights issues
[13:20:38] <m_gol> http://gs.statcounter.com/#browser_version_partially_combined-CN-monthly-201203-201303
[13:20:43] <m_gol> a year ago IE6 had 25%
[13:20:52] <m_gol> nice, didn't know it FINALLY went down
[20:08:55] <jqcommit> 01[13jquery01] 15dmethvin pushed 1 new commit to 061.x-master: 02http://git.io/pt8fWA
[20:08:55] <jqcommit> 13jquery/061.x-master 140db70aa 15Micha≈Ç Go≈ÇeÃ®biowski: Fix #13741. Make wrap/unwrap methods optional; close gh-1236....
[20:23:16] <jqcommit> 01[13jquery01] 15dmethvin pushed 1 new commit to 061.x-master: 02http://git.io/LtvKlw
[20:23:16] <jqcommit> 13jquery/061.x-master 1435784a8 15Micha≈Ç Go≈ÇeÃ®biowski: Fix #13743. Remove deprecated support.boxModel. Close gh-1231....
[20:40:26] <doesallmagic> Project jQuery 1.x Core build #132: STILL FAILING in 31 min: http://swarm.jquery.org:8080/job/jQuery%201.x%20Core/132/
[20:40:26] <doesallmagic> Dave Methvin: Fix #13741. Make wrap/unwrap methods optional; close gh-1236.
[21:11:31] <doesallmagic> Project jQuery 1.x Core build #133: STILL FAILING in 31 min: http://swarm.jquery.org:8080/job/jQuery%201.x%20Core/133/
[21:11:32] <doesallmagic> Dave Methvin: Fix #13743. Remove deprecated support.boxModel. Close gh-1231.
