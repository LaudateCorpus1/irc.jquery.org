[05:21:55] <gibson042> .
[06:36:49] <scott_gonzalez> gnarf: Do you know why easings are always passed 0 as firstNum and 1 as diff?
[06:37:20] <gnarf> nope
[06:37:23] <scott_gonzalez> https://github.com/jquery/jquery/blob/master/src/effects.js#L578
[06:37:28] <gnarf> but i assume at some point, they didnt
[06:37:29] <scott_gonzalez> Seems strange.
[06:37:42] <gnarf> and then someone realized that easing only needs to be calculated for 0->1
[06:38:00] <scott_gonzalez> Maybe.
[06:38:19] <scott_gonzalez> Is there any core documentation on easings?
[06:43:08] <scott_gonzalez> Ok, so easings were added in 1.1 and they passed actual values.
[06:43:15] <scott_gonzalez> In 1.2 it changed to 0 and 1
[06:43:56] <scott_gonzalez> I think it may be safe to write easings without paying attention to those parameters :-)
[06:46:00] <kswedberg> scott_gonzalez: Jonathan chaffer wrote about writing "easing plugins" in the first 2 editions of our book. If you wanna take a look, lemme know.
[06:46:40] <scott_gonzalez> Yeah, that would be worth a read.
[06:46:52] <scott_gonzalez> Can you send me that chapter?
[06:46:58] <kswedberg> k. yep!
[06:47:02] <scott_gonzalez> Thanks.
[06:48:14] <scott_gonzalez> gnarf: Check this out: https://gist.github.com/8777be721b19b09b1d54
[06:48:43] <scott_gonzalez> Most of the easings can be defined in terms of their opposite equation.
[06:48:50] <scott_gonzalez> I think we can get the code size down quite a bit.
[06:49:15] <scott_gonzalez> Math is hard.
[06:49:36] <gnarf> scott_gonzalez: at the cost of extra fn calls per "tween" ?
[06:49:53] <scott_gonzalez> Yes, one extra
[06:51:15] <gnarf> hrm
[06:51:24] <gnarf> if you made that into a generator
[06:51:42] <scott_gonzalez> Yeah, the goal is to have a generator which accepts the In, generates the Out and InOut
[06:51:52] <gnarf> like {"Quint": function() {...}, "Sine": function() {}}
[06:52:08] <scott_gonzalez> I think we can even have a generator that produces Quad, Cubic, Quart, Qunit, in a for loop
[06:52:15] <gnarf> the InOut should use In for both
[06:52:36] <scott_gonzalez> Sure, I just need to redo it.
[06:52:40] <scott_gonzalez> I was going one step at a time :-)
[06:52:43] <gnarf> yeah
[06:52:46] <scott_gonzalez> These equations are tricky.
[06:52:49] <gnarf> makes sense
[06:53:10] <scott_gonzalez> It'd probably help if I understood them :-P
[06:53:14] <gnarf> i do
[06:53:45] <scott_gonzalez> Oh good, you should help :-)
[06:53:49] <gnarf> i could prolly tackle that at some point if you like
[06:53:52] <gnarf> but prolly not today
[06:53:58] <gnarf> or this weekend
[06:54:18] <scott_gonzalez> Ok, well I've got a some other stuff I need to work on today anyway.
[06:54:29] <scott_gonzalez> Let's try to find some time early next week.
[06:54:45] <gnarf> sure
[06:55:19] <gnarf> tue/thurs during the jQuery meeting time (11central) prolly work for me
[06:55:34] <gnarf> i block like 11-1 out
[06:55:39] <gnarf> for jQuery
[06:55:43] <scott_gonzalez> Cool, that works for me.
[06:55:55] <gnarf> from the "work" schedule :)
[06:56:24] <scott_gonzalez> Soon that will be your work schedule :-)
[06:58:14] <kswedberg> scott_gonzalez: now that I look at it again, I doubt it'll be that useful for you. pretty high-level overview. but I'll send you a link anyway.
[07:01:21] <scott_gonzalez> Ok
[07:01:57] <kswedberg> sent as an attachment to your email address. kickin' it oldschool!
[07:02:14] <scott_gonzalez> I guess the 0/1 thing comes down to whether we care about easings working "properly" or just working for what they're inttended for (jQuery animations)
[07:03:04] <gnarf> scott_gonzalez: its easy enough to reduce the generator functions down to something much smaller (only pass p)
[07:03:16] <gnarf> then do the rest of the "math" in the generated results
[07:03:18] <scott_gonzalez> The parameter names in the book are better than the parameter names in core.
[07:04:17] <gnarf> easeFunc( p ) takes a linear 0-1 and "eases" it
[07:04:36] <gnarf> actually i might try to tackle this today
[07:05:03] <scott_gonzalez> Yeah, I'd like to get them down to just p, but some use duration (like elastic)
[07:05:50] <scott_gonzalez> Want me to commit what I have so far?
[07:06:24] <gnarf> the gist current?
[07:06:27] <gnarf> ill just star it
[07:06:42] <scott_gonzalez> Yeah, I'll put the whole easing section into it.
[07:06:51] <gnarf> k
[07:06:53] <scott_gonzalez> I also have changes to the easing demo (which I've been using for my testing).
[07:07:42] <scott_gonzalez> updated
[07:07:58] <scott_gonzalez> I've just been comparing my local easing demo to the one on view.
[07:08:12] <scott_gonzalez> Makes it really easy to see if the new equations are correct :-)
[07:08:49] <scott_gonzalez> Let me know when you start on it, in case I do any more work before then.
[07:09:08] <gnarf> k
[07:29:44] <scott_gonzalez> gnarf: https://gist.github.com/8777be721b19b09b1d54#file_easings.js :-)
[07:34:23] <gnarf> yeah - you could make it do the rest of the arguments pretty easily too
[08:59:31] <paul_hairday> saw rwaldron was lobbying for removal of html5shiv for 1.8. there a ticket on that i can peruse?
[09:02:24] <rwaldron> paul_hairday it didnt get any further then that
[09:02:53] <rwaldron> ... I don't think I filed a ticket
[09:02:56] * rwaldron shrugs
[09:02:58] <paul_hairday> o okay
[09:03:10] <paul_hairday> some of my feature ideas are real assholes
[09:03:12] <paul_hairday> apparently :)
[09:03:19] <paul_hairday> data-*  data()  :)
[09:03:37] <paul_hairday> and .html(i,previousHTML){ ...
[09:04:05] <paul_hairday> delegate() on the other hand was good.
[09:04:13] <paul_hairday> sorry
[09:04:48] <rwaldron> my idea for removal of html5 support had nothing to do with the feature itself
[09:05:30] <scott_gonzalez> rwaldron just hates HTML5 and prefers the simpler days of HTML 2
[09:05:52] <rwaldron> and everything to do with the fact that the the new html5inner thingy on google code is doing all the work
[09:06:27] <rwaldron> and since that was already a prerequisite
[09:06:37] <rwaldron> ... why not save ourselves some bytes :)
[09:07:40] <rwaldron> also, delegate is the effing bomb
[09:13:50] <paul_hairday> rwaldron: yup
[09:14:06] <paul_hairday> we recently switched it to duckpunch createElement/docFrag
[09:14:12] <paul_hairday> and nothing broke
[09:14:18] <paul_hairday> well except some VML
[09:14:22] <paul_hairday> but then we fixed that
[09:14:28] <paul_hairday> we being jdalton and afarkas
[09:14:46] <paul_hairday> anyway. we're shipping the new new one v soon
[09:14:47] <paul_hairday> and
[09:15:05] <paul_hairday> with that out, the support in jquery core becomes redudant
[09:15:12] <paul_hairday> so +1
[09:15:32] <paul_hairday> ?g afarkas html5shiv
[09:15:36] <bot-t> paul_hairday, aFarkas/html5shiv - GitHub - https://github.com/aFarkas/html5shiv
[09:25:33] <rwaldron> paul_hairday right so i figure the effort there is worthy of saving jQuery users from some bytes, as far as I can tell, it's pure win  :)
[09:25:49] <rwaldron> and it highlights the hard work by the html5shiv team
[09:27:00] <paul_hairday> sgtm
[11:03:04] <scott_gonzalez> gnarf: Down to just the bounce easings :-)
[12:45:58] <scott_gonzalez> Anyone around that has done a lot of work with touch events?
[12:46:27] <scott_gonzalez> Looking for things that people really like or dislike about the touch event model.
[13:06:09] <Eviltwin> I like the fact that the touch objects get updated
[13:09:53] <scott_gonzalez> What do you mean?
[13:10:11] <scott_gonzalez> The spec says "Touch objects are immutable; after one is created, its attributes must not change."
[15:13:05] <rubyruy> i was going to bring this up here but i made an ML post instead: http://forum.jquery.com/topic/a-global-event-or-simple-callback-for-new-content-entering-the-page-specifically-for-applying-widgets-and-behaviour
[15:14:27] <Eviltwin> You use .live?
[15:14:41] <rubyruy> .live doesn't help with $.widgets
[15:14:58] <rubyruy> and any kind of non-html state
[15:15:02] <Eviltwin> Don't use .live, it's deprecated
[15:15:07] <rubyruy> lol ok
[15:15:33] <rubyruy> i never liked it anyway
[15:15:38] <rubyruy> delegation is tricky
[15:15:44] <Eviltwin> No...it's not
[15:16:02] <rubyruy> oh it's just getting a rename
[15:16:03] <rubyruy> good times
[15:16:18] <Eviltwin> Little more than a rename
[15:18:16] <rubyruy> rightoh
[15:19:30] <Eviltwin> AFAIK jQuery tries hard not to use events in a way that aren't congruent with the DOM's native events
[15:23:07] <rubyruy> that's fine - and that's also why i was stressing that it need not be an event
[15:23:09] <rubyruy> it can just be a callback
[15:23:27] <rubyruy> but you'd definitely want to be able to register a series of callbacks
[15:23:37] <rubyruy> and there's nothing else quite similar anywhere else in jquery
[15:23:42] <rubyruy> so might as well make it a document event
[15:23:56] <rubyruy> but it is ultimately not important
[16:17:42] <ajpiano> ?newContent @ rubyruy
[16:17:42] <bot-t> rubyruy, jQuery.newContent is a plugin that helps maintain a set of callbacks for elements as they are added. Bind a callback with $( selector ).newContent( function ) and execute the bound callbacks by calling .newContent() on any new content you are adding to the DOM - https://gist.github.com/1003630
[16:19:17] <rubyruy> yeah as I was composing a reply to the ML thread i started to realize you could just do something like that and it would be good enough
[16:19:29] <rubyruy> still a bit like a custom event but you can just trigger it yourself
[16:19:58] <rubyruy> you already do stuff like trigger .change() if you manually did, say .attrRemove('checked') on an input
[16:19:59] <rubyruy> and it's fine
