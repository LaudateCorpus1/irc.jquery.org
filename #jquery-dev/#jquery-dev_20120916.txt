[10:27:10] <pharotek> hi, can anyone who knows jquery/js tell me if there's anything wrong with this? http://jsbin.com/ehocof/1/edit
[17:26:48] <gnarf> DaveMethvin: sigh at that random other guy calling "shenanigans"
[17:27:45] <DaveMethvin> gnarf: yeah
[17:27:45] <bot-t> (30 hours 40 mins ago) <rwaldron> tell davemethvin I'm working on a much smaller patch for http://bugs.jquery.com/ticket/12531 there is one remaining issue, but I have to drive to boston now. I'll check in with you later
[17:27:51] <DaveMethvin> gaaa!
[17:27:58] <DaveMethvin> make that ticket go away gnarf
[17:28:07] <gnarf> :)
[17:34:16] <rwaldron> DaveMethvin the entire time I worked on that ticket, I thought "why would anyone ever do this?"
[17:34:37] <DaveMethvin> well then why work on it rwaldron?
[17:34:55] <rwaldron> Because it's valid via qSA
[17:35:30] <DaveMethvin> it will be fixed in 1.9 since we won't make it take the html path anymore, right?
[17:35:35] <rwaldron> But, considering it's only been mentioned once in five years... I'd actually +1 a vote to close it as wont fix
[17:36:03] <rwaldron> DaveMethvin I've never been a supporter of that breaking change ;)
[17:36:15] <rwaldron> I view it as user hostile
[17:36:17] <DaveMethvin> since 1.8.2 will only be essential regression fixes, it's not going in there
[17:36:25] <rwaldron> totally agree
[17:37:20] <rwaldron> if we say, in 1.9 "just use $.parseHTML", that's fine by me, but I don't think we should drop support for jQuery("html")
[17:37:30] <rwaldron> so like, in this case...
[17:37:47] <rwaldron> i'd gladly close this _today_ by saying "use $.parseHTML"
[17:37:54] <rwaldron> in fact, I'd love to do that.
[17:38:05] <rwaldron> but that's not really the case
[17:38:27] <rwaldron> the case is that something in the selector just "looks like" html
[17:39:42] <DaveMethvin> our current "looks like html" is broken
[17:39:49] <DaveMethvin> that's what gets fixed in 1.9
[17:40:21] <rwaldron> cool.
[17:40:30] <rwaldron> well I jsut finished the patch
[17:40:43] <rwaldron> that doesn't break BC
[17:43:32] <rwaldron> +16 supporting tests
[17:47:08] <gnarf> rwaldron: sounds good
[17:47:21] <gnarf> rwaldron: but why write it yourself instead of "directing" </sarcasm>
[17:48:04] <rwaldron> I agree with your sarcasm, but the whole conversation over there is bumming me out
[17:48:28] <rwaldron> to me, it's not a big deal if your code gets re-written
[17:48:35] <rwaldron> (unless re-written badly)
[17:48:47] <gnarf> rwaldron: eh - smile and shake your head - if you had someone call it "shenanigans" first would it change your opinion? :)
[17:49:20] <rwaldron> That was unnec
[17:49:33] <gnarf> yeah - boo random dude
[17:50:11] <rwaldron> gnarf that was nice of you
[17:50:11] <gnarf> i hope our 3 messages can reverse that bad taste in his mouth
[17:50:18] <rwaldron> but I completely ignored his approach
[17:50:27] <rwaldron> I never even pulled the branch
[17:50:31] <gnarf> thats part of the point of a rewrite right?
[17:50:46] <rwaldron> its not really a re-write
[17:50:47] <gnarf> the fact that he submitted the pull made you want to show your approach
[17:50:53] <gnarf> ^^^
[17:50:55] <gnarf> what i meant
[17:51:12] <rwaldron> it's "I wrote a patch that doesn't break jQuery"
[17:51:22] <gnarf> :)
[17:51:24] <rwaldron> ...without deleting existing tests
[17:51:54] <rwaldron> He submitted a PR and I was reviewing on github and said "this is all wrong"
[17:52:01] <rwaldron> (in my head)
[17:52:28] <rwaldron> I then opened sublime and proceeded to write a patch that was not full of breaking changes
[17:52:33] <rwaldron> and test deletions
[17:52:38] <rwaldron> he has 1 new test
[17:52:52] <rwaldron> there is NO WAY that change can be covered with one test.
[17:53:19] <gnarf> "It's sometimes easier to re-write the code yourself and then use that to explain why you think your approach is better."
[17:56:22] <rwaldron> edit: "It's sometimes easier to write the code yourself and then use that to explain why you think your approach is better."
[17:56:30] <rwaldron> s/re-//
[17:56:39] <rwaldron> s/re\-//
[17:56:43] <rwaldron> whatever
[17:56:47] <rwaldron> ;)
[18:00:11] <gnarf> btw
[18:00:15] <gnarf> DaveMethvin rwaldron - http://sinonjs.org/
[18:00:29] <gnarf> I was looking at some units that johnkpaul had written
[18:00:33] <gnarf> and this library rules
[18:00:54] <rwaldron> gnarf https://github.com/rwldrn/jquery/compare/12531 not perfect
[18:01:07] <rwaldron> i think someone better at writting regex's could tighten that up
[18:01:38] <gnarf> nice
[18:01:48] <gnarf> lemme look at em
[18:03:20] <rwaldron> gnarf the comments should explain the strategy pretty well
[18:03:33] <gnarf> rwaldron: one tip btw
[18:03:37] <rwaldron> basically you have all these insane scenarios that jQuery has agreed to support
[18:03:46] <gnarf> a LOT of characters don't need to be escaped inside [] in regexp
[18:04:00] <gnarf> [~\|\*\^\$] and [~|*^$] are the same
[18:04:04] <rwaldron> and this does one of those "balancing plates" acts
[18:04:10] <gnarf> the ^ only needs escape if its the first char
[18:04:12] <rwaldron> oh word
[18:04:17] <gnarf> the others NEVER do inside of []
[18:04:31] <rwaldron> I suffer escape related FUD
[18:04:34] <gnarf> also if "-" is first or last, it also doesn't need escaping
[18:04:45] <gnarf> and "." never needs escaping inside [] either
[18:06:45] <rwaldron> lint complained about that ^
[18:06:57] <gnarf> rwaldron: that non-capture group you are using to capture the value part of the attr
[18:07:14] <rwaldron> yes
[18:07:20] <gnarf> rwaldron: which part of that btw?
[18:07:37] <gnarf> don't you "need" the inside of it to be there for the case?
[18:08:01] <gnarf> just wondering why its an optional non-capture group
[18:08:07] <rwaldron> I'm only trying to match this idiotic shit:
[18:08:21] <rwaldron> <button attr="foo[bar]">
[18:08:47] <rwaldron> if that didnt need to be supported, then there would be no need for the rishtml junk
[18:09:59] <rwaldron> which is looking for matches to strings that start with "<" and have "...[..." somewhere after
[18:10:01] <rwaldron> '<button name=\'foo[baz]'
[18:10:17] <rwaldron> thats from node repl, so excuse the escaping
[18:13:37] <DaveMethvin> sorry rwaldron gnarf just looking at the code
[18:14:05] <DaveMethvin> but i think in 1.9 we're just determining whether something is html by /\s*</ aren't we?
[18:14:31] <rwaldron> gnarf this is what I used to work through it
[18:14:31] <rwaldron> https://gist.github.com/3735079
[18:14:35] <DaveMethvin> at least that was what the other ticket said
[18:15:33] <rwaldron> DaveMethvin sure, but that's going to break existing code. I think we should try to avoid that if possible.
[18:15:52] <gnarf> rwaldron: you could combine the two regexp I think but it would kill readability
[18:16:01] <rwaldron> (as much as I disagree with even supporting most of this junk anyway)
[18:16:07] <rwaldron> gnarf that's what I figured
[18:16:09] <gnarf> something like (?:^\s*<|oldregexp)
[18:16:15] <rwaldron> re: both things you said
[18:17:11] <gnarf> so if the expression matches /^\s*</ it never evaluates the right side of the re any further and returns with matches[1] === undefined
[18:18:02] <gnarf> either way
[18:18:05] <gnarf> this is all voodo
[18:18:17] <gnarf> and would be easier if we just did /^\s*</ to test html
[18:18:36] <gnarf> 1.9 yay
[18:19:20] <rwaldron> right, but that's only like... 1 part of the issue
[18:19:48] * rwaldron looking at other tickets now
[18:19:57] <gnarf> rwaldron: have you looked at sinon at all
[18:19:59] <gnarf> ?
[18:19:59] <rwaldron> DaveMethvin did you get my text message from Thursday?
[18:20:05] <rwaldron> gnarf no, but I will
[18:20:21] <DaveMethvin> oh on the triage? yes
[18:20:26] <DaveMethvin> np
[18:20:29] <gnarf> rwaldron DaveMethvin - re sinon - I think we could use some of its stubs like the "clock" and ajax stubs
[18:20:36] <DaveMethvin> we triaged new bugs and 1.8.2
[18:21:02] <gnarf> of course, we would want to test un-hampered globals as well, but if we stubbed a lot of the "clock" and "xhr" tests - all the test suites run faster
[18:21:20] <gnarf> also - no need to invoke asyncTest for a lot of them anymore either
[18:21:46] <gnarf> because you can do something like this.clock.tick(2000) and any timeouts registered get called immediately
[18:22:01] <DaveMethvin> gnarf: that sounds useful
[18:22:20] <gnarf> also
[18:22:20] <DaveMethvin> also b/c it would let us step the animations more carefully
[18:22:35] <gnarf> DaveMethvin: not sure if it overrides Date() as well, but i think it does
[18:22:36] <gnarf> :)
[18:22:57] <gnarf> the XHR ones let us test edge/corner cases without having to use php/node to serve crazy responses too
[18:23:10] <DaveMethvin> those are definitely our sticky test case
[18:23:11] <DaveMethvin> s
[18:23:40] <gnarf> although at some point, we end up testing the sinon lib instead of actual XHR implementations so its probably best to leave some of them there
[18:24:27] <gnarf> this is the repo that was using it that brought my attention to the benefits of the approach: https://github.com/johnkpaul/jquery-ajax-retry/blob/master/test/jquery.ajax-retry_test.js
[18:25:22] <gnarf> that whole suite finishes in 94ms
[18:39:07] <DaveMethvin> that's impressive gnarf
[18:39:41] <gnarf> DaveMethvin: yeah - i think we should take a serious look at it in the 1.9 cycle
[18:40:10] <DaveMethvin> i'd think ajax tests would still need a healthy dose of real requests, since the problems with the xhrs and such are often being tested
[18:40:20] <DaveMethvin> but timing ones seem perfect for that
[18:40:36] <DaveMethvin> there are way too many delays in the effects units
[18:41:10] <gnarf> DaveMethvin: some of the XHR shit (like CORS???) might be easier to "mock" server responses though
[18:41:39] <DaveMethvin> i know but the xhr objects themselves are sometimes the problem being tested
[18:41:43] <gnarf> right
[18:41:56] <gnarf> like i said - we need to be careful with replacing the host XHR
[18:42:00] <gnarf> but
[18:42:10] <gnarf> im sure there are SOME tests inside ajax that could go from 200ms to 2
[18:42:16] <DaveMethvin> definitely
[18:42:41] <gnarf> and a lot inside effects that can go from 2000ms to 2
[18:42:41] <gnarf> :)
[18:42:46] <DaveMethvin> yay!
[18:43:08] <DaveMethvin> .stop().toggle().stop() :P
[18:43:15] <gnarf> yup
[18:44:26] <gnarf> DaveMethvin: also, some of the things that are causing us sticky server side issues like posting to .html --- might be able to stub some of those away
[18:44:42] <DaveMethvin> yes
[18:45:00] <DaveMethvin> also simplifies other people doing the tests locally
[18:46:05] <gnarf> ?tell mikesherov - The answer to testing crazy CORS support might lie in Sinon.js XHR stubs - http://sinonjs.org/
[18:46:05] <bot-t> gnarf, Okay.
[18:58:23] <rwaldron> reviewing my tickets, it occurs to me why I havent really addressed them
[18:58:36] <rwaldron> most require too much code to make them work for very little pay off
[18:58:55] <rwaldron> like... html5 "time" doesn't work right when it's the child of a table cell... in old ie
[18:59:05] <rwaldron> why would anyone think that it would?
[19:03:21] <gnarf> lol
