[00:48:35] <jqcommit> [13jquery] 15orkel opened pull request #1065: Fixes #10417 (06master...0610417)  02http://git.io/1zmpjg
[00:58:22] <jqcommit> [13jquery] 15gibson042 opened pull request #1066: Fix #11115: remove boolHook (where feasible) (06master...0611115)  02http://git.io/L_zTJA
[01:23:49] <jqcommit> 01[13qunit01] 15Krinkle pushed 1 new commit to 06master: 02http://git.io/oOMEWQ
[01:23:49] <jqcommit> 13qunit/06master 1498f5408 15Richard Gibson: Issue #365: Fix module picker for oldIE. Closes #366....
[01:38:06] <doesallmagic> Yippie, build fixed!
[01:38:07] <doesallmagic> Project QUnit build #229: FIXED in 3 min 55 sec: http://swarm.jquery.org:8080/job/QUnit/229/
[01:38:07] <doesallmagic> krinklemail: Issue #365: Fix module picker for oldIE. Closes #366.
[05:40:21] <scott_gonzalez> Oh boy, can't wait to use the new CSS stuff in 3 years :-)
[06:18:49] <jqcommit> [13jquery] 15mikesherov opened pull request #1067: Pass style declarations around in jQuery.css for performance improvements (06master...06t11938)  02http://git.io/nPl80A
[06:36:55] <scott_gonzalez> DaveMethvin: I'm fixing tests to work with the new focus/blur changes and I want to kill myself.
[06:36:56] <bot-t> (16 hours 30 mins ago) <agcolom> tell scott_gonzalez hi, I'm wondering whether there has been a change on web-base-template that is causing the menus on the top right hand-side to have lost their hightlighting... (Or maybe I am remembering it wrong) for example on http://jqueryui.com/, under support/community/etc 
[06:37:36] <DaveMethvin> scott_gonzalez: does 1.9 make things better, or is it the pain of dealing with both ways in different versions?
[06:39:16] <scott_gonzalez> I think it's mostly the pain of dealing with the differing behaviors.
[06:40:44] <scott_gonzalez> Does the new behavior stop the double firing?
[06:40:56] <scott_gonzalez> Oh, I guess so.
[06:41:05] <scott_gonzalez> The new behavior is async only, right?
[06:41:47] <DaveMethvin> it's sync, so it may double-fire blur
[06:41:48] <scott_gonzalez> The double firing was a simulated sync event followed by a real async evnet?
[06:42:36] <scott_gonzalez> Well, focus and blur always happens async in IE. But we get two events triggered.
[06:42:44] <DaveMethvin> pre 1.9 we always ran the handlers, then ran the DOM focus/blur method which caused it to double fire
[06:42:57] <DaveMethvin> but only for inline handlers
[06:42:57] <scott_gonzalez> Right, so now we just get the async event?
[06:43:28] <DaveMethvin> hmmm
[06:43:47] <scott_gonzalez> If we're relying on DOMElement.focus/blur() to trigger the actual event, that's gotta be async.
[06:44:12] <DaveMethvin> if you were willing to not get ANY event if the element were already focused, we could just depend on the DOM method firing focus
[06:44:31] <DaveMethvin> yeah so i think it's probably still broken
[06:45:08] <DaveMethvin> the main constraint is that jquery handlers expect to fire even if the element is already focused
[06:45:43] <DaveMethvin> gimme 10 minutes to finish something
[06:48:12] <scott_gonzalez> It seems like the new behavior is probably better.
[06:48:15] <mikesherov> DaveMethvin: https://github.com/jquery/jquery/pull/1067
[06:48:22] <mikesherov> take a look and let me know
[06:49:02] <mikesherov> DaveMethvin: I'm going to be available for like only 5 minutes for the meeting today. I couldn't find a way to keep css fast and small with the array signature. Trying again today.
[06:49:12] <mikesherov> that's essentially my update
[06:49:30] <DaveMethvin> ok thanks mikesherov
[06:49:53] <mikesherov> DaveMethvin: did you want to do a beta today? Can I get till Wednesday?
[06:50:08] <DaveMethvin> yeah i have docs to finish so i think weds is more realistic mikesherov
[06:50:14] <mikesherov> OK, thanks
[07:06:15] <jqcommit> 01[13jquery01] 15rwldrn pushed 1 new commit to 06master: 02http://git.io/WK7Yog
[07:06:15] <jqcommit> 13jquery/06master 147d5b86e 15Rick Waldron: Refactor defaultDisplay's node creation and display logic, -6
[07:20:30] <rwaldron> gibson042 ping
[07:26:19] <gibson042> rwaldron pong
[07:27:28] <gibson042> sweet size reduction
[07:32:27] <gibson042> rwaldron: hang on, I'm actually seeing +13 over my 13021
[07:36:19] <rwaldron> hm
[07:36:28] <rwaldron> I did that from latest master
[07:36:35] <rwaldron> gibson042 ^
[07:36:50] <rwaldron> latest master, branched with yours, made the changes
[07:37:02] <rwaldron> and that was the diff from master
[07:37:05] <rwaldron> *shrugs*
[07:37:05] <b-ot> Â¯\_(ãƒ„)_/Â¯
[07:41:22] <gibson042> what are your thoughts on keeping the function vs. saving the bytes? I could go either way
[07:41:47] <rwaldron> that's a good question
[07:42:47] <scott_gonzalez> paul_irish: Any idea why Chrome thinks I'm up to date? http://cl.ly/image/3u0d3n2o0E1q
[07:43:15] <rwaldron> gibson042 my initial reaction was something like: "I wish this was in a function, since it's used in two places... I'm sure Gibson has a good reason for this... let me try it..."
[07:43:28] <gibson042> I would've liked to use the test in more than two places, but there's just too much going on in jQuery.merge and jQuery.makeArray
[07:43:33] <rwaldron> so then I moved the code, but had to get in the car and drive to boston, so I couldnt follow u
[07:43:49] <rwaldron> then pulled upstream master this morning and discoverd the savings of bytes
[07:43:52] <rwaldron> so... ?
[07:44:00] <rwaldron> agreed.
[07:44:21] <gibson042> though I guess we could simplify those with `isArrayLike(arg) && ...` or `isArrayLike(arg) || ...`
[07:44:44] * rwaldron looking
[07:44:46] <gibson042> I may not be able to hit that until tonight, but I'd like to try
[07:44:53] <gibson042> take it away if you've got the time
[07:45:09] <rwaldron> ok
[07:45:55] <rwaldron> also, in an attempt to imprss you i found 37 bytes in core.js ;)
[07:45:56] <rwaldron> hahaha
[07:46:01] <gibson042> :D
[07:46:04] <rwaldron> still confirming legitimacy
[08:02:40] <rwaldron> gibson042 so...
[08:03:12] <rwaldron> apparently, a long time ago we blessed length properties with _string_ values (that happen to be numbers)
[08:03:27] <rwaldron> makeArray will make this: { length: "0" } into this: []
[08:17:49] <doesallmagic> Project jQuery Core build #552: STILL FAILING in 15 min: http://swarm.jquery.org:8080/job/jQuery%20Core/552/
[08:17:49] <doesallmagic> waldron.rick: Refactor defaultDisplay's node creation and display logic, -6
[08:28:54] <rwaldron> hm. looks passing to me.
[08:30:42] <gibson042> rwaldron: do we need to keep that in 1.9?
[08:31:36] <gibson042> it's probably not document, so if we're not using it internally then I say to hell with it and make a note in the upgrade guide
[08:31:52] <gibson042> *documented
[08:31:53] <rwaldron> gibson042 it has tests
[08:31:59] <rwaldron> let me check docs
[08:32:04] <rwaldron> its really old
[08:32:08] <rwaldron> one sec
[08:32:08] <gibson042> yeah
[08:32:48] <gibson042> looks like I'll miss the meeting after all; be back this afternoon
[08:33:01] <rwaldron> NOT documented
[08:33:32] <rwaldron> I think it was bad to allow { length: "0" } to be seen as an arraylike
[08:33:36] <rwaldron> also...
[08:34:02] <rwaldron> makeArray("foo")... intuition tells you this would make an array that looked like: [ "f", "o", "o" ]
[08:34:12] <rwaldron> but it makes an array that looks like [ "foo" ]
[08:34:14] <rwaldron> :(
[08:34:41] <rwaldron> I'll make the changes that abandon the undocumented behaviour and we can decide later if we want to go that route
[08:36:27] <DaveMethvin> rwaldron: can't change makeArray("foo") unfortunately, we even have internal code depending on it 
[08:37:03] <rwaldron> DaveMethvin of course
[08:37:24] <rwaldron> but the other is just offensive
[08:37:30] <DaveMethvin> agreed
[08:38:00] <rwaldron> btw, by dropping { length: "0" }, I can nearly eliminate the special conditions in makeArray
[08:38:13] <rwaldron> all except for typeof string
[08:38:21] <rwaldron> but even then, really simple
[08:49:41] <Krinkle> jzaefferer / gnarf: Have you had a chance to look at the offset issues in jquery core? The IE8 bug with iframe offset is backj.
[08:59:44] <rwaldron> DaveMethvin gibson042, refactored jQuery.makeArray and merge in addition to the each and map changes, for a total of -46 from current master and a surprise performance boost
[09:00:39] <rwaldron> turns out jQuery.merge was a longwinded version of [].push.apply( dest, source )
[09:00:55] <rwaldron> rather, "core_push"
[09:05:40] <Krinkle> rwaldron: I've been wondering about that too.
[09:05:50] <rwaldron> goddamnit
[09:05:51] <Krinkle> rwaldron: I always tried to avoid makeArray because it seems awfully complex
[09:06:04] <Krinkle> compared to fn.toArray for example
[09:06:07] <rwaldron> there is a special case...
[09:06:25] <rwaldron> I'll know more shortly.
[09:06:33] <rwaldron> Krinkle it is
[09:06:39] <rwaldron> it's kind of insane
[09:06:47] <rwaldron> I would continue avoiding it.
[09:07:39] <gibson042> rwaldron it's window, isn't it?
[09:08:11] <rwaldron> gibson042 hm? no
[09:08:31] <rwaldron> I had replaced all the guts of merge with core_push.apply...
[09:08:58] <rwaldron> old IE supports variable arity, but we have some special case handling
[09:09:07] <rwaldron> looking through it now
[09:10:22] <rwaldron> also... appears to be Sizzle tests failing in IE8
[09:12:09] <gibson042> rwaldron make sure oldIE can still do jQuery.merge( NodeList, NodeList )... it's used in manipulation.js:getAll
[09:12:25] <rwaldron> interesting
[09:12:31] <rwaldron> I will do that
[09:12:43] <rwaldron> but I will also add a test to jQuery.merge for that use case
[09:13:57] <gibson042> it might already be there; I'm just calling it out because those loops in merge are generally used to deal with the unreliability of NodeList.length (might be an element with name/id "length" instead of the integer we really want)
[09:14:49] <rwaldron> gibson042 yep, that was exactly it.
[09:15:18] <gibson042> I suppose that should appear in a comment too, huh?
[09:15:44] <rwaldron> yes
[09:15:58] <rwaldron> nope, no test existed for it
[09:18:55] <gibson042> we can expose Sizzle's slice if that saves you some work: https://github.com/jquery/sizzle/blob/master/sizzle.js#L206-L218
[09:36:44] <Krinkle> Hm.. what's the fastest way to get an array of N items long? I tried new Array(100); but calling .forEach on that gives 0 iterations
[09:36:53] <Krinkle> So far I've come up with new Array(123).join('.').split('.')
[09:37:20] <Krinkle> Aha, it does work with $.each
[09:37:26] <Krinkle> interesting
[09:37:34] <Krinkle> $.each( new Array(123), 
[09:39:23] <Krinkle> Perfect
[09:39:26] <Krinkle> $.each( new Array(100), function (i) { $.ajax('http://swarm.jquery.org/job/' + (1700+i)); }); 
[09:39:43] <rwaldron> Krinkle forEach appears to enumerate 0 times, because Array(100) creates an array with 100 "holes" and forEach ignores holes
[09:39:43] * Krinkle needed to find out which job between 1700..1800 was a 500 internal server error
[09:39:52] <rwaldron> so your approach with join, split is nec.
[09:39:57] <Krinkle> yeah
[09:40:25] <Krinkle> GET http://swarm.jquery.org/job/1774 500 (Internal Server Error) 
[09:40:32] <Krinkle> yay, found the bugger
[09:40:40] <rwaldron> annoying when you want to do something like... new Array(100).map( put stuff in the array )
[09:41:22] <Krinkle> yeah
[09:41:49] <Krinkle> well, there's <s>an app</s>a jQuery method for that.
[09:41:57] <Krinkle> $.map does take it
[09:42:28] <Krinkle> $.map(new Array(10), function () { return 7; });
[09:42:29] <Krinkle> [7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
[09:43:13] * Krinkle is confused as to how this job got corrupted
[09:43:40] <Krinkle> I did build this logic (I always tend to cover all edge cases), but didn't expect it to be triggered realistically
[09:43:51] <Krinkle> better than having the page blow up, but now I wonder what caused it
[09:43:58] <Krinkle> 1 in 1890 jobs, first one.
[09:48:54] <rwaldron> gibson042 so... merge is whack
[09:49:49] <gibson042> you've got that right
[09:49:55] <rwaldron> if you end up in the else branch, and have an explicit undefined in the array-like being copied, it will die
[09:50:44] <rwaldron> I think this is a lost cause
[09:51:02] <rwaldron> the good news is that jQuery 2.0's merge can be: core_push.apply( first, second ) w/ no issues
[09:51:07] <rwaldron> cc DaveMethvin ^^
[09:51:15] <rwaldron> but 1.9 must remain jank
[09:52:42] <rwaldron> gibson042 updated
[09:52:45] <rwaldron> (the branch)
[09:57:34] <gibson042> so be it, I guess
[10:02:41] <DaveMethvin> resist the urge to purge merge
[10:09:04] <gibson042> rwaldron I like your branch for ?see 13021 ... want to commit it and Close gh-1064?
[10:11:19] <timmywil> DaveMethvin: looks slower http://jsperf.com/jquery-hidden-1-8-vs-1-9
[10:46:55] <rwaldron> gibson042 sounds good
[10:47:39] <rwaldron> DaveMethvin are you doing anything especially interesting with src/core right now?
[10:48:03] <DaveMethvin> no ... what did you have in mind? :)
[10:48:04] <rwaldron> I'd like to merge the work gibson042 and I have for utility stuff
[10:48:07] <DaveMethvin> sure
[10:48:10] <rwaldron> ok cool
[10:52:28] <jqcommit> 01[13jquery01] 15rwldrn pushed 1 new commit to 06master: 02http://git.io/oCSaGQ
[10:52:28] <jqcommit> 13jquery/06master 1407a7b3e 15Rick Waldron: Fixes #13021. Normalization of core utility array like detection based on standard protocol by Richard Gibson <richard.gibson@gmail.com>. Closes gh-1064
[10:53:41] <rwaldron> gibson042 ^ all set
[10:56:37] <gibson042> awesome; ty
[11:22:55] <doesallmagic> Project jQuery Core build #553: STILL FAILING in 30 min: http://swarm.jquery.org:8080/job/jQuery%20Core/553/
[11:22:55] <doesallmagic> waldron.rick: Fixes #13021. Normalization of core utility array like detection based on standard protocol by Richard Gibson <richard.gibson@gmail.com>. Closes gh-1064
[12:12:21] <ryanneufeld> am I the only one that hears "STARSCREAM!!!!!" When I see the mergeatron emails? cc mikesherov
[12:48:34] <jqcommit> 01[13testswarm01] 15Krinkle pushed 1 new commit to 06master: 02http://git.io/Bnr1hA
[12:48:34] <jqcommit> 13testswarm/06master 14d5f2bb0 15Timo Tijhof: CleanupAction: Prevent data corruption if query times out....
[12:49:52] <scott_gonzalez> DaveMethvin: I'm fairly confident the focus/blur changes didn't actually break anything, but I'm still fighting with these damn tests.
[12:50:13] <DaveMethvin> sympathy, bro
[12:50:26] <DaveMethvin> even the unit tests for those gave me a headache with the async
[12:54:26] <scott_gonzalez> async focus leaking across tests is a killer
[12:55:35] <scott_gonzalez> I had to track down failures that were caused several tests back.
[13:01:36] <jqcommit> 01[13testswarm01] 15Krinkle pushed 1 new commit to 06master: 02http://git.io/J267-w
[13:01:36] <jqcommit> 13testswarm/06master 145a0b0f4 15Timo Tijhof: libs/ua-parser: Update to latest upstream master....
[13:10:15] <jqcommit> 01[13testswarm01] 15Krinkle pushed 1 new commit to 06master: 02http://git.io/9TJtyw
[13:10:15] <jqcommit> 13testswarm/06master 1475d40d1 15Timo Tijhof: Update README: Copy edit, spacing, spelling.
[13:15:16] <jqcommit> [13jquery] 15PaulBRamos opened pull request #1068: #4087 - insertAfter, insertBefore, etc do not work if origin and destination element is the same (06master...06bug_4087_4)  02http://git.io/xHSzDg
[14:30:40] <Krinkle> DaveMethvin: I appreciate your concern for my nuts ;-P
[14:31:01] <DaveMethvin> Krinkle: http://www.youtube.com/watch?v=3vmPwZT-9zY#t=2m15s
[14:31:36] <Krinkle> classic
[14:31:38] <Krinkle> haha
[14:31:55] <DaveMethvin> there's a frank zappa song for every programming situation
[14:32:13] <scott_gonzalez> http://www.youtube.com/watch?v=4O-SX_W0lrQ
[14:32:27] <DaveMethvin> lol
[14:32:34] <DaveMethvin> VINCE!
[16:05:54] <mikesherov> DaveMethvin: yt?
[16:06:06] <DaveMethvin> yep mikesherov
[16:06:13] <mikesherov> design question
[16:06:22] <mikesherov> so I'm doing the array version of .css
[16:06:41] <mikesherov> obviously, I want jQuery.css as well as jQuery.fn.css to have it
[16:06:53] <DaveMethvin> you sure?
[16:07:05] <mikesherov> Well, that's the real question
[16:07:20] <DaveMethvin> generally the jQuery.whatever is much simpler than the .fn.whatever
[16:07:37] <DaveMethvin> i can see it being either way tho
[16:07:48] <mikesherov> I can introduce jQuery.cssMulti (badly named), when internally I know I want an array, jQuery.css for a single element internally
[16:07:56] <mikesherov> and then have .fn.css figure it out
[16:08:14] <mikesherov> I don't want the internals to pay the price for the end user
[16:08:30] <DaveMethvin> you could also have jQuery.css take the gCS arg but not accept an array?
[16:08:44] <DaveMethvin> no i guess that would be a pain
[16:08:55] <mikesherov> right, I want scott_gonzalez to be able to write:
[16:09:00] <DaveMethvin> at least as long as oldie is around
[16:09:21] <mikesherov> Actually
[16:09:51] <mikesherov> right, I want to avoid having to use an instance to do multiget
[16:10:30] <scott_gonzalez> mikesherov wants me to be able to write nothing.
[16:10:33] <scott_gonzalez> jQuery to the extreme!
[16:10:41] <DaveMethvin> nothing at all .... nothing at all...
[16:10:43] <scott_gonzalez> write nothing, do something?
[16:11:03] <mikesherov> I want both: $(new).css($(old).css(['height', 'width'])); and  $.style( new, $.css(old, ['height', 'width']));
[16:11:15] <mikesherov> I THINK
[16:11:16] <DaveMethvin> http://www.youtube.com/watch?v=CL4iVQyp9L4
[16:11:33] <mikesherov> my question is, is  $(new).css($(old).css(['height', 'width'])); sufficient
[16:11:47] <mikesherov> I don't NEED to provide array signature to the internal
[16:11:50] <scott_gonzalez> What else were you thinking of?
[16:12:02] <DaveMethvin> yeah that seems like it's fine
[16:12:04] <scott_gonzalez> Oh, you mean no $.css() array support.
[16:12:13] <DaveMethvin> right that's the question
[16:12:18] <scott_gonzalez> That seems fine to me.
[16:12:22] <DaveMethvin> generally the low level api hasn't had all that
[16:12:24] <mikesherov> scott_gonzalez: is adding array sig to $.fn.css suffiicient instead of also adding to $.css
[16:12:33] <DaveMethvin> we've gotten it thru $.access 
[16:12:33] <scott_gonzalez> I think the only time we use $.css() in UI is when we're getting all the dimension related props.
[16:13:13] <mikesherov> scott_gonzalez: and $(elem).css would be fine, right?
[16:13:19] <scott_gonzalez> yup
[16:13:37] <DaveMethvin> ?cc
[16:13:37] <bot-t> CASE CLOASED >: |
[16:14:00] <mikesherov> ok, so i'm punting on $.css arrayâ€¦ nice
[16:14:12] <mikesherov> makes it smaller and simpler
[16:14:16] <mikesherov> and faster
[16:14:20] <DaveMethvin> yay!
[16:14:35] <mikesherov> just have to use constructed objects, so minor perf hit there, maybe....
[16:14:45] <DaveMethvin> teeny tiny most likely
[16:14:52] <DaveMethvin> compared to gCS fer sure
[16:15:02] <mikesherov> scott_gonzalez: should i build a feature detect for you?
[16:15:28] <mikesherov> ok, one last case DaveMethvin if you don't mind
[16:15:32] <scott_gonzalez> Not unless we're going to rebuild this in UI.
[16:15:32] <DaveMethvin> sure
[16:16:03] <mikesherov> pathological case of single element array: should it behave like string sig or array sig?
[16:16:22] <DaveMethvin> if an array comes in an object shoudl come out?
[16:16:33] <mikesherov> DaveMethvin: yes
[16:16:41] <DaveMethvin> i think so
[16:16:46] <mikesherov> k
[16:16:53] <mikesherov> just making sure :-)
[16:18:00] <mikesherov> scott_gonzalez: will be super easy to punch if we want it
[16:32:54] <Krinkle> rwaldron: https://github.com/jquery/jquery/commit/07a7b3e4cf961e51bddcdb90cdca34f9126ed286#commitcomment-2285303
[17:18:49] <rwaldron> Krinkle thanks for the heads up
[17:19:20] <rwaldron> pushing fix now
[17:19:25] <Krinkle> cool
[17:19:31] <rwaldron> totally stupid
[17:19:56] <rwaldron> I assumed that all modern browsers treated nodelists and node-as-nodelist the same
[17:20:03] <rwaldron> need to be explicit for FF
[17:20:13] <Krinkle> node-as-nodelist ?
[17:20:23] <rwaldron> form elements are insane
[17:20:27] <Krinkle> ah, right.
[17:20:35] <rwaldron> <form> will have length
[17:20:42] <Krinkle> I never knew that
[17:20:45] <Krinkle> do people use that?
[17:20:53] <Krinkle> interesting
[17:21:06] <rwaldron> it's from the days of document.forms
[17:21:14] <rwaldron> pre-DOM-0 compatibility
[17:21:20] <Krinkle> there's so many odd/unexpected features in the DOM, looks implemented at random for someone's convenience.
[17:21:25] <Krinkle> yeah
[17:21:27] <rwaldron> YES
[17:21:35] <rwaldron> thats's exactly what the entire DOM is
[17:21:43] <Krinkle> yep
[17:22:08] <rwaldron> like IE magically making globals for ever ID on the page
[17:22:10] <Krinkle> like that time someone needed to insert something *before* another node in a parent.
[17:22:16] <rwaldron> <div id="holyshit"></div>
[17:22:18] <Krinkle> and created insertBefore :D
[17:22:22] <rwaldron> window.holyshit
[17:22:28] <Krinkle> opera and ie
[17:22:34] <rwaldron> opera copied IE
[17:22:44] <rwaldron> and now it's part of HTML5
[17:22:47] * rwaldron barfs
[17:22:55] <Krinkle> fuck no, what really?
[17:23:05] <Krinkle> that's horrible
[17:23:10] <Krinkle> global conflicts all the way
[17:23:12] <rwaldron> IIRC the algorithm is actually called 'global polluter'
[17:23:42] <Krinkle> what about <div id="Node">, <i id="window">, <b id="document">, <em id="jQuery">
[17:24:00] <Krinkle> hail to inconsistency
[17:24:11] <Krinkle> or <span id="i"> and some random global for loop
[17:24:27] <jqcommit> 01[13jquery01] 15rwldrn pushed 1 new commit to 06master: 02http://git.io/OoNRKg
[17:24:27] <jqcommit> 13jquery/06master 143c7f2af 15Rick Waldron: Be specific about Firefox nodes-as-nodelist. Never assume that modern browsers will "get it right"....
[17:24:34] <rwaldron> I don't know
[17:24:39] <rwaldron> but I'd be interested in finding out
[17:24:47] <rwaldron> probably defers
[17:24:47] <Krinkle> I wonder if WebKit is going to boycott it or implement it
[17:25:11] <Krinkle> Was this in HTML5 from the approved versions years ago, or is this recent?
[17:25:19] <rwaldron> don't recall
[17:25:26] <rwaldron> I have to take dogs for a walk
[17:25:35] <Krinkle> ok
[17:25:50] <rwaldron> I just tested that patch in oldIE, chrome, firefox and opera
[17:25:54] <Krinkle> you "sign-off-by" your own commits?
[17:25:55] <rwaldron> i skipped safari
[17:25:56] <rwaldron> sorry
[17:26:06] <rwaldron> Tower does it.
[17:26:19] <Krinkle> Interesting, maybe that explains why I see it so often in weird places
[17:26:34] <Krinkle> good to know
[17:27:11] * rwaldron nods
[17:27:18] <rwaldron> back later
[17:32:16] <Krinkle> https://www.google.com/search?q=git+tower+disable+signed-off-by
[17:32:17] <Krinkle> http://www.git-tower.com/files/applicationHelp/pgs/Status_Commit.html
[17:32:28] <Krinkle> it can be toggled per-commit apparantly
[17:33:02] <Krinkle> according to the stackoverflow post it is redundant and meaningless unless the LICENSE file of the repository attributes meaning to this line.
[17:47:30] <DaveMethvin> ok, gonna start clearing out the pull q
[17:48:11] <jqcommit> 01[13jquery01] 15dmethvin pushed 1 new commit to 06master: 02http://git.io/x8TAAQ
[17:48:11] <jqcommit> 13jquery/06master 14cef044d 15Timo Tijhof: Test: Remove fixtures from QUnit.done hook. Close gh-1069....
[17:55:00] <doesallmagic> Project jQuery Core build #554: STILL FAILING in 30 min: http://swarm.jquery.org:8080/job/jQuery%20Core/554/
[17:55:01] <doesallmagic> waldron.rick: Be specific about Firefox nodes-as-nodelist. Never assume that modern browsers will "get it right".
[17:55:54] <DaveMethvin> oh swarmy
[17:58:47] <jqcommit> 01[13jquery01] 15dmethvin pushed 1 new commit to 06master: 02http://git.io/CAO-FQ
[17:58:47] <jqcommit> 13jquery/06master 14d41b983 15Oleg: Fix #10417. setTimeout w/o 2nd arg is jQuery.later! Close gh-1065.
[18:11:03] <mikesherov> DaveMethvin: jQuery.access never expects an array as the key parameter?
[18:11:11] <mikesherov> rwaldron: do you know about this?
[18:11:30] <DaveMethvin> heckifino mikesherov
[18:11:52] <mikesherov> / Sets many values
[18:11:57] <mikesherov> //if ( key && typeof key === "object" ) {
[18:12:06] <mikesherov> an array is an object
[18:12:21] <DaveMethvin> yeah, never needed to distinguish that
[18:12:26] <DaveMethvin> so it makes sense it wouldn't
[18:12:46] <mikesherov> so, is it against the law to skip array key detection there?
[18:13:27] <DaveMethvin> the law is not a black and white thing :P
[18:13:48] <mikesherov> I mean, it does 0 : val, 1: other val, 2: arrayProtoFn
[18:13:59] <mikesherov> soâ€¦ I'm assuming we don't ever have that case
[18:14:32] <DaveMethvin> i can't think of a sig where we do that ... yet
[18:14:44] <mikesherov> so, I'm going to make it detect arrays
[18:15:37] <DaveMethvin> you just want it to fall through, like && !jQuery.isArray( key )  i guess?
[18:15:59] <mikesherov> Or just do $.isPlainObject( key )
[18:16:06] <mikesherov> and see if that breaks anything
[18:16:09] <mikesherov> :-)
[18:16:15] <DaveMethvin> yeah use the breakage rule!
[18:16:26] <DaveMethvin> isplainobject sounds good to me
[18:19:12] <mikesherov> k
[18:46:32] <sizcommit> 01[13sizzle01] 15dmethvin pushed 1 new commit to 06master: 02http://git.io/3OOEYw
[18:46:32] <sizcommit> 13sizzle/06master 147146720 15Timo Tijhof: Test: Update index.html to new QUnit format. Close gh-177....
[18:51:59] <jqcommit> 01[13jquery01] 15dmethvin pushed 1 new commit to 06master: 02http://git.io/DH65yg
[18:51:59] <jqcommit> 13jquery/06master 1455313d3 15Timo Tijhof: Test: Update index.html to new QUnit format. Close gh-1061....
[19:26:27] <doesallmagic> Project jQuery Core build #555: STILL FAILING in 30 min: http://swarm.jquery.org:8080/job/jQuery%20Core/555/
[19:26:28] <doesallmagic> * dave.methvin: Test: Remove fixtures from QUnit.done hook. Close gh-1069.
[19:26:28] <doesallmagic> * dave.methvin: Fix #10417. setTimeout w/o 2nd arg is jQuery.later! Close gh-1065.
[19:26:29] <doesallmagic> * dave.methvin: Test: Update index.html to new QUnit format. Close gh-1061.
[19:42:11] <mikesherov> DaveMethvin: I finalized this pull: https://github.com/jquery/jquery/pull/1067
[19:56:17] <scott_gonzalez> mikesherov: Question about some unrelated CSS code.
[19:56:25] <mikesherov> scott_gonzalez: sup?
[19:56:56] <scott_gonzalez> Why do we use different logic for converting from non-px-unit -> px for getComputedStyle vs. currentStyle?
[19:59:57] <mikesherov> scott_gonzalez: what do you mean?
[20:00:06] <mikesherov> because they behave differently
[20:00:23] <mikesherov> currentStyle implies pixelLeft
[20:00:34] <mikesherov> which is a direct proportion
[20:01:04] <mikesherov> gCS implies that width always reports % as pixel, and serves the same purpose
[20:02:02] <scott_gonzalez> ok
[20:05:09] <mikesherov> also, the fallbacks to .style are different because gCS only reports empty strings when disconnected
[20:12:47] <jqcommit> [13jquery] 15scottgonzalez opened pull request #1070: CSS: Save some bytes in actualDisplay(). (06master...06actualDisplay)  02http://git.io/PQwikw
[20:40:56] <jqcommit> [13jquery] 15scottgonzalez opened pull request #1071: CSS: Save some bytes. (06master...06css-bytes)  02http://git.io/f_fPNw
[23:17:56] <eddiemonge> anyone know whats wrong with jquery.com?
[23:30:26] <snover> itâ€™s not dojotoolkit.org?
[23:30:32] <snover> i dunno, seems good to me
[23:30:48] <danheberden> haha snover
[23:30:50] <danheberden> well played
[23:31:22] <snover> vanilla-js.com for all your javascript needs
[23:32:15] <danheberden> haha
[23:44:23] <snover> seriously though itâ€™s like 45 minutes past my late bedtime
[23:44:25] <snover> why am i here
