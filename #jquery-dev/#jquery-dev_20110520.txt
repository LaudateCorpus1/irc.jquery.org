[05:37:01] <mydoghasworms> Are there any plans to make the datalink plugin support radio buttons and checkboxes? I see there is a fork on gitHub to address this, but it's for an old version of jQuery.
[07:41:47] <rwaldron> timmywil yt?
[07:42:06] <timmywil> rwaldron: hi
[07:42:24] <rwaldron> docs#9362
[07:42:26] <bot-t> [#9362]  (closed bug: duplicate) - http://jqbug.com/9362
[07:42:35] <rwaldron> says its fixed when they use edge version
[07:42:44] <rwaldron> but thats a dupe of 9319
[07:42:51] <rwaldron> and 9319 pull hasnt landed
[07:42:57] <rwaldron> was this fixed by some other means?
[07:43:39] <timmywil> not sure that's a dupe.  One is for attr and the other is for val
[07:44:21] <rwaldron> um
[07:44:30] <timmywil> I think it had to do with the recent changes to the value attrHook
[07:44:54] <rwaldron> so... attr("value") of a meter element isnt val() and they arent getting the same infor from meter.value?
[07:46:10] <timmywil> attr("value") won't use val; it will get the value property if value in elem, otherwise the attribute.
[07:46:37] <rwaldron> am i nuts?
[07:46:41] <rwaldron> did that change?
[07:47:00] <timmywil> haha, no it never used val
[07:47:22] <rwaldron> i must've imagined that.
[07:47:35] <rwaldron> admittedly, i never did much work in attributes.js
[07:47:45] * rwaldron shrugs
[07:47:53] <timmywil> no worries
[07:48:20] <rwaldron> so, i have an idea maybe
[07:48:56] <rwaldron> ugh
[07:48:56] <timmywil> what's that
[07:49:05] <rwaldron> is jsfiddle way slow for you today?
[07:50:55] <timmywil> yup :P
[07:51:08] <rwaldron> slowly, my idea is in the making
[07:51:18] <rwaldron> i cant believe how much of my day relies on jsfiddle
[07:51:29] <rwaldron> and it being this slow is fucking me up big time
[07:51:50] <timmywil> mentioning in the jsfiddle channel
[07:53:42] <rwaldron> timmywil http://jsfiddle.net/rwaldron/fycvn/4/
[07:56:45] <timmywil> hmmm, yea that would work. attr is ok now though and I'm more for the pull's way of handling val
[07:57:02] <rwaldron> 2 heads are better then one
[07:57:19] <rwaldron> a in, always nice to get a review on an idea
[07:57:22] <rwaldron> as in*
[07:57:46] <rwaldron> ok, so landing the pull would effectively solve both issues?
[07:57:52] <rwaldron> i'll un-dup this
[07:58:04] <timmywil> already done :)
[07:58:07] <rwaldron> eh, you already did
[07:58:48] <rwaldron> so, how about a land on the pull, that way we can close the book
[07:59:59] <rwaldron> timmywil also, this is good but starting to bitrot... https://github.com/jquery/jquery/pull/352/files
[08:00:23] <rwaldron> wait, there was another commit
[08:00:25] <rwaldron> fuck
[08:00:28] <rwaldron> let me tst this
[08:06:01] <rwaldron> timmywil jsut curious, what is your workflow for testing all the browsers we support?
[08:06:36] <timmywil> I use VMs for the IEs and Firefox versions that aren't F4
[08:07:17] <timmywil> but I don't have older safaris or operas
[08:07:28] <rwaldron> ok, so not much different then
[08:08:06] <jqcommit> jquery: master rwldrn * f82b9dd (2 files in 2 dirs): Landing pull request 382. Adds support for number values (meter,progress); Fixes #9319. ... - http://bit.ly/jgjumV
[08:21:23] <rwaldron> timmywil ok, after complete run through all of the supported browsers, i can say with confidence that https://github.com/jquery/jquery/pull/352 is passing
[08:21:38] <timmywil> nice, ok
[08:22:18] <rwaldron> there is another pull that can just be closed in favor of matjas patch
[08:22:24] <rwaldron> so thats 2 pulls one stone
[08:22:28] <rwaldron> not too shabby
[08:24:06] <timmywil> I like that matjas fixes our grammar while he's at it
[08:24:29] <rwaldron> wow, that was a funny coincidence
[08:25:32] <jqcommit> jquery: master Mathias Bynens * b43910a (1 files in 1 dirs): Landing pull request 352. Slightly improved defaultDisplay() and Throbber of Doom. Fixes #8994. ... - http://bit.ly/kvT9kb
[08:25:57] <rwaldron> timmywil this one can be closed now...
[08:25:58] <rwaldron> https://github.com/jquery/jquery/pull/363
[08:26:17] <rwaldron> tbh, his head was in the right place, thats just _too_ much code
[08:26:34] <rwaldron> matjas _reduced_ code in his
[08:26:51] <rwaldron> we really didnt need another logic fork for such an oddball edge case
[08:29:48] <timmywil> thanks rwaldron
[08:30:20] <rwaldron> thank _you_ timmywil
[08:33:43] <rwaldron> matjas: <jqcommit> jquery: master Mathias Bynens * b43910a (1 files in 1 dirs): Landing pull request 352. Slightly improved defaultDisplay() and Throbber of Doom. Fixes #8994. ... - http://bit.ly/kvT9kb
[08:56:07] <louisremi> This pull request 352 seems strange to me
[08:56:31] <matjas> rwaldron: \o/
[08:57:03] <louisremi> Mathias opens it to try to save some bytes, and when the pull request lands, the size of jQuery only increased :-(
[08:57:29] <rwaldron> hm.
[08:57:36] * rwaldron compares compression
[09:00:13] <louisremi> timmywil: can you tell me why we made such changes to the string written inside the iframe? https://github.com/jquery/jquery/pull/352
[09:00:30] <rwaldron> louisremi timmywil didnt write the patch
[09:00:33] <rwaldron> matjas ^^
[09:00:46] <louisremi> alright, sorry
[09:00:55] <louisremi> (but he landed it)
[09:01:04] <louisremi> matjas: https://github.com/jquery/jquery/pull/352
[09:01:10] <louisremi> https://github.com/jquery/jquery/pull/352
[09:01:15] <louisremi> !!!!
[09:01:24] <rwaldron> dude
[09:01:25] <louisremi> I meant: can you tell me why we made such changes to the string written inside the iframe?
[09:02:12] <timmywil> louisremi: it has to do with running in the correct mode in IE
[09:02:15] <rwaldron> it would allow less bytes to be written to the iframe
[09:02:29] <timmywil> was a recommendation from jdalton
[09:02:44] <timmywil> the same is done in browserscope
[09:03:01] <rwaldron> this issue is garnering way to much attention
[09:03:16] <rwaldron> 1. This code will only happen if the developer is an idiot
[09:03:22] <timmywil> lol
[09:03:35] <louisremi> timmywil: alright, sorry for the noise. I thought the purpose was to save some bytes in the jQuery source, which this patch was failing at.
[09:03:41] <rwaldron> 2. If they are an idiot, they only have to worry about happening once per element they've broken
[09:04:12] <louisremi> rwaldron: yep, I know, I know ;^)
[09:04:35] <rwaldron> i'm with you regarding byte savings across the whole lib
[09:04:53] <rwaldron> this add a total of 63bytes to the compressed code
[09:07:22] <rwaldron> timmywil louisremi i take a bigger issue with things like this:
[09:07:23] <rwaldron> cr=a.webkitRequestAnimationFrame||a.mozRequestAnimationFrame||a.oRequestAnimationFrame
[09:07:51] <rwaldron> (note, thats from the compressed code, so you can see how it doesnt compress at all)
[09:09:15] <louisremi> rwaldron: my PR had the "RequestAnimationFrame" string factorized, I clearly remember :p
[09:09:45] <rwaldron> i'm not point fingers
[09:09:48] <rwaldron> pointing*
[09:09:53] <gnarf> x="equestAnimationFrame",cr=a["webR"+x]||a["mozR"+x]||a["oR"+x];
[09:09:56] <rwaldron> thats no one's fault
[09:10:01] <gnarf> not a ton shorter
[09:10:14] <rwaldron> actually its the fault of browser vendors for being idiots
[09:10:29] <timmywil> I'm more concerned with our duplicate vars
[09:10:35] <gnarf> timmywil: :)
[09:10:36] <rwaldron> timmywil +9001
[09:10:39] <louisremi> rwaldron: ? for choosing such a long name?
[09:10:46] <gnarf> timmywil: [].split
[09:10:54] <gnarf> how many times do we define that?
[09:11:04] <timmywil> at least 3 I think
[09:11:26] <rwaldron> louisremi no, for not agreeing to implement a single global free variable in which to place in-flux implementations
[09:11:58] <rwaldron> if opera, moz, chrome, safari all implemented some kind of... namespace or something.. that they all agreed on
[09:12:14] <rwaldron> LessMessy.requestAnimationFrame
[09:12:18] <rwaldron> its a pipe dream
[09:12:24] <rwaldron> and completely unrealistic
[09:12:36] <louisremi> rwaldron: oh, that would be better, yes
[09:12:48] <rwaldron> yeah :\
[09:13:26] <gnarf> style.moz.requestAnimationFrame
[09:13:28] <gnarf> etc?
[09:14:38] <rwaldron> gnarf yeah, +1 to that
[09:15:02] <gnarf> how often do we look for things in the namespaces?
[09:15:13] <gnarf> would a searchNamespaces helper help?
[09:16:16] <gnarf> i gotta run
[09:16:30] <gnarf> still gotta walk to my old home and grab my bike
[09:16:31] <rwaldron> ok, later
[11:26:57] <danheberden> rwaldron i love that you added unit tests for camelCase
[11:27:02] <danheberden> i donno why, just makes me smile real big
[11:27:17] <rwaldron> because I'm obsessed with writing tests? :D
[11:27:23] <rwaldron> i'm a little bummed actually
[11:27:26] <danheberden> i think that's it
[11:27:29] <danheberden> why?
[11:27:41] <rwaldron> i wanted to make camelCase actually do what a "spec" camelCase would do
[11:27:49] <rwaldron> and that is to lowercase first
[11:28:01] <rwaldron> then upper
[11:28:20] <rwaldron> but doing so breaks a shit load of tests in the data module
[11:28:25] <rwaldron> :\
[11:28:39] <rwaldron> it doesnt seem worth the trouble and the added bytes
[11:31:06] <clarkbox_> yo danheberden, i have search in subdirectory... http://services.jquery.com/ircsearch
[11:31:26] <clarkbox_> dont worry about cname (per email)
[11:32:45] <docyes> clarkbox w00t!
[11:34:35] <rwaldron> clarkbox_ what is ezEventListener?
[11:35:34] <rwaldron> or rather... what is "blaze"
[11:35:39] <clarkbox_> i picked up that seach interface from here...
[11:36:25] <clarkbox_> https://github.com/docyes/splunk_blaze
[11:36:34] <clarkbox_> its backed by splunk
[11:36:48] <clarkbox_> blaze is light weight interface on top of splunk api
[11:37:21] <eddiemonge> holy eff! is the Edit File when viewing a file on github new?
[11:37:39] <eddiemonge> that is so fast to edit a file, commit and send a pull request.
[11:38:12] <rwaldron> eddiemonge naw
[11:38:15] <docyes> i haven't noticed the edit link, good idea
[11:38:18] <rwaldron> thats been there since the dawn of github
[11:38:25] <docyes> i missed it
[11:38:28] <eddiemonge> i had never seen that button before
[11:38:34] <rwaldron> you're better off
[11:38:39] <rwaldron> it actually makes commits
[11:38:55] <rwaldron> and that might get messy
[11:39:38] <danheberden> rwaldron :(
[11:40:26] <eddiemonge> arent commits kind of necessary?
[11:41:36] <rwaldron> ... no I hate them.
[11:41:43] <rwaldron> :P
[11:41:51] <eddiemonge> the thing i saw was newer. last month newer https://github.com/blog/844-forking-with-the-edit-button
[11:42:14] <rwaldron> oh, then nevermind
[11:42:58] <danheberden> clarkbox_ we can style that search, ya?
[11:43:12] <clarkbox_> ya why not
[11:43:37] <danheberden> cool - don't need to now, just making sure it's not something really hard to work with/closed or whatevs
[11:43:42] <clarkbox_> im not a designer though
[11:43:54] <clarkbox_> no, see github link above
[11:43:57] <clarkbox_> wide open
[11:44:05] <danheberden> clarkbox_ that'd be for the design team anywayh
[11:44:07] <danheberden> *anyway
[11:44:17] <danheberden> so any ideas on seperating channels?
[11:44:19] <danheberden> in the search?
[11:44:38] <clarkbox_> would take some effort...
[11:44:43] <danheberden> ( great work by the way - great to have this running! )
[11:44:50] <docyes> just need to modify search
[11:44:52] <clarkbox_> could be brute force, and setup a seperate host for each
[11:44:57] <clarkbox_> or make it smart
[11:45:06] <docyes> it shouldn't be too bad and probably add a dropdown
[11:45:08] <clarkbox_> docyes is the one who build the search project its using
[11:45:25] <danheberden> docyes ya even something like that would be good
[11:45:38] <danheberden> like, this doesn't have to be amazingly powerful
[11:45:44] <danheberden> but seperating chans would be really nice
[11:45:51] <docyes> shouldn't be too bad fellas
[11:46:13] <docyes> for channel seperation, i need to do a bit of search tuning
[11:46:30] <danheberden> clarkbox_ if i setup a git repo for this, can you port over to using that?
[11:46:39] <eddiemonge> clarkbox_: what github link?
[11:46:42] <docyes> I'm wild carding the prefix and suffix, I'll look into the latest dev build at work which has bloomfilters
[11:46:48] <clarkbox_> https://github.com/docyes/splunk_blaze
[11:47:07] <danheberden> everytime i read splunk i get a childish grin
[11:47:13] <eddiemonge> is search on github?
[11:47:14] * danheberden is imature
[11:47:17] <eddiemonge> danheberden: you would
[11:48:08] <eddiemonge> facebook web framework?
[11:48:17] <clarkbox_> tornado
[11:48:23] <clarkbox_> docyes... explain
[11:48:26] <eddiemonge> "A blazingly fast frontend with arrow key bindings using the Facebook"
[11:48:35] <docyes> it's just a thin frontend built on top of the splunk search and indexer
[11:48:38] <eddiemonge> in the readme
[11:51:04] <eddiemonge> docyes: you have a pull request
[11:51:37] <clarkbox_> haha eddiemonge++
[11:51:48] <clarkbox_> i love to hate fb too!
[11:51:54] <eddiemonge> kinda loving this fork and edit button
[12:15:10] <jaubourg> hi there
[12:15:11] <bot-t> (27 hours 50 mins ago) <seutje> tell jaubourg je vais être un peu trop tard :(
[15:07:44] <AaronCampbell> I was tracking down an issue on api.wordpress.org where one of our webservices (used from http://wordpress.org/about/stats/) wasn't working once we moved from jQuery 1.4.4 to 1.6.1.
[15:08:20] <AaronCampbell> jQuery.getJSON('http://api.example.com/?callback=?', function (data) { /*do something with data*/ }); was causing an error like: "jQuery161060048468496140251305925163793 is not defined"
[15:09:19] <AaronCampbell> It turs out that the automatically generated callback name used to be only /[a-z0-9]+/i but now it contains an _ (which was getting filtered out by the server side code)
[15:09:41] <AaronCampbell> So we were seding back jQuery161060048468496140251305925163793 when it should have been jQuery16106004846849614025_1305925163793
[15:10:09] <AaronCampbell> Does anyone know when/why the _ was added?  Possibly a ticket that I can point to in the changelog?
[15:28:30] <timmywil> AaronCampbell: interesting, we still have a regex in place to filter out any non-digits from the expando
[15:28:43] <timmywil> expando: "jQuery" + ( jQuery.fn.jquery + Math.random() ).replace( /\D/g, "" )
[15:31:15] <timmywil> AaronCampbell: not sure how that's happening.  I'd say file a ticket, and it would be really helpful if you could reproduce it.
[15:34:08] <jaubourg> so you say the server filters out characters that are valid for a javascript identifier?
[15:35:05] <jaubourg> the _ is here to make a separation between the expando and the jsonp callback counter
[15:35:25] <jaubourg> the bug is server-side, not jQuery side, just saying
[15:35:37] <jaubourg> even _ is a valid jsonp callback name
[15:36:17] <timmywil> ah, that's where
[15:37:14] <jaubourg> so, anyway, we can change it jQuery side but you'd still have a bug server-side by forbidding perfectly valid callback names
[15:38:08] <jaubourg> AaronCampbell: ^^ pinging you so that you can see what I wrote ;)
[16:03:44] <AaronCampbell> jaubourg & timmywil: we fixed the server-side part and everything works now, but when did you start using the format of jQuery{expando}_{counter}
[16:13:27] <AaronCampbell> Looks like it happened here: https://github.com/jquery/jquery/commit/b9f2131a9da53fff60549e87428a0efe43f9e80a
[16:14:34] <AaronCampbell> jaubourg: looks like it was your change...no wonder you were familiar with it.
[16:14:44] <jaubourg> :P
[16:15:02] <jaubourg> the idea was to avoid multiple jQuery's mixing their callbacks together
[16:15:55] <AaronCampbell> were people having problems with that?  Or was it more of a theoretical problem?
[16:16:42] <jaubourg> filtering jsonp callback names is very difficult seeing as, in theory, any javascript expression is acceptable... even something[ "hello" ].wtf().callback
[16:17:07] <jaubourg> glad you could fix it anyway ;)
[16:17:30] <jaubourg> and yeah, it's more or less theorical really
[16:17:43] <jaubourg> in a better safe than sorry way
[16:18:36] <jaubourg> it's not like loading several instances of jQuery is the norm
[16:18:43] <jaubourg> at least not in the same window
[16:50:40] <gnarf> jaubourg: answering the [why] in http://oksoclap.com/effects-proposal ;)
[16:50:48] <gnarf> who was green?
[16:50:52] <gnarf> was that dave?
[16:52:22] <jaubourg> I think so
[16:53:52] <jaubourg> working on implementing .anim() just for the heck of it
[16:53:57] <jaubourg> to see how it would look like
[16:58:55] <gnarf> jaubourg: heh
[16:59:04] <gnarf> jaubourg: just converted the examples to gists
[16:59:05] <jaubourg> focussing on an implementation with no support for CSS transitions or animations, really, just to get a feel of it
[16:59:12] <jaubourg> good
[16:59:38] <jaubourg> I think putting the keyFrames inline rather than having them named could work better... what do you think?
[16:59:54] <gnarf> jaubourg: i think support for both is kinda nifty
[17:00:00] <gnarf> we could make "toggle" an anim
[17:00:06] <gnarf> :)
[17:00:09] <jaubourg> seems a bit forced to me to have a $.keyFrames repository... I mean, CSS doesn't have a choice in that instance
[17:00:19] <jaubourg> heh, I hear you
[17:00:29] <gnarf> jaubourg: right - but a templated approach is kinda handy
[17:00:51] <gnarf> *shrug*
[17:01:01] <jaubourg> I'd hide the repository from the user though... dunno, to make things more robust
[17:01:08] <jaubourg> with getters and setters
[17:01:25] <gnarf> I supposed just .anim( animSpec, options )
[17:01:39] <jaubourg> would allow us to pre-"parse" the anims
[17:02:03] <gnarf> elem.data( "anim" )
[17:02:04] <gnarf> ?
[17:02:18] <jaubourg> that's what I store the things in so far
[17:02:25] <gnarf> \o/
[17:02:28] <jaubourg> hang on, I'll put the non-tested work so far
[17:02:40] <jaubourg> pretty early, just trying to wrap my head around it
[17:05:11] <jaubourg> gnarf: can you see this? https://gist.github.com/6da441c45ce9904c65f2
[17:06:18] <gnarf> ya
[17:06:25] <gnarf> looking
[17:06:27] <jaubourg> it's all backward
[17:06:45] <jaubourg> start with parseAnim which transforms the animation description object into a prop-centric object
[17:07:05] <jaubourg> then look at addAnimToElement or whatever it is called which adds the prop anims as parsed onto an element
[17:07:22] <jaubourg> the queue argument here is a per-property queueing system
[17:07:38] <jaubourg> still misses the main .anim and the poller but you should get the idea
[17:08:41] <jaubourg> need to add an animDefer for real queueing
[17:13:38] <jaubourg> gnarf: let me know if what you see doesn't make sense or something
[17:13:50] <gnarf> reading backwards is helping :)
[17:14:16] <jaubourg> hehe
[17:14:28] <gnarf> i wonder actually
[17:14:38] <gnarf> if you could implement that in a custom step function
[17:14:49] <gnarf> currently
[17:15:38] <jaubourg> well, my idea is to go the other way around, implement the new anim system, then recode .animate with it
[17:16:02] <jaubourg> I have a feeling the code would end up more compact actually
[17:16:12] <gnarf> like allow .animate() to take a keyframes
[17:16:12] <gnarf> but yeah
[17:16:12] <gnarf> looks neat
[17:16:28] <gnarf> just a "to" option?
[17:16:41] <gnarf> or rather just a "to" keyframe?
[17:16:42] <jaubourg> from and to, that's all there is afaik
[17:16:50] <jaubourg> for keyframes
[17:16:51] <gnarf> do you need from?
[17:16:55] <gnarf> it can read it from the element
[17:17:18] <jaubourg> that way you can set starting css values ;)
[17:17:32] <jaubourg> and ensure you have it the way you want to
[17:17:45] <gnarf> think about toggles while you're there btw
[17:17:55] <jaubourg> .animate is basically only doing a "to" with the values given
[17:18:02] <gnarf> yeah
[17:18:37] <gnarf> if we queue toggles as "anim"s -- can we give our anim a "name"
[17:18:59] <jaubourg> with the new system you could queue per properties at 12% with an anim going on that stops at 77% and you'd have a nice transition from this 77% to the newly added 12%
[17:19:09] <gnarf> .anim("highlight", "toggle")
[17:19:27] <jaubourg> not sure I get what you mean
[17:19:50] <jaubourg> what I aim to do is see how it would look, then we can look into API features once we have a good base
[17:20:14] <gnarf> sure
[17:20:35] <jaubourg> thing is, end code shouldn't use queue anymore even for the .animate rewrite
[17:20:38] <jaubourg> deferreds ftw
[17:20:54] <jaubourg> just reject it at one point and boom, you're done
[17:21:11] <gnarf> I would imagine some people depend on that .queue() though
[17:21:14] <gnarf> I know UI does
[17:21:25] <jaubourg> yeah, I fear they do
[17:21:57] <jaubourg> but heh, let's try and see how it will look and worry about this kind of things later on... it's easy enough to feature detect .anim ;)
[23:40:18] <abjorn> it's the rapture bitches
[23:40:22] <abjorn> lets qwery
