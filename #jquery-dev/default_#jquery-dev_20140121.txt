[03:02:29] <jqcommit> 01[13jquery01] 15mzgol pushed 1 new commit to 06master: 02http://git.io/g7UMVQ
[03:02:29] <jqcommit> 13jquery/06master 14c11becb 15Micha≈Ç Go≈ÇeÃ®biowski: Tests: Blacklist one effects test in Chrome 31...
[03:16:28] <jqcommit> 01[13jquery01] 15mzgol pushed 1 new commit to 061.x-master: 02http://git.io/p96nJw
[03:16:28] <jqcommit> 13jquery/061.x-master 1405c108e 15Micha≈Ç Go≈ÇeÃ®biowski: Tests: Blacklist one effects test in Chrome 31...
[03:18:26] <doesallmagic2> Project jQuery Core build #1058: STILL FAILING in 15 min: http://jenkins.jquery.com/job/jQuery%20Core/1058/
[03:18:26] <doesallmagic2> m.goleb: Tests: Blacklist one effects test in Chrome 31
[03:34:17] <doesallmagic2> Project jQuery Core 1.x build #358: STILL FAILING in 15 min: http://jenkins.jquery.com/job/jQuery%20Core%201.x/358/
[03:34:18] <doesallmagic2> m.goleb: Tests: Blacklist one effects test in Chrome 31
[07:11:46] <jqcommit> [13jquery] 15MelkorNemesis opened pull request #1490: e.preventDefault, e.stopPropagation fix MSIE8 (06master...06master) 02http://git.io/4Nrt7Q
[07:20:10] <jqcommit> [13jquery] 15mzgol closed pull request #1490: e.preventDefault, e.stopPropagation fix MSIE8 (06master...06master) 02http://git.io/4Nrt7Q
[07:20:52] <scott_gonzalez> m_gol: Did you look at the ticket for that PR?
[07:21:44] <m_gol> scott_gonzalez: I did and it looked like it might be a valid case
[07:22:00] <m_gol> anyway, I haven't endorsed it in any way
[07:22:10] <m_gol> but I had to close it as the target branch was incorrect
[07:22:47] <scott_gonzalez> Sure, just seems like you should be asking for a valid test case first.
[07:23:06] <scott_gonzalez> Since nobody has provided one in the 2 years since the ticket was opened.
[07:23:44] <m_gol> there was a test case attached in the last comment, I haven't checked if it's valid, though
[07:24:32] <scott_gonzalez> Oh, well, the delayed event thing just isn't supported I thought.
[07:24:38] <scott_gonzalez> I've seen that come up before.
[07:24:58] <DaveMethvin> the speed branch isn't part of the shipped code
[07:25:08] <DaveMethvin> we should just delete it
[07:25:20] <DaveMethvin> speed folder that is
[07:25:55] <m_gol> oh, I didn't notice what files did he/she modify
[07:25:56] <m_gol> right
[07:27:03] <m_gol> btw
[07:27:07] <scott_gonzalez> Heh, all kinds of problems :-P
[07:27:12] <m_gol> TestSwarm doesn't like IE11
[07:27:19] <m_gol> swarm.jquery.org/project/jquery
[07:27:28] <m_gol> I added it yesterday but it gets stuck in the "run" phase
[07:27:38] <DaveMethvin> yeah i wonder why
[07:27:58] <m_gol> who could make anything out of it? I don't really know where to look
[07:27:58] <DaveMethvin> you could try running it via a swarm url, maybe there's some dialog coming up
[07:28:19] <m_gol> which would mean the BrowserStack team messed it up ;)
[07:28:30] <m_gol> but I guess it happens, Krinkle said a lot about that
[07:28:38] <DaveMethvin> right but at least we could tell them what they messed up
[07:28:42] <m_gol> sure
[07:28:43] <DaveMethvin> :)
[07:29:01] <m_gol> gotta go for abt 30 min
[07:35:44] <timmywil> It seems like our testswarm instance is still not recognizing the IE11 useragent, or at least it's behaving that way.
[07:37:12] <timmywil> DaveMethvin: sorry I totally forgot about the release. I hope it wasn't too difficult to release without me.
[07:38:08] <DaveMethvin> timmywil: no problem, and it's always good to spread out the experience
[07:41:27] <timmywil> DaveMethvin: what's this I see about npm publishing not working?
[07:41:55] <DaveMethvin> i think it was the problem of "latest" when we did the release in 2.1, 1.11 order
[07:41:59] <DaveMethvin> so 1.11 was latest
[07:42:11] <DaveMethvin> so we might need to tag latest
[07:42:32] <timmywil> I think there may be some confusion about what jquery-release does.
[07:42:40] <DaveMethvin> well maybe that too
[07:42:57] <timmywil> jquery core is currently a special case that jquery-release doesn't handle
[07:43:05] <timmywil> but jquery-release does it right
[07:43:26] <timmywil> normally, we wouldn't want betas and rcs to affect the latest version on npm
[07:43:40] <DaveMethvin> agreed
[07:43:57] <DaveMethvin> i guess we just had to override the old stuff that was there originally
[07:44:00] <timmywil> so when jquery-release was run as a "pre" release, it published to npm "silently"
[07:44:25] <timmywil> which means that neither 1.x or 2.x should have been seen on npmjs.org
[07:44:36] <DaveMethvin> but when we do the real final, i think we want "latest" to be the 2.x branch regardless of which order we run them
[07:44:57] <timmywil> I would expect that's decided by which version is greater
[07:45:08] <DaveMethvin> doesn't seem to be?
[07:45:17] <DaveMethvin> i think that's what may have bitten us
[07:45:19] <DaveMethvin> but i'm not sure
[07:45:40] <timmywil> My theory is the confusion is caused by the versions not showing up as expected on the registry because of the way they were published by jquery-release
[07:46:08] <DaveMethvin> well at least it's recoverable so we can be on the lookout for it when we do the final
[07:46:11] <DaveMethvin> and tweak if needed
[07:46:18] <timmywil> yea
[07:47:17] <timmywil> I can find out right now with my test repo
[07:50:12] <timmywil> Shoot, you're right.
[07:50:52] <DaveMethvin> can we put a hook in there to make sure that 2.x gets tagged latest?
[07:51:05] <timmywil> We can
[07:51:11] <DaveMethvin> since `npm install jquery` installs latest
[07:51:38] <timmywil> It will probably mean a tweak to jquery-release to allow for custom tagging
[07:52:04] <timmywil> and then a special configuration in the release script in 1.x-master
[07:52:15] <DaveMethvin> by the time we're done, we'll just use jquery-release for doing our builds :)
[07:54:17] <timmywil> can we prune some of the stale branches?
[07:54:46] <DaveMethvin> yeah, i don't see a reason to keep them around and have been meaning to clean it up
[07:55:25] <timmywil> 3 ajax branches are a year old
[07:55:59] <timmywil> mind if I nix them?
[07:56:08] <DaveMethvin> gofer it!
[07:56:40] <jqcommit> [13jquery] 15timmywil closed pull request #1441: Ajax script 2.0 (06#13388...06ajax-script-2.0) 02http://git.io/wVBKow
[07:56:50] <jqcommit> [13jquery] 15timmywil closed pull request #1444: Ajax script 2.0 (06master...06ajax-script-2.0) 02http://git.io/6TQZHA
[07:59:28] <jqcommit> 01[13jquery01] 15timmywil 04deleted 06npmPublish at 14ee64df8: 02http://git.io/z7b7LA
[08:07:40] <timmywil> DaveMethvin: fyi, that delegated events benchmark assumes that jquery/1/jquery.js on the google cdn retrieves the latest jquery
[08:08:19] <timmywil> I'm not sure it will change your post much, but it's not using 1.10
[08:10:09] <timmywil> also, correct me if I'm wrong, but isn't SelectorSet simply caching the matching elements?
[08:10:44] <timmywil> which only works if the DOM doesn't change
[08:12:47] <timmywil> that could be reset with mutation observers, but that's both a potential mess and still not reliable
[08:17:27] <m_gol> DaveMethvin timmywil: there were 2 problems with npm; one, publishing was incomplete due to a bug in npm (it's fixed in newer versions but markelog didn't use the newest npm), secondly, when I was republishing, I did 2.1 first and 1.11 got tagged as latest
[08:17:46] <m_gol> also, we should probably mark both beta & stable as 2.1.0 when released
[08:18:17] <m_gol> IMO beta should always be the latest version so if there is no beta newer than the latest stable one, the stable one should be tagged beta as well
[08:18:30] <m_gol> so that installing jquery@beta doesn't install sth older than just installing jquery
[08:18:41] <m_gol> as for TestSwarm not recognizing IE11, that's weird
[08:18:53] <timmywil> makes sense, but I imagine everybody's going to use npm install jquery
[08:18:53] <m_gol> I did everything according to instructions and it recognized my IE11
[08:19:15] <m_gol> besides, if IE11 really wasn't recognized, why is there a proper icon for it in TestSwarm?
[08:19:48] <m_gol> (also, we should just mark 1.x as *never* being tagged in any way, that's the simplest solution to the order problem)
[08:20:07] <timmywil> icons are pulled from a different place I believe
[08:20:21] <m_gol> hmm, ok
[08:20:32] <m_gol> anyway, it recognized IE11 on Win7 correctly
[08:20:43] <m_gol> when I manually joined the swarm
[08:20:51] <timmywil> strange
[08:21:20] <m_gol> matches are pulled from ua-parser repo and IE11 is properly recognized there currently
[08:21:28] <m_gol> so that shouldn't be it
[08:21:47] <m_gol> DaveMethvin said we should try to manually join the swarm and see what happens, maybe there's some dialog blocking everything
[08:22:06] <m_gol> which would mean it's BrowserStack fault but at least we'd know what to report
[08:24:04] <m_gol> though I'm not familiar how to do this
[08:29:11] <timmywil> yea, we need to try joining the swarm
[08:30:17] <m_gol> timmywil: can you try it?
[08:33:22] <timmywil> yea, I just need to find the run key
[08:34:12] <m_gol> timmywil: https://github.com/jquery/infrastructure/wiki/TestSwarm#get-run-token
[08:34:48] <timmywil> yea I found it
[08:35:46] <timmywil> hmm, it's recognized
[08:35:55] <m_gol> that's what I thought
[08:36:23] <timmywil> must be a browserstack issue then
[08:36:26] <m_gol> now we need to join the swarm & see where it gets stuck however that is done
[08:36:43] <m_gol> so that we know what to report to them
[08:37:08] <timmywil> perhaps it's requesting to spin up IE11, but browserstack doesn't understand the request
[08:38:45] <timmywil> which means it could be a (testswarm|noe)-browserstack issue
[08:38:51] <timmywil> node*
[08:41:25] <timmywil> looking at that code though, I don't see what could be changed
[08:45:14] <m_gol> is it possible to see how the test is performed live?
[08:45:25] <m_gol> if it connects & the browser hangs, we'd at least see when it happens
[08:47:01] <timmywil> oh no, it was running tests
[08:47:36] <timmywil> so I think the problem is somewhere between requesting the browser and spinning it up
[08:48:14] <timmywil> because I just confirmed that if the browser connected to the swarm URL, it would run tests
[08:51:25] <m_gol> I though if ua parsing is done right for IE11 everything will work, heh :)
[08:51:28] <m_gol> * thought
[08:52:56] <timmywil> It may still have something to do with the user string changes in IE11, but my guess is that browserstack needs to deal with it on their end so IE11 spins up correctly.
[08:53:14] <timmywil> that's just a preliminary guess tho
[08:55:04] <timmywil> DaveMethvin: while quickIs does show an improvement, I think there are other things at work here
[08:57:04] <timmywil> jquery.selector-set increases the cacheLength in Sizzle to avoid selector recompilation. I bet that one line is a huge speed increase for all these elements.
[08:58:34] <timmywil> also, it's worth noting that jquery.selector-set overrides SelectorSet's default matchesSelector with Sizzle's (probably to gain it's stability)
[09:04:04] <jqcommit> [13jquery] 15wyuenho opened pull request #1491: Component.json (06master...06component) 02http://git.io/qHWQFQ
[09:27:06] <jqcommit> [13jquery] 15wyuenho opened pull request #1492: Component.json (06master...06component) 02http://git.io/48oveA
[09:40:36] <timmywil> DaveMethvin: you still around? I'm trying to understand how Selector
[09:40:50] <DaveMethvin> timmywil: here
[09:40:55] <timmywil> ...Set differs so much from quickIs
[09:41:18] <timmywil> my theories so far have been debunked
[09:41:34] <DaveMethvin> it collects up all the possible delegated selectors and does a single matchesSelector doesn't it?
[09:42:05] <DaveMethvin> then it sorts out the actual handlers using the selector as a key
[09:42:14] <jqcommit> [13api.jquery.com] 15jzaefferer opened issue #422: Document the attributes that `attr` normalize 02http://git.io/oywHKg
[09:42:33] <DaveMethvin> but of course that breaks for rooted selectors, but that patch doesn't care because it only handles document
[09:42:48] <timmywil> no, it seems to split up all of the selectors into groups (id, class, tag, other) and does a preliminary check to see if it might match before calling matchesSelector
[09:43:06] <DaveMethvin> yes, it does a "right match" of the selector I think
[09:43:20] <DaveMethvin> so "li > ul" looks for "ul"
[09:43:35] <DaveMethvin> let me take another look at the code
[09:43:47] <timmywil> ok, so perhaps it just handles more selectors?
[09:44:28] <DaveMethvin> i think this is the key method: https://github.com/josh/selector-set/blob/master/selector-set.js#L339
[09:45:43] <timmywil> afaict, that method doesn't get called
[09:46:03] <timmywil> because it's overwritten with Sizzle
[09:46:12] <DaveMethvin> hah, well then i'd better get into the debugger
[09:46:51] <DaveMethvin> i saw that sections of this were lifted from sizzle
[09:47:18] <timmywil> let's see. it creates a selector set for each event type
[09:47:53] <scott_gonzalez> timmywil: Are you looking at both repos?
[09:48:19] <timmywil> I'm looking at the perf
[09:48:30] <scott_gonzalez> oh
[09:52:25] <DaveMethvin> so each event occurrence calls SelectorSet.prototype.matches
[09:52:36] <DaveMethvin> thats as far as i can get right now, i have a meeting in a few minutes
[10:08:40] <timmywil> ok, I think it operates mainly on loop reduction. It loops through all of the elements and rather than looping through all selectors for matches, it loops through four selector groups and only drills down into a group if there's a possible match.
[10:09:59] <timmywil> quickIs helped us avoid drilling down into Sizzle, but I think the real boost comes from avoiding the match at all
[10:11:11] <timmywil> given that they have a TON of class-only selectors, the perf can skip all parents that don't have classes
[10:12:08] <timmywil> or more accurately, it can skip checking all of those selectors for elements without classes
[10:13:28] <timmywil> it's perfect for delegating a bunch of events, but not very practical for common use cases
[10:14:08] <timmywil> DaveMethvin: whenever you get to it ^^
[10:14:19] <DaveMethvin> kk, should be off in a few timmywil 
[10:18:49] <timmywil> All that said, I think we can get at least up to quickIs speeds by changing our use of Sizzle a little bit
[10:32:33] <DaveMethvin> timmywil: you around?
[10:32:40] <timmywil> yea, still here
[10:33:06] <DaveMethvin> i agree it's avoiding most of the work, basically just a string index tells you what the potential matches are
[10:33:21] <DaveMethvin> of course it's got quite a bit of setup work to do that
[10:33:59] <timmywil> agreed, I wouldn't recommend adding it to core
[10:34:06] <timmywil> it's a great plugin though
[10:34:27] <timmywil> with a very targeted use case
[10:34:41] <DaveMethvin> yeah, i would just like to tweak up the perf a bit, not to match that but to make it a bit better
[10:34:54] <timmywil> as for what we can do internally, I think we can get a nice boost without quickIs
[10:34:58] <DaveMethvin> really the 1.7.2 level is going to be enough for even Github
[10:35:03] <DaveMethvin> however we get there
[10:35:29] <DaveMethvin> in the blog i can be a bit less specific about how we get there
[10:35:58] <timmywil> I'd like to try attaching precompiled matching functions to the handler objects
[10:36:19] <DaveMethvin> that's basically what quickIs was doing for the small subset
[10:36:27] <timmywil> exactly
[10:36:49] <DaveMethvin> ah so that gets you the "cache" but on jQuery's side
[10:37:26] <timmywil> this would just cover more selector types. My concerns to get it working would be correct scoping and POS
[10:37:48] <DaveMethvin> POS, so well named :)
[10:38:04] <timmywil> but even if we had to limit it to simple selectors, I think we could match quickIs performance
[10:38:33] <DaveMethvin> i pulled quickIs into master to see how big it was, it's about 170gz
[10:38:46] <DaveMethvin> so that's a baseline
[10:38:54] <timmywil> good to know
[10:39:18] <DaveMethvin> you could also do like he's doing with quickis or your own, look at the rightmost selector to see if there's any chance of it matching
[10:39:27] <DaveMethvin> if not  you're done
[10:39:52] <timmywil> He actually uses the chunker to grab the left-most
[10:40:06] <timmywil> but a lot of the selectors are just classes anyway
[10:40:08] <DaveMethvin> since i guess hes starting from the top
[10:40:34] <DaveMethvin> right, almost all were tag/class/id and a few descendent selectors of tag/class/id
[10:40:44] <DaveMethvin> oh and some [data-x=y]
[10:40:57] <DaveMethvin> but it doesn't have to handle all cases
[10:54:41] <scott_gonzalez> I'm done responding about this component.json PR.
[10:54:50] <scott_gonzalez> Someone else can take over.
[10:56:13] <DaveMethvin> I'll take a shot.
[10:57:35] <scott_gonzalez> This is one of those "I'll do what's needed to make this work, but only if it's what I planned on doing originally" situations.
[10:58:54] <Kal_crunchbang> hello there guys my jquery .load(); is not working
[10:59:03] <Kal_crunchbang> shown at: acecrafting.com/out_up/
[10:59:09] <m_gol> Kal_crunchbang: support is in #jquery
[10:59:20] <Kal_crunchbang> nvm
[11:12:24] <Kal_crunchbang> how do i fade out then fade in with new page??
[11:13:06] <m_gol> Kal_crunchbang: as I said, support is in #jquery, not here
[11:13:40] <Kal_crunchbang> no one there
[11:13:54] <m_gol> that doesn't mean it's OK to ask here for support
[11:14:34] <Kal_crunchbang> ok
[11:15:01] <Kal_crunchbang> what is this irc for then?
[11:15:21] <m_gol> for jQuery development
[11:15:54] <Kal_crunchbang> can some one go to #jquery?
[11:16:01] <DaveMethvin> lol
[11:16:11] <DaveMethvin> if we wanted to be in there we'd be there now
[11:34:49] <scott_gonzalez> DaveMethvin: I'm so glad that we're not wasting even more time on module loaders and dependency management!
[11:35:17] <scott_gonzalez> Sometimes I wish we could skip the politics and just speak our minds :-)
[11:58:48] <leobalter> Kal_crunchbang: #jquery: Total of 847 nicks [2 ops, 0 halfops, 0 voices, 845 normal] 
[12:00:03] <leobalter> There are 847 folks at #jquery room, you'll probably find someone to help you there. Even though, you can also try the forums.
[12:00:06] <Kal_crunchbang> ok...
[12:00:33] <Kal_crunchbang> there are now
[12:00:39] <leobalter> nice :)
[12:00:42] <Kal_crunchbang> bu before there was not
[12:01:25] <leobalter> I've called them to come and help
[12:58:35] <timmywil> DaveMethvin: ok, first steps. I've gotten a nice boost that gets us closer to 1.7.2 (+67). http://jsperf.com/jquery-selector-set-trigger/8
[13:00:03] <DaveMethvin> that's a lot better timmywil and esp good for only +67!
[13:01:12] <DaveMethvin> so round to 100 ops/sec, that's about 10ms per trigger
[13:02:20] <timmywil> also, that boost applies to all selectors (except leading combinators and POS)
[13:02:38] <DaveMethvin> yeah and i'd prefer a general solution
[13:04:02] <DaveMethvin> maybe we just go with that and call it a day, although we might want to expose some hooks to make that patch less gropey
[13:04:37] <DaveMethvin> but if we break it in 1.12 it's not our fault
[13:05:39] <sizcommit> 01[13sizzle01] 15timmywil pushed 3 new commits to 06master: 02http://git.io/M0f5ag
[13:05:39] <sizcommit> 13sizzle/06master 14cb6f4d6 15Timmy Willison: Compilation: Expose Sizzle.select for advanced usage
[13:05:39] <sizcommit> 13sizzle/06master 14917b312 15Timmy Willison: Update version to 1.10.17
[13:05:39] <sizcommit> 13sizzle/06master 1451248c4 15Timmy Willison: Update version to 1.10.18-pre
[13:06:39] <DaveMethvin> hey timmywil don't make any other changes until we get the final out, since we're in RC at the moment
[13:06:48] <DaveMethvin> exposing select shouldn't be a prob tho
[13:07:21] <timmywil> ah, of course. Well, that doesn't need to go in the RC.
[13:08:09] <timmywil> and the event delegation work I've done is on a branch if we want to land it
[13:08:26] <DaveMethvin> i think that's post-release stuff
[13:08:38] <DaveMethvin> we can put it in .1 if it's solid 
[13:09:05] <timmywil> ok. I'll just leave Sizzle where it is in jQuery.
[13:15:25] <m_gol> so, what do we do about this? https://github.com/jquery/jquery/pull/1492/files
[13:15:58] <m_gol> if automation (except version number) would only result in moving those explicit key-value pairs into a separate script then it's not a real gain
[13:16:13] <m_gol> we could generate keywords, though
[13:17:30] <m_gol> ...and description, name, repo...
[13:17:33] <m_gol> ok, everything :D
[13:17:50] <DaveMethvin> Seems like it all is basically boilerplate that we could create via a Grunt template or something
[13:18:02] <timmywil> looks heated and I don't care that much
[13:18:11] <timmywil> :P
[13:18:20] <m_gol> yeah
[13:18:33] <DaveMethvin> THAT"S BECAUSE YOU DON"T USE THE MOST IMPORTANT DEPENDENCY MANAGER IN THE WORLD
[13:18:39] <timmywil> lol
[13:18:56] <timmywil> well, it wouldn't be very difficult to copy info from package.json
[13:19:03] <timmywil> for bower.json as well
[13:19:46] <timmywil> just takes a little time, which I no longer have today
[13:20:03] <DaveMethvin> well if we agree on the process we can just get this guy to do it
[13:20:08] <DaveMethvin> that's what open source is about!
[13:22:03] <m_gol> I've just answered him
[13:22:14] <m_gol> https://github.com/jquery/jquery/pull/1492#issuecomment-32964866
[13:22:29] <timmywil> Good answer, thanks.
[13:22:39] <m_gol> I'd leave it here for now, I've pointed it clearly what needs to be generated, he can do it if it's important to him
[13:23:10] <DaveMethvin> agreed, thanks for laying it out there
[13:24:05] <m_gol> I assume we'd want that in jquery repo instead of jquery-release?
[13:24:50] <DaveMethvin> it would be in build/release.js probably? timmywil?
[13:25:21] <DaveMethvin> we may need to give more of an outline for him to follow
[13:25:41] <m_gol> yeah, I thought about that
[13:25:44] <DaveMethvin> but at least jquery-release lets you run against your own repo so easier to test
[13:26:00] <DaveMethvin> "Here, push to the CDN" :)
[13:26:24] <m_gol> true, but we'd need a flag for that as I doubt scott_gonzalez wants suddenly to have all repo publish to component ;)
[13:36:54] <m_gol> anyway, if it's to be included in jquery repo then this seems a good place: https://github.com/jquery/jquery/blob/master/build/release.js#L130-136
[13:44:42] <scott_gonzalez> So there is of course the question of whether we'll start supporting this for all projects.
[13:45:09] <scott_gonzalez> But for starters, I'd definitely say it should live in jquery/jquery.
[13:45:20] <DaveMethvin> i think this is a good question to ponder ... not just for us, but for all projects everywhere
[13:45:28] <DaveMethvin> why are there so many package managers?
[13:45:55] <DaveMethvin> npm is actually pretty node-agnostic, so it's got that going for it
[13:46:46] <DaveMethvin> maybe there should be one master package manager and a site that generates adapter-crap that lets it be pushed into any other package manager
[13:47:25] <scott_gonzalez> This is not a debate that I think jQuery should get involved in.
[13:47:34] <scott_gonzalez> I think there are a million more important things for us to worry about.
[13:48:06] <DaveMethvin> every time we are asked to support another package manager we are involved whether we like it or not
[13:48:18] <DaveMethvin> we can play Switzerland i suppose and support nothing
[13:48:30] <DaveMethvin> but we passed that line a while back
[13:50:04] <scott_gonzalez> We wouldn't have if I had the final say :-P
[13:50:22] <scott_gonzalez> It's like Touch Events all over again!
[13:51:15] <DaveMethvin> i think package managers are useful, i just wish there weren't so many
[13:52:03] <DaveMethvin> or, conversely, we (the developer community) had a way to avoid each project needing to deal with them
[13:52:18] <gnarf> DaveMethvin: http://unimpressedcats.tumblr.com/post/73879521166/king-of-the-jungle
[14:12:37] <m_gol> "It's like Touch Events all over again!" - what do you mean? I fail to see an analogy
[14:12:39] <jzaefferer> The only place where jQuery becomes a performance bottleneck is when using .add() with lots of items, as in this here: http://jsbin.com/ECEBUCa/1/edit (takes like 2 seconds for the loop to finish)
[14:12:48] <jzaefferer> can someone tell me if thats a known issue? 
[14:13:03] <jzaefferer> Or is that worth filing a ticket for?
[14:13:19] <jzaefferer> *that is, the only place I've encountered in the last few years...
[14:14:49] <jzaefferer> It seems to have something to do with uniqueSort, which seems odd since I'm just collecting disconnected nodes
[14:15:22] <DaveMethvin> I think we'd address that through the docs ticket since appending to a real Array and jQuery()ing that would always be faster
[14:15:38] <DaveMethvin> but you can open a ticket on it if you want jzaefferer 
[14:16:16] <DaveMethvin> disconnected elements are kind of a worst case scenario for us since the whole thing can't really be sorted anyway
[14:16:42] <DaveMethvin> but we can't be guaranteed that the whole set is disconnected just because the first is, for example
[14:17:06] <DaveMethvin> and there's a lot of existing stupid code out there to prevent doing things the easy way
[14:18:34] <jzaefferer> That doesn't sound like anything is going to change... which brings me back to my actual question - can I use this as a "jQuery gotcha" to talk about performance bottlenecks and how to do profiling and work around the issue...
[14:18:40] <jzaefferer> seems like a "good" example
[14:18:47] <DaveMethvin> yeah i think it would be
[14:18:54] <DaveMethvin> those kind of talks are great too
[14:19:03] <DaveMethvin> are you doing that for San Diego?
[14:20:02] <jzaefferer> Yeah, but my theme is "Effective jQuery"
[14:20:28] <jzaefferer> As I said, this is the only issue I know of where jQuery becomes a bottleneck
[14:20:57] <DaveMethvin> it almost always comes down to "i'm making/changing 100 (or 1000) of these and it's slow"
[14:21:39] <DaveMethvin> or "i'm doing this on mouseover/scroll"
[14:22:04] <jzaefferer> Yeah, but its not linear, right? 200 items: 300ms, 400 items: 2200ms
[14:22:15] <DaveMethvin> it varies by issue
[14:22:24] <DaveMethvin> like for that github blog last week it was linear
[14:22:28] <jzaefferer> I mean the uniqueSort() stuff
[14:22:35] <jzaefferer> right
[14:22:41] <DaveMethvin> oh that's unlikely to be linear, yeah
[14:23:04] <jzaefferer> I heard you talking about the github stuff on a call, but didn't really follow why they were wrong on this, or whatever it was
[14:23:21] <DaveMethvin> they have like 150 click events, all as delegated events on document
[14:23:33] <DaveMethvin> turns out it's slow to do that
[14:23:49] <DaveMethvin> their patch is a very specific fix for their use case
[14:24:56] <jzaefferer> you mentioned something for solving this without a giant patch?
[14:25:20] <DaveMethvin> yeah, at least making it less painful
[14:25:36] <DaveMethvin> their solution runs in basically linear time but is really big
[14:25:48] <DaveMethvin> sorry, constant time
[14:26:06] <DaveMethvin> ours runs in O(n) but is much smaller
[14:26:36] <jzaefferer> ours? what's currently in jQuery?
[14:26:54] <jzaefferer> btw. regarding uniqueSort(): http://bugs.jquery.com/ticket/7341#comment:4 - not sure if that code still exists though
[14:27:11] <DaveMethvin> yeah, we're just working on trimming the time but not redoing the whole thing
[14:27:17] <DaveMethvin> their patch redoes the whole thing
[14:27:20] <DaveMethvin> it really depends on how fast you need to deliver 200, 300, 400 click events on document
[14:27:36] <DaveMethvin> not a scenario we think a lot of people have to deal with
[14:28:11] <DaveMethvin> i'm pretty sure we still have to call compareDocumentPosition() lots of times to get things in order
[14:33:09] <jzaefferer> > "we're just working on trimming the time but not redoing the whole thing" - who's "we" and "where" are "we" working on that?
[14:34:01] <DaveMethvin> timmywil just did some work, see the log from a few hours back ... i looked at putting back our 1.7.2 optimization which we took out because it seemed over the top
[14:34:22] <DaveMethvin> that is, we couldn't imagine someone would want 100 events of the same type on the same element.
[14:38:37] <jzaefferer> okay, thanks
[14:41:25] <timmywil> jzaefferer: jquery collections guarantee document order, which requires sorting
[14:42:04] <timmywil> but the sorting algorithm places disconnected nodes at the end
[14:42:26] <DaveMethvin> which makes .add() kind of a worst case scenario since you add one element to the end and re-sort
[14:42:55] <timmywil> in that case, yes
[14:43:06] <DaveMethvin> in a previous job i worked on some code from an Indian contract company
[14:43:22] <DaveMethvin> they needed to create a sorted list of a bunch of files
[14:43:35] <DaveMethvin> so they appended to the end of the list and called C qsort() on it
[14:43:55] <DaveMethvin> again, the worst possible scenario since qsort behaves horribly on big sorted lists
[14:44:40] <timmywil> ah, well, the actual sorting algorithm is left up to the browser
[14:44:50] <DaveMethvin> yeah in our case
[14:47:50] <timmywil> it may be O(n), depending
[14:48:17] <timmywil> but you can't optimize for every case
[14:48:22] <gibson042> we also get hit by expensive comparisons
[14:49:23] <DaveMethvin> absolutely, i'm not sweating that some people want it to be instant to have 200 click events on an element
[14:49:32] <DaveMethvin> that patch is just fine for them
[14:49:44] <DaveMethvin> and it's not worth hundreds of bytes to make it fast
[14:49:44] <timmywil> gibson042: to which are you referring?
[14:50:10] <timmywil> the documentPosition weirdness?
[14:50:14] <gibson042> Sizzle's `sortOrder`
[14:50:14] <gibson042> yeah
[14:50:24] <timmywil> yea
[14:50:58] <gibson042> it can be as bad as compareDocumentPosition + 2*contains + 2*indexOf
[14:52:27] <gibson042> if order doesn't matter, it actually makes sense to instantiate a new jQuery with the array
[14:53:00] <DaveMethvin> agreed, i think we just need to say that in both jQuery() and .add() docs to drive it home
[14:53:27] <timmywil> I think we tried that and it ended up breaking a lot
[14:53:37] <gibson042> no, for end users
[14:54:18] <gibson042> instead of `$foo.add( bar )`, `$( $foo.get().concat( $(bar).get() ) )` or similar
[14:54:48] <timmywil> ah
[14:54:49] <timmywil> gotcha
[14:55:03] <timmywil> good recommendation for a lot of elements
[14:55:49] <timmywil> gibson042: did we ever check if IE's sortOrder was actually faster?
[14:56:01] <timmywil> v8 optimizes loops like the crazy
[14:56:04] <gibson042> it could also be a plugin like `$.fn.addUnsorted = function( selector, context ) { return this.pushStack( jQuery.merge( this.get(), jQuery( selector, context ) ) ); }`
[14:56:20] <gibson042> timmywil: I don't remember
[14:56:33] <gibson042> I don't think we did
[14:57:19] <gibson042> ^ $.fn.concat, I suppose
[16:31:33] <scott_gonzalez> m_gol: Touch Events were a clusterfuck, it's just that most people didn't notice.
[16:31:41] <scott_gonzalez> Apple had their own implementation.
[16:31:47] <scott_gonzalez> Mozilla had their own.
[16:32:03] <scott_gonzalez> Microsoft had their own (they just named it Pointer Events).
[16:32:15] <scott_gonzalez> At least Mozilla abandoned theirs.
[16:32:54] <scott_gonzalez> And of course Apple's Touch Events are proprietary, so there's WebKit Touch Events which is reverse engineered by Google.
[16:41:45] <snover> i noticed
[16:41:50] <snover> don‚Äôt worry scott
[17:08:23] <scott_gonzalez> snover: Since you created the Trac ticketgraph plugin, perhaps you can provide some details here? https://github.com/scottgonzalez/debt/issues/19
[17:09:04] <scott_gonzalez> Also, if there are things you love/hate/want from a bug tracker, feel free to file issues :-)
[17:09:06] <snover> scott_gonzalez: i‚Äôm confused
[17:09:16] <snover> i want to not have to choose another bug tracker‚Ä¶ :)
[17:09:46] <scott_gonzalez> fair enough
[17:10:04] <snover> MORE CHOICES
[17:10:04] <snover> WOO
[17:10:07] <snover> um
[17:10:16] <scott_gonzalez> It's like package managers :-)
[17:10:52] <snover> the data for historical graphs is whatever data you want to interrogate over time‚Ä¶stored‚Ä¶historically
[17:13:18] <scott_gonzalez> So for something like the Trac ticketgraph, just a table of ticketId, status, date
[17:13:32] <scott_gonzalez> Populated on create and every status change.
[17:14:15] <scott_gonzalez> For components with highest # of reopened tickets, you should be able to use that same data and look at the current value for component on each of the tickets, right?
[17:14:52] <scott_gonzalez> But if you wanted to find the component with the most miscategorized tickets, you'd need a history of the values for the component field on each ticket.
[17:14:54] <snover> mostly, you have to decide how much work you want to need to do to retrieve the data, based on how often it will be used
[17:15:28] <snover> if you store a stream of all attribute changes then you can always get historical information about anything, basically replay the history
[17:15:46] <snover> for statistical data it is better to store in aggregate, but you have to know what you are wanting to look at before you do that
[17:16:10] <snover> so for example, if you wanted to make a more efficient ticket graph, you would store a counter per day every time a ticket open or close event occurred
[17:16:20] <snover> assuming one day was your period of granularity
[17:16:54] <snover> but of course there are other time periods you might want to look at too, like how many tickets are opened/closed per day of week, day of month, and so on
[17:17:02] <snover> so you just have to decide what you care about the most
[17:17:06] <snover> and also probably store the raw event changes
[17:17:09] <snover> trac stores raw event changes, yay trac
[17:17:20] <snover> so we can do whatever, even if it is maybe not efficient
[17:18:19] <scott_gonzalez> Ok, so I should start with just a massive raw dump into a new table?
[17:18:49] <scott_gonzalez> And build specialized data as I find a need.
[19:27:34] <jqcommit> [13qunit] 15leobalter opened pull request #507: Grunt: Implement test coverage using Istanbul (06master...06coverage-istanbul) 02http://git.io/v3I6vQ
[19:44:40] <jqcommit> [13jquery] 15leobalter opened pull request #1493: Readme: updating QUnit information (06master...06updating-readme) 02http://git.io/Snli9A
[21:12:27] <m_gol> scott_gonzalez: oh boy, I though it was only Apple touch events and that Mozilla used that and that Apple ones were standardized, not some poor copy
[21:12:35] <m_gol> so iOS still uses proprietary touch events?
[21:12:47] <m_gol> that is crap
