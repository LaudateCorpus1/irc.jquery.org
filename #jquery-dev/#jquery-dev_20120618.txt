[05:12:19] <gibson042> .
[05:12:19] <bot-t> (16 hours 20 mins ago) <timmywil> tell gibson042 if you have time, please feel free to submit a PR. That would let me focus on other things.
[05:44:36] <jqcommit> [api.qunitjs.com] jzaefferer pushed 1 new commit to master: http://git.io/cGAtLw
[05:44:36] <jqcommit> [api.qunitjs.com/master] Update to grunt-wordpress 1.0.0; remove custom deploy alias - Jörn Zaefferer
[07:17:50] <timmywil> .
[07:45:39] <jqcommit> [api.qunitjs.com] jzaefferer pushed 1 new commit to master: http://git.io/8agdfA
[07:45:39] <jqcommit> [api.qunitjs.com/master] Upgrade to grunt-jquery-content - Jörn Zaefferer
[07:49:09] <jqcommit> [api.qunitjs.com] rdworth pushed 1 new commit to master: http://git.io/xhiGKQ
[07:49:09] <jqcommit> [api.qunitjs.com/master] config-sample.json: corrected sample url - Richard D. Worth
[08:00:30] <jqcommit> [api.qunitjs.com] jzaefferer pushed 1 new commit to master: http://git.io/DIq5DA
[08:00:30] <jqcommit> [api.qunitjs.com/master] Cleanup package.json - Jörn Zaefferer
[09:02:07] <DaveMethvin> meeting time!
[10:07:07] <jzaefferer> DaveMethvin: git build is not quite done yet
[10:07:23] <DaveMethvin> looked like it ran tho?
[10:07:33] <DaveMethvin> the current one isn't my hand-built one
[10:07:38] <jzaefferer> aparently no one has any input on that though, so I'll probably just extend the build task to include the hash in the header, passed from jenkins. If I can get grunt to make that happen
[10:07:49] <jzaefferer> yeah, its deploying, but you can't tell what it deployed
[10:08:02] <DaveMethvin> the hash sounded good to me
[10:13:13] <jzaefferer> DaveMethvin: so jenkins runs the default task, meaning I can't really pass an argument to the build task, where its needed
[10:13:31] <jzaefferer> ENV var would work, and will be ignored if not set
[10:13:51] <DaveMethvin> so are you using the dist task to copy?
[10:13:53] <jzaefferer> basically like this:
[10:14:07] <jzaefferer> COMMIT=... grunt
[10:17:54] <rwaldron> I actually hate seeing "( window.getComputedStyle( div, null ) || {} )" all over the support code
[10:18:09] <rwaldron> but any kind of caching kills the gzip savings
[10:21:39] <jzaefferer> rwaldron: does that look okay to you? by default won't change anything:
[10:21:39] <jzaefferer> https://gist.github.com/742a5d85d127722a1190
[10:22:09] <jzaefferer> jenkins will then invoke this:
[10:22:10] <jzaefferer> COMMIT=${GIT_COMMIT} grunt --no-color
[10:22:33] <jzaefferer> resulting in "jQuery JavaScript Library v1.8.0pre ${GIT_COMMIT}"...
[10:22:39] <jzaefferer> in the header
[10:24:05] <rwaldron> jzaefferer looks good to me
[10:25:00] <rwaldron> DaveMethvin soft? I just wanted them to make the fiddle and realize their mistake :D
[10:25:02] <rwaldron> haha
[10:25:10] * rwaldron close rampage
[10:25:37] <DaveMethvin> OMG NUMBERS DON'T COMPARE :D
[10:25:39] <jzaefferer> okay, I'll update the job and push the change
[10:25:45] <DaveMethvin> thanks jzaefferer
[10:27:35] <jqcommit> [jquery] rwldrn pushed 1 new commit to master: http://git.io/yXI4VA
[10:27:35] <jqcommit> [jquery/master] Update document.defaultView.getComputedStyle. Fixes #10373 - Rick Waldron
[10:27:53] <jzaefferer> okay, with a few seconds or minutes we should see a git hash in here: http://code.jquery.com/jquery-git.js
[10:28:30] <jzaefferer> *within
[10:29:06] <jqcommit> [jquery] rwldrn pushed 1 new commit to master: http://git.io/ZswEuQ
[10:29:06] <jqcommit> [jquery/master] Fix comment block indents - Rick Waldron
[10:30:03] <rwaldron> so.. DaveMethvin gibson042 I still really, really dislike the wide use of prefix_
[10:30:07] <rwaldron> especially seeing in core
[10:30:11] <jzaefferer> or not, looks like the ${GIT_COMMIT} variable contains a line break m(
[10:30:15] <rwaldron> to prefix language built ins
[10:30:21] <rwaldron> core_push = Array.prototype.push,
[10:30:23] <rwaldron> forreal?
[10:30:57] <DaveMethvin> rwaldron: i think we all agree it's a transitional thing
[10:30:59] <rwaldron> can we just assume that "push", et al. are so widely used that they could only be from core?
[10:31:04] <gibson042> (right now)
[10:31:13] * rwaldron gouges out eyes
[10:31:16] <DaveMethvin> all the ones related to $.browser will be gone when we move that out
[10:31:43] <DaveMethvin> when i looked through the list there were not that many
[10:32:09] <DaveMethvin> but also, if we go to amd-style modules we may end up back at things attached to $
[10:32:16] <DaveMethvin> unless you have some other way
[10:33:23] <rwaldron> I will burn myself outside of McNamara's office window.
[10:33:31] <rwaldron> I can see it now...
[10:34:02] <rwaldron> jQuery.defaultDisplay() and it's minions of idiocy, parading down main street... straight into the hands of our bug tracker
[10:34:40] <gnarf> DaveMethvin: why not $._.somethingKindaPrivate
[10:35:01] <gnarf> just to not like super-pollute $.
[10:35:40] <DaveMethvin> $._. looks like a guy somewhat concerned that he's got something growing on the side of his head :P
[10:35:57] <gnarf> sure
[10:36:04] <DaveMethvin> but yeah, as long as the extra prop accessses don't cost a lot
[10:36:19] <gnarf> well we could always ref _ = jQuery._
[10:36:26] <gnarf> to save the prop accessors
[10:36:27] <rwaldron> he only hears the money talk
[10:36:34] <DaveMethvin> lol
[10:36:35] <rwaldron> $._. say what??
[10:36:55] <DaveMethvin> yeah
[10:36:56] <jzaefferer> DaveMethvin rwaldron: look, a hash: http://code.jquery.com/jquery-git.js
[10:37:07] <gnarf> SHA FTW
[10:37:09] <rwaldron> hey now!
[10:37:13] <rwaldron> awesome :D
[10:37:20] <rwaldron> jzaefferer ftw
[10:37:36] <gnarf> out of curiosity
[10:37:47] <gnarf> is there a reason not to include that SHA in a release too?
[10:38:06] <DaveMethvin> it's a lot of chars for a minified one
[10:38:18] <gnarf> so use the 7char version
[10:38:28] <jzaefferer> Its currently just in that one build, can still be improved
[10:38:42] <DaveMethvin> we only have min for released versions anyway
[10:38:42] <jzaefferer> Though for releases you'd have to update/modify the concat banner
[10:38:50] <jzaefferer> That's kinda annoying with grunt
[10:45:06] <jq-jenkins> Project jQuery Core build #152: STILL FAILING in 18 min: http://swarm.jquery.org:8080/job/jQuery%20Core/152/
[10:45:06] <jq-jenkins> joern.zaefferer: Grunt: Include commit in header if passed as ENV arg, mostly for Jenkins
[10:53:14] <jqcommit> [jquery] dmethvin pushed 1 new commit to master: http://git.io/jJwr7g
[10:53:14] <jqcommit> [jquery/master] Browser sniffing is *bad*, folks, even in unit tests. - Dave Methvin
[10:53:39] <DaveMethvin> okay, let's see if jenkins cuts us a break now
[11:06:07] <jq-jenkins> Project jQuery Core build #153: STILL FAILING in 20 min: http://swarm.jquery.org:8080/job/jQuery%20Core/153/
[11:06:07] <jq-jenkins> * waldron.rick: Update document.defaultView.getComputedStyle. Fixes #10373
[11:06:08] <jq-jenkins> * waldron.rick: Fix comment block indents
[11:06:15] <timmywil> STILL FAILING
[11:06:24] <timmywil> one of these days...
[11:08:35] <jzaefferer> there's somewhat of a pattern… 12 offset assertions in IE8, and random failures in effect tests
[11:14:54] <timmywil> gibson042: https://github.com/timmywil/sizzle/commit/e83c56145e29b474b2b0a0b2ebb0089534f78e14
[11:14:55] <socialhapy> ★ Commit on sizzle by timmywil (3m, 20s ago): Keep track of set indexes when checkSet is changed to avoid adding a function to the stack. Removes function evaluateSet. Fixes edge case regression with preceding combinator.
[11:15:42] <DaveMethvin> timmywil jzaefferer i am hoping my last commit gets rid of the 12 in IE8
[11:15:51] <DaveMethvin> the random ones are, well, random
[11:15:55] <DaveMethvin> not sure how to get rid of them
[11:16:12] <DaveMethvin> i stretched out many of the timeouts which seemed to help
[11:17:28] <jqcommit> [jquery] rwldrn pushed 1 new commit to master: http://git.io/cup22A
[11:17:28] <jqcommit> [jquery/master] Fixes typo in comment - Rick Waldron
[11:19:10] <DaveMethvin> that's not a typo, that's an overaggresive search/replace ... never heard a term for that before, maybe we should make one up
[11:19:17] <DaveMethvin> substo?
[11:21:33] <timmywil> DaveMethvin: can you check me?
[11:21:40] <DaveMethvin> sure
[11:21:42] <timmywil> gibson042 doesn't seem to be around
[11:21:45] <gf3> Check yo' self
[11:21:54] <DaveMethvin> oh that linkabove?
[11:21:57] <gf3> Befo' yo' wreck yo' self
[11:21:57] <timmywil> but I've wrecked mysef!
[11:22:03] <timmywil> :P
[11:22:05] <gf3> Muahahah
[11:22:06] <timmywil> DaveMethvin: yea
[11:25:05] <timmywil> this will be faster than what I had before, covers all our bugs with combinators, but right here https://github.com/timmywil/sizzle/commit/e83c56145e29b474b2b0a0b2ebb0089534f78e14#L0R326
[11:25:06] <socialhapy> ★ Commit on sizzle by timmywil (13m, 30s ago): Keep track of set indexes when checkSet is changed to avoid adding a function to the stack. Removes function evaluateSet. Fixes edge case regression with preceding combinator.
[11:26:06] <timmywil> I'm having to make set an array so I can modify it, which is just an added call to makeArray and happens once (and avoids calling uniqueSort), but can you think of a better way to avoid adding duplicate elements?
[11:30:27] <DaveMethvin> timmywil: none that is cheaper than this :D
[11:30:55] <timmywil> DaveMethvin: cool
[11:31:19] <DaveMethvin> man i forgot how dense sizzle was ... the room begins to spin
[11:31:27] <timmywil> gibson042 might be able to get it smaller but that could probably happen post-beta
[11:31:39] <timmywil> DaveMethvin: yea I feel like i'm in a cave a little bit
[11:32:37] <timmywil> The advantage of evaluateSet was it saved space, but adding a function call per element is far too expensive
[11:33:15] <sizcommit> [sizzle] timmywil pushed 1 new commit to master: http://git.io/qWZx8g
[11:33:15] <sizcommit> [sizzle/master] Keep track of set indexes when checkSet is changed to avoid adding a function to the stack. Removes function evaluateSet. Fixes edge case regression with preceding combinator. - timmywil
[11:33:15] <timmywil> DaveMethvin: alright, I can finally get back to matchesSelector :)
[11:33:21] <DaveMethvin> cool
[11:34:04] <jqcommit> [jquery] timmywil pushed 1 new commit to master: http://git.io/ylBT-g
[11:34:04] <jqcommit> [jquery/master] Update Sizzle - timmywil
[11:38:44] <timmywil> looks like jquery-git is 3 commits behind
[11:40:14] <DaveMethvin> timmywil: yeah, i guess the downside to having it tied to jenkins is that it doesn't get built until the job starts
[11:40:24] <DaveMethvin> i have a script that can push it now if you need
[11:40:55] <timmywil> that's alright, I'm dropboxing it to check some of Diego's tests (which I duplicated in the test suite, but I just want to see green) :)
[11:41:00] <DaveMethvin> Ouch, that last commit was +115!
[11:41:43] <timmywil> we gained some bytes back that were lost before
[11:43:34] <timmywil> DaveMethvin: we're still -512 from 1.7.2
[11:44:01] <DaveMethvin> that is like saying you don't sweat much for a fat guy :D
[11:44:14] <DaveMethvin> but yeah we're under the high water mark
[11:44:22] <timmywil> well, true, but still. 512 compressed bytes ain't bad considering
[11:44:42] <DaveMethvin> plus we will get rid of a lot in 1.9 when we remove stuff
[11:46:36] <DaveMethvin> well i managed to screw up my attempt to get rid of the browser sniff
[11:46:41] <timmywil> DaveMethvin: btw, it also evened out to -9 total since before I added evaluateSet
[11:46:53] <DaveMethvin> why does this stuff work locally but not in ts?
[11:47:51] <timmywil> something with the enviro, but no idea
[11:48:00] <DaveMethvin> I will not give up
[11:48:04] <DaveMethvin> well, not yet
[12:03:52] <jq-jenkins> Project jQuery Core build #154: STILL FAILING in 22 min: http://swarm.jquery.org:8080/job/jQuery%20Core/154/
[12:03:52] <jq-jenkins> * dave.methvin: Browser sniffing is *bad*, folks, even in unit tests.
[12:03:53] <jq-jenkins> * waldron.rick: Fixes typo in comment
[12:03:53] <jq-jenkins> * timmywillisn: Update Sizzle
[13:05:09] <jqcommit> [jquery] dmethvin pushed 1 new commit to master: http://git.io/DVAHbw
[13:05:09] <jqcommit> [jquery/master] Detect IE collapsing body margin directly rather than inferring it. - Dave Methvin
[13:17:07] <timmywil> DaveMethvin: If I'm reading this right, quickIs requires a tag in the selector
[13:17:13] <timmywil> is that right?
[13:17:21] <DaveMethvin> nope, shoudln't
[13:17:28] <timmywil>  /^(\w*)(?:#([\w\-]+))?(?:\.([\w\-]+))?$/
[13:17:44] <timmywil> ok, it's the * that makes tag optional
[13:17:50] <DaveMethvin> right
[13:19:06] <timmywil> interesting though that /^(\w*)(?:#([\w\-]+))?(?:\.([\w\-]+))?$/.test("") === true
[13:19:33] <DaveMethvin> well never send it that :D
[13:20:01] <DaveMethvin> for delegated events that would mean it's directly attached so i never have do deal with that
[13:38:58] <gnarf> well - theoretically "" as a selector should be a "*" right
[13:39:05] <gnarf> so the quickIs is still gonna match it
[13:39:12] <gnarf> properly
[14:05:06] <timmywil> "" as a selector is technically invalid
[14:05:17] <timmywil> but we just ignore it
[14:15:42] <jq-jenkins> Project jQuery Core build #155: STILL FAILING in 30 min: http://swarm.jquery.org:8080/job/jQuery%20Core/155/
[14:15:43] <jq-jenkins> dave.methvin: Detect IE collapsing body margin directly rather than inferring it.
[14:58:16] <timmywil> DaveMethvin: so I've added selector caching and quick matching
[14:58:42] <DaveMethvin> is that ALL? :)
[14:59:01] <timmywil> I'm starting to think that native matchesSelector was the bottleneck because there doesn't seem to be much of a difference between Sizzle.filter with quick-matching and Sizzle.filter without
[14:59:33] <DaveMethvin> certainly not for the most common cases
[14:59:52] <timmywil> I'm trying to test http://jsperf.com/sizzle-selector-caching
[15:00:03] <timmywil> I've added two caching systems
[15:00:28] <timmywil> One is promising and shows slightly faster matching for all selections (not separated in the perf)
[15:00:33] <timmywil> it is also short
[15:00:53] <timmywil> I just cache splitting a selector into parts in the main select function
[15:01:14] <timmywil> this cut down a noticeable amount of time in everything (not just matching)
[15:01:36] <timmywil> however, when I added quickIs to Sizzle.filter, I didn't notice an improvement
[15:01:54] <timmywil> well, I take that back
[15:02:05] <timmywil> I didn't notice a big enough improvement to make it worth the bytes
[15:02:23] <DaveMethvin> that's what really counts :D
[15:03:16] <DaveMethvin> even the slow case is really fast
[15:03:19] <DaveMethvin> which is good
[15:03:39] <DaveMethvin> running a few in ie9
[15:05:04] <timmywil> normal Sizzle.filter will loop through types, those being id, class, pseudo, child, tag, attr, and pos. It runs a regex for a match on each one, and continues if there's no match.
[15:06:47] <DaveMethvin> running ie8
[15:08:20] <DaveMethvin> timmywil: i have to run but will be back in about an hour
[15:08:28] <timmywil> the most noticeable is that .is() is consistently faster with the cache
[15:08:43] <timmywil> DaveMethvin: kk
[16:01:37] <timmywil> ?tell DaveMethvin This is the code btw https://github.com/timmywil/sizzle/commit/e1c2efeaf80f502f0c491676084c2e6e70eaf4b1
[16:01:38] <socialhapy> ★ Commit on sizzle by timmywil (23m, 31s ago): Add quick match to Sizzle.filter; cache quick selection parsing.
[16:01:38] <bot-t> timmywil, Okay.
[18:48:49] <timmywil> DaveMethvin: you back?
[18:54:30] <DaveMethvin> yeah timmywil, sorry i got pulled into something
[18:54:30] <bot-t> (2 hours 52 mins ago) <timmywil> tell DaveMethvin This is the code btw https://github.com/timmywil/sizzle/commit/e1c2efeaf80f502f0c491676084c2e6e70eaf4b1
[18:54:30] <socialhapy> ★ Commit on sizzle by timmywil (3h, 16m ago): Add quick match to Sizzle.filter; cache quick selection parsing.
[18:54:53] <timmywil> DaveMethvin: np
[18:55:03] <DaveMethvin> if we could all just figure out how to not have jobs we could get  stuff done on jQuer
[18:55:04] <DaveMethvin> y
[18:55:34] <timmywil> true, but I actually spent most of today on jQuery :)
[18:55:51] <timmywil> fortunately work is slow right now
[18:55:56] <DaveMethvin> that's good
[18:56:08] <DaveMethvin> well it's always quietest after the ship i suppose
[18:57:18] <timmywil> DaveMethvin: so I'm fretting. This is a better improvement than I thought, but it's +95 even with removing quickIs. I'm currently looking to shave bytes.
[18:58:34] <DaveMethvin> well you know who the expert is there ... gibson042 :D
[19:13:04] <timmywil> DaveMethvin: you alright with removing the id matching in core?
[19:13:29] <DaveMethvin> what kind of hit does it give us?
[19:13:40] <DaveMethvin> i kind of feel we should
[19:14:10] <DaveMethvin> i already pulled out the $("body") optimization
[19:14:34] <DaveMethvin> but it should be caught by the new code and be decently fast
[19:14:54] <timmywil> well, it adds a function call to jQuery(id), however, Sizzle now optimizes for it on the first level
[19:15:05] <timmywil> also, it's pretty wasteful
[19:15:40] <timmywil> I mean, there are more reasons than just avoiding duplication.
[19:15:45] <DaveMethvin> how many bytes does it save? :)
[19:16:00] <DaveMethvin> functionally it doesn't belong
[19:16:10] <timmywil> with removing it, all of my chages are -3 :)
[19:16:30] <DaveMethvin> well then .... :D
[19:16:52] <DaveMethvin> the thing is, it is NOT a bottleneck for real code
[19:17:03] <timmywil> and all jQuery's duplication of selection handilng is gone
[19:17:15] <DaveMethvin> it's only benchmarks that make people say it is slow
[19:17:29] <DaveMethvin> but slow like 10,000 or more per second
[19:17:34] <DaveMethvin> which ain't slow
[19:18:11] <timmywil> Sizzle also optimizes for element-rooted getElementById
[19:18:21] <timmywil> which jQuery didn't do
[19:18:34] <DaveMethvin> awesome
[20:13:24] <sizcommit> [sizzle] timmywil pushed 2 new commits to master: http://git.io/01TdxA
[20:13:24] <sizcommit> [sizzle/master] Cache parsed selectors to skip chunker when possible. - timmywil
[20:13:24] <sizcommit> [sizzle/master] Add quick match to Sizzle.filter; cache quick selection parsing. - timmywil
[20:13:46] <jqcommit> [jquery] timmywil pushed 1 new commit to master: http://git.io/j4m4Ag
[20:13:46] <jqcommit> [jquery/master] Move quickIs to Sizzle; Remove duplicate id matching in init; Added selector caching to Sizzle. Fixes #11826. - timmywil
[20:45:00] <jq-jenkins> Project jQuery Core build #156: STILL FAILING in 31 min: http://swarm.jquery.org:8080/job/jQuery%20Core/156/
[20:45:00] <jq-jenkins> timmywillisn: Move quickIs to Sizzle; Remove duplicate id matching in init; Added selector caching to Sizzle. Fixes #11826.
[22:49:10] <sizcommit> [sizzle] timmywil pushed 2 new commits to master: http://git.io/w_eI-A
[22:49:10] <sizcommit> [sizzle/master] Save a few bytes - timmywil
[22:49:10] <sizcommit> [sizzle/master] Reordering for better gzip and add selector divisions for element-rooted QSA in the dupont strategy. Fixes jQuery bug #11814. - timmywil
[22:50:27] <jqcommit> [jquery] timmywil pushed 2 new commits to master: http://git.io/bMDoTg
[22:50:27] <jqcommit> [jquery/master] Update Sizzle - timmywil
[22:50:27] <jqcommit> [jquery/master] Update Sizzle: adds selector divisions for element-rooted QSA in the Dupont strategy. Fixes #11814. - timmywil
[23:15:43] <jq-jenkins> Project jQuery Core build #157: STILL FAILING in 25 min: http://swarm.jquery.org:8080/job/jQuery%20Core/157/
[23:15:44] <jq-jenkins> * timmywillisn: Update Sizzle
[23:15:44] <jq-jenkins> * timmywillisn: Update Sizzle: adds selector divisions for element-rooted QSA in the Dupont strategy. Fixes #11814.
[23:23:07] <sizcommit> [sizzle] timmywil pushed 1 new commit to master: http://git.io/OE0FMQ
[23:23:07] <sizcommit> [sizzle/master] Fix traversing/effects test fail related to element-rooted QSA - timmywil
[23:23:32] <jqcommit> [jquery] timmywil pushed 1 new commit to master: http://git.io/M3XaLg
[23:23:32] <jqcommit> [jquery/master] Fixes test fails in traversing and event - timmywil
[23:45:57] <jq-jenkins> Project jQuery Core build #158: STILL FAILING in 22 min: http://swarm.jquery.org:8080/job/jQuery%20Core/158/
[23:45:58] <jq-jenkins> timmywillisn: Fixes test fails in traversing and event
