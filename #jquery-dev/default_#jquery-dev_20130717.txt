[04:14:46] <jqcommit> [13jquery] 157nights opened pull request #1309: Change setInterval() to requestAnimationFrame() if possible (06master...06master)  02http://git.io/FA2Rgw
[04:15:01] <jqcommit> 01[13testswarm01] 15Krinkle pushed 1 new commit to 06master: 02http://git.io/KZt-dA
[04:15:01] <jqcommit> 13testswarm/06master 14ad97783 15Timo Tijhof: js/run: Use $() instead of $(document).ready()
[05:10:27] <jqcommit> [13jquery] 15mzgol closed pull request #1309: Change setInterval() to requestAnimationFrame() if possible (06master...06master)  02http://git.io/FA2Rgw
[07:01:15] <DaveMethvin> scott_gonzalez i need a refresher on our plans for the pointer shim, to answer ScottB's email
[07:02:16] <DaveMethvin> we have this issue https://github.com/Polymer/PointerEvents/issues/75
[07:02:22] <b-ot> DaveMethvin: Issue #75 by RByers (1mon 1w ago): Add support for IE6
[07:02:25] <DaveMethvin> plus the email from ScottB with some action items
[07:03:40] <DaveMethvin> for core it's pretty easy, we just handle pointer events like any other event
[07:05:29] <scott_gonzalez> So core probably just needs an fix hook to define the props to copy over.
[07:05:49] <DaveMethvin> yeah i think that would be all
[07:05:55] <scott_gonzalez> For UI, we've got the interactions branch which is a complete rewrite of draggable, droppable, resizable, sortable, selectable.
[07:06:05] <scott_gonzalez> And those will use pointer instead of mouse.
[07:06:21] <DaveMethvin> so they only look at pointer, or do they look at mouse as well?
[07:06:33] <scott_gonzalez> Right now they look at mouse, touch, and pointer.
[07:06:37] <DaveMethvin> lol
[07:06:40] <scott_gonzalez> But the final version will only look at pointer.
[07:07:00] <DaveMethvin> which means those versions will defn need the shim to work properly
[07:07:05] <scott_gonzalez> We had to build that abstraction because Pointer Events wasn't a standard.
[07:07:10] <scott_gonzalez> yup
[07:07:28] <DaveMethvin> i'd love to leave out ie6-8 support but even a year or two from now i think ie8 will be around
[07:07:41] <DaveMethvin> but...it's a question of whether people using ie8 will be writing pointer event code
[07:08:09] <scott_gonzalez> Well, it's really a question of whether people supporting IE 8 will be using jQuery UI.
[07:08:09] <DaveMethvin> the most likely scenario would be if someone wrote pointer code for an open web page and IE8 users were visiting
[07:08:54] <scott_gonzalez> For UI, We will have dropped IE7 support by the time the interaction rewrites land.
[07:09:00] <arschmitz> ie8 is sadly still way to common in business because they wont move past XP
[07:09:11] <DaveMethvin> perhaps the oldIE support should be an optional part of the shim, it's gonna make a mess
[07:09:15] <scott_gonzalez> But if we want people switching to pointer TODAY, I feel like we still need IE6 support.
[07:09:25] <DaveMethvin> arschmitz but XP dies in April 2014
[07:09:40] <scott_gonzalez> And by dies you mean continues to be used for years?
[07:09:47] <scott_gonzalez> kborchers: ^
[07:09:48] <arschmitz> DaveMethvin: i know im so excited best birthday ever lol
[07:09:49] <DaveMethvin> zombie
[07:09:59] <DaveMethvin> it's not going to have security patches for example
[07:10:02] <arschmitz> ( my birthday is in april)
[07:11:13] <arschmitz> i know several companies here in maine that were still buying up copies of XP keys as recently as last year because they refuse to upgrade
[07:11:47] <arschmitz> ill never understand a company buying a computer preloaded with windows 7 and rolling it back to XP :(
[07:11:51] <DaveMethvin> you know, i'm wondering if we should just pass up the native Event object for pointer events, rather than taking the hit of trying to normalize it in jQuery.event.fix
[07:11:56] <kborchers> so i was a little side-tracked but hoping to get back to looking into oldIE support today for PointerEvents
[07:12:01] <kborchers> it's been fun though
[07:12:07] <DaveMethvin> "fun"
[07:12:10] <kborchers> i'm struggling to even get it working in IE9 :)
[07:12:19] <kborchers> s/:)/:(
[07:12:22] <kborchers> ;)
[07:12:48] <DaveMethvin> it's even hard for me to get a working IE8 setup, browserstack is kind of a pain
[07:12:59] <DaveMethvin> i am prob gonna go back to a VM
[07:13:15] <arschmitz> DaveMethvin: i have an ancient laptop i keep around for it
[07:13:23] <DaveMethvin> not a bad idea
[07:14:56] <arschmitz> painfully slow but still probably better then browserstack
[07:26:47] <scott_gonzalez> DaveMethvin: Thoughts on https://github.com/jquery/qunit/commit/8eec74370ff0eed34d9f770be9785728d72754d3 ?
[07:26:47] <b-ot> scott_gonzalez: Timo Tijhof (1mon 5d ago): doc: Clean up inconsistent documentation comments  We don't (yet) publicly generate documentation based on code but that doesn't mean the comments have to be useless and inconsistent.  Changes: - Removed: @function @name @example - Using:   - @class @singleton @method   - @private @member @alternateClassName   - @param @return   - Markdown-compatible syntax in descriptions (e.g. backticks,     hyperlinks, and things 
[13:03:50] <Krinkle> Hm.. how do I get all of 'foo' that aren't inside 'bar' ?
[13:04:01] <Krinkle> I tried ':not(bar) foo'
[13:04:04] <Krinkle> but that doesn't seem to work
[13:04:08] <Krinkle> it returns the same as 'foo'
[13:04:39] <Krinkle> basically $('foo').not($('bar foo'))
[13:04:46] <Krinkle> but more efficient
[13:05:54] <gho5t> $(':not(.bar) foo') ?
[13:06:07] <gho5t> $(':not(bar) foo') rather
[13:06:21] <Krinkle> I tried that, doesn't work
[13:06:38] <Krinkle> returns the same as $('foo')
[13:06:48] <gho5t> $('*:not(bar) foo') as well?
[13:06:49] <Krinkle> $('foo:not(bar foo)') works though
[13:06:55] <scott_gonzalez> Krinkle: I'm not sure you can be more efficient.
[13:06:57] <Krinkle> yeah, with or without * is the same
[13:07:04] <Krinkle> $('foo:not(bar foo)') works !
[13:07:04] <DaveMethvin> all foo are descendants of someting that is not a foo, for example the body
[13:07:11] <Krinkle> yeah
[13:07:14] <scott_gonzalez> ":not(bar) foo" is definitely not what you want.
[13:07:34] <Krinkle> I'll go with foo:not(bar foo) for now
[13:08:00] <Krinkle> real code is: $('input[placeholder]:not(#mw-content-text input[placeholder])')
[13:08:17] <Krinkle> since mw-content is handled by something else (and I don't want to apply the plugin twice)
[13:09:48] <gho5t> ah right
[13:11:30] <gnarf> Krinkle: there is no advantage to using the :not()
[13:12:19] <gnarf> Krinkle: $('input[placeholder]').not('#mw-content-text input') probably performs equally (if not better)
[13:12:46] <Krinkle> I'd think it'd be faster as it doesn't go in and out of Sizzle/jQuery loop
[13:12:57] <Krinkle> but essentially it is the same, yeah.
[13:13:01] <Krinkle> It is post filtering either way
[13:13:12] <gho5t> the docs recommend using .not over :not
[13:13:16] <DaveMethvin> yeah but the complex :not means it has to be js rather than two qSA
[13:13:34] <DaveMethvin> regardless it's ugly :)
[13:15:12] <gnarf> Krinkle: http://jsperf.com/not-selector-test
[13:15:14] <gnarf> DaveMethvin: ^
[13:16:03] <Krinkle> gnarf: nice, the second attribute selector is redundant indeed
[13:17:10] <gho5t> DaveMethvin: why would :not use CSS :not selector?
[13:17:23] <gho5t> heh
[13:17:28] <gho5t> DaveMethvin: why would :not _not_ use CSS :not selector?
[13:17:31] <DaveMethvin> you left out a not there :)
[13:17:36] <gho5t> haha yep
[13:17:45] <DaveMethvin> i think the CSS one has to be a "simple" selector
[13:17:48] <DaveMethvin> let me find the ref
[13:18:41] <DaveMethvin> http://www.w3.org/TR/css3-selectors/#simple-selectors
[13:20:39] <gnarf> the .not seems to be the clear winner ;)
[13:21:28] <DaveMethvin> gho5t this is the css4 :not selector http://www.w3.org/TR/selectors4/#negation
[13:21:50] <DaveMethvin> only allows compound selectors which are combos of simple selectors without combinators
[13:22:01] <DaveMethvin> so :not(foo bar) is invalid in css
[13:23:07] <DaveMethvin> interesting to think how you'd manage to select Krinkle's set in pure css ... only that "bloated" Sizzle thing can do it :)
[13:23:43] <gho5t> yes very interesting
[13:23:57] <Krinkle> I guess once CSS4 is native it will be faster to do in one selector?
[13:24:17] <DaveMethvin> nope, still won't support descendant selectors in :not()
[13:24:18] <Krinkle> (after Sizzle supports using native for that where available)
[13:24:25] <Krinkle> even in CSS4?
[13:24:29] <Krinkle> Toobad
[13:24:38] <Krinkle> But I guess it has parent stuff though?
[13:24:52] <DaveMethvin> true you can probably get there that way
[13:25:11] <Krinkle> something like foo:not-parent-of(bar)
[13:25:19] <Krinkle> something like foo:not-child-of(bar)
[13:25:38] <Krinkle> meh, no, css has like -is-child-of, not the negated version
[13:25:39] <Krinkle> right?
[13:25:43] <Krinkle> css4*
[13:26:26] <DaveMethvin> yeah i don't think it has not-parent-of
[13:26:40] <DaveMethvin> but it does have some other new things that could help
[13:27:05] <gnarf> i don't think it has an is child of?
[13:27:12] <gnarf> at least i don't see it in selectors4
[13:27:56] <gnarf> but, but, querySelectorAll - you don't need jQuery! ;)
[13:28:04] <DaveMethvin> http://www.w3.org/TR/selectors4/#subject
[13:28:27] <DaveMethvin> that's the feature I was thinking of
[13:28:53] <DaveMethvin> but it wouldn't help for Krinkle's situation i think,
[13:29:45] <DaveMethvin> although it does seem they're considering lifting the restriction on :not(complex-selector) in CSS4, it's still up in the air
[13:30:00] <Krinkle> the ! (subject) selector is essentially a way to do :has-child( selector )
[13:30:08] <DaveMethvin> right
[13:30:23] <DaveMethvin> the problem with lifting that restriction would be, how do you feature detect it?
[13:30:58] <Krinkle> It would be doable in a detached tree and then cache the result
[13:31:12] <Krinkle> not ideal, but wouldn't be the first of that kind we do
[13:31:18] <DaveMethvin> but how would you write CSS that worked for either case?
[13:31:24] <DaveMethvin> independent of JS?
[13:31:29] <Krinkle> oh in css
[13:31:32] <Krinkle> yeah, not in css
[13:31:48] <Krinkle> I thought you meant for Sizzle to feature detect whether to assume qsa supports it
[13:32:06] <gho5t> I can ge tit to work in css
[13:32:11] <gho5t> I can get it to work in css
[13:32:13] <gho5t> http://jsfiddle.net/nKBqk/
[13:32:26] <Krinkle> in plain css one will have to do as always: write for the lowest common suported subset if the browsers you support
[13:32:29] <gho5t> crap I guess that's the converse
[13:32:33] <Krinkle> of*
[13:33:14] <Krinkle> gho5t: yeah, I'd want to only style the outer foo, not the foo inside bar
[13:33:40] <DaveMethvin> as long as the extant css parsers don't choke and break parsing  x:not(foo bar) then at least the new browser would work and the rule would just be ignored in older ones .. but in your case ignoring it breaks your styling
[13:34:09] <DaveMethvin> i think the solution is to add a class here and there :)
[13:34:18] <Krinkle> (my case is logic, not styling, my styling is all in css)
[13:34:53] <DaveMethvin> even for js, a few well placed classes can simplify things
[13:35:15] <Krinkle> gho5t: you had a line break after the '.', it actually works: http://jsfiddle.net/nKBqk/1/
[13:35:34] <gho5t> yeah I fixed it but forgot to save
[13:35:42] <gho5t> but it's not what you wanted
[13:35:55] <Krinkle> but, with separate selectors, which is what I had already (this is essentially a :not using cascading)
[13:36:08] <gho5t> right
[13:36:15] <Krinkle> nice find though, it's a nice case
[13:36:29] <gho5t> sometimes you can't target what you want in CSS so you have to target everything else :)
[13:36:31] <gho5t> cool
[14:01:09] <m_gol> DaveMethvin: maybe we need @supports for selectors ;)
[14:01:34] <DaveMethvin> sure m_gol as long as it always returns true :)
[14:01:45] <m_gol> hahaha :D
[14:02:45] <m_gol> but this would mean parsing if I think correctly, so it should work more like @supports and less like hasFeature
