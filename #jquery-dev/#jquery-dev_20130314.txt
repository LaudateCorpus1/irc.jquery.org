[06:56:38] <jqcommit> 01[13jquery01] 15gibson042 pushed 1 new commit to 06master: 02http://git.io/ukN3JQ
[06:56:38] <jqcommit> 13jquery/06master 1492b2367 15stonelee: No ticket: Move property descriptor assignment to save a byte. Close gh-1188.
[07:02:04] <doesallmagic> Project jQuery Core build #739: STILL FAILING in 5 min 25 sec: http://swarm.jquery.org:8080/job/jQuery%20Core/739/
[07:02:04] <doesallmagic> richard.gibson: No ticket: Move property descriptor assignment to save a byte. Close gh-1188.
[07:55:44] <JamesMGreene> Very dead in here :-o
[08:01:06] <JamesMGreene> jzaefferer Meeting time!
[08:18:00] <doesallmagic> Project QUnit build #271: SUCCESS in 1 min 24 sec: http://swarm.jquery.org:8080/job/QUnit/271/
[08:32:34] <jzaefferer> DaveMethvin|away: did you consider dropping IE6 support from jQuery 1.x?
[08:33:03] <JamesMGreene> ( regarding QUnit discussion in #jquery-meeting about matching jQuery 1.x's support goal: http://jquery.com/browser-support/ )
[08:33:19] <jzaefferer> Might not make a big difference in reducing the codebase, but would simplify various surroundings, e.g. stop dealing with IE6 on TestSwarm
[08:33:29] <jzaefferer> or supporting IE6 within QUnit
[08:43:25] <ajpiano> did we get rid of the exception in the style guide for spaces around functions taking a single string argument
[08:46:20] <ajpiano> scott_gonzalez: ^^ ?
[09:31:45] <JamesMGreene> Ugh, nothing I hate more than a recruiter that sends me the same email twice within a few minutes of each other
[09:37:34] <JamesMGreene> rworth DaveMethvin|away: "The call for papers will close at 11:59pm EST on March 3rd, 2013. Submissions will not be accepted beyond that point." Accurate?
[09:37:44] <JamesMGreene> (Accurate for team members?)
[09:38:08] <JamesMGreene> Response from #jquery-meeting: <rworth> JamesMGreene I'm sure ajpiano will be happy to receive applications from team members at this point, but not the general public
[10:00:28] <JamesMGreene> So jzaefferer Krinkle|detached if I were going to make a QUnit plugin that isn't a "reporter"/"assert"/etc. plugin, is it OK (i.e. not annoying) for me to use "contrib" when creating a non-jQuery-org plugin?
[10:04:41] <jzaefferer> Seems fine, though why not just leave it out? "qunit-[plugin]" seems fine
[10:21:56] <JamesMGreene> Yeah I guess
[10:26:33] <scott_gonzalez> ajpiano: Yes, we got rid of exceptions for spaces in a few places.
[10:26:43] <ajpiano> ok
[10:26:44] <scott_gonzalez> strings, array access
[10:26:47] <ajpiano> awesome
[10:27:01] <ajpiano> just committed a bunch of PRs to learn that added spaces and i wanted to be sure it was ok
[10:27:07] <scott_gonzalez> :-)
[12:30:55] <JamesMGreene> Hey jzaefferer Krinkle: Always wondered... why no `notOk`? I know it's as easy as `ok(!whatever)` but the lack of symmetry surprised me
[12:31:33] <JamesMGreene> I assume it was basically on the premises of keeping the API as simple as possible
[12:32:35] <Krinkle> JamesMGreene: Firstly, ok should be avoided in most cases. It is very useless for testing purposes.
[12:32:54] <Krinkle> It is generally used to assert that a value has any sensible value (object, function, array, regex, etc.)
[12:33:03] <Krinkle> when it doesn't matter what it is or it can't be predicted
[12:33:24] <Krinkle> aside from that being a bad test in general, even more so in the case of a false-y value
[12:33:38] <Krinkle> if you expect false, use equal(, false), not ok( ! )
[12:33:48] <Krinkle> because if it isn't value, you want to know what it is
[12:33:51] <Krinkle> not just that it isn't false.
[12:36:12] <JamesMGreene> I use `strictEqual(, false)`, Krinkle. Better up your game :)
[12:36:42] <JamesMGreene> I'm not advocating for the addition of `notOk`, nor the use of `ok`, just curious
[12:59:06] <Krinkle> JamesMGreene: I always use strictEqual
[13:10:29] <JamesMGreene> Good good
[13:43:57] <JamesMGreene> FYI jzaefferer Krinkle: I just had tkellen update the Grunt "Who Uses Grunt" page to point at our "Gruntfile.js" instead of the now nonexistent "grunt.js"
[13:47:28] <Krinkle> k
[16:35:04] <jqcommit> [13jquery] 15mzgol opened pull request #1204: make code grunt-contrib-jshint 0.3.0 compatible (061.9-stable...061.9-jshint)  02http://git.io/q8vTXw
[16:52:52] <JamesMGreene> What's the diff between a Grunt 0.3.x "helper" vs. "multitask"?
[17:44:21] <scott_gonzalez> JamesMGreene: helper is just the equivalent of a named function.
[17:44:43] <JamesMGreene> Seems like they were all the rage but that people used them unnecessarily
[17:45:02] <JamesMGreene> Almost every reference I've seen just called the helper from the registered multitask
[17:45:19] <scott_gonzalez> That was a very useful design.
[17:45:24] <JamesMGreene> And never seemed to use it via the `require` system or whatever, which seems like what helpers were ACTUALLY for
[17:45:59] <scott_gonzalez> helpers were not meant for any kind of require.
[17:48:37] <JamesMGreene> No? Hmm, that was the impression I got. Well, then they were silly indeed
[17:49:05] <scott_gonzalez> They weren't silly.
[17:49:09] <scott_gonzalez> They were very useful.
[17:49:13] <JamesMGreene> And scott_gonzalez, I just meant that they were exposed so that you could utilize them from other Node module rather than just through grunt
[17:49:24] <scott_gonzalez> No, that's not why they were exposed.
[17:49:31] <JamesMGreene> I'm not following the usefulness...?
[17:49:32] <scott_gonzalez> They were exposed explicitly for use in grunt.
[17:49:37] <JamesMGreene> Can you expound?
[17:50:10] <scott_gonzalez> You don't extend grunt by adding function to the grunt object.
[17:50:15] <scott_gonzalez> You extend it by adding tasks.
[17:50:23] <scott_gonzalez> Some things don't make sense as tsks.
[17:50:26] <scott_gonzalez> They're just functions.
[17:50:31] <scott_gonzalez> So you expose them as helpers.
[17:50:40] <scott_gonzalez> It's how you expose your lower-level API.
[17:51:00] <scott_gonzalez> Either for direct use without the higher-level task or to override the low-level behavior.
[17:52:59] <JamesMGreene> And that would allow, e.g. other Grunt tasks/plugins, to call your helper?
[17:54:26] <scott_gonzalez> yes
[17:55:36] <JamesMGreene> oic
[17:55:40] <JamesMGreene> That's convenient
[17:55:46] <scott_gonzalez> We use this in grunt-jquery-content for pre-processing pages.
[17:56:10] <scott_gonzalez> And there are helpers in grunt-wordpress.
[17:56:18] <scott_gonzalez> Which is why our sites will be on 0.3.x for a while.
[17:57:46] <JamesMGreene> So how did a task/plugin declare its dependency on a helper from another task/plugin?
[17:59:16] <scott_gonzalez> You depend on the plugin.
[18:03:15] <JamesMGreene> Hmm
[18:03:20] <JamesMGreene> I guess
[18:03:44] <JamesMGreene> It's convenient but it doesn't sound like it saved you much effort
[18:04:00] <JamesMGreene> basically `require('otherPlugin').helperName`
[18:04:12] <scott_gonzalez> Yes, but that's not how grunt works.
[18:04:17] <JamesMGreene> Right right
[18:04:24] <JamesMGreene> That's enough about it for me, it's dead :)
[18:04:24] <scott_gonzalez> Which, TBH, is annoying.
[18:04:39] <scott_gonzalez> Grunt should embrace node better.
[18:05:14] <scott_gonzalez> Supposedly they're working on that.
[18:10:22] <JamesMGreene> Yeah, for 0.5
[18:10:51] <JamesMGreene> god damn I hate when NPM errors out on Travis
[18:30:32] <JamesMGreene> mfer
[18:30:39] <JamesMGreene> Why is npm dying on Travis!?
[22:20:57] * JamesMGreene is promisin' the shit outta his latest Node.js module
