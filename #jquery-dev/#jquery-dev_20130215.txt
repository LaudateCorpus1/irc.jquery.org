[02:06:21] <Krinkle> JamesMGreene: afaik you have to subscribe to post (to avoid spam), you can try sending without but it'll bounce. They might review bounced emails but they probably don't.
[02:06:28] <Krinkle> JamesMGreene: you can subscribe without getting emails though
[02:06:30] <Krinkle> it is a preference
[02:06:47] <Krinkle> to get every one, every thread, once a day, or nothing at all even
[02:06:57] <Krinkle> the interface is ugly though, but it works
[04:58:25] <nanana> Hi all, I recently tried to leverage the parseHTML function only to find out that it's going to end up a massive security nightmare, is anyone familiar with any free for commercial usage javascript based parser out there?
[05:02:17] <nanana> as an aside, does anyone have any thoughts regarding documenting the matter, or taking more radical steps?
[05:03:46] <scott_gonzalez> nanana: How is $.parseHTML() more of a security nightmare than .innerHTML?
[05:03:47] <bot-t> (31 hours 50 mins ago) <JamesMGreene> tell scott_gonzalez Can you tell me which devices trigger touch events in some cases and mouse events in others? Also, any related documentation, e.g. conditions under which each type of event is triggered, device market share, etc.
[05:06:17] <nanana> because parseHTML claims to be a parser (the name of the function is parse) rather than evaluate the entity, and even goes so far as to offer the ability to hide scripts which will certainly lull a good number of individuals into a false sense of security
[05:07:54] <nanana> I know I'm certainly glad that I bothered to self verify the script blocking capabilities
[05:24:43] <nanana> anyhow my point was that it is no more secure than simply appending to innerHTML, despite what appears to be an attempt at such, and unlike say its parseJSON counterpart which is hopefully substantially more secure than eval()
[05:37:03] <scott_gonzalez> So you're saying the name makes it insecure?
[05:38:35] <scott_gonzalez> jQuery.parseJSON() is more secure than eval() and jQuery.parseHTML() is more secure than .innerHTML.
[05:39:51] <scott_gonzalez> nanana: You said "I know I'm certainly glad that I bothered to self verify the script blocking capabilities". Did you find a problem with the logic for keeping scripts?
[05:40:55] <nanana> only in so much as script elements are the only scripts that are stripped
[05:42:00] <nanana> event driven attribute tags fire off and resolve, assets load, etc, by no means is it simply a parse
[05:47:40] <scott_gonzalez> None of that should happen until you actually insert into the document.
[05:47:49] <scott_gonzalez> It returns a collection of detached elemenets.
[05:48:58] <nanana> Hmmm
[05:48:59] <scott_gonzalez> I guess the loading does occur.
[05:49:10] <scott_gonzalez> But loading shouldn't be harmful.
[05:49:25] <nanana> I definitely had issues with it
[05:49:34] <scott_gonzalez> For example, loading an image will just fetch the data, not display the image.
[05:49:37] <nanana> not harmful loading, but even ttriggering
[05:49:51] <scott_gonzalez> Sure, you can get load events to trigger on detached elements.
[05:50:15] <nanana> which means any user supplied conent has full DOM access
[05:51:41] <scott_gonzalez> Only if you're injecting user supplied content in an unsafe way.
[05:52:09] <scott_gonzalez> If you're using $.parseHTML(), then you've already constructed your HTML.
[05:52:19] <scott_gonzalez> If *you* did that unsafely, there's nothing we can do about that.
[05:52:38] <nanana> It means $.parseHTML( usercontent ) is a huge violation
[05:53:03] <gibson042> scott_gonzalez: I believe nanana is referring to things like http://jsfiddle.net/ds4mp/
[05:54:17] <nanana> So writing something like a rich markup editor, you can't use parseHTML
[05:54:30] <scott_gonzalez> As you shouldn't.
[05:54:47] <nanana> yeah, I already covered that part
[05:54:49] <scott_gonzalez> This is not a tokenizer.
[05:54:51] <gibson042> yes
[05:55:53] <gibson042> if there's a problem, it would be on http://api.jquery.com/jQuery.parseHTML/
[05:56:04] <scott_gonzalez> $.parseHTML() is "I have a chunk of HTML, give me elements", the same as $.parseXML.
[05:56:12] <gibson042> but I think we're pretty good, and certainly don't make any promises regarding security
[05:56:36] <nanana> parseXML can't inject into the DOM
[05:57:04] <nanana> yeah gibson, it's likely much more of a documentation issue than anything else
[05:58:20] <nanana> I mean this isn't like an attack, I don't understand the overly defensive posturing
[06:00:55] <scott_gonzalez> You said parseHTML() claims to be something it's not. I'm trying to figure out where the disconnect is.
[06:01:35] <scott_gonzalez> Did you want a way to use it in the context of a new document so it can't interact with the existing document?
[06:02:34] <scott_gonzalez> I'm trying to figure out the use case in which you think it should work that it does not to know whether there are cases it should support but doens't or whether you were trying to use it in a way that we don't intend for it to be used.
[06:02:57] <nanana> So my particular use case is to do some simple queries on the markup
[06:03:28] <nanana> the issue is that the markup is user provided
[06:05:44] <gibson042> nanana: can you use DOMParser? https://developer.mozilla.org/en-US/docs/DOM/DOMParser
[06:06:57] <nanana> definitely might be able to, I'd have to do some research
[06:08:07] <nanana> anyway, while a user is unlikely to attack themselves, it will often be the case that a user with higher permission is given content and will blindly paste it in
[06:09:47] <nanana> the ideal would be to be able to query a string of markup no different than querying a chunk of DOM
[06:10:23] <DaveMethvin> nanana if browsers provided a way to do that, it would be what $.parseHTML would do (if you told it not to run scripts)
[06:10:40] <DaveMethvin> unfortunately there isn't a way right now
[06:10:50] <DaveMethvin> and we aren't going to write a javascript DOM parser
[06:11:06] <DaveMethvin> but i do think it's worth mentioning the issue in the $.parseHTML docs
[06:11:38] <DaveMethvin> and also asserting that anyone who is using things like <img onload=..> in $.parseHTML should expect it to break eventually
[06:11:46] <nanana> yeah, which is why I was kindof lead astray by it's purported ability to cull scripts 
[06:12:06] <DaveMethvin> well it does cull <script>s
[06:12:30] <nanana> yup :)
[06:12:51] <gibson042> to be honest, that's a decent argument for removing the keepScripts parameter
[06:13:25] <DaveMethvin> gibson042 it's like that discussion we had on the sizzle ticket yesterday
[06:13:47] <DaveMethvin> it woudl be really nice to have a "parse this safely"
[06:13:54] <DaveMethvin> which i guess win8 apps do by default
[06:14:11] <DaveMethvin> but they also seem to go overboard, i still didn't see the exploit potential in the name attribute
[06:14:33] <nanana> yeah, definitely would be, and I noticed your fearless leader, has actually published a javascript HTML parser
[06:14:35] <gibson042> meh
[06:15:02] <gibson042> DaveMethvin the problem there seems to be that "safe" is context-dependent
[06:15:31] <DaveMethvin> right, on at least a few of those attributes
[06:15:40] <gibson042> name might actually be dangerous for parse-then-append
[06:15:47] <gibson042> but not for parse-only
[06:16:26] <DaveMethvin> and if your gatekeeper is on the string parser and not the DOM appending, then you have to be hardasser than you want i suppose
[06:16:34] <gibson042> yep
[06:17:16] <nanana> http://ejohn.org/blog/pure-javascript-html-parser/
[06:17:44] <gibson042> and for us, we love to be parse-safe but have to pave over content munging
[06:18:43] <gibson042> would love to, that is
[06:18:55] <nanana> I unfortunately missed the one line licensing statement when I glanced at it earlier
[06:20:56] <nanana> Anyway, I'll likely revert to my regex hackery, but if things get to be too messy, I'll try busting out one of those parsers
[06:22:24] <nanana> I just thought for awhile I had access to one in jQuery, with the healthy bonus of being able to run selectors over it
[06:25:43] <nanana> Thanks for the chat, I should get a few hours of sleep in
[06:27:32] <nanana> and gibson042, thanks for the link to the DOMParser, but it looks like browser support likely wouldn't be adequate
[06:28:27] <nanana> Regardless, I've got some answers, and worst case will just cross port my own code
[06:29:39] <gibson042> nanana: did you note https://developer.mozilla.org/en-US/docs/DOM/DOMParser#DOMParser_HTML_extension_for_other_browsers ?
[06:29:55] <gibson042> there's fallback code for browsers with https://developer.mozilla.org/en-US/docs/DOM/DOMParser#DOMParser_HTML_extension_for_other_browsers
[06:30:25] <gibson042> rather, with document.implementation.createHTMLDocument
[06:30:42] <nanana> yeah, I suspect that'll have similar security issues
[06:31:07] <gibson042> I'd test it, because it seemed good to me
[06:31:12] <nanana> I tried making an iframe and using the iframes document context
[06:31:22] <nanana> but I was able to escape it
[06:32:45] <nanana> I might give it a second go though
[06:53:08] <scott_gonzalez> DaveMethvin: re: https://github.com/jquery/api.jquerymobile.com/issues/11#issuecomment-13608985
[06:53:09] <b-ot> scott_gonzalez: Issue #11 by agcolom (4mon 1d 22h 43m 5s): Fix iframe FF bug by turning off $.mobile.pushStateEnabled during load
[06:53:22] <scott_gonzalez> We would need to create 2 <script> elements, right?
[06:53:44] <scott_gonzalez> One inside the if and one in...umm....
[06:53:55] <scott_gonzalez> hmm...
[06:53:59] <scott_gonzalez> How do you do this?
[06:54:02] <DaveMethvin> lol
[06:54:16] <DaveMethvin> ok so you want that original code to run outside the onload handler, right
[06:54:35] <scott_gonzalez> If it's not IE <10, yes.
[06:54:36] <DaveMethvin> but in ie<9 it has to be wrapped in an onload handler
[06:54:41] <DaveMethvin> <10
[06:54:56] <scott_gonzalez> I guess we can set a flag in JS if we need to.
[06:55:21] <DaveMethvin> how about a helper function and have that fn be a no-op in all but ie10?
[06:55:23] <scott_gonzalez> [if lt IE 10] flag = true; window.onload = ...
[06:55:41] <DaveMethvin> oh reverse my logic
[06:55:52] <DaveMethvin> damn what a mess
[06:56:36] <scott_gonzalez> A conditional no-op would run into the same problem, wouldn't it?
[06:56:42] <scott_gonzalez> I think we need the flag.
[06:56:46] <scott_gonzalez> Unless I'm missing something.
[06:57:06] <DaveMethvin> so there can be only one of these blocks on the page, right?
[06:57:26] <scott_gonzalez> Well, now there's going to be multiple.
[06:57:38] <DaveMethvin> we'll clobber the onload handler
[06:57:50] <scott_gonzalez> ugh
[06:58:20] <scott_gonzalez> Oh, wait...
[06:58:47] <scott_gonzalez> Ugh, actually, I don't know if this is possible.
[06:59:29] <scott_gonzalez> Well, generically it could be a problem.
[06:59:34] <scott_gonzalez> But I think this specific case will be ok.
[06:59:44] <scott_gonzalez> Since pushState isn't a concern for IE <10, right?
[06:59:58] <DaveMethvin> certainly not ie8
[07:00:04] <DaveMethvin> ie9?
[07:00:08] <scott_gonzalez> Yeah, caniuse says IE10 only :-)
[07:00:35] <scott_gonzalez> So the generic problem is that the mobileinit event can't be used in demos for IE <9
[07:00:54] <scott_gonzalez> Because the inline script needs jQuery to be loaded.
[07:01:03] <scott_gonzalez> But in order for that to happen, we need to wait for window load.
[07:01:11] <scott_gonzalez> At which point the mobileinit event will have already fired.
[07:01:32] <DaveMethvin> yeah, i was thinking about a settimeout fix but that won't fix anything
[07:01:45] <scott_gonzalez> I guess the idea of loading an external script to do this would fix it.
[07:01:57] <DaveMethvin> yeah and trigger on its load
[07:02:25] <DaveMethvin> oh right the actual code snippet in a file
[07:02:37] <DaveMethvin> i don't think there is any way to do it inline
[07:02:42] <scott_gonzalez> _|Nix|_: you around?
[07:39:02] <_|Nix|_> scott_gonzalez: Hey! Just n my phone for now ...
[07:42:49] <scott_gonzalez> _|Nix|_: That mobileinit issue, I think the easiest solution is to just use an external script.
[07:43:20] <scott_gonzalez> You can place a file in the resources directory in the api.jquerymobile.com repo.
[07:43:38] <scott_gonzalez> It'll get published to api.jquerymobile.com/resources/file
[07:47:22] <_|Nix|_> scott_gonzalez: OK. Great! That's a good solution! The only downside I can think of is that it's a really tiny script - to the point where the size of the http request would exceed the size of the script several times. I'll put the script there for now.
[07:49:09] <scott_gonzalez> _|Nix|_: The problem is that mobileinit won't even work properly in IE <10 in the demos.
[07:49:23] <scott_gonzalez> Because we can't guarantee order of mixed inline and external scripts using document.write()
[07:49:52] <scott_gonzalez> So while we could hack at the JS that does the wrapping, it wouldn't even be a proper solution.
[07:50:03] <scott_gonzalez> It'd just happen to work in this instance because we only care about Firefox.
[07:50:41] <scott_gonzalez> I wish we could do this without document.write()
[07:50:57] <scott_gonzalez> And without having to generate a separate HTML file for every single example.
[07:51:13] <scott_gonzalez> I really don't want to go down the road of generating files for each example.
[07:51:25] <_|Nix|_> scott_gonzalez: Roger!
[07:51:48] <scott_gonzalez> Sorry that it sucks so much, I wish I had a better answer to give you :-/
[07:52:37] <scott_gonzalez> It'd be really nice if <ifram>content</iframe> worked.
[07:54:12] <_|Nix|_> I guess the extra request is the least of our worries. It's great that it works at all! Thanks!
[08:03:34] <doesallmagic> Project jQuery Migrate Core 1.x build #29: STILL FAILING in 2 min 46 sec: http://swarm.jquery.org:8080/job/jQuery%20Migrate%20Core%201.x/29/
[08:29:14] <DaveMethvin> scott_gonzalez _|Nix|_ can we just have one included script file that fires an event and the inline code can listen for that? so the file would just be $(document).trigger("mobileDemo") or something
[08:31:24] <scott_gonzalez> This sounds like a bug in jQuery Mobile TBH.
[08:31:39] <scott_gonzalez> I mean, it just breaks when loaded in an iframe, right?
[08:58:59] <gibson042> scott_gonzalez: what do you mean by "we can't guarantee order of mixed inline and external scripts using document.write()"
[08:59:46] <scott_gonzalez> In IE <10, if you document.write() a script, it runs all scripts in load order.
[09:00:00] <scott_gonzalez> So <script>code</script> will run before <script src="">.
[09:00:51] <gibson042> what if the <script>code</script> is instead <script>document.write("<script>code</script>")</script>?
[09:01:43] <scott_gonzalez> o_O
[09:01:53] <gibson042> https://github.com/jquery/jquery/blob/master/test/data/selector/sizzle_cache.html
[09:02:01] <scott_gonzalez> I can try that.
[09:03:12] <scott_gonzalez> Oh, I hadn't see the \x2F escaping. That's nice.
[09:03:33] <scott_gonzalez> Yeah, in that case, you want the inline script to run first anyway, so it's not an issue.
[09:03:38] <JamesMGreene> BTW, scott_gonzalez, just remembered why I said that QUnit Composite should be used with HTTP instead of File
[09:04:29] <scott_gonzalez> JamesMGreene: why?
[09:06:22] <gibson042> I think I got the \x2F from elsewhere in our repo... "\x3C/script" would actually be slightly (like, infinitesimally) better if you're starting from scratch
[09:12:19] <JamesMGreene> It is a problem with if the suites you reference are above the test page's folder
[09:13:27] <JamesMGreene> e.g. the actual test suite for QUnit composite, which references the main QUnit test suite: ../../test/test.js (or whatever)
[09:13:56] <JamesMGreene> If you go into parent directories, then the browsers scream about security
[09:14:50] <scott_gonzalez> Makes sense
[09:17:26] <JamesMGreene> So I guess I still need a note about it but it should be more particular
[09:38:48] <jqcommit> 01[13jquery.com01] 15ajpiano pushed 1 new commit to 06master: 02http://git.io/cbGEwQ
[09:38:48] <jqcommit> 13jquery.com/06master 1455fee6c 15adam j. sontag: Add links to API docs and Learning Center to resources section on home page
[09:39:30] <jqcommit> 01[13jquery.com01] 15ajpiano tagged 06v1.9.1-3 at 14b5b036a: 02http://git.io/vEn-xQ
[09:39:30] <jqcommit> 13jquery.com/06v1.9.1-3 14a477d40 15adam j. sontag: 1.9.1-3
[09:40:03] <jqcommit> 01[13jquery.com01] 15ajpiano pushed 1 new commit to 06master: 02http://git.io/iy_fAQ
[09:40:03] <jqcommit> 13jquery.com/06master 14a477d40 15adam j. sontag: 1.9.1-3
[12:07:56] <jqcommit> [13jquery] 15say2joe opened pull request #1168: Feature::cache: Added $.cache to jQuery for faster DOM access. (06master...06feature-cache)  02http://git.io/JHAZ-A
[12:08:19] <Gho5t> Hey Dave, you're getting some traction today: http://tech.slashdot.org/story/13/02/15/154224/webkit-as-broken-as-older-ie-versions
[12:17:39] <snover> ugh
[12:17:57] <DaveMethvin> slashdot has become reddit
[12:24:17] <snover> sorry dave
[12:34:17] <miketaylr> just fyi, DaveMethvin " There are rumors, however, that Opera is laying off 200 engineers and I seriously doubt they'll keep a large staff of people on fixing WebKit bugs. " is not true
[12:34:27] <miketaylr> rumors gonna rumor
[12:35:16] <DaveMethvin> miketaylr so is anyone being laid off?
[12:35:26] <DaveMethvin> if not there should be a really nice pile of engineers for webkit
[12:35:36] <DaveMethvin> which would be good
[12:35:48] <miketaylr> yeah, people were let go. but from devrel, delivieries, other projects, etc.
[12:36:04] <miketaylr> they kept all the smart guys :P
[12:36:12] <DaveMethvin> well as long as you're still there too :P
[12:36:18] <miketaylr> (that's harsh and unfair.. lots of good people got let go)
[12:36:27] <miketaylr> but it's not like there's 4 people left
[12:36:30] <miketaylr> more like 800 people left
[12:36:50] <scott_gonzalez> I think people don't realize how big Opera is.
[12:37:11] <Gho5t> why would anyone want to work on opera anyways
[12:37:23] <miketaylr> Gho5t: yeah, probably only idiots
[12:37:25] <Gho5t> it's one of those writing is on the wall, scenarios
[12:37:31] <Gho5t> where's it going?
[12:37:33] <Gho5t> nowhere
[12:37:37] <miketaylr> people with low self-esteem, etc.
[12:37:42] <Gho5t> yeah
[12:38:05] <miketaylr> btw Gho5t, don't think we've met (i work for Opera)
[12:38:06] <miketaylr> :P
[12:38:17] <Gho5t> oh hai!
[12:38:20] <Gho5t> : )
[12:38:24] <DaveMethvin> i guess it's like losing a friend that i didn't see much, presto just pretty much worked for me
[12:38:33] <miketaylr> man, i feel the same way
[12:38:41] <scott_gonzalez> DaveMethvin: That's because Opera <3 standards
[12:39:16] <miketaylr> but now i'm on the Web Standards team, with a ton of other really smart people
[12:39:17] <scott_gonzalez> It's actually quite amazing how well they were able to follow standards and have IE compat.
[12:39:19] <miketaylr> so that will continue
[12:39:40] <scott_gonzalez> Does that mean your title is no longer Web Opener?
[12:39:47] <miketaylr> yeah, not sure what my new title is
[12:39:54] <miketaylr> "Web Standards... dude."
[12:39:56] <scott_gonzalez> Web Kitter :-P
[12:40:01] <DaveMethvin> oooh
[12:40:02] <miketaylr> heh
[12:40:06] <Gho5t> miketaylr: can you get me ajob
[12:40:12] <miketaylr> haha
[12:40:18] <Gho5t> lol
[12:40:21] <miketaylr> do you have low self-esteem?
[12:40:28] <Gho5t> yes
[12:40:31] <Gho5t> am fat and ugly
[12:40:31] <miketaylr> hired.
[12:40:34] <scott_gonzalez> Do you want to stare at broken sites all day?
[12:41:39] <miketaylr> DaveMethvin: and we still have the site compat guys on our new team, so we'll be able to prioritize these kinds of bug fixes
[12:42:02] <DaveMethvin> my plan is working out perfectly
[12:42:03] <scott_gonzalez> Sometimes I picture miketaylr sitting in front of his laptop with some amazing new tech that already works in Opera Next on one screen and some horribly broken built-in-the-90s site on another screen.
[12:42:04] <miketaylr> anyone who thinks that "webkit" == all sites work hasn't really looked in the bug trackers...
[12:42:21] <DaveMethvin> oh def
[12:42:42] <DaveMethvin> it's like saying, "Hey, we're all mammals so there's basically no diff"
[12:42:49] <miketaylr> scott_gonzalez: throw in a diet coke and it's mostly accurate
[12:43:24] <DaveMethvin> i really am hoping that you guys will fix all those bugs and we'll be able to get rid of all the workarounds we have eventually
[12:43:37] <DaveMethvin> maybe only a year or two since we're not talking IE speed
[12:43:53] <DaveMethvin> one of the google guys pinged me and i sent him a big list
[12:44:01] <miketaylr> it would be cool to start annotating source w/ bug links
[12:44:08] <miketaylr> sweet.
[12:44:17] <DaveMethvin> our own trackers have them in many cases
[12:44:22] <miketaylr> maybe a jqcon hack session
[12:44:29] <DaveMethvin> we just haven't put them in the source
[12:44:34] <miketaylr> DaveMethvin: yeah, even just jquery tickets would be a great start
[12:44:41] <scott_gonzalez> They should be right under the // support comments
[12:44:58] <miketaylr> yeah some of the //support comments have the gist of the problem
[12:45:06] <miketaylr> (or most, i haven't looked at them all)
[12:45:09] <DaveMethvin> it might be worth another pass on those
[12:45:28] <DaveMethvin> there are still several patches that aren't annotated with //Support
[12:45:31] <scott_gonzalez> We use UI ticket numbers all over the place in comments.
[12:45:35] <scott_gonzalez> for example: https://github.com/jquery/jquery-ui/blob/master/ui/jquery.ui.autocomplete.js#L50-L56
[12:45:43] <DaveMethvin> yeah same with core
[12:45:50] <scott_gonzalez> https://github.com/jquery/jquery-ui/blob/master/ui/jquery.ui.autocomplete.js#L113
[12:45:59] <scott_gonzalez> Oh look, that one was Opera...
[12:46:07] <miketaylr> :)
[12:46:09] <scott_gonzalez> Firefox: https://github.com/jquery/jquery-ui/blob/master/ui/jquery.ui.autocomplete.js#L237
[12:46:14] <scott_gonzalez> IE: https://github.com/jquery/jquery-ui/blob/master/ui/jquery.ui.autocomplete.js#L274
[12:46:18] <DaveMethvin> For core it's "This change was put in place to cause jQuery UI bug #1234"
[12:46:29] <scott_gonzalez> haha
[12:46:39] <scott_gonzalez> Damn, autocomplete has a lot of ticket refs.
[12:46:50] <scott_gonzalez> Another Firefox ticket: https://github.com/jquery/jquery-ui/blob/master/ui/jquery.ui.autocomplete.js#L510
[12:46:59] <scott_gonzalez> These were clearly before we started using // support
[12:47:00] <Gho5t> I'm gonna join the team soon
[12:47:07] <Gho5t> these bugs might be beyond me tho
[12:47:20] <Gho5t> for the now
[12:47:33] <miketaylr> i'd be happy to help work on this kind of thing (in the near future)
[12:48:36] <miketaylr> but it'd be good to pick some core member's brains as that would be faster than just searching the tracker, so timing it at a jqcon would be maybe a good idea
[12:48:46] <DaveMethvin> sure
[12:49:26] <DaveMethvin> Just about every browser maker is awash in bug reports and they have the same problem that jquery core does in that most of the reports are crap
[12:49:46] <miketaylr> ya
[12:49:52] <DaveMethvin> so it would be good to have a way where if we promise to create really good tix with test cases and stuff, they will promise to triage them quickly
[12:49:54] <miketaylr> is these a bug, etc.
[12:50:20] <DaveMethvin> let me find a couple of examples of tix that people file against us
[12:51:18] <DaveMethvin> http://bugs.jquery.com/ticket/11663 
[12:51:50] <DaveMethvin> http://bugs.jquery.com/ticket/12986
[12:52:21] <miketaylr> yeah
[12:52:26] <DaveMethvin> http://bugs.jquery.com/ticket/10509  open since Chrome 14
[12:52:42] <miketaylr> It crashes totally my project!
[12:52:44] <miketaylr> sad
[12:53:08] <miketaylr> gotta run right now, let's chat more about this later
[12:53:17] <DaveMethvin> souds good
[12:57:43] <scott_gonzalez> holy shit
[12:57:49] <scott_gonzalez> load average: 50.72, 50.93, 45.66
[12:59:12] <snover> no big deal
[12:59:22] <DaveMethvin> whose box is that?
[13:00:23] <scott_gonzalez> Ours
[13:00:23] <scott_gonzalez> jq03
[13:00:43] <scott_gonzalez> I could barely use vi to update the CDN index.
