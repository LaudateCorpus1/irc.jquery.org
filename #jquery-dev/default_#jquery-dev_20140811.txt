[07:18:18] <JamesMGreene> Opinion question for you all: What is a reasonable minimum version of Safari for a modern JS library (other than jQuery) to support?  I am leaning toward Safari 6.1+ as it has support on Mac OSX 10.7+
[07:18:55] <JamesMGreene> Basically fits with the "latest and latest minus one" mentality
[07:19:41] <m_gol> JamesMGreene: 6.1 is not "latest minus one", 6.1 is current
[07:19:57] <m_gol> 6.1 is identical engine-wise as 7.0, they were both released at the same time etc.
[07:20:12] <m_gol> 6.1 is for Mountain Lion, 7.0 is for Mavericks; they differ in UI but engine is the same
[07:20:22] <m_gol> so 6.0 is the "previous" version for Safari
[07:20:32] <JamesMGreene> I assume you mean current because you must have 10.9+ to install 7.0, right?
[07:20:51] <m_gol> yes, and because of all I've just written :)
[07:20:59] <JamesMGreene> But 6.0 is stupid :(
[07:21:07] <m_gol> ;)
[07:21:07] <JamesMGreene> (lol)
[07:21:17] <m_gol> what's bothering you in 6.0?
[07:21:18] <JamesMGreene> Still didn't have support for `mouseenter`/`mouseleave`
[07:21:25] <m_gol> hehe
[07:21:39] <JamesMGreene> I hate adding workaround code for 1 supported browser when every other one has it
[07:21:47] <m_gol> well, that's life ;P
[07:21:59] * JamesMGreene shakes his fist at Safari
[07:22:19] <m_gol> how much less code we'd have in Core if we dropped Android 2.3... what's mouseenter/mouseleave near that :P
[07:22:56] <m_gol> 6.0 is more or less sane, especially if you compare it with 5.1 which is shit ;)
[07:23:03] <JamesMGreene> Yeah, I know, it's not that bad... I need a minification expert to help me reduce my library size apparently :-P
[07:24:34] <m_gol> ping gibson042 ;P
[07:24:48] <m_gol> he'll minify it so much you won't recognize it ;P
[07:25:22] <m_gol> JamesMGreene: what's the library btw?
[07:25:39] <JamesMGreene> https://github.com/zeroclipboard/zeroclipboard
[07:26:13] <JamesMGreene> Oh, I didn't realize `Node.contains` was already available in all modern-ish browsers. That makes working around `mouseenter`/`mouseleave` very easy
[07:26:39] <m_gol> :)
[07:27:09] <JamesMGreene> IE invents all the great utility method :-P
[07:27:13] <JamesMGreene> methods*
[07:27:39] <JamesMGreene> I think gibson042 faked his own ping timeout :-P
[07:27:41] <m_gol> e.g. clipboard handling ;)
[07:27:49] <JamesMGreene> true that, m_gol 
[07:28:03] <m_gol> I wonder how many days have to pass until we get standard clipboard API
[07:28:13] <m_gol> one of the few reasons Flash is still useful for regular sites
[07:28:22] <JamesMGreene> 'fraid so
[07:28:32] <JamesMGreene> The HTML Clipboard spec is still going nowhere fast :(
[07:28:46] <m_gol> the security arguments are pretty much moot when users will install Flash and get a less secure solution anyway
[07:29:18] <JamesMGreene> I really don't understand people being afraid of clipboard injection anymore
[07:29:31] <JamesMGreene> clipboard reading, of course, should be locked down to when the user actually pastes
[07:29:42] <JamesMGreene> but manipulating a copy? who cares, really
[07:30:13] <JamesMGreene> welcome back, gibson042  :-P
[07:32:00] <JamesMGreene> So many gibsons
[08:35:28] <JamesMGreene> Well, there ya go m_gol... our little Safari talk led to me correcting the Safari version support info for `Node.contains` on MDN: https://developer.mozilla.org/en-US/docs/Web/API/Node.contains
[08:36:13] <JamesMGreene> Someone had listed version 5.2.2 because they misunderstood that Safari version "521" != "5.2.1"
[08:43:24] <m_gol> :)
[08:50:22] <JamesMGreene> All of the typical Event properties are enumerable in all modern-ish browsers, right? e.g. `target`, etc.
[08:57:09] <jqcommit> [13qunit] 15Krinkle labeled issue #618: Improve/restore reference errors report 02http://git.io/xN6Ksw
[09:00:32] <m_gol> DaveMethvin: meeting?
[09:00:43] <DaveMethvin> yup
[09:34:04] <ryanneufeld> mikesherov: ping?
[09:34:49] <m_gol> ryanneufeld: in a Core meeting now :)
[09:35:07] <ryanneufeld> I noticed, thanks :)
[10:54:05] <gibson042> regarding the Promise shimming discussion from which the network so rudely ejected me: I think we can leverage Callbacks and/or Deferred (or rather, leverage something like native-promise-only for them)
[10:55:56] <DaveMethvin> gibson042: do you mean, reverse things and build Callbacks/Deferred on Promise?
[10:56:12] <gibson042> yes
[10:56:25] <DaveMethvin> what did you have for lunch? :)
[10:56:55] <DaveMethvin> there are a lot of differences tho
[10:57:19] <DaveMethvin> deferred doesn't swallow errors, isn't async if the it's initially resolved, etc
[10:58:00] <gibson042> all true, but maybe not as severe as we think
[10:59:36] <DaveMethvin> long term i feel like having ajax/deferred/callbacks deprecated and replaced with xhr/Promise would be a good thing
[10:59:44] <DaveMethvin> but it's pretty far away i'd think
[10:59:57] <DaveMethvin> at that point, some sort of shim for the old api might be the way to go
[11:00:20] <DaveMethvin> although if it's done with modules it might be simpler to just include the old code
[11:00:36] <gibson042> "How could I get from Promise to jQuery.Callbacks?" seems like a question worth answering before making those decisions
[11:01:26] <DaveMethvin> other than Deferred, we're not using Callbacks much are we?
[11:02:11] <DaveMethvin> nope
[11:02:18] <gibson042> I see deferred, queue, and ajax, with the latter basically the same as deferred
[11:02:23] <DaveMethvin> yeah
[11:03:52] <DaveMethvin> the semantics on Deferred could probably be wrapped up a lot if we wanted to support both for the long term
[11:04:21] <DaveMethvin> but i'm not sure creating deferred from promise will save anything since the wrapper will cost a lot
[11:04:25] <DaveMethvin> and callbacks, ugh
[11:04:39] <DaveMethvin> originally i had hoped i could use callbacks for events
[11:04:45] <DaveMethvin> but that didn't pan out
[11:05:17] <gibson042> hmm
[11:24:44] <dcherman> before i file a ticket, would an optimization to create less garbage in $.hasData be acceptable?  right now a pointless object is created if a given element doesn't actually have a cache associated with it
[11:26:12] <DaveMethvin> dcherman: how often is $.hasData called? i know acceptData is (unfortunately) called often but i thought hasData was pretty infrequent
[11:29:02] <dcherman> DaveMethvin: well, my goal is to make dual PRs - one for this, and one for jQuery UI to use it on their pseudo selectors for 2 reasons
[11:29:27] <dcherman> first is doing something like $( ":my-widget" ) would create a whole lot less garbage if you have a lot of DOM n odes
[11:30:00] <dcherman> but more importantly ( but less related to the hasData patch ), it seems like there's potential memory leaks if you filter a detached set using one of those pseudos
[11:30:19] <dcherman> since it re-creates the jquery cache somewhat surprisingly, so it'll leak that object if you don't call .remove()
[11:30:47] <dcherman> the hasData patch was just something i noticed while i was looking through the data code
[11:32:06] <DaveMethvin> oh so you're picking at it and pre-emptively want to stop the bleeding? ;)
[11:32:35] <DaveMethvin> where is it creating an extra object there?
[11:33:02] <dcherman> pretty much :(
[11:33:04] <dcherman> https://github.com/jquery/jquery/blob/master/src/data/Data.js#L170
[11:33:14] <dcherman> should just see if the key exists in the cache rather than creating an empty object
[11:33:15] <DaveMethvin> oh yeah, just was looking at 1.x ..
[11:34:06] <DaveMethvin> dunno how rwaldron 's pr for attaching elements to data might change this
[11:34:26] <DaveMethvin> that's gonna land in 2.2
[11:34:44] <DaveMethvin> so we won't have the internal cache anymore
[11:34:51] <dcherman> ah sweet - it actually does the same thing in that PR though :/
[11:35:01] <dcherman> i'll comment
[11:35:14] <DaveMethvin> ok good, let's be sure to fix it there for sure
[14:33:32] <jqcommit> [13jquery] 15gtsop opened pull request #1640: Code style fixes (06master...06master) 02http://git.io/2sP4kg
