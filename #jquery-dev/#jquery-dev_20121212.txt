[04:57:33] <jqcommit> [13jquery] 15Ralt opened pull request #1072: Make noConflict more developer-friendly (06master...06master)  02http://git.io/-e-8eQ
[05:57:45] <gibson042> .
[06:03:04] <DaveMethvin> so gibson042 how are those pull requests coming?
[06:04:41] <gibson042> the attrHook one will be going up in 20-30 minutes, then it's on to boolHook
[06:04:41] <gibson042> attroperties are such a pain
[06:04:47] <DaveMethvin> amen
[06:05:01] <DaveMethvin> thanks!  I feel like Captain Kirk... "Scotty, I need warp drive now!"
[06:05:23] <gibson042> I'm givin' 'er all she's got, sar
[06:05:33] <gibson042> :)
[06:05:35] <DaveMethvin> haha
[06:06:20] <DaveMethvin> http://i.imgur.com/hQZ1b.png
[08:25:01] <scott_gonzalez> Whoa, when did jsconf get so expensive?
[09:19:03] <gibson042> mikesherov yt?
[10:32:42] <mikesherov> Hi
[10:32:45] <mikesherov> gibson0421: Here
[10:57:07] <gibson0421> mikesherov: I was wondering if mergeatron would tolerate the deletion of a TestSwarm job it kicked off
[10:58:18] <gibson0421> it looks like we're not running the selector module: http://swarm.jquery.org/job/1884
[10:59:14] <gibson0421> I made a change to rename it, but no effect: https://github.com/gibson042/jquery/commit/889874f992b9f1cec0df968145b4786feefa3d92
[11:30:13] <gnarf> mikesherov: you around?
[11:30:35] <gnarf> gibson0421: if you delete the swarm job, the jenkins build fails, down the line
[12:52:01] <mikesherov> gnarf: mergeatron doesn't yet tolerate that
[12:52:40] <mikesherov> there's a bunch of open issues in case anyone wants to pitch in :-) https://github.com/snapinteractive/mergeatron/issues?state=open
[12:52:45] <mikesherov> gibson0421: ^
[12:53:13] <gibson0421> noted; that's why I asked :)
[12:53:34] <gibson0421> do you know anything about why we skip a QUnit module?
[13:01:57] <scott_gonzalez> DaveMethvin: http://bugs.jquery.com/ticket/11230
[13:02:40] <scott_gonzalez> Shouldn't elem.appendTo( "div" ).addClass( "foo" ) work?
[13:03:07] <DaveMethvin> it will work, it's a question of what it does :D
[13:03:37] <scott_gonzalez> Well, by work I mean do what it does today.
[13:03:42] <DaveMethvin> when i read that it seems to be like elem is being chained
[13:03:57] <DaveMethvin> well today it still depends on what "div" selects
[13:04:16] <scott_gonzalez> Not really, today it does the right thing always.
[13:04:19] <DaveMethvin> i can see the case for appendTo being like clone
[13:04:26] <scott_gonzalez> It always operates on the appended elements.
[13:04:44] <scott_gonzalez> What's inconsistent is whether the stack changes.
[13:04:47] <DaveMethvin> yeah, but it doesn't always stack
[13:04:55] <DaveMethvin> if we fixed that i would be okay
[13:05:14] <DaveMethvin> so a new set works for me although it complicates the whole method for something that happens rarely i suspect
[13:05:22] <scott_gonzalez> I think it should always stack, but it's probably gonna break someone's code.
[13:05:44] <DaveMethvin> sure, but it's a horrible api right now
[13:05:48] <scott_gonzalez> I almost always .appendTo() as the last method in the chain.
[13:05:53] <DaveMethvin> exactly
[13:06:04] <DaveMethvin> i don't think it's all that common to keep chaining
[13:06:06] <scott_gonzalez> But for things like positioning, you need to append first.
[13:06:22] <DaveMethvin> but probably the most common is 1 element
[13:06:31] <scott_gonzalez> I dunno, I bet a lot of people do : $( "<div>" ).appendTo( whatever ).xxx
[13:06:32] <DaveMethvin> so other than stacking we haven't changed that behavior in chaining
[13:06:40] <scott_gonzalez> Even though that's bad for reflows.
[13:07:50] <DaveMethvin> well i think all of our apis should either always stack or never stack, none of this maybe stack depending on whether the first element has a parent and/or the source and/or destination have one element :)
[13:08:05] <DaveMethvin> so i'm good with either absolute
[13:08:17] <DaveMethvin> although returning the curent set saves some code and time
[13:08:44] <DaveMethvin> but if a lot of people are actually using the returned set of clones then i can see tha being useful
[13:09:15] <scott_gonzalez> I bet a lot more people are either chaining after or storing a reference to the return value than people using .end() after .appendTo()
[13:09:41] <DaveMethvin> meaning...always stack?
[13:10:00] <scott_gonzalez> yup
[13:10:16] <DaveMethvin> that's certainly the use case for what we do in the unit tests, ALL OVER the place
[13:10:42] <DaveMethvin> let me note that in the ticket
[13:34:04] <gibson0421> Krinkle: do you know why TestSwarm skips the "selector" module?
[13:34:31] <Krinkle> gibson0421: skip how?
[13:34:45] <Krinkle> http://swarm.jquery.org/job/1869
[13:34:48] <Krinkle> it isn't submitted
[13:35:00] <Krinkle> it doesn't skip it, it isn't being submitted
[13:35:05] <Krinkle> check grunt task testswarm
[13:35:29] <scott_gonzalez> Yup, it's not listed in grunt.js
[13:35:32] <Krinkle> should probably use glob to generate the list instead of hardcoding it
[13:35:35] <scott_gonzalez> line 140
[13:35:35] <gibson0421> oy vey
[13:35:38] <Krinkle> :)
[13:36:58] <Krinkle> gibson0421: Why is there no test suite for getText?
[13:37:16] * Krinkle is working on a plugin jquery.visibleText, and writing the test suite now. 
[13:37:24] <gibson0421> in Sizzle?
[13:37:26] <Krinkle> yeah
[13:37:48] <gibson0421> the utilities tests didn't exist at all until about 6 months ago IIRC
[13:38:28] <gibson0421> I write some whenever I change a subcomponent like that; getText must have been relatively stable
[13:41:22] <Krinkle> gibson0421: Well, I'll submit my tests for this plugin (sans the visibility specific stuff) as PR later
[13:41:55] <gibson0421> ok
[14:14:51] <jqcommit> [13jquery] 15dmethvin opened pull request #1073: Fix #11230. .appendTo and pals should always stack. (06master...0611230-appendTo)  02http://git.io/X4N0ug
[15:03:29] <Krinkle> scott_gonzalez: gibson0421: just fyi, pushed it https://github.com/Krinkle/jquery-visibleText
[15:22:29] <Krinkle> Hm.. is it by design that $.map converts an object into an array ?
[15:22:55] <Krinkle> When it says it also supports iterating objects as of jquery 1.6, I figured it would mean it actually returns an object too
[15:23:11] <Krinkle> $.map({ a: 'b' }, function (val) { return val; });
[15:23:14] <Krinkle> ['b']
[15:24:28] <Krinkle> could do an each, and then either setting or deleting the key, but would be nice if I could use map, too bad.
[17:20:33] <jqcommit> [13jquery] 15gibson042 opened pull request #1074: Fix #13044: execute all QUnit modules in TestSwarm (06master...0613044)  02http://git.io/zI5F1w
[17:21:47] <Krinkle> gibson0421: maybe use glob? like glob('unit/*.js') since all modules are in 1 file and the module name matches the file name
[17:22:01] <Krinkle> (and concat/push Sizzle on top of it)
[17:22:08] <Krinkle> not sure if there is a sync method for that
[17:22:28] <Krinkle> I tried it once, but got into a clusterfuck of grunt issues because config can't be done async apparently
[17:22:34] <Krinkle> (though it could be done from the grunt task)
[17:23:06] <gibson0421> Krinkle: yeah, it'd basically look like grunt.file.expandFiles("test/unit/*.js") with some postprocessing
[17:23:17] <Krinkle> oh nice
[17:23:34] <gibson0421> but mostly I just want to get this out of the way now, because it's blocking the attrHooks/boolHook changes for 1.9 beta
[17:24:09] <gibson0421> the grunt config/task interface to make it happen can certainly be improved, though
[17:29:13] <Krinkle> grunt.file.expandFiles("test/unit/*.js").map(function (path) { return path.match(/^test\/unit\/(.+).js$/)[1]; });
[17:29:40] <Krinkle> grunt.file.expandFiles("test/unit/*.js").map(function (path) { return path.match(/^test\/unit\/(.+)\.js$/)[1]; });
[17:31:43] <Krinkle> gibson0421: btw, pro tip: mention #13044 inside the pull body so that it is clickable :)
[17:31:57] <Krinkle> s/body/description
[17:32:21] <Krinkle> oh, it isn't a gh id
[17:32:24] <Krinkle> right..
[17:32:28] <gibson0421> :)
[17:32:38] <gibson0421> still a good idea to link to ?see 13044
[17:33:07] <Krinkle> pulley used to do that
[17:33:15] <Krinkle> nobody uses it anymore?
[17:34:09] <gibson0421> the people who were have pretty much abandoned it, I think
[17:39:34] <Krinkle> gibson0421: Hm.. why retest? It wasn't even done and hasn't finished
[17:39:54] <Krinkle> if you push a new commit, it'll automatically retest
[17:40:05] <gibson0421> am I looking in the wrong place? I don't even see the job at http://swarm.jquery.org/user/jquery
[17:41:04] <Krinkle> I guess mergeatron got disabled or something
[17:41:07] <Krinkle> last run was 8 hours ago
[17:41:20] <Krinkle> Or does it only run on @ retest now?
[17:41:24] <gibson0421> damn!
[17:41:25] <Krinkle> mikesherov: 
[17:41:51] <gibson0421> no, it's supposed to run on all pull opens and commits
[17:42:00] <gibson0421> I'm just really antsy right now
[17:44:30] <Krinkle> k
[17:48:05] <Krinkle> scott_gonzalez: http://swarm.jquery.org/result/680484
[17:48:11] <Krinkle> Looks like your firefox client has some issues
[17:48:58] <scott_gonzalez> That's BrowserStack.
[17:49:15] <Krinkle> ok
[17:49:17] <Krinkle> weird
[17:49:22] <Krinkle> gui or api?>
[17:49:25] <scott_gonzalez> GUI
[21:27:19] <Krinkle> Hm.. isn't click() / .trigger('click') on a <a> supposed to trigger the native behaviour like HTMLElement..click() would?
[21:27:42] <Krinkle> on https://www.mediawiki.org/wiki/Project:Sandbox $( '#ca-edit a' ).click(); does nothing, $( '#ca-edit a' )[0].click(); follows the link
