[03:39:56] <scott_gonzalez> m_gol: Trac is being too slow, so I'll just leave my comments about jquery@1.x here...
[03:40:59] <scott_gonzalez> I think the problem was that you have to publish with a tag, but maybe I'm remembering that wrong.
[03:41:35] <scott_gonzalez> I remember specifically asking Isaac about this and he said to use 1.x.
[03:41:57] <scott_gonzalez> I commented on the fact that it's really confusing to use a valid range as a tag.
[03:42:14] <scott_gonzalez> He said that the code always checks for tags first, so it's fine.
[03:42:25] <scott_gonzalez> Annoying that it turns out not to be fine now.
[03:42:30] <scott_gonzalez> But whatever.
[03:42:45] <scott_gonzalez> We'll just need to see if it's possible to publish with no tag at all.
[04:01:43] <jqcommit> [13jquery] 15amitmerchant1990 opened pull request #1648: Added closing bracket because it looks ugly. (06master...06jquery-mine) 02http://git.io/oHZsTQ
[05:32:32] <jqcommit> [13qunit-reporter-junit] 15luckysw opened pull request #14: Fixed running in node.js (06master...06master) 02http://git.io/CzXiJg
[05:47:26] <jqcommit> [13jquery] 15gibson042 pushed 1 new commit to 06master: 02http://git.io/ayyVzA
[05:47:26] <jqcommit> 13jquery/06master 14609adf6 15Amit Merchant: CONTRIBUTING: Close parenthesis...
[05:47:51] <jqcommit> [13jquery] 15gibson042 closed pull request #1648: Added closing bracket because it looks ugly. (06master...06jquery-mine) 02http://git.io/oHZsTQ
[05:53:21] <doesallmagic2> Project jQuery Core build #1181: STILL UNSTABLE in 6 min 10 sec: http://jenkins.jquery.com/job/jQuery%20Core/1181/
[05:53:21] <doesallmagic2> richard.gibson: CONTRIBUTING: Close parenthesis
[06:50:01] <JamesMGreene> leobalter: Found a bug with the new global beforeEach/afterEach https://github.com/jquery/qunit/pull/634#issuecomment-54299260
[06:50:52] <JamesMGreene> gibson042: Your idea of contributing is closing parentheses now? :-P
[06:51:50] <gibson042> JamesMGreene: not only that, it wasn't even an original contribution ;)
[06:52:02] * JamesMGreene gasps
[07:17:31] <jqcommit> [13qunit] 15JamesMGreene labeled issue #647: Global `beforeEach`/`afterEach` should synchronize before module `beforeEach`/`afterEach` run 02http://git.io/grnEgA
[07:17:41] <jqcommit> [13qunit] 15JamesMGreene assigned issue #647: Global `beforeEach`/`afterEach` should synchronize before module `beforeEach`/`afterEach` run 02http://git.io/grnEgA
[07:17:54] <JamesMGreene> ^ All yours, leobalter  :-P
[07:56:32] <jqcommit> [13qunit] 15JamesMGreene opened pull request #648: Logging: Add runtime to moduleDone (06master...06moduleDoneTiming) 02http://git.io/kK-Opw
[08:49:15] <jqcommit> [13qunit] 15JamesMGreene labeled issue #632: Allow tests to return a Promise 02http://git.io/mLJngA
[08:49:25] <jqcommit> [13qunit] 15JamesMGreene labeled issue #534: Implement async/done callback system 02http://git.io/Mfd9rg
[08:49:47] <jqcommit> [13qunit] 15JamesMGreene labeled issue #633: Support global test-level setup/teardown callbacks 02http://git.io/qJniHA
[09:07:32] <JamesMGreene> Dead room today
[09:09:26] <JamesMGreene> Was it something I said?  :-P  14 people ping timed out after I declared the room dead
[09:20:13] <JamesMGreene> kborchers scott_gonzalez DaveMethvin: Do we have details on the start/end times of the Team Meeting day yet?
[09:20:34] <scott_gonzalez> 6:00a - 10:00p
[09:20:38] <scott_gonzalez> :-P
[09:20:51] <JamesMGreene> wat, 6:00am  >;-O
[09:21:02] <JamesMGreene> PDT? :-P
[09:30:43] <kborchers> JamesMGreene: e-mails are coming soon
[09:31:05] <JamesMGreene> k thx
[10:16:06] <jqcommit> [13qunit] 15leobalter opened pull request #649: Test: Remove unused code (06master...06remove-callback-runtime) 02http://git.io/H5HYfA
[10:30:30] <leobalter> JamesMGreene: I need help on #647, not easy. 
[11:14:55] <jqcommit> [13qunit] 15leobalter opened pull request #650: Fix test hooks order (06master...06647-hooks-order) 02http://git.io/r6CfmQ
[11:27:09] <JamesMGreene> leobalter jzaefferer Krinkle: I'm thinking that the `QUnit.config.beforeEach`/`afterEach` may also need to get queued
[11:27:23] <JamesMGreene> Otherwise last one in wins
[11:27:26] <leobalter> https://github.com/jquery/qunit/pull/650
[11:27:30] <leobalter> JamesMGreene ^
[11:27:43] <JamesMGreene> leobalter: Yeah, I'm reviewing it but it's more than that
[11:28:17] <JamesMGreene> e.g. The `QUnit.config.beforeEach` that was active when the `test` was queued may not be the same one that is active when the test actually executes
[11:28:59] <JamesMGreene> For example, in the Promise tests, I wanted to disable the global beforeEach/afterEach but I couldn't because it negatively impacted the modules tests
[11:29:01] <jzaefferer> JamesMGreene: in theory config.beforeEach can change, but the purpose is definitely to have this shared across all tests in a testsuite
[11:29:28] <jzaefferer> In our own suite, we may need to rip those tests out into a separate suite to avoid conflicts
[11:29:34] <JamesMGreene> OK, fair enough
[11:29:50] <jzaefferer> With the improvements planned for browserstack-runner, I'm not too worried about adding more html files, even though it currently sucks
[11:31:31] <Krinkle> JamesMGreene: Those aren't actual global/static functions, right?
[11:31:45] <Krinkle> Should they at least be callable like our events?
[11:31:52] <Krinkle> Ah, that's what you're saying, isn't it
[11:32:00] <JamesMGreene> Krinkle: They're currently static but yes, I would agree
[11:32:07] <JamesMGreene> they need to be callable
[11:32:19] <Krinkle> let's not put them in config
[11:32:20] * JamesMGreene shrugs
[11:32:21] <b-ot> JamesMGreene: ¯\_(ツ)_/¯
[11:32:32] <Krinkle> They're just events :)
[11:32:50] <JamesMGreene> But then the question becomes if they're really global at all
[11:32:58] <Krinkle> What's the use case for having a global one?
[11:33:15] <Krinkle> What is all this beyond renaming setup/teardown to before/afterEach
[11:34:08] <Krinkle> jzaefferer: I'm still not quite sure what you meant with it not being intuitive. For the use case of a module teardown/setup I think both are equally a good name. Your comment implies we use these elsewhere where before/afterEach would be better (contrary to module config where it doesnt matter much)
[11:34:09] <JamesMGreene> Having a setup/teardown that works cross-modules so that share code doesn't have to be repeated in every `module` created
[11:34:11] <Krinkle> Is that correct?
[11:34:26] <Krinkle> Sounds like a bad idea.
[11:34:31] <Krinkle> Can be done with nesting instead
[11:34:36] <Krinkle> or an environment factory
[11:34:44] <JamesMGreene> When it is global, using "setup" and "teardown" means nothing to me
[11:34:54] <Krinkle> e.g. QUnit.module( 'foo', APP.Test.newEnv() )
[11:34:58] <JamesMGreene> thus we went for beforeEach/afterEach, which is also common terminology with Mocha
[11:35:07] <Krinkle> Ah, I see.
[11:35:30] <JamesMGreene> I would just prefer we add nesting :-P
[11:35:34] <Krinkle> if you need it in multiple files a factory or plain object can be re-used.
[11:35:38] <JamesMGreene> Nesting solves all of the world's problems ;)
[11:35:40] <Krinkle> And in the same file, just nesting indeed.
[11:36:11] <Krinkle> In MediaWiki I have mw.test.newQunitEnv() which takes an object for setup/teardown as well
[11:36:13] <Krinkle> and wraps it
[11:36:20] <Krinkle> (like classic window.onload nesting)
[11:36:39] <Krinkle> so it returns setup/teardown shared for all, + optionally extra setup/teardown
[11:36:58] <Krinkle> Alternatively could be done by providing a custom QUnit.module that does that
[11:37:13] <Krinkle> (in your own app, not in qunit)
[12:08:29] <jqcommit> [13jquery] 15amitmerchant1990 opened pull request #1649: Added one more data converter to the Ajax settings. (06master...06jquery-mine) 02http://git.io/GZURzg
[12:14:57] <JamesMGreene> leobalter: https://github.com/jquery/qunit/pull/650#issuecomment-54350493
[12:31:48] <jqcommit> [13qunit] 15JamesMGreene closed pull request #649: Test: Remove unused code (06master...06remove-callback-runtime) 02http://git.io/H5HYfA
[12:34:59] <doesallmagic2> Project QUnit build #451: UNSTABLE in 3 min 26 sec: http://jenkins.jquery.com/job/QUnit/451/
[12:35:00] <doesallmagic2> leonardo.balter: Test: Remove unused code
[12:40:43] <JamesMGreene> Ugh, so help me God I can't figure out where Mocha actually invokes its `beforeEach`/`afterEach` handlers
[12:42:02] <JamesMGreene> Ah, found it
[12:42:33] <JamesMGreene> https://github.com/visionmedia/mocha/blob/340cb56aae5d5d240220d9c8266ca17061149e05/mocha.js#L4745-L4769
[12:44:00] <jqcommit> [13jquery] 15gibson042 closed pull request #1649: Added one more data converter to the Ajax settings. (06master...06jquery-mine) 02http://git.io/GZURzg
[13:41:14] <jqcommit> [13qunit] 15JamesMGreene labeled issue #543: Allow nested suites (modules)? 02http://git.io/_asvDg
[13:55:21] <jzaefferer> Krinkle: A custom QUnit.module is what QUnit.config.before/afterEach replaces. Its not super special, just makes it a little easier to share code across all modules.
[13:55:28] <jqcommit> [13qunit] 15JamesMGreene assigned issue #543: Allow nested suites (modules)? 02http://git.io/_asvDg
[13:58:35] * JamesMGreene is getting antsy... time to make nested modules! But... kinda need to merge a lot of PRs first
[13:58:40] <jzaefferer> Krinkle JamesMGreene: I still don't share the enthusiasm for nesting
[13:58:47] <JamesMGreene> Booo :(
[13:58:51] <JamesMGreene> Well
[13:59:01] <JamesMGreene> Let me prototype it after we get these other PRs merged
[13:59:11] <JamesMGreene> Then you can give an informed review/opinion :-P
[14:02:25] <jzaefferer> Sure
[14:08:56] <JamesMGreene> leobalter, I feel like we're the dynamic duo of QUnit lately
[14:09:02] <leobalter> yes
[14:09:05] <JamesMGreene> PRs back and forth :-P
[14:09:26] <JamesMGreene> If only this was a full-time job :)
[14:09:40] <leobalter> but I need to say I'm on the same ship of jzaefferer about the nested tests
[14:10:07] <leobalter> JamesMGreene: http://bocoup.com/workat/ \o/
[14:10:19] <JamesMGreene> leobalter: Yeah, I know, no plans on moving to Boston though
[14:10:32] <JamesMGreene> I like Boston but I also love my house (and hate my mortgage)
[14:10:41] <JamesMGreene> plus, family here, yadda yadda
[14:10:52] <JamesMGreene> prior to kiddo, we were planning to move to Seattle
[14:11:05] <JamesMGreene> Now that dream gets to wait like 18 years :-P
[14:11:50] <leobalter> Bocoup is making some good efforts on remote work, you should consider it
[14:12:30] <jzaefferer> Its great to have one of you write code and the other review it \o/
[14:12:49] <JamesMGreene> jzaefferer: Until we are jointly writing PR code like this last one :-P
[14:20:24] <jqcommit> [13qunit] 15jzaefferer labeled issue #651: Make filter feature discoverable in HTML reporter 02http://git.io/t4tVZQ
[14:23:32] <JamesMGreene> leobalter jzaefferer Krinkle: I'm off for a bit for dinner with the family.  Do your best to give PRs #641, #648, and #650 your merging stamp of approval so I can do some rebasing of the other PRs and maybe start prototyping the nesting later tonight. Thanks!
[14:25:01] <Krinkle> jzaefferer: Yeah, there is a principle differencce with a custom module however. And I believe this will affect (negatively) how it ends up being used.
[14:25:47] <Krinkle> the single-value .config approach that is
[14:26:02] <Krinkle> when overloading module people have to decide whether to preserve incoming values.
[14:55:48] <m_gol> scott_gonzalez: we can still fix latest after each 1.x.y publish
[14:56:32] <m_gol> scott_gonzalez: the relevant commit on npm: https://github.com/npm/npm/commit/d2d4d7cd3c32f91a87ffa11fe464d524029011c3
[14:57:20] <snover> is it just me or are npm getting more and more user-hostile?
[14:58:15] <snover> can’t republish broken releases, can’t write tags that look like versions (which was their recommendation to deal with not being able to republish)
[14:58:16] <m_gol> scott_gonzalez: and the comment claiming that npm, checks for semver ranges first: https://github.com/npm/npm/issues/6082#issuecomment-54188777
[14:59:32] <m_gol> snover: I get why they removed republishing
[15:01:21] <m_gol> though that obviously makes it harder to manage when npm is not the only or main form of distribution
[15:02:21] <snover> on an idealistic level i understand it
[15:02:40] <snover> but, they act like people are infallible and follow the rules, which they aren’t and they don’t
[15:03:21] <snover> like, when you install a dependency with --save, it defaults to using a “compatible with version” version
[15:03:30] <snover> as though package maintainers do not push backwards-incompatible patch releases
[15:03:35] <snover> but they do…all-the-time
[15:03:59] <snover> and since your dependencies’ dependencies become your dependencies, your apps break when someone way way upstream does that
[15:04:52] <m_gol> AFAIK that can be workarounded if you declare a dep of a dep directly in package.json
[15:04:55] <m_gol> but that's tedious
[15:05:05] <m_gol> and can be done only after the breakage occured
[15:05:36] <m_gol> so I'm thinking about using shrinkwrap in my projects, especially those larger ones
[15:05:58] <snover> it’s sad that we have to do these things
[15:05:59] <m_gol> except it's currently buggy and requires scripts like https://github.com/angular/angular.js/blob/master/scripts/clean-shrinkwrap.js
[15:06:10] <snover> yikes.
[15:06:19] <snover> so anyway, let’s make an eighth package manager ;)
[15:06:42] <m_gol> by default `npm shrinkwrap` increases the time of `npm install` on an up-to-date tree significantly
[15:06:51] <m_gol> and triggers additional, needless network requests
[15:06:55] <m_gol> (this script fixes that)
[15:07:19] <m_gol> fortunately, it's on npm's roadmap to fix that
[15:07:25] <m_gol> hopefully rather sooner than later
[15:08:01] <snover> i just don’t undersatnd why the npm request-response is not ONE request-response
[15:09:07] <snover> or maybe it would need to be two requests in order to calculate what can be deduped without telling the server everything you already have installed
[15:09:21] <snover> but still, put everything in a tarball and stream that one file instead of doing 800 requests
[15:10:36] <m_gol> AFAIK they're planning to switch to doing dependency tree resolution before installation so maybe that'll happen
[15:10:45] <m_gol> these requests make `npm install` way too long
[15:11:12] <jzaefferer> Krinkle: I'd appreciate your feedback here: https://github.com/jquery/qunit/pull/650#issuecomment-54375583
[15:14:23] <Krinkle> Ah, it being in .config already landed?
[15:14:30] <Krinkle> Unfortunate.
[15:14:58] <Krinkle> Oh well. I guess we don't want plugins getting in their either
[15:15:11] <Krinkle> And messing in .config from a plugin is verboten, right?
[20:58:30] <sizcommit> [13sizzle] 15gibson042 closed pull request #256: Fix 'TypeError: undefined is not a function' for attributes on comments. (06master...06fix_comment_attr) 02http://git.io/pj0hvg
[20:59:03] <sizcommit> [13sizzle] 15gibson042 closed pull request #276: Core: Drop strundefined variable (06master...06undefined) 02http://git.io/pMGTFg
[22:36:30] <doesallmagic2> Project jQuery Core Weekly build #89: STILL UNSTABLE in 14 min: http://jenkins.jquery.com/job/jQuery%20Core%20Weekly/89/
[22:36:30] <doesallmagic2> * markelog: CSS: Removed redundant "to the number" in comment
[22:36:31] <doesallmagic2> * markelog: Core: Drop strundefined variable
[22:36:31] <doesallmagic2> * markelog: Offset: Simplified a conditional
[22:36:32] <doesallmagic2> * markelog: Build: Moved JSHint directives to .jshintrc file
[22:36:32] <doesallmagic2> * markelog: Attr: Use typeof check for getAttribute method
[22:36:33] <doesallmagic2> * markelog: CSS: Remove use of getDefaultComputedStyle
[22:36:33] <doesallmagic2> * markelog: CSS: Use pre-defined displays for html and body
[22:36:34] <doesallmagic2> * markelog: CSS: Correct typo in the comment
[22:36:34] <doesallmagic2> * richard.gibson: CONTRIBUTING: Close parenthesis
[23:29:17] <jqcommit> [13jquery] 15gibson042 closed pull request #1646: All: Update Properties check for undefined (06master...06style-guide-properties-check-for-undefined) 02http://git.io/1oT6PQ
[23:42:33] <jqcommit> [13jquery] 15gibson042 pushed 1 new commit to 06master: 02http://git.io/HSA5fg
[23:42:33] <jqcommit> 13jquery/06master 141ae025e 15Richard Gibson: Manipulation: Tolerate XMLNode host object input to getAll...
[23:42:58] <jqcommit> [13jquery] 15gibson042 closed pull request #1602: Manipulation: Tolerate XMLNode host object input to getAll (06master...0615151) 02http://git.io/L3cVkg
[23:47:26] <doesallmagic2> Project jQuery Core build #1182: STILL UNSTABLE in 5 min 1 sec: http://jenkins.jquery.com/job/jQuery%20Core/1182/
[23:47:27] <doesallmagic2> richard.gibson: Manipulation: Tolerate XMLNode host object input to getAll
