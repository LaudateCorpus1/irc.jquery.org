[02:53:46] <m_gol> DaveMethvin, gnarf: can we ship 2.0 in 7 days if bugs.jquery.com is down? seems risky
[06:11:41] <JamesMGreene> rworth Check your PM when you get a chance
[06:13:21] <gnarf> DaveMethvin: m_gol: restarted it, not sure what the problem was, but tracd was just pegging the CPU at 100% for bugs.jquery.com 
[06:13:46] <m_gol> great! it works now :)
[06:14:34] <gnarf> all 3 processes that run tracd were just spinning wheels, had to kill -9 them
[06:14:49] <gnarf> yay for logan free wifi ;)
[06:15:44] <JamesMGreene> Anyone here with Expensify reimbursement experience?
[06:15:55] <JamesMGreene> I'm a bit confused on a few minor things
[06:16:26] <gnarf> yeah
[06:16:48] <JamesMGreene> I'll PM you
[06:16:51] <gnarf> JamesMGreene: k
[06:23:37] <scott_gonzalez> m_gol: piksels, huh?
[06:24:02] <m_gol> lol
[06:24:03] <m_gol> pixels
[06:25:20] <m_gol> scott_gonzalez: I mean, I don't know what you're exactly asking about :)
[06:27:35] <scott_gonzalez> I just thought the spelling was funny :-)
[06:29:57] <m_gol> I put a little Polish inside this word ;)
[07:30:16] <rwaldron> m_gol I just pinged Domenic Denicola (maintains jsdom) about http://bugs.jquery.com/ticket/13768
[07:30:39] <rwaldron> Let's hold off on attempting more patches until we hear from him
[07:30:41] <rwaldron> :)
[07:51:53] <gibson042> scott_gonzalez: you there?
[07:52:01] <scott_gonzalez> yup
[07:52:43] <gibson042> what is the standard way to check for license agreement? should I be checking the email address associated with the pull request commits?
[07:52:56] <scott_gonzalez> yeah
[07:53:26] <gibson042> do you know of a way to check that right on github?
[07:54:25] <scott_gonzalez> hmm...there's probably an indirect way. Let me see if I can figure something out.
[07:54:57] <gibson042> allright, just wondering
[07:54:58] <gibson042> thanks
[07:55:01] <scott_gonzalez> Add .patch to the pull URL
[07:55:38] <scott_gonzalez> You can probably write a user script to parse that and show it on the PR discussion tab :-)
[07:56:06] <gibson042> that's a nice idea
[07:56:20] <scott_gonzalez> I used to write a lot of user scripts, but they seemed to make GitHub slow.
[07:56:33] <scott_gonzalez> Maybe I was just doing something bad in them.
[07:58:04] <gibson042> synchronous http requests? ;)
[07:58:19] <scott_gonzalez> haha
[08:00:56] <doesallmagic> Project jQuery Migrate Core 1.x build #49: FAILURE in 3.3 sec: http://swarm.jquery.org:8080/job/jQuery%20Migrate%20Core%201.x/49/
[11:43:48] <Krinkle> JamesMGreene: You're not crazy
[11:43:55] <Krinkle> JamesMGreene: Your example is how people should be using it
[11:44:01] <Krinkle> The problem is that people aren't using it that way
[11:44:29] <Krinkle> The problem comes up when your library is both browser and nodejs oriented
[11:44:32] <Krinkle> and are testing in both
[11:44:33] <Krinkle> using the same files
[11:44:39] <Krinkle> let me show you an eample
[11:44:49] <Krinkle> JamesMGreene: https://github.com/Krinkle/travis-ci-node-and-browser-qunit
[11:46:54] <JamesMGreene> sure
[11:47:01] <JamesMGreene> Kinda what I figured
[11:48:50] <JamesMGreene> I guess we've been spoiling people with the global namespace pollution of QUnit methods :)
[11:49:46] <Krinkle> As long as all of qunit examples and jquery projects aren't using it...
[11:55:23] <Krinkle> JamesMGreene: Basically, the issue is that when re-using the same test files, you can't use require()
[12:00:00] <Krinkle> Hm.. Anyone know a simple way of using $.Callbacks() and have it memorise all previous values instead of just the last.
[12:00:13] <Krinkle> (or an alternative approach that isn't too much code)
[12:00:21] <Krinkle> JamesMGreene: I'm working on qunit-saucelabs
[12:00:43] <Krinkle> One of the problems right now is that the js execution exposed by selenium/web-driver starts after the page is already starting to run tests
[12:00:56] <Krinkle> So I need to register something late that still has to get all the callbacks
[12:01:06] <Krinkle> In some cases the test may even already be completed
[12:01:22] <Krinkle> I'm thinking of making this part of the addReporter and .on() interface
[12:01:38] <Krinkle> basically adding a reporter means calling .on() with an object pairing event names and callbacks.
[12:03:38] <gnarf> Krinkle: what you mean about that callbacks thing?
[12:04:14] <gnarf> i don't think any version of callbacks only remembers the last
[12:04:22] <gnarf> "memory" memoizes the first yeah?
[12:04:27] <Krinkle> gnarf: I want to make QUnit.on in such a way that if you register QUnit.reporter.on('test-done', fn) it will call that retroactively if needed
[12:04:32] <Krinkle> gnarf: last
[12:04:46] <Krinkle> gnarf: memory remembers last
[12:04:47] <Krinkle> I think
[12:04:54] <Krinkle> I'm pretty sure, yeah
[12:04:58] <Krinkle> first wouldn't make sense imho
[12:05:16] <Krinkle> but either way, no good to me.
[12:05:17] <gnarf> except it's like immutable?
[12:05:25] <Krinkle> No?
[12:05:27] <Krinkle> That's deferred
[12:05:36] <Krinkle> 'once memory' is that you're talking about
[12:06:13] <gnarf> oh, once & memory together do what i'm thinking, yeah
[12:07:52] <gnarf> Krinkle: but yeah, what you want is like a queue of values to get sent to new functions being added?
[12:11:24] <Krinkle> gnarf: Yep
[12:11:48] <Krinkle> Whenever I fire it, it adds it to an array.
[12:12:00] <Krinkle> When you add a function, call it on every value in the array (in order).
[12:12:03] <Krinkle> Though it gets trickier
[12:12:17] <Krinkle> test-done and module-done must occur in the right order.
[12:13:15] <Krinkle> Actually, that shouldn't be an issue since we'll be registering all callbacks at once with 1 object literal passed to on()
[12:13:25] <Krinkle> so we can register them all then process the queue
[12:13:36] <Krinkle> the queue will include the event name in each value
[12:13:51] <Krinkle> [ { type: 'test-done', value: 'foo' }, .. ]
[12:16:19] <gnarf> yeah, callbacks not gonna be any help at all there
[12:16:31] <gnarf> but if you made qunit keep track of its own event queue
[12:16:46] <gnarf> it would be pretty trivial to apply the queue to events as they are added
[12:16:50] <Krinkle> Yes, that's what I said. I'll have to implement my own
[12:16:58] <Krinkle> yeah, keep it simple
[12:20:50] <JamesMGreene> memoizing remembers the first
[12:21:02] <JamesMGreene> At least in all JS impls I've seen
[12:21:09] <JamesMGreene> but perhaps they used the wrong terminology
[12:34:52] <Krinkle> It makes sense to remember the last value
[12:34:53] <Krinkle> and it does
[12:34:58] <Krinkle> `fire: { memory = options.memory && data;` 
[12:35:08] <gnarf> JamesMGreene: "memory" not "memoize" i was saying i thought that "memory" was a "memoize"
[12:35:34] <Krinkle> E.g. if you're working in state and things are changing, and a hook is allowed to change that state
[12:35:39] <Krinkle> then whenever the state changes it needs to be called
[12:35:53] <Krinkle> if you want to allow them to register late and apply to current state you use 'memory
[12:36:16] <Krinkle> if that would give it first value, well, that'd be weird, that object is probably intended to be garbage collected already 
[12:36:23] <Krinkle> not re-used minutes later by Callbacks
[12:36:32] <Krinkle> but Im sure there are use cases for remembering the first
[12:39:56] <JamesMGreene> HMm
[12:40:29] <JamesMGreene> So are you talking about just adding a new handler in the middle of the process that picks up in the current state, or more like a replay of all past events to the new handler?
[12:41:15] <JamesMGreene> I mean, the "last value" thing makes sense for certain situations but not for handlers at large (e.g. `testDone` wouldn't make sense to me if they had missed previous tests, modules, etc.)
[12:44:03] <Krinkle> JamesMGreene: The use case I described is not about qunit
[12:44:20] <JamesMGreene> k
[12:44:54] <Krinkle> Imagine you have a site like Wikipedia with a sidebar. You might have ajax navigation from page to page. The sidebar is different based on the page you look at.
[12:45:00] <Krinkle> Plugins can change that sidebar from a hook
[12:45:18] <Krinkle> When the sidebar is rebuild, the hook is re-ran before the element is inserted
[12:45:35] <Krinkle> registering a plugin for that will execute immediately with the last dom reference if it was already ran once.
[12:45:53] <Krinkle> That's the kind of use case 'memory' is for in $.Callbacks
[12:46:23] <Krinkle> at least that's what it can be used for based on how it ended up being. Whether it was designed for that is a moot point :)
[12:54:24] <JamesMGreene> Heeeeeeeeeeeeey scott_gonzalez et al
[12:54:38] <scott_gonzalez> yes?
[12:54:52] <JamesMGreene> Would included jQuery UI 1.8.x on the page twice (accidentally) cause any oddities with jQuery core's ajax? o_O
[12:54:58] <JamesMGreene> including*
[12:55:02] <scott_gonzalez> no
[12:55:53] <JamesMGreene> We're seeing some oddities with RequireJS loading some text templates incorrectly after an accidental/necessary 2nd load of jQuery UI 1.8.x occurs
[12:57:00] <JamesMGreene> The symptoms would suggest something like it either (a) blows away a $.ajaxPrefilter or (b) blows away our RequireJS text plugin config (which utilizes $.ajax)
[12:57:02] <scott_gonzalez> UI doesn't do anythingi to ajax or any related methods.
[12:57:15] <scott_gonzalez> In fact, 1.8.x is a no-op on duplicate loads.
[12:57:26] <JamesMGreene> wat
[12:57:26] <b-ot> JamesMGreene: so why Dojo are blocking the tinymce ? no it appear the buttons from tinymce but the i cant write nothing
[12:57:33] <scott_gonzalez> Are you sure loading jQuery UI isn't loading jQuery core a 2nd time?
[12:57:35] <JamesMGreene> O_o
[12:58:08] <JamesMGreene> Does it do that? o_O
[12:58:08] <scott_gonzalez> https://github.com/jquery/jquery-ui/blob/1-8-stable/ui/jquery.ui.core.js#L16-L18
[12:58:18] <scott_gonzalez> I have no idea what it does. jQuery UI doesn't support AMD.
[12:58:50] <JamesMGreene> Hmm
[12:58:55] <JamesMGreene> Looks like it should die right there
[12:59:00] <JamesMGreene> well
[12:59:09] <scott_gonzalez> That only prevents the core file from running a second time.
[12:59:10] <JamesMGreene> not "die", sorry, "short circuit" like you mentioned
[12:59:17] <scott_gonzalez> The widgets will load again.
[12:59:21] <JamesMGreene> oh
[12:59:34] <JamesMGreene> Any negative effects from that (including to $.ui?)
[12:59:43] <scott_gonzalez> nope
[12:59:50] <JamesMGreene> hrm
[12:59:54] <JamesMGreene> wacky
[12:59:56] <scott_gonzalez> The only reason it does that is because of how we used to proxy core's methods.
[13:00:12] <scott_gonzalez> I changed how we proxy them so that the proxying is safe to happen multiple times.
[13:00:18] <scott_gonzalez> And I've removed that guard.
[20:44:05] <gnarf> mikesherov: can we answer this with api yet?
[20:44:07] <gnarf> http://stackoverflow.com/questions/1471118/how-can-i-get-list-of-all-element-css-attributes-with-jquery/1471256#1471256
[21:27:30] <sizcommit> 01[13sizzle01] 15gibson042 pushed 1 new commit to 06master: 02http://git.io/4mkGVg
[21:27:30] <sizcommit> 13sizzle/06master 14ac300a9 15Mitch Foley: No ticket: Allow class selectors for SVG elements. Close gh-202.
