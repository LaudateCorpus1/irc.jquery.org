[03:27:12] <jqcommit> [qunit] jzaefferer pushed 1 new commit to master: http://git.io/9bH-Hg
[03:27:12] <jqcommit> [qunit/master] Sort object output alphabetically in order to improve diffs of objects where properties were set in a different order. Fixes #206 - Gijs Kruitbosch
[03:27:59] <jq-jenkins> Project QUnit build #78: STILL FAILING in 40 sec: http://swarm.jquery.org:8080/job/QUnit/78/
[03:28:00] <jq-jenkins> joern.zaefferer: Sort object output alphabetically in order to improve diffs of objects where properties were set in a different order. Fixes #206
[03:52:11] <jqcommit> [qunit] jzaefferer pushed 1 new commit to master: http://git.io/pkIraw
[03:52:11] <jqcommit> [qunit/master] Make test fail if no assertions run. Fixes #178 - Jörn Zaefferer
[03:52:58] <jq-jenkins> Project QUnit build #79: STILL FAILING in 39 sec: http://swarm.jquery.org:8080/job/QUnit/79/
[03:52:59] <jq-jenkins> joern.zaefferer: Make test fail if no assertions run. Fixes #178
[03:57:23] <jqcommit> [qunit] jzaefferer pushed 1 new commit to master: http://git.io/btiZvg
[03:57:23] <jqcommit> [qunit/master] Output source line for ok() assertions. Fixes #202 - Jörn Zaefferer
[03:58:01] <jq-jenkins> Project QUnit build #80: STILL FAILING in 36 sec: http://swarm.jquery.org:8080/job/QUnit/80/
[03:58:01] <jq-jenkins> joern.zaefferer: Output source line for ok() assertions. Fixes #202
[04:06:49] <jqcommit> [qunit] jzaefferer pushed 1 new commit to master: http://git.io/eFrezA
[04:06:49] <jqcommit> [qunit/master] Extend exports object with QUnit properties at the end of the file to export everything. - Jörn Zaefferer
[04:07:06] <jq-jenkins> Project QUnit build #81: STILL FAILING in 16 sec: http://swarm.jquery.org:8080/job/QUnit/81/
[04:07:07] <jq-jenkins> joern.zaefferer: Extend exports object with QUnit properties at the end of the file to export everything.
[04:14:36] <jqcommit> [qunit] jzaefferer pushed 1 new commit to master: http://git.io/CCQJQg
[04:14:36] <jqcommit> [qunit/master] Apply notrycatch option to setup and teardown as well. Fixes #203. Reorder noglobals check to allow teardown to remove globals that were introduced intentionally. Fixes #204 - Jörn Zaefferer
[04:14:53] <jq-jenkins> Project QUnit build #82: STILL FAILING in 16 sec: http://swarm.jquery.org:8080/job/QUnit/82/
[04:14:54] <jq-jenkins> joern.zaefferer: Apply notrycatch option to setup and teardown as well. Fixes #203. Reorder noglobals check to allow teardown to remove globals that were introduced intentionally. Fixes #204
[05:03:46] <mikesherov> .
[05:35:36] <mikesherov> so close... http://gs.statcounter.com/#browser-ww-daily-20120204-20120304
[05:35:47] <mikesherov> At least according to this source
[06:00:19] <David_Souther> @mikesherov I love the weekends on that graph.
[08:50:29] <DaveMethvin> danheberden: the bug tracker seems to be getting worse, any hope of fixing it?
[08:53:56] <danheberden> DaveMethvin it seemed better today?
[08:54:12] <danheberden> it was crashing like crazy all weekend
[08:54:18] <danheberden> and it hasn't crashed since i worked on it last night
[08:54:47] <DaveMethvin> danheberden: i got a coupla errors this morning, but not the typical stack traces
[08:57:18] <DaveMethvin> of course i can't repro now...
[09:55:09] <jqcommit> [jquery] timmywil pushed 1 new commit to master: http://git.io/JcQjTQ
[09:55:09] <jqcommit> [jquery/master] Do not set boolean attributes to empty string on removal. Fixes #10870. +0 bytes compressed - timmywil
[09:56:20] <jq-jenkins> Project jQuery build #269: STILL FAILING in 36 sec: http://swarm.jquery.org:8080/job/jQuery/269/
[09:56:20] <jq-jenkins> timmywillisn: Do not set boolean attributes to empty string on removal. Fixes #10870. +0 bytes compressed
[09:56:52] <DaveMethvin> finally, jenkins yelling at someone else!
[09:59:20] <timmywil> hmm, extra div? didn't get that locally
[10:45:57] <rpflo> Guys, is this expected behavior? DOM is already ready: `jQuery(function() { console.log(1) }); console.log(2);`
[10:46:00] <rpflo> logs 1, then 2
[10:46:16] <rpflo> it should still execute the code asynchronously, imh
[10:46:21] <rpflo> o
[10:46:39] <rpflo> and 2, 1 would be expected behavior
[10:48:40] <danheberden> rpflo since the dom *is* ready, it's possible to fire that fast
[10:48:56] <rpflo> but it should still behave asynchronously, like Q does
[10:48:57] <danheberden> since that function will be called immediately
[10:49:06] <danheberden> why?
[10:49:26] <rpflo> because domready is expected to be asynchronous
[10:49:38] <rpflo> so the code should execute in an asynchronous order
[10:50:21] <jrburke> i believe the idea is so that code that may do additional setup after registering the async callback still behaves the same, regardless of dom ready state
[10:50:37] <rpflo> yeah, our app is all busted now becuase we're loading our stuff async
[10:50:41] <jrburke> but then contrast that with speed desires
[10:50:45] <danheberden> yeah, i see how jquery currently does it as teh answer.. but i get what rpflo wants
[10:51:17] <rpflo> It just makes sense to me that asynchronous apis should always act asynchronous.
[10:51:21] <danheberden> but depending on 2 to run before 1 seems like a separately bad problem
[10:52:44] <rpflo> I think the problem is that .ready isn't consistent.
[10:52:57] <eddiemonge> rpflo: why would 2, 1 be expected if the dom is ready?
[10:53:12] <jrburke> it is a "maintain consistent execution order" desire vs a speed/implementation cost desire. the last example i saw that drove this home was some indexeddb code, where it assumes the async callback behavior to work correctly
[10:53:28] <jrburke> (async in the context of indexeddb apis, not jquery ready)
[10:54:19] <jrburke> i used to favor the speed side, but i'm coming around to the 'maintain execution expectations' side. fwiw, i believe dojo deferreds used to have this same problem. they may still
[10:55:01] <jrburke> well same design tradeoff
[10:55:54] <danheberden> i believe jq deferreds do as well
[10:56:07] <danheberden> once it's resolved, it will simply fire immediately
[10:56:48] <ajpiano> yeah, $(function(){}) after the DOM ready is essentially (function(){}())
[10:59:58] <rpflo> right, so the argument is, does it make sense for .ready to have inconsistent execution order, or to make it consistent.
[11:00:31] <ajpiano> how could it be made consistent
[11:01:36] <rpflo> call the callbacks in a setTimeout so it moves to the end of the current execution
[11:01:47] <rpflo> so you'll always get 2, 1, even if the dom is ready
[11:03:16] <eddiemonge> how is that consistent? just curious
[11:03:29] <ajpiano> that doesn't strike me as particularly desirable. doc ready is "run this code when the document is ready, if that's now, run it now"
[11:03:49] <ajpiano> it's not, for lack of a better analogy, process.nextTick :p
[11:04:12] <eddiemonge> the Tick was a great show
[11:04:17] <eddiemonge> sorry, sidetracked
[11:05:10] <rpflo> how is 2,1 consistent compared to 1,2 or 2,1 eddiemonge?
[11:05:31] <rpflo> come on. I'm not saying THIS IS STUPID, I'm saying, "I think this consistency is important"
[11:05:52] <rpflo> if jQuery doesn't, then that's fine, I'll continue to patch the parts I don't like, and I'm fine w/ that.
[11:06:00] <eddiemonge> im saying, ready( 1 ); 2  if the dom is already ready should be 1, 2
[11:06:01] <ajpiano> rpflo: the consistency you're asking for is $(document).ready(fn) will *always* be asynchronous
[11:06:10] <rpflo> exactly
[11:06:18] <ajpiano> why is that part of the document ready contract
[11:06:20] <ajpiano> in a user's eyes?
[11:06:21] <rpflo> because its expected to be asynchronous
[11:06:27] <ajpiano> is it?
[11:07:08] <eddiemonge> im confused. rpflo what are you suggesting?
[11:07:27] <ajpiano> rpflo: i'm all for the "if something is supposed to be asynchronous, always do it asynchronously" but i'm not sure that doc ready is "always supposed to be async"
[11:07:38] <rpflo> right, that's the discussion.
[11:07:41] <rpflo> I'm saying I think it is.
[11:07:59] <danheberden> i think a better question to be is.. if an iframe is loaded - would $(iframe).load( 1 ); 2; result in 2,1 ?
[11:08:09] <rpflo> if there's no harm in making it act async, why not?
[11:08:14] <danheberden> if it's typical for an event, then docReady should be as consitent
[11:08:23] <danheberden> even though it's "now"
[11:09:19] <rpflo> I don't think onload will even fire for an iframe if it's already loaded, but I don't know about jQuery's .load on it.
[11:10:00] <danheberden> so if that can never happen in an event system
[11:10:09] <rpflo> then .ready shouldn't even fire if its already ready.
[11:10:15] <danheberden> then there is no consistancy to mirror, you catch my meaning?
[11:10:17] <rpflo> certainly that doesn't make sense
[11:10:29] <danheberden> well, it's a mix of a $.Callback
[11:10:39] <danheberden> cuz it isn't an event, it's a state
[11:10:54] <danheberden> in the context of jQ
[11:11:06] <danheberden> thus things like readyWait
[11:11:23] <rpflo> when I write $(document).ready(fn) I think "this is going to happen later". If you're telling me I'm wrong, that's fine, and I'll keep my monkey patch and continue on using an API I find easier to work with.
[11:11:45] <danheberden> it's an interesting question
[11:12:18] <ajpiano> it's a tricky situation because it's not analogous to like, DOMContentLoaded
[11:12:23] <ajpiano> because you can't bind that and have it run after
[11:12:34] <rpflo> our app is all busted because we switched from loading w/ jammit (blocking script tags) to RequireJS (async) and now we've got issues. Making domready act asynchronous all the time has fixed it.
[11:12:36] <danheberden> it's really a deferred for ready
[11:12:47] <rpflo> ajpiano: yeah, you get one shot w/ the native event
[11:13:05] <rpflo> I expect deferreds to always act asynchronous.
[11:13:05] <danheberden> thus resolution will always be immediate once it's complete
[11:14:00] <ajpiano> rpflo: i'm surprised you'd have multiple doc readies at all, really
[11:14:03] <ajpiano> in separate modules
[11:14:51] <David_Souther> Deferreds are not always async...
[11:14:51] <David_Souther> $.Deferred().then(1).resolve().then(2) IIRC, 2 will happen immediately. (Writing a jsfiddle atm)
[11:16:19] <eddiemonge> someday jquery.com will have a moden jQuery library in it
[11:16:40] <eddiemonge> David_Souther: 1,2
[11:17:13] <danheberden> rpflo i'd be worried with the 'forced async' part if deferred were always like that
[11:17:19] <danheberden> but i'm curious as to the paradigm of it
[11:17:32] <danheberden> but, at the heart, they are simply sets of $.Callback's
[11:17:34] <ajpiano> rpflo: i think that the expectation that doc ready is always async is not something that's been widely shared, and since there are not analogous situations with native events, i would be skeptical that DaveMethvin et. al. would be interested in changing the behaviour
[11:20:16] <danheberden> though DaveMethvin is also a fan of `while(true){ if ( ready ){ break; } }` so WHO KNOWS ABOUT THAT GUY AMIRITE?!
[11:20:35] <rpflo> ajpiano: our code is a pile of crap, no doubt. I got hired to fix it
[11:20:51] <ajpiano> rpflo: ah
[11:20:54] <rpflo> like, its the proverbial jQuery mess everybody talks about
[11:21:03] <DaveMethvin> ok finally caught up with you guys babbling... :P
[11:21:17] <danheberden> rpflo i still have this feeling that, like, the situation that 2 before 1 firing or 1 before 2 firing being an issue.. like.. points to another problem
[11:21:28] <danheberden> if it *is* asyncronous stuff, it shouldn't matter
[11:21:34] <DaveMethvin> there is a use case that NEEDS sync in Promises atm
[11:21:41] <DaveMethvin> when you use $.ajax in sync mode
[11:21:43] <ajpiano> rpflo: :(
[11:21:54] <eddiemonge> rpflo: just to be clear, you are talking about this right: http://jsfiddle.net/5CPpE/
[11:22:03] <DaveMethvin> we would like to deprecate that but it will be at least a coupla versions before it could happen
[11:22:41] <DaveMethvin> basically the docs say that when the document is ready we'll run that shizz, it doesn't say anything about sync or async
[11:22:49] <DaveMethvin> it does guarantee order
[11:22:54] <rpflo> eddiemonge: yeah, `$(function(){ console.log(1) }); console.log(2)` before dom is ready executes 2,1, but after dom is ready executes 1,2
[11:23:36] <rpflo> DaveMethvin: it guarantees the order is different if dom is ready vs. isn't you mean.
[11:24:16] <DaveMethvin> rpflo: it guarantees that .ready() functions are called in the order they were added
[11:24:25] <DaveMethvin> your second stmt isn't in a ready
[11:25:02] <DaveMethvin> if  your code is assuming things about execution order there it should un-assume them :P
[11:25:38] <danheberden> Thank you DaveMethvin - heh, that's what i was trying to say in such a shitty way
[11:25:48] * danheberden sucks at communication
[11:25:59] <DaveMethvin> awww, don't be so hard on yourself
[11:26:00] <danheberden> also dance dance revolution
[11:26:06] <DaveMethvin> the bug tracker isn't barfing at least
[11:26:20] <danheberden> .... yet
[11:26:33] <DaveMethvin> yeah, so why does it get into those moods anyway?
[11:26:40] <DaveMethvin> or are you just rebooting to clear  up the acne?
[11:26:56] <danheberden> too much going on that box and had trouble getting it's http process running
[11:27:02] <danheberden> so running as fcgi
[11:27:43] <danheberden> i did get the puppet client installation down to just on bash -c "$( wget -q -O - urlOfGist)" entry though
[11:27:45] <danheberden> so that's pretty neat
[11:27:53] <danheberden> *one
[11:28:04] <DaveMethvin> whoa
[11:28:50] <DaveMethvin> well here's hoping we get a shiny new box soon ... in the meantime just wrap the current trac in a moist towel and keep it in a cool dark place
[11:32:38] <David_Souther> Just curious, (because I'm a bit too lazy to search the irc logs, and figure a fresh airing might be good), what are the problems with the bug server, and why not just use github's tracking?
[11:33:17] <DaveMethvin> the problems are mostly that the server is kinda overloaded according to danheberden
[11:33:35] <DaveMethvin> we have 6 years of bug history in trac so we kinda would like to keep that
[11:34:05] <David_Souther> And migrating that to github would be... non trivial, I'm sure
[11:34:16] <DaveMethvin> David_Souther: github issue tracking is getting better but still not anywhere near trac's
[11:34:37] <DaveMethvin> we have a lot more flexibility with trac, just that the server is misbehavin' right now
[11:35:12] <David_Souther> DaveMethvin: Ok. I'd not used trac in the past- Jira and FogBugz.
[11:35:39] <DaveMethvin> i'm sure those are pretty full featured too
[11:36:00] <rpflo> I agree with slide 58 about promises http://www.slideshare.net/domenicdenicola/callbacks-promises-and-coroutines-oh-my-the-evolution-of-asynchronicity-in-javascript
[11:36:15] <rpflo> and domready uses a deferred, so is arguably an asynchronous operation.
[11:36:38] <rpflo> anyway, that's all
[11:37:02] <DaveMethvin> well rpflo like i said above, there is a use case that depends on sync and we can't yank it without warning
[11:37:20] <DaveMethvin> $.ajax({ async: false }) builds on Promise
[11:37:41] <DaveMethvin> there's a ticket to deprecate it but that would mean the EARLIEST we could make it all async would be 1.9
[11:38:12] <ajpiano> rpflo: DaveMethvin i'm also pretty inclined to think that if we change this
[11:38:19] <ajpiano> we break everyone's code who *does* depend on the current behaviour
[11:38:45] <DaveMethvin> that's what these issues generally come down to,  your point may be valid about "always async" but fixing one person's bug causes another person's bug
[11:39:05] <ajpiano> in some cases it might be harmless but i'm sure that's a bad assumption to make about a bajillion jquery apps
[11:39:14] <DaveMethvin> we go through this every major version and people post "STOP BREAKING THINGS" comments on the blog
[11:40:08] <David_Souther> "Stop breaking things!" "Start testing with the RC's!"
[11:40:28] <DaveMethvin> David_Souther: c'mon, let's be REALISTIC :P
[11:40:42] <David_Souther> API developers get no love
[11:40:48] <David_Souther> :( Woe is us
[11:41:05] <DaveMethvin> everyone expects every version to work with all the code they have ever written, without needing to change anything, evar
[11:41:20] <DaveMethvin> because if they made an assumption, it was a valid assumption
[11:41:38] <rpflo> which is annoying
[11:41:51] <DaveMethvin> and if jquery worked that way in the past, it must always work that way even if it was never documented to work that way
[11:43:14] <David_Souther> Or if dojo worked that way in the past
[11:43:39] <David_Souther> since they both have that word deferred, they must have the same API and semantics
[11:44:45] <DaveMethvin> my pet peeve is that people prefer to have things fail silently, rather than throw any errors,
[11:45:02] <DaveMethvin> so in IE if you say $(".north-korea").css("border-bottom", "3km military disputed")  it throws an error ... WELL that must be wrong because Chrome ignores it
[11:45:23] <DaveMethvin> and jquery should hide that error
[11:45:33] <DaveMethvin> so their code can continue to do bad things without complaint
[11:46:04] <ajpiano> and then the other half of the people prefer that everything that could possibly ever cause an error should throw an exception
[11:46:25] <rwaldron> DaveMethvin yt?
[11:46:27] <DaveMethvin> but it would need to be a clear description of the error in their native language
[11:46:38] <DaveMethvin> hey, i'm in the middle of a rant here, rwaldron :P
[11:46:42] <DaveMethvin> yeah
[11:46:45] <DaveMethvin> sup?
[11:46:51] <rwaldron> https://gist.github.com/1980589 get a load of this
[11:47:54] <DaveMethvin> wowowow so like is it pretty much done?
[11:48:51] <rwaldron> yep
[11:48:55] <rwaldron> todo: release notes
[11:49:00] <DaveMethvin> \o/ !
[11:49:09] <rwaldron> then we need testing and stuff
[11:49:17] <rwaldron> and then we can remove build stuff from make
[11:49:21] <DaveMethvin> testing? i don't know you anymore.
[11:49:28] <rwaldron> not sure how to handle submodule tasks
[11:49:32] <rwaldron> i might port those as well
[11:49:35] <rwaldron> its easy enough
[11:49:38] <rwaldron> and I have time
[11:49:49] <rwaldron> but I wanted to get this iteration out
[11:49:57] <DaveMethvin> oh good, this sounds like a great thing to put out with 1.8
[11:50:02] <rwaldron> indeed
[11:50:07] <DaveMethvin> i'd love to have a smarter build process
[11:50:16] <rwaldron> also, was able to port most of sizer wholesale
[11:50:21] <rwaldron> that was nice
[11:50:28] <rwaldron> this will really clean up the repo
[11:50:30] <rwaldron> ALOT
[11:50:48] <DaveMethvin> good to hear, we were getting lots of little pieces parts
[11:50:53] <rwaldron> I might be able to remove the entire build/ dir
[11:51:27] <rwaldron> here lemme push it to a branch and you can try it out
[11:51:30] <DaveMethvin> yeah we'll have to see what we end up adding, but atm i think the dependencies may end up in the source files
[11:51:37] <rwaldron> in the meantime, do this...
[11:51:42] <rwaldron> npm install grunt -g
[11:51:50] <DaveMethvin> i have a 3pm mtg so imma need to run but if you push it i'll take a look
[11:53:34] <rwaldron> git checkout -b grunt && git pull git://github.com/rwldrn/jquery.git grunt
[11:57:11] <rwaldron> gnarf yt?
[12:00:06] <David_Souther> rwaldron: As a jQuery user, I am excited by this.
[12:00:39] <rwaldron> David_Souther glad to here it
[12:00:40] <rwaldron> :D
[12:24:25] <eddiemonge> rpflo: someone in #jquery had an issue .ready() and code after execution :)
[12:25:25] <rpflo> haha
[12:25:55] <rpflo> the argument against what I want is that our code is admittedly juvenile.
[12:26:21] <eddiemonge> although that person was calling self.close after a .ready() block that changed something in the parent, so not quite the argument enhancer
[12:43:38] <gnarf> rwaldron: sup
[12:46:31] <rwaldron> oh hai!
[12:46:58] <rwaldron> I just wanted to mention that I was able to port your sizer code almost wholesale to the new grunt system
[12:47:08] <gnarf> nice
[12:47:09] <rwaldron> it was a pleasure to migrate
[12:47:11] <gnarf> got a commit?
[12:47:19] <rwaldron> https://github.com/rwldrn/jquery/blob/grunt/grunt.js#L91-147
[12:48:37] <gnarf> nice
[12:48:44] <gnarf> i like how that writes
[12:48:58] <gnarf> more confident in grunt as i see more of it
[12:52:54] <gnarf> hrm
[12:56:16] <rwaldron> gnarf :)
[12:56:21] <rwaldron> https://gist.github.com/1980589
[12:56:30] <rwaldron> that's the outcome of a grunt run
[12:56:42] <rwaldron> through the ported jQuery tasks thus far
[13:00:12] <gnarf> darnit
[13:00:19] <gnarf> this is bugging me
[13:00:44] <gnarf> I have a jQuery object that I'm appending to something that may or may not have been recently .empty()ed
[13:00:51] <gnarf> it has an event bound to it
[13:01:15] <gnarf> but empty() on the container obviously unbinding
[13:03:22] <gnarf> i suppose i could put createPerson.unbind(".createButton").bind("click.createButton", ...) in before every append
[13:13:49] <ben_alman> DaveMethvin: it would be awesome if someone could look at http://benalman.com/news/2010/03/jquery-special-events/ to suggest edits to make it more current, if necessary. a lot of people visit that url
[13:14:20] <ben_alman> and i'd be happy to tweak it
[13:15:01] <DaveMethvin> ben_alman: i have some official docs in the wings, i've been waiting to release them because of a couple of bugs that may affect some interfaces
[13:15:07] <DaveMethvin> but what's there is largely still correct
[13:15:12] <ben_alman> ok
[13:15:13] <DaveMethvin> which is amazing
[13:15:18] <ben_alman> well let me know if i can tweak it
[16:23:29] <mikesherov> .
[17:08:46] <DaveMethvin> .
[17:23:34] <rwaldron> ajpiano http://www.youtube.com/watch?v=BSa0Xg-YadY
[17:48:27] <rwaldron> DaveMethvin i'm getting results that I can't make much of right now...
[17:48:35] <rwaldron> looks like something happened to IE6 and 7
[17:48:45] <DaveMethvin> my run finishes in ie6 locally
[17:48:55] <DaveMethvin> the damn browserstack closed b/c of inactivity
[17:48:57] <rwaldron> because 8 runs, while the other two die
[17:48:58] <DaveMethvin> but was moving along well
[17:49:22] <rwaldron> also, mnaged to grab a few screen shots...
[17:49:23] <rwaldron> http://gyazo.com/fd23d5a6321c11ceb58d2eac23ea2e68
[17:49:30] <rwaldron> http://gyazo.com/976c2d83a1a830d565af15b8733ef5e0
[17:49:34] <rwaldron> likely unrelated
[17:50:19] <DaveMethvin> yeah the "halfway" ones are timing issues
[17:50:25] <DaveMethvin> we need to get rid of those tests somehow
[17:50:33] <DaveMethvin> but the boxModel one, that's a different story
[17:50:37] <DaveMethvin> was that ie7?
[17:50:53] <DaveMethvin> i just finished an ie6 run, no problems except the halfways
[17:50:59] <DaveMethvin> lemme try a local ie7 run
[17:53:37] <rwaldron> I wonder if Ie6 and 7 are jsut crapping out their session in browserscope
[17:54:27] <DaveMethvin> i would defn distrust browserscope until proven otherwise
[17:54:40] <DaveMethvin> how are you running? Are you tunneling to your local box?
[17:54:59] <rwaldron> yeah
[17:55:04] <DaveMethvin> i tunnelled and then used dmethvin.browserscope.com
[17:55:10] <rwaldron> same ehre
[17:55:11] <rwaldron> here*
[17:55:16] <DaveMethvin> i dunno
[17:55:19] <rwaldron> rwaldron.browserscope.com
[17:55:34] <DaveMethvin> running still in ie7
[17:55:45] <DaveMethvin> DO PEOPLE REALLY USE THIS CRAP BROWSER?
[17:55:49] <DaveMethvin> it's incredibly slow
[17:56:44] <rwaldron> on a fresh run here
[17:56:46] <rwaldron> not dead yet
[17:59:27] <rwaldron> in unrelated news...
[18:00:02] <rwaldron> i justrealized i've been saying "browserscope"
[18:00:07] <rwaldron> when i meant browserstack
[18:00:16] <DaveMethvin> oh yeah me too
[18:00:17] <rwaldron> and even more unrelated news...
[18:00:33] <rwaldron> i added a new tracking vector to ringmark this morning
[18:00:45] <rwaldron> now tracking summary pass/fail of rings
[18:00:52] <rwaldron> http://www.browserscope.org/user/tests/table/agt1YS1wcm9maWxlcnINCxIEVGVzdBjrn9gODA?v=3&layout=simple&highlight=true
[18:00:55] <DaveMethvin> at least you're having SOME fun lately
[18:01:33] <rwaldron> its nice to write some code and then have facebook as your "pr" and marketing
[18:04:30] <rwaldron> ugh
[18:04:33] <rwaldron> stop responding
[18:04:55] <DaveMethvin> yeah looks like my ie7 has hung too
[18:05:09] <DaveMethvin> but ie6 made it thru
[18:05:14] <rwaldron> ok
[18:05:34] <DaveMethvin> and ie7 got thru on saturday ... i was waiting forever to get it to finish
[18:06:06] <DaveMethvin> oh wait it's not hung
[18:06:47] <rwaldron> You're gonna need a deferred object for that
[18:08:20] <DaveMethvin> http://www.quickmeme.com/meme/36gg0e/
[18:09:10] <rwaldron> ahahaha
[18:09:47] <DaveMethvin> it's stil running
[18:10:19] <DaveMethvin> honestly, how could anyone use this browser?
[18:11:39] <DaveMethvin> nope, this one finished with nothing other than the "halfway" bug
[18:20:24] <amonat> I found a broken link in the nav bar on the bottom of the page at http://bugs.jquery.com - "Bug Tracker" points to dev.jquery.com rather than bugs.jquery.com. So, is bugs.jquery.com the right place to file that bug?
[18:20:41] <amonat> it's very meta, I know
[18:24:55] <DaveMethvin> lol, amonat, yeah you can report the bug about the bug http://www.quickmeme.com/meme/36ggcx/
[18:26:47] <amonat> thanks!
[18:38:46] <amonat> filed http://bugs.jquery.com/ticket/11442 I hope it's suitably meta.
[18:43:53] <jqcommit> [jquery] dmethvin pushed 1 new commit to master: http://git.io/V7GQ7A
[18:43:53] <jqcommit> [jquery/master] Add more delay to the "halfway" tests for non-focused cases. - Dave Methvin
[18:44:16] <DaveMethvin> ok, let's see what jenkins thinks
[18:44:30] <jq-jenkins> Project jQuery build #270: STILL FAILING in 26 sec: http://swarm.jquery.org:8080/job/jQuery/270/
[18:44:30] <jq-jenkins> dave.methvin: Add more delay to the "halfway" tests for non-focused cases.
[18:44:34] <DaveMethvin> NOOOOO
[18:45:20] <DaveMethvin> ain't failing yet
[18:45:55] <DaveMethvin> http://swarm.jquery.org/job/965/  imma go find a ff 3.6
[18:52:21] <DaveMethvin> hmmm, the ff3.6 issue looks like a bug with QUnit
[18:58:32] <DaveMethvin> but we're running an old QUnit ... wonder if we should update to 1.3
[19:27:55] <DaveMethvin> didn't help
