[01:12:32] <doesallmagic2> Project jQuery Core Compat Periodic build #138: STILL UNSTABLE in 14 min: http://jenkins.jquery.com/job/jQuery%20Core%20Compat%20Periodic/138/
[01:12:32] <doesallmagic2> * richard.gibson: Build: Specify valid components for commit messages
[01:12:32] <doesallmagic2> * richard.gibson: Callbacks: No object starts out locked
[01:12:33] <doesallmagic2> * richard.gibson: Callbacks: Don't abort execution on .lock()
[01:12:34] <doesallmagic2> * richard.gibson: Callbacks: Reduce size
[01:12:34] <doesallmagic2> * richard.gibson: Core: Standardize indexOf comparisons
[01:12:35] <doesallmagic2> * richard.gibson: Build: Rearrange grunt/npm tasks into a build/dist/test pattern
[01:12:35] <doesallmagic2> * Dave Methvin: Ajax: $.post and $.get can now take an options object
[01:12:36] <doesallmagic2> * Dave Methvin: Core: Remove deprecated context and selector properties
[01:12:36] <doesallmagic2> * Dave Methvin: Build: Sanctify the component name status of Wrap
[01:12:37] <doesallmagic2> * markelog: Core: add support to tag-hyphenated elements
[01:12:37] <doesallmagic2> * markelog: Manipulation: add support to tag-hyphenated elements
[01:12:37] <doesallmagic2> * markelog: Offset: simplify jQuery#offsetParent method
[03:24:13] <guilbep> Hello all :) // not sure if it's the place. But I was wondering. When, why and how did you start using requirejs in jquery ? What was the motive behind this? and if it the decision was to be made today; what would you do differently? :D
[05:31:12] <jqcommit> [13jquery] 15msh-odoo opened issue #2008: jQuery 1.11.1 selector to find empty inputs not working 02http://git.io/vkfHWQ
[05:45:58] <jqcommit> [13jquery] 15dmethvin closed issue #2008: jQuery 1.11.1 selector to find empty inputs not working 02http://git.io/vkfHWQ
[06:47:08] <jqcommit> [13jquery] 15dmethvin opened issue #2009: The drop event is a DragEvent as well 02http://git.io/BPJBhg
[09:09:58] <jqcommit> [13jquery] 15gibson042 opened issue #2010: pipe doesn't forward progress from already-resolved Deferred 02http://git.io/CZmzdQ
[09:20:44] <dcherman> man i am not envious of this promise stuff.  can't imagine the flak that's going to come of changing .then() to be standards compliant even though it's a good move
[09:21:05] <gibson042> you said it
[09:21:05] <b-ot> gibson042: You have 3 new messages, use `read when you wish to read them.
[09:21:09] <gibson042> `read
[09:21:10] <b-ot> gibson042: From rwaldron, 20h 5m ago: yes, I can do that work: https://github.com/jquery/jquery/issues/1751#issuecomment-67721150 
[09:21:15] <b-ot> gibson042: From rwaldron, 20h 4m ago: but I'm not going to do anything until this is lands: https://github.com/jquery/jquery/pull/1428 (that shouldn't be read as me being sassy, I'm just saying that as a matter of course)
[09:21:20] <b-ot> gibson042: From rwaldron, 20h 4m ago: and this: https://github.com/jquery/jquery/pull/1668
[09:22:48] <rwaldron> @gibson042 I'm around if you want to chat re: ^^
[09:23:17] <gibson042> no, the above makes sense
[09:23:46] <rwaldron> @gibson042 awesome :)
[10:00:22] <jqcommit> [13jquery] 15Mr21 closed pull request #1494: .css(), the values â€‹like "+=10%" aren't ignored anymore (like .animate()) (06master...06css) 02http://git.io/RDiRsQ
[10:26:41] <DaveMethvin> Krinkle: i believe so, see the discussion in the ticket to be sure
[10:26:46] <DaveMethvin> changed channels on you :)
[10:26:49] <Krinkle> thx
[10:26:59] <DaveMethvin> hey, many thanks to you
[10:28:38] <Krinkle> timmywil: DaveMethvin: I'm confused though, should buildFragment change?
[10:35:25] <DaveMethvin> Krinkle: i think gibson042 was saying that we could pull out the checks in parseHTML if buildFragment did sane things with them
[10:35:28] <timmywil> I think it's just a matter of `if ( typeof data !== "string ) { return []; }`
[10:36:13] <DaveMethvin> i'd have to go back and re-read the thread to be sure ... can't do that atm
[10:36:24] <timmywil> gibson042's native behavior wasn't what I was thinking of.
[10:38:40] <timmywil> well, it was, but it depends on whether you use .childNodes or .children in your native implementation.
[10:39:29] <timmywil> for the latter, the only change is null -> [] in the return statement.
[10:39:56] <timmywil> for the former, we're looking at casting booleans and undefined to strings
[10:40:11] <timmywil> but not null or numbers
[10:40:36] <timmywil> s/booleans/false
[10:42:53] <timmywil> actually, for the former, it's just this...http://jsfiddle.net/evse952q/2/
[10:42:56] <timmywil> http://jsfiddle.net/evse952q/2/
[10:44:38] <timmywil> for the latter http://jsfiddle.net/evse952q/3/
[10:45:05] <timmywil> DaveMethvin: which do you prefer?
[10:46:16] <DaveMethvin> really the main case i care about is just parseHTML("") ... the others are errors imo
[10:46:37] <DaveMethvin> so it's a q of whether you want to have errors return empty array or do something throwy :)
[10:46:55] <timmywil> we'd have to throw manually
[10:47:03] <DaveMethvin> i think we should still keep the method documented to only accept strings
[10:47:09] <timmywil> agreed
[10:47:17] <DaveMethvin> so whatever else happens, meh
[10:47:23] <timmywil> this handles dynamic input
[10:48:29] <DaveMethvin> stringifying the stuff in /2/ at least has the benefit of showing you passed undefined 
[10:49:18] <timmywil> What would you rather have happen as a user?
[10:49:23] <DaveMethvin> but i guess /3/ may be better for back compat
[10:49:37] <DaveMethvin> since we returned empty arrays there before
[10:49:44] <DaveMethvin> so let's go with /3/ i guess
[10:49:47] <timmywil> I think I'd rather it ignore undefined than make it a string.
[10:49:59] <DaveMethvin> at this point, since it used to do that, yes
[10:50:14] <timmywil> I mean, why would you want that?
[10:50:26] <DaveMethvin> well it's strange to pass undefined there
[10:50:44] <timmywil> not if it's passing a variable that may or may not be undefined
[10:50:49] <DaveMethvin> i'd rather see .parseHTML(something.htmlString || "") in app code if it can be undefined
[10:50:59] <DaveMethvin> self documenting
[10:51:00] <DaveMethvin> :)
[10:51:17] <DaveMethvin> but i agree that given where we are /3/ is gonna have less chance of breakage
[10:52:08] <timmywil> normally, I would agree, but given how much parseHTML could be used in an app, I'd rather not enforce that
[10:52:58] <DaveMethvin> so should we document that it returns an empty array for non-string values?
[10:53:58] <DaveMethvin> if it's a case you care about we probably should
[10:54:05] <DaveMethvin> and have a unit test for it
[10:54:14] <DaveMethvin> otherwise we may break it
[10:54:28] <timmywil> it transforms the recommended usage from var parsed = $.parseHTML(something.htmlString || ""); if (parsed && parsed.length) { ... } to var parsed = $.parseHTML(something.htmlString); if (parsed.length) {
[10:55:52] <DaveMethvin> i thought we got rid of the null returns in both cases, because i agree they're annoying
[10:56:03] <timmywil> If the user were writing their own parseHTML, they'd end up drying that up.
[10:57:06] <DaveMethvin> so really we're fixing a bug here, the method is documented to return an array and sometimes it doesn't
[10:57:26] <DaveMethvin> we'll just return an empty array for cases that suck :)
[11:03:19] <jqcommit> [13jquery] 15Mr21 opened pull request #2011: .css(), the values like +=10% aren't ignored anymore (like .animate()) (06master...06css) 02http://git.io/86h-jw
[11:12:22] <DaveMethvin> so Krinkle did we answer that question? use the example in /3/ above
[11:15:33] <gibson042> regarding parseHTML and buildFragment: I want *less* special casing, not more
[11:16:10] <Krinkle> So we return empty array for undefined/null and cast the rest to strings and parse as html?
[11:16:24] <Krinkle> I'll implement those as tests and work backwards from there
[11:17:34] <timmywil> Krinkle: no, the example in 3 just returns an array for anything that isn't a string
[11:18:13] <timmywil> you might be looking at /2/
[11:20:02] <gibson042> Krinkle: that sounds like good behavior, and note how close we already are to it after *removing* the typeof check from parseHTML: http://jsfiddle.net/evse952q/1/ (i.e., only wrong for `false`)
[11:20:28] <timmywil> gibson042: I think we're disagreeing
[11:21:06] <timmywil> btw, it's also wrong for undefined and NaN
[11:21:47] <timmywil>  /2/ shows the solution, but Dave and I agreed on /3/
[11:22:01] <gibson042> I'm saying parseHTML should always return an array for string input, and should do something with a simple, small implementation and reasonable output for non-string input (which, remember, is not documented as valid)
[11:22:19] <timmywil> yes, /3/ takes care of that
[11:22:22] <gibson042> but always return an array
[11:23:11] <timmywil> but not in the way you originally proposed. I'll re-link. http://jsfiddle.net/evse952q/3/ instead of http://jsfiddle.net/evse952q/2/
[11:23:38] <gibson042> right, that one explicitly returns empty array from any non-string
[11:23:59] <timmywil> right
[11:24:23] <gibson042> as opposed to sending garbage down and returning the result
[11:24:37] <timmywil> yes
[11:24:39] <gibson042> which would be more like native .innerHTML
[11:24:48] <timmywil> not really
[11:25:24] <timmywil> it depends on whether you use .childNodes or .children
[11:25:46] <gibson042> no it doesn't
[11:25:51] <gibson042> the DOM is the same
[11:25:55] <gibson042> it includes text nodes
[11:26:05] <gibson042> as output by innerHTML
[11:26:12] <timmywil> yes, the DOM is the same, modern implementations of parseHTMl are not
[11:26:21] <timmywil> more and more are using .children
[11:26:40] <gibson042> I don't think I follow you
[11:27:06] <gibson042> `el.innerHTML = true` will yield a single child node, of type text and value "true"
[11:27:48] <timmywil> I understand it will create text nodes. The question is about whether or not those nodes are used.
[11:28:10] <gibson042> that's up to the consumer
[11:28:14] <timmywil> My point is about what is expected output from parseHTML
[11:28:21] <gibson042> they're in the DOM, they're in the array returned by parseHTML
[11:28:30] <timmywil> not necessarily
[11:29:41] <gibson042> you want to strip out text nodes?
[11:30:01] <timmywil> No, I'm saying that returning an array for anything not a string is simple, smaller, and likely will cause less of a headache.
[11:30:33] <gibson042> both proposed solutions return an array
[11:30:39] <gibson042> this is a discussion about its contents
[11:30:47] <timmywil> empty array
[11:31:01] <gibson042> I dispute that it is simpler and smaller
[11:31:12] <gibson042> but the difference is negligible
[11:31:19] <gibson042> so really we're just talking about interface
[11:31:26] <timmywil> well, if you make the special case for null to match your native implementation's results, then it is slightly smaller
[11:31:30] <gibson042> for undocumented input
[11:32:16] <gibson042> no it isn't
[11:32:22] <timmywil> and simpler in terms of calculated code complexity
[11:32:37] <DaveMethvin> whoa
[11:32:39] <DaveMethvin> im back
[11:32:49] <timmywil> it's an if statment and assignment instead of one if statement. how is that not smaller?
[11:33:04] <gibson042> `if ( typeof input !== "string" ) { return []; }` vs. no `if` at all
[11:33:16] <timmywil> no if at all doesn't give you the right results
[11:34:16] <DaveMethvin> okay, i think i caught up
[11:35:05] <gibson042> sorry, `if ( typeof input !== "string" ) { return []; }` and `jQuery.buildFragment( [ data ], ... )` vs. no `if` and `jQuery.buildFragment( data != null ? [ data ] : [], ... )`
[11:35:09] <DaveMethvin> it seems like we're arging the values that are not inputs to the function. We can't spend a lot of time arguing what the right thing to do for null or undefined is if we then say they're not valid
[11:35:30] <gibson042> yeah
[11:35:32] <DaveMethvin> so if it's important to get a specific output on undefined we need to define and test that
[11:35:33] <gibson042> you're right
[11:36:20] <DaveMethvin> timmywil gave some cases where he wants [] from undefined which i'm okay with if  we want to define that
[11:36:27] <DaveMethvin> but if so we need to add to the docs
[11:36:36] <DaveMethvin> saying that "non-string values return []"
[11:36:48] <DaveMethvin> and stick to it of course :)
[11:37:32] <gibson042> since Krinkle found the problematic behavior from actual rather than hypothetical use, I'd like his input
[11:37:43] <DaveMethvin> yeah his test case is definitely a borked one imo
[11:37:48] <DaveMethvin> "" shoudln't return null
[11:38:20] <DaveMethvin> like i said in the meeting yesterday, the others i'm not as concerned about ... but if we are expecting undefined to return [] as it currently does then we shoudl document that
[11:38:24] <gibson042> maybe we _should_ accept (as in, return non-empty from) number/boolean, though
[11:38:40] <gibson042> I think we are expecting that
[11:38:48] <gibson042> probably ;)
[11:39:31] <DaveMethvin> so parseHTML(jsonThing.numericValue) does seem like it might happen but then again why aren't they just putting it as text?
[11:39:35] <timmywil> currently, undefined, number, and booleans return null
[11:40:01] <timmywil> I would prefer it just fail to an empty array
[11:40:15] <DaveMethvin> i'm okay with that, if documented
[11:40:35] <gibson042> it feels a little off to me, but only a little
[11:40:36] <DaveMethvin> we can still document that it takes a string
[11:40:50] <gibson042> I still want to see Krinkle's input
[11:40:54] <DaveMethvin> but say that non-string returns []
[11:41:06] <timmywil> yea, that seems fine to me
[11:41:14] <DaveMethvin> i think he ran off to make the code happen :)
[11:42:52] <gibson042> heh
[11:50:12] * Krinkle was distracted fixing wiki production for a minute
[11:50:14] <Krinkle> back now
[11:50:21] <Krinkle> gibson042: DaveMethvin: timmywil: So... what's up
[11:50:54] <Krinkle> catching up
[11:51:00] <gibson042> as someone who's actually using parseHTML, we want your thoughts on what it should do with number/boolean/null/undefined input
[11:51:18] <gibson042> given that all string input should return array, empty if the string was empty
[11:54:14] <Krinkle> I'm only worried about when input is a string (incl. empty string) or null
[11:54:34] <Krinkle> for empty string I'd like an empty array or array with empty text node, for null I'd like empty array.
[11:54:43] <Krinkle> Or array with text node "null"
[11:55:14] <Krinkle> While I wouldn't say it's better in general, for consistency with other browser APIs I sort of expected it to cast everything to a string.
[11:55:20] <Krinkle> as innerHTML would do indeed
[11:55:31] <Krinkle> though it matching behaviour of jQuery constructor would make sense too.
[11:55:36] <Krinkle> where falsy-> empty array
[12:07:50] <gibson042> cool
[12:08:08] <gibson042> I would advise going with your gut and we'll see in the PR if something is amiss
[14:32:43] <jqcommit> [13jquery] 15gavinwahl opened issue #2012: _evalUrl isn't Content-Security-Policy (CSP) compatible 02http://git.io/nLrHbg
[14:40:29] <jqcommit> [13jquery] 15mzgol closed issue #2012: _evalUrl isn't Content-Security-Policy (CSP) compatible 02http://git.io/nLrHbg
[17:59:27] <jqcommit> [13jquery] 15homm opened issue #2013: Progress doesn't fire after .then() for resolved promises 02http://git.io/8-RmNA
[18:27:36] <jqcommit> [13jquery] 15markelog pushed 1 new commit to 06compat: 02http://git.io/odZ7LQ
[18:27:36] <jqcommit> 13jquery/06compat 1487bb713 15Oleg Gaidarenko: Manipulation: blacklist IE8 from running tests for tag-hyphenated elems...
[18:41:42] <doesallmagic2> Project jQuery Core Compat build #538: STILL UNSTABLE in 14 min: http://jenkins.jquery.com/job/jQuery%20Core%20Compat/538/
[18:41:42] <doesallmagic2> markelog: Manipulation: blacklist IE8 from running tests for tag-hyphenated elems
