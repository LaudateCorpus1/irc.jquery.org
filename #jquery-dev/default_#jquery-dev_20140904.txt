[00:35:12] <jqcommit> [13jquery] 15gibson042 pushed 1 new commit to 06master: 02http://git.io/X5Iadw
[00:35:12] <jqcommit> 13jquery/06master 14b807aed 15Daniel Herman: Event: Restore the `constructor` property on jQuery.Event prototype...
[00:35:42] <jqcommit> [13jquery] 15gibson042 closed pull request #1580: Event: Restore the `constructor` property on jQuery.Event prototype (06master...06bug_15090) 02http://git.io/0ztl_A
[01:22:32] <doesallmagic2> Project jQuery Core 1.x Weekly build #81: STILL UNSTABLE in 52 min: http://jenkins.jquery.com/job/jQuery%20Core%201.x%20Weekly/81/
[01:22:33] <doesallmagic2> * markelog: CSS: Removed redundant "to the number" in comment
[01:22:33] <doesallmagic2> * markelog: Core: Drop strundefined variable
[01:22:34] <doesallmagic2> * markelog: CSS: Remove use of getDefaultComputedStyle
[01:22:34] <doesallmagic2> * markelog: CSS: Use pre-defined displays for html and body
[01:22:35] <doesallmagic2> * markelog: CSS: Correct typo in the comment
[01:28:25] <doesallmagic2> Project jQuery Core 1.x build #466: STILL UNSTABLE in 5 min 52 sec: http://jenkins.jquery.com/job/jQuery%20Core%201.x/466/
[01:28:26] <doesallmagic2> richard.gibson: Event: Restore the `constructor` property on jQuery.Event prototype
[01:31:42] <doesallmagic2> Project jQuery Core build #1183: STILL UNSTABLE in 3 min 16 sec: http://jenkins.jquery.com/job/jQuery%20Core/1183/
[01:31:43] <doesallmagic2> richard.gibson: Event: Restore the `constructor` property on jQuery.Event prototype
[03:51:57] <jqcommit> [13jquery] 15mzgol closed pull request #1573: Ajax: Fix the invalid script test in Android 2.3 (06master...06android2.3-ajax) 02http://git.io/opOHrg
[04:22:50] <sizcommit> [13sizzle] 15mzgol pushed 1 new commit to 06master: 02http://git.io/ivYJxA
[04:22:50] <sizcommit> 13sizzle/06master 145b9cdd6 15Micha≈Ç Go≈ÇeÃ®biowski: Build: update Chrome 35/36 to 36/37 in tests
[07:03:18] <jqcommit> [13qunit] 15JamesMGreene closed issue #645: Add runtime property to moduleDone event data 02http://git.io/3Jiclg
[07:03:51] <jqcommit> [13qunit] 15JamesMGreene closed pull request #648: Logging: Add runtime to moduleDone (06master...06moduleDoneTiming) 02http://git.io/kK-Opw
[07:06:05] <doesallmagic2> Yippee, build fixed!
[07:06:06] <doesallmagic2> Project QUnit build #452: FIXED in 3 min 1 sec: http://jenkins.jquery.com/job/QUnit/452/
[07:06:06] <doesallmagic2> James M. Greene: Logging: Add runtime to moduleDone
[07:39:31] <JamesMGreene> jzaefferer Krinkle leobalter: Decision time https://github.com/jquery/qunit/pull/650#issuecomment-54482030  Kill or keep `QUnit.config.beforeEach`/`QUnit.config.afterEach`?  :-O
[07:41:42] <Krinkle> I say kill
[07:42:44] <Krinkle> I've also let it sit for a while and actually think if we do keep it, it may be better off as a single value, not as a queue.
[07:43:05] <Krinkle> But I can swing either way on that.
[07:44:37] <Krinkle> JamesMGreene: I know this can be useful for smaller projects, but for Wikimedia we wouldn't use this because we do test composition (e.g. MediaWiki plugins register additional tests that may not want to use the same setup/teardown)
[07:45:00] <Krinkle> I like how in PHPUnit a test suite ("module") is an extended class that can overload setup/teardown and choose to call the parent or not
[07:45:09] <Krinkle> and it can extend the base test suite or your applications custom one.
[07:45:12] <Krinkle> Quite elegant.
[07:45:54] <JamesMGreene> Krinkle: Any quick link to docs on that?
[07:45:58] <Krinkle> but doing it as an object in js is probably not very convenience, let alone calling parent classes is a complete suck mess in js.
[07:46:33] <JamesMGreene> (or code example of opt-in vs. opt-out of ancestor lifecycles)
[07:46:38] <Krinkle> I'll show you an example
[07:47:41] <Krinkle> https://github.com/wikimedia/mediawiki-core/blob/master/tests/phpunit/includes/libs/CSSJanusTest.php
[07:47:53] <Krinkle> that one has no local setup/teatdown, extends from MediaWikiTestCase
[07:47:56] <Krinkle> which does provide one
[07:48:25] <Krinkle> https://github.com/wikimedia/mediawiki-core/blob/master/tests/phpunit/includes/resourceloader/ResourceLoaderTest.php
[07:48:29] <Krinkle> that one has an extra setUp
[07:48:32] <JamesMGreene> And is CSSJanusTest/MediaWikiTestCase equivalent to a suite or a single test?
[07:48:41] <Krinkle> It's like QUnit.module
[07:48:49] <Krinkle> has tests and assertions inside
[07:48:57] <JamesMGreene> k
[07:49:21] <JamesMGreene> Oh sure, so it just invokes the parent setUp manually
[07:49:26] <Krinkle> each "method" is a test, and inside it calls this.assertSomething(x,y,msg) 
[07:49:37] <Krinkle> JamesMGreene: Yes, but key is that it can also choose to not do that
[07:49:44] <JamesMGreene> Not bad, though I feel like I'd rather the default be to invoke the parent setUp
[07:49:44] <Krinkle> or to extend the PHPUnit base test suite instead
[07:50:11] <Krinkle> and do call the parent (which is empty, but it's a good habit to just always call it)
[07:50:17] <JamesMGreene> And call a stopPropagation-esque method to prevent the parent's from being called
[07:50:48] <Krinkle> and you could even do it like this: MediaWikiTestCase { setUp -> { beforeEach(); other setup } beforeEach -> {} }
[07:50:56] <Krinkle> and then a subclass can only overload beforeEach without having to call parent
[07:51:01] <JamesMGreene> (the default for such a thing in QUnit... what you show makes more sense in a classicial inheritance setup)
[07:51:04] <Krinkle> beforeEach is just an arbitrary name here
[07:51:09] <Krinkle> but that's hacky :)
[07:51:44] <Krinkle> anyway, works even better without classical inheritance and just using plain objects
[07:51:50] <Krinkle> no instantiation or state that way
[07:52:05] <JamesMGreene> I mean we could certainly make such a thing work
[07:52:11] <JamesMGreene> that's basically what Mocha does
[07:52:17] <Krinkle> but it'd be a completely different framework
[07:52:22] <JamesMGreene> Its suite has a `parent` property to refer to its containing suite, if any
[07:52:34] <JamesMGreene> so it can just call up the chain
[07:52:35] <Krinkle> containing, as opposed to based on
[07:52:40] <JamesMGreene> correct
[07:53:11] <Krinkle> I also see people implement abstract phpunit test suites, e.g. for similar tests where you just configure them differently
[07:53:50] <Krinkle> e.g. we test our caching and database abstraction layers that way. They all have the same tests (inherited from parent class), but the init method is changed to construct a different backend (mysql, postgres, mssql, sqlite) or caching layer (redis, memcached etc.)
[07:54:17] <Krinkle> but in 99% of cases I think it's overengineered. I like the simplicity of QUnit
[07:54:51] <Krinkle> It means you sometimes have to use some expressive power to get things done, but it's not too complicated or impossible.
[08:10:16] <JamesMGreene> jzaefferer was the first to suggest axing it so it's safe to assume that's still his opinion ATM
[08:10:31] <JamesMGreene> leobalter: How about you?  Keep or kill the new global `beforeEach`/`afterEach`?
[08:16:08] <jzaefferer> If we kill it, we probably don't need the module setup/teardown rename either.
[08:16:33] <jzaefferer> I'd still change the argument in the API docs to "hooks", but that's just docs
[08:17:16] <JamesMGreene> leobalter's vote is to keep it for now and merge the fix so I can keep moving along, then discuss next week whether we totally remove it before v1.16.0 or not
[08:17:16] <JamesMGreene> https://github.com/jquery/qunit/pull/650#issuecomment-54492538
[08:17:51] <JamesMGreene> I'm good with that
[08:17:59] <leobalter> ^^
[08:18:09] <JamesMGreene> I really just not to be able to move along with the other PRs that this one is holding up
[08:18:12] <JamesMGreene> not = want
[08:19:33] <jzaefferer> Okay. At that point, we'd have to rip it out manually, since reverts won't work anymore. Should be fine.
[08:20:15] <leobalter> reverts aren't that good, we also improved some tests that we should keep 
[08:20:30] <JamesMGreene> I think it's easy enough to remove it later but it's a blocker right now without the fix
[08:21:33] <leobalter> I can work on the remove or improvement until the end of jQCon
[08:23:35] <leobalter> or, I can extend this #650 to remove beforeEach/afterEach
[08:24:02] <leobalter> just tell me if I also need to bring setup/teardown names back
[08:33:24] <jzaefferer> Krinkle: What did you mean with "if we do keep it, it may be better off as a single value, not as a queue."
[08:34:44] <JamesMGreene> jzaefferer: I _think_ Krinkle means that he changed his mind about `QUnit.config.beforeEach`/`afterEach` being a setter rather than a function that can queue multiple callbacks
[08:35:59] <JamesMGreene> `beforeEach = cb;` (the current situation, which he was previously against) vs. `beforeEach(cb1); beforeEach(cb2);`
[08:37:07] <jzaefferer> Ah, okay. So in other words "if we keep it, keep it as-is"?
[08:37:23] <JamesMGreene> yeah, I think so
[08:37:28] <JamesMGreene> but that's my interpretation :-P
[08:37:45] <JamesMGreene> Krinkle should definitely confirm/reject
[08:38:16] <Krinkle> I'm afraid so, but it's only bit a little bit. 
[08:38:26] <Krinkle> (I changed my mind indeed)
[08:39:13] <Krinkle> I'm fine either way. But I slightly prefer the single galue
[08:40:04] <Krinkle> I think people only need one, and having multiple sort of creates situations of order/queue, and feels giving up control (how do you unset it, once set?).
[08:41:34] <JamesMGreene> `beforeEach = null`  BUT  that is problematic if done anywhere outside of a queued context (like the module lifecycle hooks)
[08:42:04] <JamesMGreene> Definitely tricky, and definitely only a perfect fit for those that want the behavior ALWAYS (like Ember)
[08:42:15] <JamesMGreene> but a valid use case
[08:42:49] <leobalter> https://github.com/leobalter/qunit/commit/f7e8e2c77a50755d76e077719f9ab28fde0996d3 is there if you want to revert 
[08:42:57] <leobalter> or just drop that commit
[08:44:02] <JamesMGreene> I'm so confused :-P
[08:44:21] <Krinkle> JamesMGreene: Yeah, not really unset. that shouldn't be supported
[08:44:26] <Krinkle> especially as we move to assert-context based
[08:44:34] <Krinkle> and soon, i expect, we'll have paralell test runs
[08:44:38] <Krinkle> because nothing stops that anymore
[08:44:49] <Krinkle> (by default anyway, people migrating could disable it via a config option)
[08:48:10] <leobalter> well, I like the global beforeEach and afterEach, IMHO, it should be kept there. If you don't agree, there's already the commit to revert it
[08:49:01] <JamesMGreene> I vote we keep it for now, I see no major issue with it
[08:49:18] <Krinkle> OK
[08:54:00] <jqcommit> [13qunit] 15leobalter closed issue #647: Global `beforeEach`/`afterEach` should synchronize before module `beforeEach`/`afterEach` run 02http://git.io/grnEgA
[08:57:21] <jqcommit> [13qunit] 15leobalter closed pull request #650: Test: Fix test hooks order (06master...06647-hooks-order) 02http://git.io/r6CfmQ
[08:57:42] <doesallmagic2> Project QUnit build #453: UNSTABLE in 3 min 55 sec: http://jenkins.jquery.com/job/QUnit/453/
[08:57:42] <doesallmagic2> * leonardo.balter: Test: Remove unnecessary code
[08:57:43] <doesallmagic2> * leonardo.balter: Test: Synchronize accepts an array of functions
[08:57:43] <doesallmagic2> * leonardo.balter: Test: Synchronize hooks order
[09:00:43] <doesallmagic2> Project QUnit build #454: STILL UNSTABLE in 3 min 1 sec: http://jenkins.jquery.com/job/QUnit/454/
[09:00:43] <doesallmagic2> James M. Greene: Test: Synchronize hooks order
[09:07:34] <jzaefferer> Oh look, actual failures, not just timeouts: http://swarm.jquery.org/job/3535
[09:07:53] <jzaefferer> "Fast runtime for trivial test" takes > 100ms :p
[09:08:15] <jzaefferer> JamesMGreene: Don't underestimate how slow Android emulators can be!
[09:09:10] <jzaefferer> On Android 2.3, a whole 73 assertions ran. That's missing a few hundred
[09:15:23] <jqcommit> [13qunit] 15JamesMGreene closed pull request #641: Reporter: Ensure markup is valid XHTML (06master...06xhtml) 02http://git.io/uIg7mQ
[09:17:37] <doesallmagic2> Project QUnit build #455: STILL UNSTABLE in 2 min 26 sec: http://jenkins.jquery.com/job/QUnit/455/
[09:17:37] <doesallmagic2> James M. Greene: Reporter: Ensure markup is valid XHTML
[09:19:11] <JamesMGreene> leobalter: LOL, told you we should use larger vague number :-P
[09:19:16] <JamesMGreene> numbers*
[09:20:34] <JamesMGreene> jzaefferer: Have you seen the types of errors shown in http://swarm.jquery.org/result/2048934 before? I'm not sure what those failures mean
[09:23:53] <JamesMGreene> jzaefferer: The time being compared for "Fast runtime for trivial test" is 58ms (actual) vs <50ms (expected)
[09:24:09] <JamesMGreene> As the value comes from the runtime of a previous test, not the runtime of the current test
[09:24:21] <jzaefferer> I haven't seen those errors. 
[09:24:24] <JamesMGreene> Still, 58 is not less than 50  :)
[09:24:57] <jzaefferer> Also they happend just once on the last dozen runs or so: http://swarm.jquery.org/project/qunit
[09:28:40] <jqcommit> [13qunit] 15JamesMGreene pushed 1 new commit to 06master: 02http://git.io/MMMZXw
[09:28:40] <jqcommit> 13qunit/06master 14d04101c 15James M. Greene: Tests: Increase max expected time for 'timing' test module...
[09:30:16] <doesallmagic2> Yippee, build fixed!
[09:30:17] <doesallmagic2> Project QUnit build #456: FIXED in 1 min 47 sec: http://jenkins.jquery.com/job/QUnit/456/
[09:30:17] <doesallmagic2> James M. Greene: Tests: Increase max expected time for 'timing' test module
[09:30:59] <JamesMGreene> \o/
[09:31:16] <JamesMGreene> Now, to figure out why my promise branch is failing again....
[09:32:03] <JamesMGreene> (on non-Promise tests)
[09:37:11] <JamesMGreene> Krinkle: It doesn't look like we have any open Issues for running the tests in parallel. Would you be so kind as to create one and share some initial thoughts on it?
[09:54:47] <jqcommit> [13qunit] 15leobalter opened pull request #652: Core: Implements QUnit.skip (06master...06637-skip) 02http://git.io/z4X0Tg
[09:58:47] * JamesMGreene sighs
[09:59:03] <JamesMGreene> Tests pass when debugging, fail when running... I love timing issues
[10:00:31] <JamesMGreene> Hmm
[10:01:01] <JamesMGreene> Actually I bet this would be solved with my `async`-`done` changes
[10:15:23] <jqcommit> [13qunit] 15JamesMGreene opened pull request #653: Async: Implement new `assert.async` mechanism (06master...06async-done) 02http://git.io/eUhZ5w
[10:17:40] <JamesMGreene> jzaefferer Krinkle leobalter scott_gonzalez: Gentleman, for your PR reviewing pleasure: https://github.com/jquery/qunit/pull/653
[10:26:25] <Krinkle> bbiab
[11:55:54] <jqcommit> [13qunit] 15jzaefferer opened issue #654: Build: Remove jscs linelength exception, fix or ignore deepEqual tests 02http://git.io/umgGYg
[16:06:37] <jQTest> I am looking forward to start contributing to jquery. Can anyone help me with open and fairly easy ones just to start with
[16:14:29] <robertmaxrees> did you fill out the requisite stuff?
[16:15:16] <jQTest> robertmaxrees: What do you mean by requisite stuff?
[16:15:19] <robertmaxrees> http://contribute.jquery.org/
[16:15:37] <robertmaxrees> there's a CLA to fill sign, and some style guides to read.
[16:17:18] <jQTest> Well, my first thought is to get my hands dirty with code, and CLA's and other formalities will follow
[16:17:19] <jQTest> :)
[16:17:46] <robertmaxrees> you won't be able to submit any pull requests or anything.
[16:17:48] <jQTest> so a helping hand in that regard would be wonderful
[16:18:09] <robertmaxrees> fork the repo on github and download it -start there.
[16:18:16] <robertmaxrees> see if you can build the project
[16:20:09] <jQTest> you mean, running the `build` from npm 
[16:20:55] <robertmaxrees> npm run build, yes
[16:21:06] <robertmaxrees> as well as run the unit tests
[16:23:56] <jQTest> robertmaxrees: I have already done till the part, npm run build
[16:24:09] <robertmaxrees> that's the first step.
[16:24:11] <jQTest> robertmaxrees: Thanks for mentoring :)
[16:24:45] <robertmaxrees> get it building, and get the tests running, then head over and sign the CLA :)
[16:24:58] <jQTest> cool
[16:25:32] <robertmaxrees> unless you really don't plan on ever contributing - your PR won't get accepted if there's no CLA going.
[16:26:23] <jQTest> CLA done :)
[16:26:46] <robertmaxrees> have you signed up within trac?
[16:28:44] <jQTest> no, If you dont mind, can you please share the necessary url
[16:30:14] <robertmaxrees> http://contribute.jquery.org/triage/ read this and you'll find it :)
[16:31:00] <jQTest> Thanks :)
[16:41:23] <jQTest> robertmaxrees: all set :),
[16:45:26] <jQTest> CLA [‚úì], npm run build [‚úì] unit test running [‚úì] (Though had 3 errors :/)  Logged In bug tracker [‚úì]
[16:49:59] <jQTest> robertmaxrees: ^
[16:54:03] <robertmaxrees> cool.  check out the bugtracker and start pokign around :)
[16:54:22] <jQTest> hehe :)
[16:54:57] <jQTest> Like mozilla has mentor bugs and gnome has gnome-love bugs, are there any get started bugs for jqyery
[16:55:09] <robertmaxrees> not that I'm aware of right now?
[16:55:12] <jQTest> to understand the flow and things 
[16:55:18] <jQTest> cool :)
[16:55:28] <jQTest> then I wll look for somethign interesting :)
[17:24:29] <snover> scott_gonzalez: hey, are you around? i have a question about aria-autocomplete that i am hoping you can answer. the wai-aria spec always talks about using it on a text box, but in the case where a combobox role is set on a wrapper of a text box, what is supposed to be set on the text box, if anything, to make sure the screen reader knows what is going on?
[17:29:38] <snover> openajax a11y has an example of this that totally does not work in real life
[17:29:54] <snover> except with nvda
[17:29:58] <snover> and firefox
[20:39:00] <JamesMGreene> jzaefferer Krinkle|detached leobalter: Well, trying to jump the standardized Reporter interface stuff by breaking the one issue [to rule them all] into several: https://github.com/js-reporters/js-reporters/issues/1 https://github.com/js-reporters/js-reporters/issues/3 https://github.com/js-reporters/js-reporters/issues/4 https://github.com/js-reporters/js-reporters/issues/5
[20:39:16] <JamesMGreene> *jump-start
[22:47:33] <sizcommit> [13sizzle] 15gibson042 opened pull request #283: Selection: Check for ancestor fieldsets when matching :enabled/:disabled (06master...06174) 02http://git.io/sEMguw
