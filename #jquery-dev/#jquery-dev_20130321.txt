[05:28:30] <JamesMGreene> gnarf: The plan is that the QUnit plugins that we have are remaining official jquery org repos [for now?]
[05:28:33] <JamesMGreene> cc: jzaefferer Krinkle|detached
[05:29:04] <jzaefferer> Yep, pretty much
[05:29:23] <jzaefferer> Those custom assertion are maintenance free anyway.
[05:51:08] <scott_gonzalez> Ugh, can we please not create a dozen QUnit repos?
[07:40:01] <JamesMGreene> jzaefferer Krinkle|detached Any response to scott_gonzalez's lament?
[07:59:17] <jzaefferer> JamesMGreene scott_gonzalez: how about moving the phantomjs plugin to its own repo and leaving the rest inside the QUnit repo?
[08:01:32] <scott_gonzalez> Well, if we're keeping any addons in the main repo, I don't understand why we'd move anything out.
[08:03:05] <scott_gonzalez> I guess it's just strange to have a dozen QUnit repos in jquery.
[10:07:15] <Krinkle> scott_gonzalez: Can you rationalise that fear? This isn't moving it anywhere.
[10:07:43] <scott_gonzalez> Krinkle: The proposal was creating a new repo, surely code is moving around then.
[10:07:44] <Krinkle> We decided to move the addons out of the qunit repo for various reasons
[10:07:51] <Krinkle> We already moved some out
[10:07:54] <Krinkle> Reasons:
[10:08:01] <Krinkle> - We weren't maintaining them.
[10:08:17] <Krinkle> - They aren't crucial or commonly used
[10:08:34] <scott_gonzalez> So given those 2 things, they don't belong in the jquery org.
[10:08:37] <Krinkle> - Made it hard to install other addons properly as there'd be two types of addons
[10:08:40] <Krinkle> and some more probably
[10:08:50] <scott_gonzalez> We should move them all out.
[10:08:57] <Krinkle> It's like having a handful of jquery plugins in jquery/jquery that almost nobody uses or maintains.
[10:09:02] <Krinkle> Yes, for sure.
[10:09:05] <Krinkle> We're in that process rightnow.
[10:09:11] <Krinkle> We're moving them all out
[10:09:17] <Krinkle> Who says we aren't?
[10:09:25] <scott_gonzalez> Nobody says we aren't.
[10:09:33] <Krinkle> But you think we shouldn't?
[10:09:34] <scott_gonzalez> But the place that JamesMGreene said to move them was jquery
[10:09:42] <scott_gonzalez> Which we shouldn't do.
[10:10:01] <Krinkle> QUnit is an official jQuery product.
[10:10:16] <Krinkle> These addons are plugins that we support and will maintain from now on.
[10:10:21] <Krinkle> It's a bit like jquery-color I suppose.
[10:10:56] <Krinkle> When there are more plugins to be created, they'll be maintained and owned by whomever. not under jquery of course.
[10:11:44] <scott_gonzalez> We shouldn't be maintaining things that we aren't using.
[10:12:31] <Krinkle> If there are some addons in core right now we should move out that we aren't using, we'll probably drop them or ask someone to take ownership instead.
[10:12:46] <Krinkle> The ones we moved out we either use or don't use temporarily.
[10:13:00] <Krinkle> (afaik)
[10:14:04] <Krinkle> by the way I read 
[10:14:08] <Krinkle> "Major changes: no script execution in $() or .append() by default"
[10:14:19] <Krinkle> Does that mean just like <script>
[10:14:25] <Krinkle> or also other injections?
[10:14:39] <Krinkle> like href="javascript:evil()" or onhover="evil()"
[10:15:08] <Krinkle> and style="ie-crap-js-exec"
[10:15:50] <Krinkle> which of course authors would never write themselves (and if they do, they're on their own)
[10:15:57] <Krinkle> but I mean if this is like "yeah $() is safe now"
[10:15:59] <Krinkle> then uhuh, no.
[10:17:18] <DaveMethvin> Krinkle agreed, the blog post will try to make that clear
[10:17:44] <DaveMethvin> my longer term goal is to prevent any dynamic content from running if it's not going thru $.parseHTML
[10:17:53] <DaveMethvin> that includes onload handlers, meta tags, etc
[10:18:01] <DaveMethvin> but the browsers will need to cooperate
[10:18:08] <Krinkle> Yeah
[10:18:33] <Krinkle> I feel this is fairly close to me since I once spent a considerable time trying to port MediaWiki's sanitiser from PHP to JS.
[10:18:45] <DaveMethvin> so for now, $.parseHTML(html, document, true) is a declaration you DO want dynamic content, and $.parseHTML(html, document, false) is a statement that you do not
[10:19:04] <Krinkle> Since MediaWiki allows some html-like syntax to be used along side the wiki markup language, it needs to be very safe since it allows "Anyone to edit"
[10:19:17] <DaveMethvin> in Windows 8 Apps and CSP environments you can back it up
[10:19:18] <Krinkle> so I can probaly help with this when this is done.
[10:19:27] <DaveMethvin> but on plain browsers we are at their mercy for now
[10:19:33] <Krinkle> At least for the areas that we cant' count on browsers' coorporation.
[10:19:47] <DaveMethvin> would love your feedback, I'll post a link on jquery-devs-team when i have it done
[10:19:53] <Krinkle> Thx
[10:19:56] <DaveMethvin> which i hope will be this weekend
[10:37:54] <JamesMGreene> scott_gonzalez Krinkle jzaefferer: Like I always said, I'm happy to take personal ownership of the QUnit plugins
[10:38:09] <JamesMGreene> rather than keeping them in the jquery org
[10:38:37] <JamesMGreene> Only one I'm not comfortable with is "themes"
[11:16:26] <JamesMGreene> Say
[11:17:18] <JamesMGreene> If my JS pal is in Austin for ~2 months, who/what should he hit up for networking?  I already told him AustinJS, TXJS, SlexAxton, and possibly Joe McCann, Garann Means, and Kyle Simpson
[11:17:23] <JamesMGreene> Anything else?
[11:17:35] <JamesMGreene> \/Anyone
[11:18:55] <jqcommit> 01[13testswarm01] 15Krinkle pushed 1 new commit to 06master: 02http://git.io/vhVk7w
[11:18:55] <jqcommit> 13testswarm/06master 142bece10 15Timo Tijhof: Addjob: Don't prepopulate authtoken....
[11:58:52] <gnarf> JamesMGreene: TXJS for sure
[11:59:01] <gnarf> quite a few of us will be there
[11:59:18] <gnarf> SlexAxton might know some other Austineers
[12:10:19] <scott_gonzalez> DaveMethvin: What's the status of https://github.com/jquery/jquery/pull/1204/files ?
[12:10:19] <b-ot> scott_gonzalez: Pull request #1204 by mzgol (6d 19h ago): make code grunt-contrib-jshint 0.3.0 compatible
[12:10:31] <scott_gonzalez> I remember seeing discussion, but I guess it happened in a different PR.
[12:11:00] <scott_gonzalez> Oh, I see, different PRs for different branches.
[12:13:32] <scott_gonzalez> I guess there hasn't been a decision yet about which options will be enabled?
[12:35:48] <scott_gonzalez> ouch: http://jsfiddle.net/GNF7E/
[12:36:05] <scott_gonzalez> DaveMethvin timmywil mikesherov gibson042: Any sane solution for this?
[12:36:14] <scott_gonzalez> Or is this just tough luck for the user?
[12:36:52] <scott_gonzalez> BTW, the actual use case is sane. This is just simplified to show the problem.
[12:36:57] <gibson042> what's the background on it?
[12:37:59] <scott_gonzalez> In jQuery UI, the autocomplete widget is instantiated from a text input.
[12:38:18] <scott_gonzalez> The widget generates a new element and appends it immediately after the input.
[12:38:39] <scott_gonzalez> If the main element for a widget is removed, the widget automatically cleans itself up.
[12:38:53] <scott_gonzalez> So if you did $( "#autocomplete" ).remove(), it would remove the generated sibling.
[12:39:07] <scott_gonzalez> Someone did $( "#autocomplete" ).replaceWith( something )
[12:39:19] <gibson042> hmmm
[12:42:29] <scott_gonzalez> The element we're generating is hidden at all times, so we can just change it to .insertBefore() instead of .insertAfter().
[12:44:09] <gibson042> you mean you want core to implement .replaceWith with insertBefore instead of insertAfter?
[12:44:48] <gibson042> n/m, there isn't one
[12:45:28] <gibson042> I think you need to monkey patch .replaceWith
[12:45:29] <scott_gonzalez> No, in autocomplete, we use generatedElement.insertAfter( input )
[12:45:36] <scott_gonzalez> We can just change it to use .insertBefore()
[12:45:38] <gibson042> ooooh, gotcha
[12:46:52] <gibson042> a way to make .replaceWith safe for your enhanced .remove would be by implementing it with jQuery methods instead of DOM
[12:48:35] <scott_gonzalez> How would that help?
[12:48:47] <scott_gonzalez> Wouldn't you ned to keep multiple references for either solution?
[12:51:01] <gibson042> yes
[12:51:06] <gibson042> but it would satisfy the use case
[12:51:57] <gibson042> `next = jQuery( this ).nextAll()` ... `parent.insertBefore( elem, next.filter( parent.childNodes )[0] )`
[12:54:02] <scott_gonzalez> ah, yeah
[13:26:57] <jqcommit> 01[13testswarm01] 15Krinkle pushed 1 new commit to 06master: 02http://git.io/QJ0ndA
[13:26:57] <jqcommit> 13testswarm/06master 14fed8b59 15Daniel Herman:  Inject: Use new callback style for QUnit.done. Fixes #264.
[20:59:38] <JamesMGreene> Anyone know how fast Media Temple's network connections are?
[21:39:49] <JamesMGreene> gnarf: The jQuery Jenkins server is one of (mt)'s OpenVZ/Virtuozzo images, right?
[21:58:06] <gnarf> JamesMGreene: yeah
[21:58:19] <JamesMGreene> k, thought so
[22:57:13] <JamesMGreene> Unexpected turn of events in the quest to find build servers for PhantomJS
[22:57:26] <JamesMGreene> (Well, several sets of unexpected turns of events, really)
[23:09:14] <JamesMGreene> 1. (mt), a virtual machine provider, offers us a bare metal server
[23:09:48] <JamesMGreene> 2. MacStadium, a Mac machine provider, offered us a Mac Mini with hardware level VM management
[23:09:59] <JamesMGreene> These providers are keeping me on my toes :-o
[23:39:08] <JamesMGreeneAway> G'night folks
