[04:40:11] <jqcommit> [qunit] jzaefferer pushed 1 new commit to master: http://git.io/7t6vtQ
[04:40:11] <jqcommit> [qunit/master] onerror: force display of global errors despite URL parameters. Fixes #288 - Global failures can be filtered out by test-limiting URL parameters - Richard Gibson
[04:46:08] <jqcommit> [qunit] jzaefferer pushed 1 new commit to master: http://git.io/7LHZMw
[04:46:08] <jqcommit> [qunit/master] Compare the ES6 sticky (y) property for RegExp. Can't add to tests yet. Fixes #284 - deepEqual for RegExp should compare - Jörn Zaefferer
[04:48:16] <doesallmagic> Project QUnit build #177: SUCCESS in 7 min 21 sec: http://swarm.jquery.org:8080/job/QUnit/177/
[04:48:17] <doesallmagic> joern.zaefferer: onerror: force display of global errors despite URL parameters. Fixes #288 - Global failures can be filtered out by test-limiting URL parameters
[04:50:42] <jqcommit> [qunit] jzaefferer pushed 1 new commit to master: http://git.io/bmw57w
[04:50:42] <jqcommit> [qunit/master] Make QUnit.expect() (without arguments) a getter. Fixes #226 - Antranig Basman
[05:02:52] <doesallmagic> Project QUnit build #178: SUCCESS in 14 min: http://swarm.jquery.org:8080/job/QUnit/178/
[05:02:53] <doesallmagic> joern.zaefferer: Compare the ES6 sticky (y) property for RegExp. Can't add to tests yet. Fixes #284 - deepEqual for RegExp should compare
[05:11:02] <mikesherov> jaubourg: you're my only hope!
[05:11:23] <ben_alman> when creating an ajax prefilter, if you just do $.ajax("/foo") what dataType does that use?
[05:11:25] <jqcommit> [qunit] jzaefferer pushed 2 new commits to master: http://git.io/flVP5w
[05:11:25] <jqcommit> [qunit/master] Adds module and test name to the information that is returned in the callback provided to QUnit.log(Function). Fixes #296 - Vivin Paliath
[05:11:25] <jqcommit> [qunit/master] Simplify phantomjs runner to use module property in testDone callback - Jörn Zaefferer
[05:11:37] <ben_alman> er.. a transport
[05:11:50] <ben_alman> $.ajaxTransport(???, fn);
[05:12:07] <ben_alman> what should the ??? be to handle a straight-up $.ajax(url); call with no dataType specified
[05:12:13] <doesallmagic> Project QUnit build #179: SUCCESS in 9 min 19 sec: http://swarm.jquery.org:8080/job/QUnit/179/
[05:12:14] <doesallmagic> joern.zaefferer: Make QUnit.expect() (without arguments) a getter. Fixes #226
[05:19:26] <ben_alman> any ideas?
[05:19:35] <ben_alman> i've tried "*" with no success :/
[05:20:48] <doesallmagic> Project QUnit build #180: SUCCESS in 8 min 33 sec: http://swarm.jquery.org:8080/job/QUnit/180/
[05:20:49] <doesallmagic> * joern.zaefferer: Adds module and test name to the information that is returned in the callback provided to QUnit.log(Function). Fixes #296
[05:20:49] <doesallmagic> * joern.zaefferer: Simplify phantomjs runner to use module property in testDone callback
[05:21:20] <jqcommit> [qunit] jzaefferer pushed 1 new commit to master: http://git.io/hWbthQ
[05:21:20] <jqcommit> [qunit/master] Scroll the window back to top after tests finished running. Fixes #304 - Jörn Zaefferer
[05:21:48] <ben_alman> so i'm doing $.ajaxTransport("*", function(options) { console.log("options", options); }); $.ajax("/foo"); and it doesn't lok
[05:21:56] <ben_alman> shouldn't it at least log?
[05:22:30] <ben_alman> when i do this it logs:
[05:22:30] <ben_alman> $.ajaxTransport("json", function(options) { console.log("options", options); }); $.getJSON("/foo");
[05:24:52] <doesallmagic> Project QUnit build #181: SUCCESS in 3 min 38 sec: http://swarm.jquery.org:8080/job/QUnit/181/
[05:24:53] <doesallmagic> joern.zaefferer: Scroll the window back to top after tests finished running. Fixes #304
[08:31:42] <timmywil> heh, "BUG of The data method"!!!
[11:33:09] <mikesherov> readyState interactive!!!
[11:33:16] <mikesherov> this is what the bleeding edge feels like
[11:33:39] <mikesherov> DaveMethvin: you here?
[11:33:54] <DaveMethvin> hey mikes
[11:33:58] <DaveMethvin> tab
[11:34:02] <DaveMethvin> :P
[11:34:10] <DaveMethvin> i just replied on that ticket
[11:35:19] <mikesherov> not sure I follow
[11:35:30] <mikesherov> IE9 and IE10 have DOMContentModified?
[11:36:38] <DaveMethvin> I mean DOMContentLoaded sorry mikesherov
[11:37:07] <mikesherov> oh, phew
[11:37:20] <mikesherov> so the problem there is that that conditional wouldn't be hit
[11:37:38] <mikesherov> he said "IE9 will give back a document.body that hasn't run all the scripts."
[11:37:59] <DaveMethvin> well as long as we haven't fired DOM ready then we're okay
[11:38:12] <DaveMethvin> we just would ignore readyState
[11:38:27] <mikesherov> ever
[11:38:32] <mikesherov> I see
[11:38:41] <mikesherov> but that doesn't actually solve it either
[11:38:41] <DaveMethvin> and i think the doscroll test is only needed for ie6 although we don't feature test it
[11:38:55] <mikesherov> because IE9 can return a document.body that passes that test
[11:39:09] <DaveMethvin> it must :D
[11:41:02] <DaveMethvin> i dunno a way to determine whether the browser supports DOMContentLoaded tho
[11:41:33] <mikesherov> well, weak inference
[11:41:38] <mikesherov> we do weak inference
[11:41:42] <DaveMethvin> it's like listening for a dog that doesn't bark
[11:41:45] <mikesherov> we already do it to clarify
[11:42:04] <DaveMethvin> yeah ... now what weak inference tells us ie9/10?
[11:42:15] <mikesherov> OOH
[11:42:23] <mikesherov> they still have currentStyle?
[11:42:29] <DaveMethvin> so does opera tho
[11:42:34] <mikesherov> well
[11:42:58] <DaveMethvin> hmm
[11:43:59] <mikesherov> I mean, the point I'm trying to make is that IE9 and IE10 still return a document.body that is screwed when readyState is interactive
[11:44:32] <DaveMethvin> but we can fix tha with a setTimeout
[11:44:36] <mikesherov> right now we say (readystate===complete || readystate===interactive && addEventListener)
[11:45:16] <mikesherov> I'm saying, change it to:
[11:45:29] <mikesherov> (readystate===complete || readystate===interactive && !currentStyle)
[11:45:41] <mikesherov> so yeah, we penalize Opera a bit
[11:45:48] <mikesherov> for implementing currentStyle
[11:46:00] <mikesherov> but we forgo interactive on all IE
[11:46:13] <DaveMethvin> is there anyone who benefits from that part of the if?
[11:46:21] <mikesherov> FF and Chrome
[11:46:32] <DaveMethvin> they fire DOMContentReady tho
[11:48:10] <mikesherov> but when async loaded
[11:48:21] <mikesherov> so if you defer jquery load
[11:49:04] <DaveMethvin> readystate==complete then isn't it?
[11:50:51] <mikesherov> FF and Chrome will still be interactive if there are long loading scripts or iframes
[11:51:03] <mikesherov> iframe need to load before interactive ends
[11:51:05] <DaveMethvin> oh
[11:51:06] <DaveMethvin> ok
[11:51:28] <mikesherov> so the thing is that it could still be interactive while DOmContentLoaded has already fired
[11:51:42] <mikesherov> when the iframes load, THEN window.load fires
[11:51:52] <DaveMethvin> right
[11:52:26] <DaveMethvin> just tryna run through the code here, but my brain is fried
[11:52:42] <mikesherov> yeah, it's super confusing
[11:52:45] <DaveMethvin> i've spent most of the day in a debugger looking at js that was translated from c++
[11:52:52] <mikesherov> fun
[11:53:13] <DaveMethvin> well this is  more confusing by far :D
[11:53:24] <DaveMethvin> it's all the browser-specific situations
[11:58:05] <mikesherov> right
[11:58:54] <mikesherov> I feel dirty about the opera hack
[11:59:14] <DaveMethvin> well of all the collateral damage ...
[11:59:19] <DaveMethvin> that might as well be it
[11:59:21] <mikesherov> we can always add back in jquery.quickReady too...
[11:59:39] <mikesherov> but I'm reluctant to give more options here
[11:59:42] <DaveMethvin> agreed
[11:59:56] <mikesherov> so, super weak inference here
[12:00:05] <mikesherov> but we do what has to be done
[12:00:31] <DaveMethvin> oh we can do a vendor-specific interface
[12:00:37] <DaveMethvin> we need ie9 and 10 right?
[12:00:46] <DaveMethvin> something like pinned sites
[12:01:10] <DaveMethvin> thats defn only ie9 and 10, lemme find one
[12:05:41] <miketaylr> is documentMode in IE10 too?
[12:06:03] <DaveMethvin> mikesherov: if ( window.external && typeof window.external.msIsSiteMode !== "undefined" ) { /* thar be IE9/10 */ }
[12:06:13] <DaveMethvin> miketaylr: yeah
[12:06:21] <miketaylr> oh docMode is in IE8 and stuff, probably don't want that
[12:07:02] <mikesherov> right, but we can say addEventListener && !docMode
[12:07:18] <miketaylr> ah, right
[12:07:31] <DaveMethvin> that would be shorter
[12:07:33] <DaveMethvin> i think
[12:07:39] <DaveMethvin> who knows how gzip feels
[12:07:50] <DaveMethvin> since window.external is compressible
[12:08:22] <miketaylr> i'm guessing IE10 got rid of attachEvent
[12:08:25] <mikesherov> (readystate===complete || (readystate===interactive && window.addEventListener && !document.documentMode)
[12:08:31] <mikesherov> I don't know if they did
[12:08:37] <miketaylr> we nuked ours
[12:08:40] <mikesherov> otherwise that's a perfect IE detect
[12:08:42] <rwaldron> miketaylr ping me when free
[12:08:48] <miketaylr> mkay rwaldron
[12:09:32] <DaveMethvin> that looks plausible mikesherov
[12:10:00] <mikesherov> (readystate===complete || (readystate===interactive && !window.attachEvent)
[12:10:19] <DaveMethvin> hmmmm
[12:10:32] <DaveMethvin> if opera doesn't have one
[12:10:38] <DaveMethvin> that just might be crazy enough to work
[12:11:12] <mikesherov> and bingo
[12:11:20] <mikesherov> IE10, god bless em
[12:11:30] <mikesherov> they keep window.attachEvent around for us
[12:11:43] <mikesherov> and we always have window.opera as our savior too
[12:11:47] <mikesherov> thanks miketaylr!
[12:11:48] <miketaylr> DaveMethvin: older opera does, but i'm not really concerned about that
[12:11:58] <DaveMethvin> well that's one that we'll need for jquery 2.0
[14:15:47] <DaveMethvin> rwaldron: you around?
[14:16:30] <rwaldron> DaveMethvin I am
[14:16:33] <rwaldron> what's up?
[14:16:58] <DaveMethvin> in a .defineProperty, is there a way for the set or get fn to know what the property name is?
[14:18:08] <DaveMethvin> so, I have an object Color and i want to define properties r,g,b with setters to limit it to 0-255
[14:18:15] <DaveMethvin> but it's the same math for all 3
[14:21:14] <rwaldron> Not really
[14:21:15] <rwaldron> Object.defineProperty( o, "foo", { get: function() { console.log(this, Object.getOwnPropertyNames(this)); } });
[14:21:23] <DaveMethvin> yeah
[14:21:25] <DaveMethvin> that sucks
[14:21:26] <rwaldron> you can find out what other own props there are
[14:21:48] <rwaldron> But, your use case doesn't need to know what the prop is
[14:21:48] <DaveMethvin> i really want to know the name of the prop being set
[14:22:02] <rwaldron> use Object.defineProperties
[14:22:06] <rwaldron> the plural one
[14:22:16] <rwaldron> and build the descriptor first
[14:22:27] <DaveMethvin> hmmm
[14:22:32] <rwaldron> this way, you _can_ know the name, by closing it over
[14:22:56] <DaveMethvin> oh sure, there are other solutions
[14:23:01] <DaveMethvin> they're just ugly! :D
[14:23:14] * rwaldron shrugs
[14:23:14] <b-ot> ¯\_(ツ)_/¯
[14:23:21] <DaveMethvin> if i just knew the name of the property being set, i could use the same props object for all of them
[14:23:29] <DaveMethvin> because the setter is identical
[14:23:29] <rwaldron> If I had my way, it would be available
[14:23:47] <rwaldron> Things like that are non-issues with the likes of Proxy
[14:23:54] <DaveMethvin> well you go tell your ES buddies off at the next meeting!!!1
[14:23:56] <DaveMethvin> :D
[14:23:56] <rwaldron> or even Object.observe and so forth
[14:24:33] <rwaldron> All of Proxy's traps will tell you what you want to know
[14:24:44] <rwaldron> and observe's chngeRecords all have the property name as well
[14:25:07] <DaveMethvin> yeah but i get definePropert* all the way back to IE9
[14:25:14] <rwaldron> right
[14:25:33] <DaveMethvin> so i can do it the long way, better than no way
[14:25:44] <DaveMethvin> k thanks, just wanted to be sure i wasn't missing something
[14:26:31] <rwaldron> var descriptor = {};
[14:26:31] <rwaldron> ["r", "g", "b"].forEach(function( key ) {
[14:26:31] <rwaldron>   descriptor[ key ] = {
[14:26:31] <rwaldron>     set..
[14:26:31] <rwaldron>     get..
[14:26:32] <rwaldron>   };
[14:26:32] <rwaldron> });
[14:26:38] <rwaldron> I do stuff like that all the time
[14:27:20] <rwaldron> I think you're looking for something like __noSuchMethod__ or similar
[14:27:50] <DaveMethvin> the forEach is what I ended up with
[14:28:21] <DaveMethvin> __noSuchMethod__ is kind of a big ugly hammer for this
[14:28:54] <rwaldron> yeah
[14:28:58] <rwaldron> ugly indeed
[14:29:14] <snover> double underscore is the opposite of a double rainbow
[14:30:09] <rwaldron> snover +1
[14:31:16] <DaveMethvin> all the way
