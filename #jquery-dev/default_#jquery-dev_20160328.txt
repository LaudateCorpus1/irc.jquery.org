[03:40:21] <jqcommit> [13jquery] 15mgol closed pull request #3020: license file has been edited (06master...06hotfix/160328) 02https://git.io/vVJwR
[05:54:32] <jqcommit> [13jquery] 15markelog closed issue #2118: Return null from .attr when attributes don't exist 02https://git.io/xQQM
[06:15:01] <doesallmagic2> Project jQuery Migrate 3.x build #34: SUCCESS in 2 min 1 sec: http://jenkins.jquery.com/job/jQuery%20Migrate%203.x/34/
[07:33:30] <doesallmagic2> Project jQuery Migrate 1.x Core 2.x build #253: FAILURE in 18 min: http://jenkins.jquery.com/job/jQuery%20Migrate%201.x%20Core%202.x/253/
[08:27:33] <doesallmagic2> Project jQuery Migrate 1.x Core 1.x build #450: UNSTABLE in 18 min: http://jenkins.jquery.com/job/jQuery%20Migrate%201.x%20Core%201.x/450/
[09:12:38] <jqcommit> [13jquery] 15markelog opened pull request #3021: Improve support properties computation (06master...06sup) 02https://git.io/vVUVt
[09:28:34] <jqcommit> [13jquery] 15kirly-af closed issue #3019: postMessage events support 02https://git.io/vVvDh
[09:39:01] <jqcommit> [13jquery] 15markelog closed issue #3012: SCRIPT5007: Unable to get property 'expando' of undefined or null reference 02https://git.io/vaSu6
[10:34:52] <jqcommit> [13jquery] 15timmywil opened pull request #3022: Core: set the base href of the context in parseHTML (06master...06parsehtml) 02https://git.io/vVUDG
[11:13:58] <timmywil> gibson042: ping
[11:14:12] <timmywil> I'm trying your suggestion from https://github.com/jquery/jquery/pull/2891#discussion_r51805928
[11:14:43] <timmywil> Mostly working, except execution order is unpredictable
[11:20:03] <timmywil> hmm, tried something and I think it's working
[11:24:12] <timmywil> think I got it https://github.com/jquery/jquery/pull/2891
[11:37:32] <gibson042> timmywil: the last 3 commits?
[11:37:38] <timmywil> yea
[12:06:48] <arschmitz> Im seeing something weird in the jQuery Mobile tests only on core git hoping someone can enlighten on
[12:07:05] <arschmitz> We have a deferred which resolves with 4 values works fine in all released versions of core
[12:07:28] <arschmitz> in git a .then attached resolves with an array of values instead of seperate argument values
[12:17:36] <jqcommit> [13api.jquery.com] 15dmethvin opened issue #903: Document new 3.0 parseHTML behavior 02https://git.io/vVTfo
[12:17:44] <arschmitz> timmywil: DaveMethvin: any of you have any thoughts? 
[12:18:21] <DaveMethvin> sounds like the Promise/A compat
[12:18:34] <DaveMethvin> you're only allowed to resolve with a single value
[12:18:38] <DaveMethvin> it can be an array or object tho
[12:18:50] <DaveMethvin> or you can use .done, .always, etc
[12:18:54] <DaveMethvin> which are back-compat
[12:19:26] <arschmitz> seems like a pretty breaking change for deferred 
[12:19:47] <gibson042> our .then didn't match spec
[12:19:47] <DaveMethvin> that's why it's a 3.0, but you can again get the old behavior back with .done etc
[12:21:14] <arschmitz> @gibson042 @DaveMethvin fair enough but many of our methods don't match spec and we don't change them seems like a big policy change on the part of core
[12:21:29] <gibson042> absolutely
[12:21:39] <DaveMethvin> that's what our promise/a+ compat was about tho
[12:21:43] <gibson042> there was just a big fuss about this one because Promises duck-type
[12:21:51] <DaveMethvin> the rest of the world expects .then() to do a different thing
[12:22:16] <DaveMethvin> you can get the old thing back with just some simple changes, doesn't require rewriting logic
[12:23:14] <arschmitz> yeah thats fine just pointing out these is inconsistent with what has always done for these cases
[12:23:39] <arschmitz> the "rest of the world" expects many things we dont do lol
[12:24:11] <DaveMethvin> the major versions are our change to change and break things ... i think we've done better than many at giving people bridges to make old code work with very little hassle
[12:24:53] <jqcommit> [13jquery] 15markelog closed pull request #3021: Improve support properties computation (06master...06sup) 02https://git.io/vVUVt
[12:25:41] <arschmitz> DaveMethvin sure but i also think part of why jQuery has been so successful is we don't make breaking changes in general api stability  has trumped 
[12:26:09] <DaveMethvin> to borrow a phrase from ember, stability without stagnation
[12:26:32] <DaveMethvin> do you think it will be a lot of work to fix this in Mobile?
[12:26:37] <arschmitz> no not at all
[12:26:40] <DaveMethvin> ok
[12:27:08] <arschmitz> it only effects a single call its not a big deal at all for us specificly
[12:27:25] <arschmitz> just curious how much code this will break 
[12:27:37] <arschmitz> not sure how common use of deferreds really is though
[12:28:08] <DaveMethvin> it would be great if we knew too :)
[12:28:16] <DaveMethvin> i think 90 percent is ajax
[12:28:24] <arschmitz> yeah i would guess
[12:28:27] <DaveMethvin> but 87 percent of the time i just make up stats
[12:28:45] <arschmitz> 20% of the time i believe them
[12:28:54] <DaveMethvin> :)
[12:28:55] <arschmitz> ( also made up stat )
[12:29:56] <arschmitz> its kinda a past coming back to haunt you thing no matter how much you say 3.0 people dont expect large breaking changes
[12:30:05] <gibson042> fortunately, the fix is dead simple: old behavior still exists in done, which is synonymous with then in 1.x/2.x
[12:30:06] <arschmitz> and that its a new major so its not backcompat
[12:30:45] <arschmitz> people will expect typical jQuery behavior of maintaining backcompat
[12:31:18] <doesallmagic2> Project jQuery Core build #1565: STILL UNSTABLE in 6 min 40 sec: http://jenkins.jquery.com/job/jQuery%20Core/1565/
[12:31:18] <doesallmagic2> * markelog: Build: add "Support" module to commitplease list
[12:31:19] <doesallmagic2> * markelog: Support: improve support properties computation
[12:31:41] <DaveMethvin> we have several things we're doing there including an upgrade guide, old methods keep old behavior, and Migrate. If anything this is less disruptive than 1.8-->1.9
[12:31:49] <DaveMethvin> at least in today's world where people use npm and Bower
[12:32:04] <DaveMethvin> since it is using semver properly
[12:32:49] <arschmitz> DaveMethvin that is true npm helps
[12:32:55] <arschmitz> and that /1 is gone
[12:33:00] <snover> npm unpublish jquery
[12:33:01] <arschmitz> or well not gone but not updated
[12:33:01] <snover> dâ€™oh
[12:33:04] <DaveMethvin> lol
[12:33:25] <arschmitz> and anything you do to get the message out about changes too for sure
[12:33:49] <arschmitz> to be very clear im in no way against the change it self much prefer promise compatibility
[12:34:09] <arschmitz> just talking about community effect this didnt even break mobile directly only a test
[12:34:21] <arschmitz> the lib it self was not effected
[12:34:28] <DaveMethvin> that's good too
[12:35:04] <DaveMethvin> i'm sure there are some heavy deferred users but for many ajax calls the .then() will work close enough that code won't break
[12:36:24] <arschmitz> DaveMethvin the thing that will hurt you with ajax
[12:36:25] <arschmitz> is examples like this 
[12:36:27] <arschmitz> https://api.jquery.com/jquery.when/
[12:36:33] <arschmitz> first one
[12:36:41] <arschmitz> shows then resolving an ajax call with the args
[12:37:08] <arschmitz> if people have copied examples like this 
[12:37:33] <DaveMethvin> yeah, that would break but it's not even a good example so it should be updated
[12:37:40] <DaveMethvin> notice it's not handling the errors at all
[12:37:46] <DaveMethvin> 404 will silently fail
[12:37:49] <arschmitz> yup
[12:38:00] <arschmitz> just saying we have examples out there that will break 
[12:38:06] <DaveMethvin> agreed
[12:38:10] <arschmitz> and examples from api are far more likely to be copied
[12:38:19] <DaveMethvin> to some extent we'll just have to wait and see what they are
[12:38:26] <DaveMethvin> can you open a ticket for that one on .when()?
[12:38:44] <arschmitz> yeah a beta / alpha will reveal to an extent the number of effected
[12:38:47] <arschmitz> sure
[12:44:58] <jqcommit> [13api.jquery.com] 15arschmitz opened issue #904: Ajax example on when docs will fail with git build / 3.0 02https://git.io/vVTtJ
[12:47:49] <arschmitz> DaveMethvin so . done is getting the array too
[12:48:28] <DaveMethvin> you mean the behavior changed btwn 2.x and 3.0 for .done()?  ping gibson042 
[12:49:26] <arschmitz> yes
[13:02:19] <gibson042> no, .done() should be _identical_
[13:09:16] <DaveMethvin> arschmitz: can you post a jsbin or gist?
[13:24:17] <arschmitz> https://github.com/jquery/jquery-mobile/blob/master/js/transitions/transition.js#L64 is where its resolved. 
[13:25:18] <arschmitz> and here is the then / done https://github.com/jquery/jquery-mobile/blob/master/tests/unit/transitions/transitions_core.js#L81
[13:25:43] <arschmitz> DaveMethvin gibson042 ^^
[13:26:34] <arschmitz> changing that .then to .done made no difference
[13:27:57] <DaveMethvin> really you don't need $.when() around that since you're not joining multiples
[13:28:22] <DaveMethvin> in 3.0 if you only have one we don't re-use the incoming one because it may not be one of ours
[13:28:48] <DaveMethvin> can you use `instance.deferred.done( ... ) ` there?
[13:29:32] <DaveMethvin> see this doc: https://docs.google.com/document/d/1QLkXfuhsFAppsZbi_8UJV0LxjNKaQfHwXmSR5GLVWX4/edit#heading=h.vrh9xyysip9r
[13:29:52] <DaveMethvin>  section "$.when() inputs and progress notifications"
[13:30:25] <arschmitz> @DaveMethvin so its not really simple backcompat then
[13:30:42] <arschmitz> its more then "just use the old method"
[13:30:44] <DaveMethvin> well i want to be sure that a direct .done() does work
[13:30:50] <DaveMethvin> you're using $.when
[13:30:50] <arschmitz> just a sec
[13:31:29] <arschmitz> DaveMethvin it does not
[13:31:35] <arschmitz> it resolves with no value
[13:31:54] <DaveMethvin> ok then let's see if gibson042 has more insight
[13:32:22] <gibson042> I'll have a little bit of time this afternoon... can someone point me at a single page showing what's happening and what's expected?
[13:32:40] <DaveMethvin> arschmitz: can you do a little jsbin with that?
[13:32:45] <arschmitz> DaveMethvin gibson042 sorry it does with directly with .done
[13:32:57] <arschmitz> had a typo
[13:34:17] <arschmitz> DaveMethvin gibson042  so forget my specific case though what would be the backcompat way to do with with when?
[13:34:24] <DaveMethvin> ok so it works with a direct .done() but breaks when it's $.when( deferred ).done( function( a,b,c ) ) in that b and c 
[13:34:40] <DaveMethvin> are part of an array rather than individual args?
[13:34:49] <arschmitz> DaveMethvin right instead you get a as [ a, b, c ]
[13:34:53] <DaveMethvin> ok
[13:35:16] <arschmitz> its 2 strings, 2 jquery objects, and a boolean
[13:35:25] <arschmitz> 5 values
[13:47:52] <arschmitz> DaveMethvin also the example i point out on .when
[13:47:58] <arschmitz> is the exact same usage
[13:48:07] <arschmitz> single deferred
[13:48:18] <arschmitz> multiple value resolution
[13:49:36] <DaveMethvin> This summarizes it right arschmitz ? http://jsbin.com/civaxelixa/edit?html,console
[13:50:05] <arschmitz> DaveMethvin yup i think so
[13:50:31] <DaveMethvin> ok gibson0421 is this what we want?
[13:52:26] <gibson0421> yes, and that looks like a jQuery.when bug
[13:53:53] <DaveMethvin> oh if there were two deferreds we'd get two arrays of args bacck?
[13:54:09] <DaveMethvin> it was the special casing of the single deferred
[14:00:48] <gibson0421> this is that thing I've been harping on for a while... `$.when( singleArg )`Â is analogous toÂ `Promise.cast( singleArg )`Â andÂ `$.when( arg1, arg2, ... )`Â is analogous to `Promise.all([ arg1, arg2, ... ])`: https://github.com/jquery/jquery/issues/2018#issuecomment-70531678
[14:01:15] <gibson0421> I think we should just implement the functions separately and let `jQuery.when` choose between them by arguments.length
[14:07:00] <arschmitz> if your going to make a change making it closer to promise compliance would be best
[14:07:26] <gibson0421> oh, if only
[14:12:23] <DaveMethvin> to me it's frustrating because the examples with a single arg don't even need $.when() anyway
[14:12:36] <DaveMethvin> the current behavior is consistent regardless of the number of args which is good
[14:13:05] <arschmitz> DaveMethvin but for how long has that been the first example people see when looking at the .when docs?
[14:13:19] <DaveMethvin> they can just unwrap it to
[14:13:19] <arschmitz> and we put it there
[14:13:20] <DaveMethvin> tho
[14:13:39] <DaveMethvin> $.when( x ).done   is x.done ?
[14:14:04] <arschmitz> right but the point is thats going to be out there in the wild a lot
[14:14:18] <DaveMethvin> ppl can update the code before they upgrade
[14:14:23] <arschmitz> because it the first example we have shown people for a very long time
[14:14:25] <DaveMethvin> it's a mechanical change
[14:14:34] <DaveMethvin> if it involved rewriting logic i'd be more concerned
[14:14:42] <gibson0421> that's just it, the current behavior _isn't_ consistent
[14:15:06] <gibson0421> jQuery.when is really two different functions
[14:16:44] <DaveMethvin> $.when(arg) isn't Promise.all([arg]) you mean?
[14:18:12] <DaveMethvin> we have a kind of extra problem here because normal Promise/A+ doesn't allow resolving with multiple arguments
[14:19:13] <gibson0421> correct on both
[14:20:33] <gibson0421> https://github.com/jquery/jquery/issues/2018#issuecomment-70524248 for a little more detail
[14:28:13] <arschmitz> DaveMethvin and even mechanical updates can be major problems when you talk plugins
[14:28:35] <arschmitz> or deeply nested code
[14:28:40] <DaveMethvin> arschmitz: so should we just drop 1.x and keep putting out non-breaking 2.x
[14:28:42] <DaveMethvin> ?
[14:29:24] <DaveMethvin> we get plenty of complaints about how Deferred isn't Promise/A+
[14:30:25] <DaveMethvin> right now we do both, we offer Promise/A+ on the standard .then() but still let ppl do the old stuff on .done() etc
[14:30:29] <arschmitz> DaveMethvin: thats not what im suggesting at all but using your .on example how long did the event aliases remain before being removed
[14:30:48] <arschmitz> while deprecated
[14:30:51] <DaveMethvin> we can't implement proper .then() without changing .then()
[14:31:00] <arschmitz> this is still the current first example in the docs
[14:31:15] <DaveMethvin> yes it's a kind of fake example and we should rewrite it
[14:31:40] <DaveMethvin> but $.when( single_deferred ).then is a waste of $.then afaict
[14:31:47] <DaveMethvin> it doesn't DO anything
[14:31:57] <DaveMethvin> so the example was basically junk from the start :)
[14:32:00] <arschmitz> fair enough but changing without a deprecation period 
[14:32:17] <gibson0421> I agree, single-argument when is useful only when you might not have a thenable
[14:32:17] <arschmitz> DaveMethvin if you read what gibson0421 is saying i dont think thats correct
[14:32:23] <DaveMethvin> we've been publishing messages about this for a year on the blog
[14:32:50] <DaveMethvin> so there has certainly been discussion and great rejoicing we were getting in line with Promise/A+
[14:33:00] <DaveMethvin> and it's a3.0
[14:33:01] <arschmitz> i think the number of people who read the docs vs the blog is substantial 
[14:33:16] <DaveMethvin> there will always be errors in the docs
[14:33:25] <arschmitz> its not an error
[14:33:30] <arschmitz> it has worked as intended
[14:33:37] <DaveMethvin> it is given our statements over the past year
[14:33:38] <arschmitz> your changing the intended behavior
[14:33:45] <DaveMethvin> yes, 3.0
[14:34:14] <DaveMethvin> i can't apologize enough for the bad example but we can't say, "whoops restart the deprecation clock b/c we had a docs error"
[14:34:30] <DaveMethvin> it definitely needs to be fixed
[14:52:26] <gibson042> we did not change the intended behavior of jQuery.when( maybeThenable ).done; that still looks like a bug to me
[14:52:28] <gibson042> what we changed was the intended behavior of deferred.then
[14:54:14] <DaveMethvin> my point was that the example with a single deferred in the docs was a really bad example, we shouldn't have those because it encourages ppl to write dumb code
[14:54:20] <gibson042> +1
[14:54:27] <DaveMethvin> like $.when( $.ajax( ...) ).then( ... ) 
[14:54:38] <DaveMethvin> thinking that somehow they  need the extra wrapper
[14:55:36] <DaveMethvin> gibson042 if you could look at that one it would be awesome, I'm trying to get a bunch of migrate tix done now
[15:24:50] <jqcommit> [13jquery-migrate] 15dmethvin closed issue #88: Deprecated Ajax methods removed. 02https://git.io/NY4Q
[15:27:29] <doesallmagic2> Project jQuery Migrate 3.x build #35: SUCCESS in 2 min 51 sec: http://jenkins.jquery.com/job/jQuery%20Migrate%203.x/35/
[15:27:30] <doesallmagic2> Dave Methvin: Ajax: Warn and fill the jQXHR .success, .error, and .complete methods
[15:36:07] <jqcommit> [13jquery-migrate] 15dmethvin opened pull request #163: Core: Warn and fill jQuery.unique to jQuery.uniqueSort (06master...06105-unique) 02https://git.io/vVTSL
[18:12:17] <jqcommit> [13jquery-migrate] 15dmethvin pushed 1 new commit to 06master: 02https://git.io/vVkcG
[18:12:17] <jqcommit> 13jquery-migrate/06master 140444903 15Dave Methvin: Build: Update migrateVersion to 3.0.0-pre
[18:14:33] <doesallmagic2> Project jQuery Migrate 3.x build #36: SUCCESS in 2 min 27 sec: http://jenkins.jquery.com/job/jQuery%20Migrate%203.x/36/
[18:14:34] <doesallmagic2> Dave Methvin: Build: Update migrateVersion to 3.0.0-pre
[20:03:14] <jqcommit> [13jquery-migrate] 15dmethvin opened pull request #164: Core: Ensure jQuery 3.0+ and only one Migrate is loaded (06master...06115-only3) 02https://git.io/vVkKp
[20:07:02] <jqcommit> [13jquery-migrate] 15dmethvin closed issue #120: Document release strategy  02https://git.io/vWK28
[21:28:52] <jqcommit> [13jquery-migrate] 15dmethvin opened pull request #165: Core: Warn and fill jQuery.expr.filters and [":"] (06master...06146-pseudos) 02https://git.io/vVk9T
[22:07:35] <jqcommit> [13jquery-migrate] 15dmethvin opened pull request #166: Event: Add triggering for "ready" event (06master...06136-ready) 02https://git.io/vVk5t
