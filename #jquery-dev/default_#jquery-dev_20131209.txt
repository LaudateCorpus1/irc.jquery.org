[08:50:26] <doesallmagic2> Project jQuery Migrate Core 1.x build #138: FAILURE in 15 min: http://jenkins.jquery.com/job/jQuery%20Migrate%20Core%201.x/138/
[08:51:24] <DaveMethvin> swarmy, you should take some medicine
[08:57:20] <m_gol> DaveMethvin: do you know if modern.ie images can be used in a company as test machines for remotely connecting with Jenkins?
[08:57:32] <m_gol> I mean: does the licence allow such usage?
[08:57:49] <DaveMethvin> i think so, as long as it's for testing
[08:58:18] <DaveMethvin> i thought at least some of the images restart after an hour of continuous operation
[08:58:30] <DaveMethvin> so you would need to take that into account when automating
[08:58:57] <m_gol> ok, thx :)
[09:56:28] <Krinkle> ( http://www.paulirish.com/2013/webkit-for-developers/ )
[09:57:26] <m_gol> Krinkle: this post is a little obsolete since now Opera & Chrome are just Blink and it doesn't have so many build options, if any
[09:57:30] <m_gol> but yeah, I get it
[09:57:35] <m_gol> it's better to test it
[09:58:03] <m_gol> markelog mentioned Karma, can you comment on that, Krinkle?
[09:58:19] <Krinkle> I know the specific WebKit part is outdated, but it does expose the general story line that I think is still a good guideline. 
[09:58:42] <m_gol> yeah, no argument here :)
[09:59:40] <Krinkle> We already established a while back that we should support the older Safari version, so yeah, should definitely not be 7.0 only
[09:59:54] <Krinkle> I mean, of course consensus can change, but it was a fairly major thread at the time.
[10:00:02] <m_gol> who said about 7.0 only? :)
[10:00:13] <Krinkle> (I'm catching up with the thread in -meeting)
[10:00:14] <m_gol> it's clearly stated here: http://jquery.com/browser-support/ we support Safari 5.1+
[10:00:42] <m_gol> so we should test 5.1, 6.0 & 7.0 (maybe also 6.1 but it seems its engine is the same as 7.0 so that might not be important - but not sure here)
[10:00:58] <Krinkle> Yes, that wasn't always there. LAst time we discussed it (I think I started that discussion), we concluded to support 5.1+ and that was added.
[10:01:19] <m_gol> I know, I was there :)
[10:02:23] <Krinkle> I'm not going to explain the thing around Karma again, Oleg, JÃ¶rn and I have each discussed it various times in depth. I'd rather focus on making it happen.
[10:03:09] <m_gol> ok, I'll leave it to you then, I'm not very familiar with particular problems
[10:03:10] <Krinkle> there are a zillion frameworks out there around the general thing that TestSwarm is doing, and we do indeed want to move away from TestSwarm to something more lightweight that works fully through Grunt and locally, with the option to use either local browsers or browserstack/saucelabs.
[10:03:30] <Krinkle> Karma is one of the many.
[10:03:47] <Krinkle> See also https://github.com/jquery/infrastructure/issues/212
[10:04:47] <Krinkle> The main issue is that karma seems too encompassing of a framework in that it assumes files are static and can do with a simple node-connect local server that is teared down afterwards. 
[10:05:15] <Krinkle> So we'll need to be able to replace that part of karma with a temporary server of our own that does our php execution, or a replacement of that through nodejs, but not static files.
[10:05:36] <markelog> "replacement of that through nodejs" +1
[10:05:40] <Krinkle> Or perhaps consider mocking the ajax tests client-side on a low-as-possible level in XHR.
[10:06:11] <markelog> we can't remove all ajax tests, some of them as to be real
[10:06:12] <markelog> at least
[10:06:32] <Krinkle> However that replacement is, though relatively simple to make, the key is in mobility. We want it to still be as easy as possible to test it locally in your browser by e.g. just mounting the directory in your generic local dev apache/nginx, if possible.
[10:06:36] <m_gol> yes, otherwise we can't test how we're dealing with various browser bugs around that
[10:07:11] <Krinkle> But we may have to give that up (thing is, apache/mod_php is ubiquitous, jhp or the like are not)  
[10:07:25] <markelog> Krinkle: when you can start working on that?
[10:07:54] <Krinkle> cross browser testing can still work the same, grunt-whatever will just output the local port in the console, and you can open that in your browser or through whatever cross-browser site with tunnel you happen to be using
[10:07:56] <timmywil> krinkle: have you seen https://github.com/angular/protractor ? Seems to be the angular team's solution for the kind of testing we do.
[10:08:19] <m_gol> though Angular-only
[10:09:01] <Krinkle> I'm no longer interested in looking into other frameworks to replace testswarm aside from Karma. At the very least, the burdon of proof for me is now on the suggester's end. All outstanding requests and nice-to-haves that I could imagine would be satisfied with Karma. So..
[10:09:27] <timmywil> true, but could be a useful resource if we decide to undergo converting our test scaffolding to work with karma
[10:09:35] <Krinkle> spend on-and-off 2 months looking for something, and Karma seems a good fit. I'm open to anything though, we haven't comitted yet, and even if we had, something better is always welcome.
[10:09:48] <m_gol> timmywil: Protractor is not meant to be used with Karma
[10:10:23] <m_gol> the Angular team uses the Karma runner for their Jasmine unit tests and Protractor for their e2e tests
[10:13:18] <markelog> Krinkle: I wounder when you could start? I will have time at the end of december, you goona start sooner then that date?
[10:13:32] <markelog> or later?
[10:13:49] <timmywil> m_gol: yea, my mistake
[10:13:56] <Krinkle> markelog: I'm mostly unavailable during holidays. I'll spend the remaining time of 2013 updating all our browsers to the latest possible versions and working on QUnit.Assertion/QUnit.Test
[10:15:33] <markelog> Krinkle: do you mind if could take a crack at it?
[10:16:01] <markelog> and then you could fully criticize the results :-)
[10:16:39] <Krinkle> markelog: sure
[10:16:58] <markelog> all right, great!
[10:17:04] <timmywil> What were the solutions proposed for ajax testing?
[10:17:41] <m_gol> I'm going to paste some comments from here to the ticket
[10:18:06] <Krinkle> timmywil: Either we set up something during grunt run that is like apache (in that it can run php), so we keep the current ones (though they could use clean up nonetheless)
[10:18:08] <Krinkle> timmywil: or
[10:18:38] <timmywil> or convert to JS for use in a connect server, I would guess
[10:18:46] <Krinkle> timmywil: we convert them to nodejs-based, and add a grunt task that sets up a server that serves static files and can also deal with this subset of files being executed dynamically
[10:18:57] <markelog> that's what i wanted to do
[10:19:08] <Krinkle> But the latter is not an option in the current set up because of how our Jenkins/TestSwarm infrastructure works
[10:19:26] <Krinkle> that second option can only work if we're fully in a grunt-based run, e.g. once we have karma.
[10:19:41] <Krinkle> and that is assuming karma will be able to deal with a separate server that it doesnt' set up itself.
[10:19:55] <Krinkle> (or otherwise deal with those .nodejs files)
[10:20:13] <markelog> so exciting! :-)
[10:20:29] <paul_irish> m_gol: Krinkle:  opera blink has a LOTT in common with Chrome. way more than webkit ports shared. 
[10:20:40] <paul_irish> still, they do turn on/off feature flags for their distribution
[10:20:41] <Krinkle> markelog: so I would not recommend working on converting the ajax tests because that's a trivial part of the plan and we can't use that now anyway. The bulk of the work is in making karma work (forget abotu the ajax tests for now)
[10:20:56] <paul_irish> but the rendering & GPU side, from what i understand, is totally the same
[10:21:10] <paul_irish> because it's at the chromium level, rather than just the blink level
[10:21:14] <Krinkle> paul_irish: Hey Paul! Yeah, I suppose because it runs Chromium instead of just WebKit (or Blink)
[10:22:14] <m_gol> paul_irish: Hi! The main question was if it's worth to test in Opera Blink separately from Chrome and I guess if there are even very minor differences, it's worth it
[10:22:17] <Krinkle> they still have slightly different builds and UI though. I imagine they have (or might have) also some separate proprietary interfaces (prefixes in CSS and DOM, or special host objects?)
[10:22:22] <m_gol> unless there really are no engine differences
[10:22:40] <paul_irish> m_gol: there arent until there are!
[10:22:42] <Krinkle> They dropped window.opera.
[10:22:48] <paul_irish> but.. yeah. right now there arent. ;)
[10:22:53] <m_gol> paul_irish: true that ;)
[10:22:56] <timmywil> it doesn't hurt to test them
[10:22:57] <Krinkle> paul_irish: That's cool, good to know :)
[10:23:07] <Krinkle> And prefixes are happening much less from now on, I understand.
[10:23:21] <m_gol> it doesn't hurt but it takes Krinkle's time to update Opera as well as the others :)
[10:23:32] <m_gol> until we have the new infrastructure
[10:23:39] <m_gol> that's mostly what I was concerned about
[10:23:41] <timmywil> hopefully we can streamline that process
[10:23:50] <Krinkle> I wonder whether those will be -blink, -chromium, or -chrome / -opera prefixes though, now that it isn't -webkit anymore (other than for back-compat). Do you know what prefix they'll use?
[10:23:52] <m_gol> because once it's tested that's obviously not a problem to have it
[10:23:56] <timmywil> or switch to something else that is streamlined
[10:24:10] <m_gol> Krinkle: the announcement was: no new vendor prefixes
[10:24:13] <paul_irish> Krinkle: no new prefixes at all. in either chrome or opera
[10:24:30] <Krinkle> right, both for CSS and DOM/HTML5?
[10:24:59] <timmywil> don't -blink ;0
[10:25:30] <Krinkle> Don't turn your back. Don't look away. And don't blink. Good Luck.
[10:25:44] <m_gol> :)
[10:26:30] <m_gol> Krinkle: it seems it won't hurt us much if you don't update Opera on TestSwarm, we can always re-add it once we have the new infrastructure if you don't have time
[10:26:47] <m_gol> (we should remove the 15, though, as we don't support it now)
[10:26:56] <Krinkle> No, it's fine. It's a primary browser and we officially support it. It's no hassle to keep it.
[10:27:02] <m_gol> ok
[10:27:04] <Krinkle> I'll update it.
[10:27:48] <m_gol> Krinkle: thanks for your efforts :)
[10:27:49] <Krinkle> Hm.. 12.x is also officially supported?
[10:27:59] <m_gol> yes
[10:28:16] <m_gol> to be more precise, not 12.x but 12.1x
[10:28:24] <m_gol> the problem is, Opera 12.16 doesn't get auto-updated to the Blink version
[10:28:28] <Krinkle> Good I checked it just now, the only reason it is on testswarm right now because 15 was current, and 12.x current-1
[10:28:35] <Krinkle> I was going to remove it, but I'll keep it then :)
[10:28:39] <Krinkle> yeah
[10:28:46] <m_gol> and even if you manually check for updates there is no indication there is any newer version than 12.16
[10:29:00] <m_gol> the only way to update is to manually download the installer from opera.com
[10:29:01] <m_gol> which is sad
[10:29:26] <m_gol> but I understand the reasons, they want to avoid angry users unless they port most important functionality from Presto to their new version
[10:29:49] <m_gol> Krinkle: when in doubt, the list under http://jquery.com/browser-support/ is accurate :)
[10:30:26] <m_gol> we'll have 3 Operas for now
[10:31:11] <m_gol> k, gotta go, thanks for explanations
[17:05:43] <doesallmagic2> Project QUnit build #339: UNSTABLE in 15 min: http://jenkins.jquery.com/job/QUnit/339/
[17:46:49] <doesallmagic2> Project QUnit build #340: STILL UNSTABLE in 15 min: http://jenkins.jquery.com/job/QUnit/340/
