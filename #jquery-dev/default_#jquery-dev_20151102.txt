[11:52:56] <sizcommit> [13sizzle] 15gibson042 closed issue #279: Failure on IE 11, can't create selector 02http://git.io/BL3hdg
[12:02:46] <jqcommit> [13jquery] 15timmywil opened pull request #2684: Ajax: trigger error callback on native abort (06master...06abort-2079) 02http://git.io/vlwRW
[12:04:11] <m_gol> timmywil: meeting?
[12:04:18] <timmywil> yup
[12:04:25] <DaveMethvin> yay!
[12:49:21] <jqcommit> [13jquery.com] 15mzgol pushed 1 new commit to 06jquery-3: 02http://git.io/vlwNB
[12:49:21] <jqcommit> 13jquery.com/06jquery-3 1467fe3c9 15MichaÅ‚ GoÅ‚Ä™biowski: Browser support: Remove Compat, add Android 2.3 note...
[13:07:04] <timmywil> gibson042: I think some of the table addresses user-defined vs. jQuery-defined inline displays
[13:07:18] <gibson042> right, but not a full round-trip
[13:08:19] <timmywil> well, you could infer that from .show().hide(), depending on whether a value was saved
[13:08:57] <gibson042> only if you "save" a value when you introduce it
[13:09:12] <gibson042> right now, it only reference saving on hide
[13:09:30] <gibson042> and anyway, the tests should cover those cases
[13:09:38] <timmywil> right, but would you ever need to save on show?
[13:10:00] <gibson042> you do if you don't want the subsequent .hide() to take your value as user-specified
[13:10:29] <timmywil> which could also be inferred on whether you save on hide
[13:10:57] <gibson042> how could it possibly be /inferred/ whether a display: block was set by user or added by .show()?
[13:11:34] <timmywil> that's not what I mean. I mean the current table defines whether or not we need to make that distinction
[13:12:18] <gibson042> I don't think so, because it never mentions save on .show()
[13:12:26] <gibson042> and anyway, the goal is translating it into tests
[13:12:36] <gibson042> so it should include round-trip cases
[13:12:50] <timmywil> for instance, if .show().hide() doesn't save, it means we need to keep track of user-defined vs. jQuery-defined
[13:13:40] <timmywil> or, at least it means we need to make sure that we don't save our inline value
[13:15:10] <timmywil> so, if we have a cascade-hidden <div>test</div>, calling .show() sets an inline value. If we say .show().hide() doesn't save, that tells us what we need to know.
[13:15:51] <gibson042> I'm not sure what you're arguing
[13:16:14] <jqcommit> [13jquery] 15dmethvin pushed 1 new commit to 06master: 02http://git.io/vlrLm
[13:16:14] <jqcommit> 13jquery/06master 1470605c8 15Dave Methvin: Ajax: Only form-encode requests with a body...
[13:16:16] <gibson042> from my perspective, inferences are what created this mess, and my goal is a completely explicit table for 1:1 translation into test cases
[13:16:32] <timmywil> just that 2 more columns don't provide any more information on expected behavior
[13:16:39] <gibson042> they definitely do
[13:17:08] <gibson042> you can't assert that a jQuery-introduced value wasn't saved unless you invoke the operation that would have different behavior for saved vs. not saved
[13:18:06] <timmywil> you can, tho, since we're including whether or not something was saved in the table values
[13:18:26] <gibson042> the css assertions have no access to that
[13:18:33] <scott_gonzalez> I'll fill in the new columns today.
[13:18:53] <scott_gonzalez> Also, do you need an easy way to filter out cherry-picked commits for your commit lists?
[13:18:58] <timmywil> I can tell you exactly what will happen on .show().hide().show() based on what's already there, and that's the only way it *could* work based on current values.
[13:20:08] <scott_gonzalez> Yes, you can derive the values for the new columns based on the existing columns.
[13:20:28] <scott_gonzalez> But if gibson042 wants them filled in for completeness, I'm happy to fill them in.
[13:21:18] <timmywil> ok, if it makes things easier to understand
[13:21:31] <scott_gonzalez> Anyway, if you need a way to filter out cherry-picked commits: https://gist.github.com/scottgonzalez/33cf8d4b350f11fa954f
[13:22:00] <gibson042> timmywil: that is definitively false. Consider .show().hide().show() on a cascade-hidden div
[13:23:01] <scott_gonzalez> I think gibson042's point is that depending on the implementation, the values in the new column CAN be different.
[13:23:09] <gibson042> correct
[13:23:14] <scott_gonzalez> And timmywil's point is that based on the current values, nothing will be different.
[13:23:32] <scott_gonzalez> But the important part is that we don't yet have consensus on the current values.
[13:23:43] <scott_gonzalez> So the fact that they *can* be different is important.
[13:23:45] <timmywil> keep going gibson042 
[13:24:33] <timmywil> trying to understand how it could be different
[13:25:15] <scott_gonzalez> I think gibson042 is specifically interested in the cascade none, no inline case.
[13:25:23] <jqcommit> [13jquery] 15mzgol closed issue #2676: Data: Feature detect and use `Symbol` if present 02http://git.io/vWya7
[13:25:28] <gibson042> that's a particularly sensitive one
[13:25:59] <timmywil> based on what's in the table, I'd expect to set the saved value, which is "default based on element name"
[13:26:03] <gibson042> we haven't even talked about cascade changes, which highlight the potential flaws
[13:26:07] <scott_gonzalez> But I'm fairly certain there's no sane thing to do other than what's already documented.
[13:26:54] <scott_gonzalez> Cascade changes are certainly the more interesting area.
[13:27:22] <scott_gonzalez> BUT, before we can discuss that, I think we need to be able to list an actual use case for each scenario that involves as a cascade change.
[13:27:56] <timmywil> One use case would be if the viewport size changes
[13:28:05] <scott_gonzalez> Because those scenarios are definitely more complex and we'll need to understand the user's expected behavior.
[13:29:20] <timmywil> but I'm ok with not worrying about that for cascade none
[13:30:27] <gibson042> I don't think we have the luxury of not worrying about a case
[13:31:03] <timmywil> ok, when I say, not worrying, I mean we don't respect the cascade changing in that case
[13:31:16] <timmywil> otherwise, we'd need a resize handler
[13:32:00] <timmywil> but we can respect cascade changes by not setting an inline display on show whenever possible
[13:32:26] <gibson042> if I show a cascade-none, then hide it, then the cascade changes from none to block, what is a reasonable expectation?
[13:32:35] <timmywil> that it stays hidden
[13:32:39] <timmywil> cause I hid it
[13:33:00] <gibson042> and then what should it be upon .show()
[13:33:08] <scott_gonzalez> What element is it?
[13:33:27] <scott_gonzalez> Because we're in the default display scenario.
[13:33:51] <scott_gonzalez> Also, why was .show() called on it while it was cascade hidden?
[13:33:51] <timmywil> if cascade is now block, then we'd end up showing by removing the inline display: none, but that's ok
[13:34:34] <gibson042> "why was .show() called on it while it was cascade hidden?" because we're back to supporting that case
[13:34:52] <scott_gonzalez> timmywil: Actually, we would have stored the inline display from the .show() call at the time that .hide() is called.
[13:35:05] <gibson042> and THAT is what we shouldn't do
[13:35:06] <scott_gonzalez> And the second .show() call (after the cascade change) would restore the saved value from the first .show() call.
[13:35:07] <gibson042> IMO
[13:35:10] <timmywil> scott_gonzalez: it was cascade none at the time
[13:35:11] <scott_gonzalez> And that's what gibson042 is asking about.
[13:35:26] <timmywil> scott_gonzalez: no value was saved
[13:35:28] <scott_gonzalez> Yes, it was cascade none, but we put an inline block.
[13:35:39] <scott_gonzalez> Ok, here are the steps
[13:35:51] <scott_gonzalez> cascade none, no inline
[13:35:56] <timmywil> oh, unless you called show first
[13:36:04] <scott_gonzalez> .show() is called -> inline "display: block"
[13:36:08] <timmywil> yea
[13:36:11] <scott_gonzalez> .hide() is called -> save "block"
[13:36:17] <scott_gonzalez> .show() is called -> restore from saved value.
[13:36:27] <scott_gonzalez> And now we're ignoring the new cascade value.
[13:36:29] <timmywil> ya, I was thinking of .hide().show()
[13:36:37] <timmywil> with a cascade change between
[13:36:54] <scott_gonzalez> gibson042: "We're back to supporting that case" There isn't a case I'm aware of for this though.
[13:37:09] <scott_gonzalez> One in which you call .show() on a cascade hidden element AND THEN change the cascade.
[13:37:38] <scott_gonzalez> I'm well aware of the use case for .show() on a cascade hidden element. But not for simultaneously doing that and changing the cascade.
[13:37:42] <timmywil> I think gibson042 was talkinga bout showing cascade-hidden on .show() in the first place
[13:37:53] <timmywil> current master does not
[13:38:01] <scott_gonzalez> Right, but that's a fairly common thing to do.
[13:38:10] <timmywil> right, which is why we're back to supporting it
[13:38:24] <scott_gonzalez> The question is do we know of a use case for that + cascade changes.
[13:38:32] <timmywil> the cascade change is more hairy, ya
[13:38:46] <scott_gonzalez> We know of use cases for the two scenarios individually.
[13:39:22] <gibson042> I can't think of a plausible justification for combining them
[13:39:28] <gibson042> at least, not at the moment
[13:39:51] <scott_gonzalez> So without a known use case, if the result is that we restore our own inline styles (not the user's inline styles) in that case, I think it's fine.
[13:40:10] <scott_gonzalez> Until we know of a use case so we can justify a different behavior.
[13:40:24] <scott_gonzalez> Because any other behavior requires additional logic.
[13:40:33] <timmywil> Anyway, I like what's there. It means we don't need to save user-defined vs. jQuery-defined, and still has some improvements for responsiveness.
[13:41:11] <timmywil> and I still think I can infer what would go in the 2 extra columns
[13:41:18] <scott_gonzalez> And honestly, if we find out about a use case that would change this, I don't think we'd cause regressions for any users by implementing special handling.
[13:41:20] <timmywil> but I don't mind having them
[13:41:28] <timmywil> anymore
[13:42:13] <scott_gonzalez> Because at that point, we're just adding more "smarts" to the implementation. We're not imposing any new restrictions like master does.
[13:42:55] <timmywil> gibson042: what do you think of the way it's filled in now?
[13:43:06] <gibson042> I'm only halfway through
[13:43:11] <gibson042> so far, so good
[13:43:14] <timmywil> ah, ok
[13:43:17] <timmywil> brb
[20:48:38] <jqcommit> [13jquery] 15arvstract opened issue #2685: JQuery 1.11.3 Memory Leak on IE8 02http://git.io/vl6Oz
