[04:36:20] <JamesMGreene> Krinkle|detached jzaefferer Very confused
[04:36:52] <JamesMGreene> My QUnit fork is theoretically in sync with upstream but I have repo diffs, e.g. the existence of a test/suite.js file
[04:36:58] <JamesMGreene> Any ideas...?
[04:38:35] <JamesMGreene> did `git fetch upstream`, `git merge upstream/master` == good, `g log HEAD...FETCH_HEAD` == nothing, etc. o_O
[04:39:06] <JamesMGreene> at this point I would normally just delete my local repo but I have lots of branches I still need for the addons
[05:04:40] <jzaefferer> JamesMGreene: did you try a reset? `git reset —hard origin/master` (or upstream master, if origin is still your own repo)
[05:05:44] <ben_alman> Krinkle|detached JamesMGreene https://github.com/gruntjs/grunt-cli#installing-grunt-cli-locally
[05:18:38] <JamesMGreene> thanks ben_alman
[05:18:44] <ben_alman> np
[05:18:48] <JamesMGreene> "Note: Using grunt-cli in this way is unsupported." LOL, yay =)
[05:20:20] <JamesMGreene> after hard reset:
[05:20:45] <JamesMGreene> # On branch master
[05:20:46] <JamesMGreene> # Your branch and 'origin/master' have diverged,
[05:20:46] <JamesMGreene> # and have 1 and 219 different commits each, respectively.
[05:20:46] <JamesMGreene> #
[05:20:46] <JamesMGreene> nothing to commit, working directory clean
[05:21:17] <JamesMGreene> latest commit in `git log` is still from January :-/
[05:23:05] <JamesMGreene> oh wait
[05:23:15] <JamesMGreene> I suppose I have to fetch and merge after the hard reset, eh?
[05:23:31] <JamesMGreene> hmm, or not
[05:31:15] <JamesMGreene> I guess sometimes git is too awesome for me to understand...? =)
[05:33:13] <JamesMGreene> or it's good now...? wat
[05:33:17] <JamesMGreene> k
[06:37:21] <jzaefferer> JamesMGreene: still having trouble?
[06:39:35] <JamesMGreene> Good with git history now, just have 1 JSHint error with our code that I'm inquiring about https://twitter.com/_JamesMGreene/status/309670044856635392
[06:39:35] <b-ot> JamesMGreene: @_JamesMGreene: @valueof @JSHint grunt-contrib-jshint@0.2.0→QUnit: "Expected an identifier and instead saw 'throws' (a reserved word)". Can I disable that?
[06:40:32] <JamesMGreene> disable = relax
[06:42:53] <JamesMGreene> Also, we have no .jshintrc file in the root to use against the Gruntfile.js, should we add one?
[06:43:08] <JamesMGreene> jzaefferer Krinkle|detached
[06:44:13] <JamesMGreene> g2g, leave an answer with the bot
[09:18:00] <JamesMGreene> 'lo
[09:20:35] <JamesMGreene> b-ot nothing for me? :)
[09:26:03] <JamesMGreene> Hey jzaefferer, did you want me to land my own PR, then? https://github.com/jquery/qunit/pull/418
[09:26:03] <b-ot> JamesMGreene: Pull request #418 by JamesMGreene (4d 16h ago): Fixed the extension technique used by QUnit assertion addons
[10:00:48] <JamesMGreene> Krinkle|detached jzaefferer
[10:01:26] <JamesMGreene> May I try enabling the tests for "logs.html" and "step.html"?
[10:01:46] <JamesMGreene> They haven't timed out at all for me since upgrading Grunt and the various Grunt plugins
[10:02:01] <JamesMGreene> So perhaps we will start working on the Jenkins server too...?
[10:02:08] <JamesMGreene> Or should I wait for a subsequent commit?
[10:15:54] <snover> scott_gonzalez: any news on standards track for mspointer?
[10:16:47] <scott_gonzalez> We're at Last Call :-)
[10:17:08] <scott_gonzalez> Comment deadline is March 19.
[10:17:15] <snover> scott_gonzalez: oh, where is the api?
[10:17:20] <scott_gonzalez> http://www.w3.org/TR/2013/WD-pointerevents-20130219/
[10:17:29] <DaveMethvin> so expect apple to comment march 18
[10:17:36] <snover> passive-aggressively
[10:18:11] <scott_gonzalez> There's an ongoing discussion about whether pointerId should be a number as currently spec'd.
[10:18:56] <DaveMethvin> I think pointerid should be a tiny animated gif, encoded base64
[10:18:59] <snover> the alternative being…?
[10:20:00] <scott_gonzalez> An object which requires strict equality comparison.
[10:20:13] <snover> wh
[10:20:19] <snover> i don’t even
[10:20:32] <DaveMethvin> if it's an opaque object, seems kinda strange
[10:20:37] <snover> Reading this API…one would need to self-manage the knowledge of how many pointers are on the screen?
[10:20:44] <snover> like the webkit/apple api has the touches array
[10:20:59] <DaveMethvin> there's gestures as a layer above this tho
[10:21:06] <scott_gonzalez> Correct, you'd need to track that yourself.
[10:21:16] <snover> also I don’t see an API for learning pointer capabilities
[10:21:17] <scott_gonzalez> It'd be nice to have an API for querying how many pointers are currently active.
[10:21:26] <scott_gonzalez> Like how most game developers work with APIs.
[10:21:28] <snover> like “hey someone just plugged in a mouse”
[10:21:37] <snover> “hey this device only has a touch interface”
[10:21:42] <snover> the css4 media spec has some stuff in it for this, kinda
[10:21:46] <snover> media queries*
[10:22:27] <snover> navigator.pointerEnabled, navigator.maxTouchPoints are cool
[10:22:42] <scott_gonzalez> I think the plan is to just delegate to the existing APIs for querying functionality like that.
[10:22:47] <snover> but I also think like a…navigator.pointerDevices
[10:22:48] <snover> or something
[10:22:52] <snover> would be prudent
[10:22:56] <scott_gonzalez> I don't recall any discussions about detecting when a new device becomes available.
[10:23:07] <snover> there are no existing APIs to handle hardware changes
[10:23:14] <DaveMethvin> that can get tricky
[10:23:26] <snover> CSS4 media queries is the closest since the draft says it is supposed to be dynamic
[10:23:36] <snover> but there is not an event that is fired
[10:23:36] <snover> so
[10:23:36] <DaveMethvin> imagine you have two screens, one that is touchy and one not, but the app is currently on the non-touchy screen
[10:24:00] <scott_gonzalez> Well, you generally don't want to be building to specific input devices.
[10:24:07] <DaveMethvin> right
[10:24:23] <snover> sure you do
[10:24:35] <snover> buttons on touch need to be bigger than buttons on mouse
[10:24:42] <DaveMethvin> that's what navigator.userAgent is for :D
[10:24:54] <DaveMethvin> shaky assumptions deserve shaky detects
[10:25:05] <snover> DaveMethvin: considering how different the HIGs are for Android vs iOS, you’re not entirely wrong
[10:25:08] <scott_gonzalez> That's not even a JS concern.
[10:25:32] <snover> i’m just using it as a very concrete example
[10:25:34] <scott_gonzalez> Generally, you can build a UI that works well on both.
[10:25:47] <DaveMethvin> necessity may be the mother of invention here, but responsive designs tend to avoid that need for hw detection
[10:25:54] <snover> no
[10:26:00] <snover> responsive design does not do shit to fix interactivity
[10:26:09] <snover> oh great i can show/hide elements and kinda move them around a little with positioning
[10:26:24] <scott_gonzalez> Right, it's just the fact that many people who are using responsive designs are also designing for touch.
[10:26:25] <snover> that will work great when i need to show extra screens on this app because it is running on a phone
[10:26:47] <DaveMethvin> wait snover i need to ask scott_gonzalez about the other flame war we're in about webcomponents
[10:27:12] <scott_gonzalez> ZOMG, Bronislav's email was insane.
[10:27:15] <DaveMethvin> so scott_gonzalez i can think of some scenarios where groping into a component is a nice thing
[10:27:24] <DaveMethvin> have they never seen any?
[10:27:39] <scott_gonzalez> I dunno.
[10:27:47] <snover> it’s impure!~!!!!~
[10:27:48] <DaveMethvin> like i want to get inside a Disqus wc so that i can implement bozo filters
[10:28:05] <DaveMethvin> or like Gmelius which hacks up the GMail interface
[10:28:14] <DaveMethvin> if that was sealed and opaque it would be impossible
[10:28:19] <DaveMethvin> but it's my damn computer
[10:28:32] <DaveMethvin> nearly all the bookmarklets are breaking the rules today but they're handy
[10:28:41] <snover> i look forward to es6 having private properties
[10:28:52] <DaveMethvin> YOU MONSTER
[10:28:55] <snover> and everyone encapsulates all their apis
[10:28:57] <snover> so nobody can change them
[10:29:10] <snover> because why would you ever need to fix a bug, software is perfect
[10:29:11] <snover> 100%
[10:29:23] <snover> enhancement? only for these blessed APIs
[10:29:48] <scott_gonzalez> It would probably be helpful if one of you replied.
[10:29:52] <DaveMethvin> i completely understand their fear, and i would feel the same if i deployed browsers with lifetimes of months to years
[10:29:55] <DaveMethvin> yeah i'll do that
[10:30:01] <DaveMethvin> i just wanted to run those scenarios by you
[10:30:07] <DaveMethvin> b/c they seemed reasonable to me
[10:30:11] <scott_gonzalez> So that it's not just this one lone crazy web dev who has never used anything other than JS and has no idea what private properties are.
[10:31:12] <scott_gonzalez> It's a shame that I didn't study Comp Sci, or modify my major to require me learning more languages than they typically teach. Oh wait, I did...
[10:31:33] <DaveMethvin> encapsulation is great, until it isn't
[10:31:46] <snover> one of my coworkers loves loves loves using closures
[10:31:56] <snover> instead of exposing functions on the returned objects
[10:32:15] <snover> these are data grid plugins so it is really great when a client asks for a feature modification
[10:32:25] <DaveMethvin> groping into other people's objects isn't the right way to do things, unless it's the only way -- and unfortunately it often is the only way
[10:32:43] <snover> and then we have to be like “well, here, replace the entire thing because this one-line change can’t be made from outside the plugin”
[10:33:04] <scott_gonzalez> When using CKEditor, I had to resort to some really nasty hacks to gain access to some of their private data.
[10:33:30] <snover> let’s just add pointers to javascript, problem solved
[10:33:39] <DaveMethvin> now you have two problems
[10:33:56] <snover> i wasn’t being sarcastic until that last line
[10:34:23] <DaveMethvin> i have a finely tuned snover-sarcasm detector don't worry
[10:34:43] <snover> maybe it is better than mine, i never know half the time
[10:36:35] <Krinkle> elisnow: I'll be there in 10 minutes, in a meeting now
[10:48:28] <Krinkle> elisnow: Hi, I'm back now.
[10:48:51] <Krinkle> elisnow: What are you referring to exactly regarding php dependency?
[10:49:08] <Krinkle> Do you mean the php files in the ajax test?
[10:49:38] <Krinkle> those are the only ones I know of and those shouldn't be converted to nodejs
[10:49:59] <JamesMGreene> Why not?
[10:50:12] <Krinkle> They are however a mess, which jaubourg and I have been rewriting in a cleaner way (there is a PR somewhere)
[10:50:35] <Krinkle> JamesMGreene: Because virtually no web server software supports nodejs today, it is very good at being its own server, but that doesn't work well in practice
[10:50:42] <Krinkle> we serve the files as static files off apache or nginx.
[10:50:49] <Krinkle> mod_php5, sure, but no nodejs
[10:50:51] <elisnow> Yes, the php files for running the tests
[10:50:57] <JamesMGreene> RIght
[10:51:08] <Krinkle> and even if we manage to get it working, it will fail on any developer's reasonable local lamp stack.
[10:51:34] <DaveMethvin> i thought we talked about spinning up a node on a differnet port
[10:51:38] <JamesMGreene> but for running the tests it's really annoying to have to hook up a PHP web server when I could just run grunt-contrib-connect, express, etc. to achieve the same thing without that external dependency
[10:51:51] <Krinkle> DaveMethvin: then the tests would have to know about that port, just for those files.
[10:51:55] <JamesMGreene> It's like your using grunt-cli locally instead of globally ;)
[10:52:25] <Krinkle> JamesMGreene: Perhaps we could write a little node server that pulls them through php, shouldn't be too hard.
[10:52:25] <elisnow> JamesMGreene echos my sentiments
[10:52:57] <Krinkle> assuming php itself isnt the problem, but a web server with php and the document root etc.
[10:52:58] <JamesMGreene> `grunt` = win
[10:54:00] <elisnow> If the tests are mainly to prevent regression bugs, and, I assume, are run by a dev on their local box, I'm not sure why it matters that web servers don't support node
[10:54:10] <elisnow> The devs are already using node to build the project
[10:54:47] <Krinkle> elisnow: that's not the problem.
[10:54:54] <Krinkle> the problem is running in the background etc.
[10:55:07] <Krinkle> and on the server (the remote server)
[10:55:16] <JamesMGreene> Why is that a problem?
[10:55:17] <Krinkle> there's a lot of infrastructure in place,
[10:55:21] <Krinkle> yes it is all possible
[10:56:00] <DaveMethvin> since we control the node server it seems like it's even easier ... the node backend can collaborate with the test infrastructure
[10:56:19] <JamesMGreene> https://github.com/gruntjs/grunt-contrib-connect#multiple-servers
[10:56:28] <Krinkle> it's not about running it during the build
[10:56:31] <Krinkle> it's about running it outside
[10:56:50] <JamesMGreene> `grunt connect:keepalive`? :)
[10:56:56] <Krinkle> that's not what I mean
[10:57:05] <JamesMGreene> I know, I'm just prodding you now
[10:57:07] <JamesMGreene> :-P
[10:57:14] <Krinkle> if you run it locally in grunt, you don't really run it. grunt's plugins set up the server, know the url, point stuff to it, and then tear it down.
[10:57:45] <Krinkle> we wouldn't want to have 100s of node servers running in the background on jenkins.
[10:57:53] <Krinkle> to eternity
[10:58:00] <DaveMethvin> AND BEYOND!
[10:58:04] <Krinkle> we need to be able to reset a run from a few days ago and have the url working
[10:58:09] <Krinkle> i.e. from 1 server, not one for each job.
[10:58:25] <DaveMethvin> oh now you're starting to make sense Krinkle :P
[10:58:36] <Krinkle> again, it is possible and I know a few good approaches to do it, but unless someone else has time for it, it isn't happening any time soon. sorry :)
[10:58:39] <DaveMethvin> (meaning i finally understand)
[10:58:40] <JamesMGreene> DaveMethvin: Check your premises :-P
[10:59:01] <Krinkle> Maybe I should've brought up this use case earlier :)
[10:59:10] <DaveMethvin> yeah it
[10:59:17] <DaveMethvin> makes sense now
[10:59:30] <elisnow> I suppose I have oversimplified things, I have mostly been thinking about the dev who runs the unit tests locally
[10:59:31] <DaveMethvin> agree that it can still be done, but is trickier than it first seems
[10:59:42] <elisnow> When  you talk about remote are you referring to http://swarm.jquery.org/
[10:59:47] <Krinkle> we could maintain a copy in nodejs and maintain them along side, that's something someone else could work on.
[10:59:59] <Krinkle> elisnow: swarm, jenkins, browserstack yes.
[11:00:06] <DaveMethvin> Krinkle that someone else could be elisnow?
[11:00:31] <elisnow> Yes
[11:00:35] <Krinkle> Yes, though in honesty it might not be very compelling / rewarding, given that its results would never be used.
[11:00:55] <Krinkle> There's probably more interesting stuff and more rewarding things that elisnow will enjoy better I think.
[11:01:01] <JamesMGreene> I'd use it ;)
[11:01:09] <Krinkle> Yes, me too.
[11:01:20] <Krinkle> but the ruler (automated) wouldn't.
[11:01:30] <JamesMGreene> I'm assuming the PHP files are many and/or complex though
[11:01:31] <elisnow> JamesMGreene expressed interest in it. Surely other devs would use it to quickly run unit tests after making changes
[11:01:40] <Krinkle> Yes
[11:01:50] <Krinkle> okay, you've convinced me.
[11:01:53] <Krinkle> lets turn it around
[11:01:53] <JamesMGreene> lol
[11:01:55] <Krinkle> this isn't along side
[11:01:57] <Krinkle> this is the future
[11:02:12] <DaveMethvin> the FUTURE (sweeps hand widely)
[11:02:20] <JamesMGreene> Help the node-php dudes finish their module ;)
[11:02:26] <Krinkle> but, I'd still hold it off for at least a week so we can finish the rewrite on the php side.
[11:02:39] <Krinkle> since right now it is a big mess that you either fail to reproduce in node, or it will be a mess still.
[11:02:49] <Krinkle> there's a lot of redundant stuff and things that aren't working well
[11:02:52] <Krinkle> (ajax tests fail often)
[11:03:01] <elisnow> Fair enough
[11:03:07] <Krinkle> elisnow: what's your github name?
[11:03:09] <JamesMGreene> DaveMethvin didn't you say johnbender was working on PHP -> Node conversion?
[11:03:12] <elisnow> elisnow
[11:03:19] <Krinkle> JamesMGreene: indeed, him and I.
[11:03:32] <elisnow> EliSnow idk if github it case sensitive
[11:03:36] <JamesMGreene> Thought you said jaubourg
[11:03:44] <JamesMGreene> It is
[11:03:58] <JamesMGreene> well
[11:04:02] <JamesMGreene> Not really
[11:04:05] <JamesMGreene> lol, never mind
[11:04:17] <JamesMGreene> I was thinking of crappy ole Google Code
[11:04:25] <Krinkle> https://github.com/jquery/jquery/pull/1060
[11:04:25] <b-ot> Krinkle: Pull request #1060 by Krinkle (2mon 4w ago): Ajax tests: Refactor tests and fix bugs.
[11:23:18] <Krinkle> jzaefferer: Plaese push node-testswarm to npm yes
[11:23:23] <Krinkle> I was going to ask for credentials :)
[11:23:37] <Krinkle> I released it would've made things easier with qunit
[11:23:53] <Krinkle> to not have to hack around not being able to just update package.json 
[11:25:37] <Krinkle> jzaefferer: I don't have experience with multi-maintainer npm packages. How does that work, do you need my public key?
[11:26:11] <Krinkle> I got a few packages up: https://npmjs.org/~Krinkle
[11:31:41] <scott_gonzalez> Krinkle: npm owner add
[11:32:03] <Krinkle> scott_gonzalez: I couldn't find that in the online docs, I see it now thx
[11:32:47] <Krinkle> scott_gonzalez: maybe you know this as well: I got a new laptop, I refresh my keys when I move to a new workstation. I got most, but I realise now that I forgot about npm
[11:33:02] <Krinkle> can I regain access without my old key? I don't see an online interface of some sorts
[11:33:44] <scott_gonzalez> http://admin.npmjs.org/reset
[11:34:39] <Krinkle> oh, there is an online login. 
[11:34:47] <Krinkle> Is that new?
[11:34:52] <Krinkle> I'm logged in now :)
[11:35:29] <scott_gonzalez> It has existed for at least year.
[11:35:43] <Krinkle> I created little further ago
[11:35:55] <scott_gonzalez> Because it's been EXACTLY 1 year since Isaac mentioned that salted passwords were world readable.
[11:36:05] <Krinkle> anyway, I'm logged in, so I guess I can now create a new key locally and add it through the command line and then type my password?
[11:37:19] <DaveMethvin> so scott_gonzalez that question from boris about wc got me thinking
[11:37:25] <Krinkle> scott_gonzalez: It tells me username must be in lowercase when I do npm-adduser :P
[11:37:34] <scott_gonzalez> Yup, that's been the case for a while.
[11:37:42] <scott_gonzalez> "If you have an old account containing capital letters or spaces in the username, then you'll need to create a lowercase url-safe version and add it to your packages. Ping me on IRC and I'll help out. (There are only a few of you.)"
[11:37:42] <Krinkle> My account is presumably older than that
[11:37:45] <Krinkle> https://npmjs.org/~Krinkle https://npmjs.org/~krinkle
[11:37:54] <Krinkle> aha
[11:38:24] <Krinkle> but that means I need access to my uppercase account to grant the other account access
[11:38:36] <scott_gonzalez> Ping isaacs in #node.js
[11:38:40] <Krinkle> and I can't authenticate with that since npm-adduser tells me it needs to be lowercase
[11:38:45] <Krinkle> will do, thanks!
[11:38:50] <JamesMGreene> #Node.js
[11:39:02] <Krinkle> freenode is fancy enough
[11:39:12] <JamesMGreene> oh good
[11:39:14] <scott_gonzalez> Is IRC is case-sensitive?
[11:39:21] <JamesMGreene> apparently not on freenode
[11:39:36] <DaveMethvin> if i write a webcomponent can it get cookies from a third party site scott_gonzalez?
[11:39:42] <DaveMethvin> the iframe can, no problem
[11:39:56] <DaveMethvin> but if the shadow dom is part of the current page it could not
[11:40:07] <DaveMethvin> which means there are a LOT of scenarios it won't cover
[11:40:16] <scott_gonzalez> I believe it should work exactly the same as if it's not a web component.
[11:40:33] <DaveMethvin> yeah which means you only can see local domain cookies
[11:40:51] <DaveMethvin> but the facebook like iframe can see facebook cookies and you're basically "logged in"
[11:41:10] <DaveMethvin> as can the disqus iframe
[11:41:24] <JamesMGreene> Hey Krinkle (and jzaefferer): again, after updating to Grunt 0.4, all of the unit tests for QUnit (including the commented out ones) pass consistently
[11:41:40] <JamesMGreene> Can I turn them on and see if they work on Jenkins now, or should that be left for a 2nd commit?
[11:42:07] <Krinkle> JamesMGreene: Let's do it in a separate commit so we don't have to re-do it if it turns out not to work
[11:42:13] <Krinkle> they can be in one pull request though
[11:42:36] <Krinkle> e.g. it might not work in all browsers
[11:57:57] <JamesMGreene> Krinkle|detached aye aye, cap'n
[12:08:36] <JamesMGreene> Krinkle|detached ben_alman `npm test` fails for me with the local grunt path (instead of relying on a globally installed grunt-cli). Using Git Bash terminal (MinGW) on Windows.
[12:08:55] <ben_alman> unsupported
[12:08:55] <JamesMGreene> though running the same command from the terminal works fine
[12:09:00] <JamesMGreene> lol true
[12:10:08] <JamesMGreene> I see the script has a logic branch for Cygwin
[12:10:23] <JamesMGreene> Does MinGW/GitBash fall into that?  I'm unfamiliar
[12:11:53] <JamesMGreene> oh
[12:12:03] <JamesMGreene> Hmm weird
[12:12:22] <JamesMGreene> Seems like npm might run the command in a Windows terminal instead of the active Git Bash terminal...? o_O
[12:12:30] <JamesMGreene> Works if I change the slash directions
[12:12:47] <JamesMGreene> lame
[12:13:02] * JamesMGreene votes for globally installed "grunt-cli" again
[12:13:34] <gnarf> grunt-cli is on the server
[12:13:35] <gnarf> or should be
[12:13:57] <gnarf> gnarf@jq03:~$ grunt -V
[12:13:57] <gnarf> grunt-cli v0.1.6
[12:27:56] <JamesMGreene> gnarf I believe you
[12:28:57] <JamesMGreene> This is Krinkle's cockamamy idea to avoid having to install grunt-cli globally (or adding an install hook)
[12:29:00] <JamesMGreene> :-P
[12:30:03] <Krinkle> JamesMGreene: npm test fails with local grunt path?
[12:30:05] <Krinkle> What does that mean
[12:30:11] <Krinkle> node_modules/.bin/grunt doesn't work?
[12:30:26] <Krinkle> JamesMGreene: actually, I just realised something
[12:30:30] <Krinkle> just plain "grunt" works
[12:30:47] <Krinkle> npm scripts internallly have a mocked path that includes node_modules/.bin
[12:31:30] <Krinkle> so, just use that
[12:31:49] <Krinkle> on Windows it probably doesn't work, but you'll just install it globally then
[12:32:00] <Krinkle> and on *nix, it works from the bin path
[12:32:05] <Krinkle> or the global path
[12:32:09] <Krinkle> best of both :)
[12:32:50] <JamesMGreene> Hmm
[12:32:58] <JamesMGreene> Let me try uninstalling it globally and see what happens
[12:32:59] <Krinkle> https://npmjs.org/doc/scripts.html#path
[12:33:07] <Krinkle> I know it works on Linux
[12:33:21] <Krinkle> it might not on Windows, but either way, there is no difference
[12:33:26] <Krinkle> both is "grunt" 
[12:34:04] <Krinkle> if your platform's npm supports the local mock, you don't need the global one, otherwise you do. either way will be fine.
[12:34:41] <JamesMGreene> I'll assume that means our server is Linux and supports the non-global ;)
[12:34:48] <JamesMGreene> or you'd be more hesitant
[12:35:01] <JamesMGreene> btw
[12:35:16] <JamesMGreene> do you make the `npm test` script to add `--verbose` to the grunt command?
[12:35:22] <JamesMGreene> make = want, wtf
[12:36:24] <JamesMGreene> wacky
[12:36:58] <Krinkle> indeed
[12:37:14] <Krinkle> (jquery server is linux)
[12:37:23] <Krinkle> JamesMGreene: nah, I wouldn't
[12:37:25] <JamesMGreene> So with grunt-cli uninstalled globally, here's the behavior I see on Windows: `grunt` from the command line fails
[12:37:29] <Krinkle> if you want verbose, one can run grunt directly
[12:37:34] <JamesMGreene> but `npm test` successfully paths out to it so that it works
[12:37:38] <Krinkle> JamesMGreene: Yep :)
[12:37:52] <Krinkle> I'll go and remove the ./bin/ prefix I added to node-testswarm
[12:38:08] <JamesMGreene> well that sucks...
[12:38:14] <Krinkle> ?
[12:38:29] <JamesMGreene> So on Linux, can you just run `grunt`?
[12:38:37] <JamesMGreene> (without grunt-cli installed globally)
[12:38:44] <Krinkle> No, from npm-test
[12:38:58] <Krinkle> if you want it in bash, it needs to be globally of course
[12:39:11] <JamesMGreene> ok, as long as we've got parity now :-P
[12:40:25] <jqcommit> 01[13node-testswarm01] 15Krinkle pushed 1 new commit to 06master: 02http://git.io/y_rhkQ
[12:40:25] <jqcommit> 13node-testswarm/06master 1481d0741 15Timo Tijhof: scripts.test: Remove redundant ./node_modules/.bin prefix....
[12:40:42] <JamesMGreene> Krinkle: So that was a "no" to adding `--verbose` for the `npm test` hook, right?
[12:40:54] <Krinkle> Yeah, the default is fine for npm test
[12:42:14] <JamesMGreene> OK finally questions before commit
[12:42:31] <JamesMGreene> 1. Do we want to add a .jshintrc file for the root (used to lint Gruntfile.js)?
[12:43:17] <JamesMGreene> In my projects I generally just have 1 root .jshintrc file period... but QUnit has 1 for each top-level child folder (and none in the root)
[12:43:56] <Krinkle> JamesMGreene: That's usually not needed, it's an odd practice that has creeped into a few jquery projects due to grunt-lint/grunt-jshint not using those by default
[12:43:58] <Krinkle> I'd move it to the root
[12:44:15] <Krinkle> though in this case we may not want to do that
[12:44:21] <Krinkle> since one is for browsers and one is for node
[12:44:34] <Krinkle> it's only a minor difference
[12:44:46] <Krinkle> what I did in other project is move it to the root and add /*jshint node:true */ to the grunt file
[12:44:51] <Krinkle> since there is only 1 node file
[12:45:03] <Krinkle> and "most" (well, only qunit.js now, but usuallymore) are for the browser
[12:45:27] <JamesMGreene> Hmm
[12:45:27] <Krinkle> jshintrc files don't merge, the first one is the last one used. obviously for grunt, but for jshint-cli as well.
[12:45:36] <Krinkle> but the commets override properly
[12:45:38] <Krinkle> comments8
[12:45:57] <JamesMGreene> right
[12:46:11] <JamesMGreene> So you want a single .jshintrc?
[12:46:14] <Krinkle> Yeah
[12:46:18] <JamesMGreene> Ours have pretty difference configs right now
[12:46:21] <JamesMGreene> (Me too)
[12:46:30] <JamesMGreene> different*
[12:46:43] <JamesMGreene> I'll have to look at merging them tonight
[12:46:50] <Krinkle> anyhow, every js file needs to have a jshintrc file between itself and the root
[12:47:01] <Krinkle> so that editing it in an editor that supports it, picks it up
[12:47:26] <Krinkle> which means there needs to be one in the root. whether we keep one in qunit/ as well is another thing.
[12:47:29] <Krinkle> I'd say, no need to.
[12:48:40] <JamesMGreene> I doubt it needs it
[12:49:08] <Krinkle> There is nothing it needs to override, except for browser:true
[12:49:29] <Krinkle> right now we could move that to the qunit.js file locally, but once we split it up we'd have to repeat that in every file, which I'd like to avoid.
[12:49:33] <Krinkle> its harmless in the root.
[12:49:41] <JamesMGreene> Question 2. So 1 PR but 2 commits, or 2 separate PRs? (2nd commit = enabling the currently disabled tests)
[12:50:26] <Krinkle> 1 PR for grunt 0.4, the other you can just push to the repo directly after the PR has landed (it's just commenting out something, right?)
[12:50:41] <JamesMGreene> uncommenting
[12:50:48] <Krinkle> yeah, sorry.
[12:50:50] <Krinkle> uncommenting
[12:50:51] <JamesMGreene> no worries
[12:50:55] <Krinkle> if the jenkins job after that commit fails, you revert it, if not, keep it :)
[12:51:19] <JamesMGreene> And I monitor that just by being this chat room...?
[12:51:25] <Krinkle> yep
[12:51:41] <JamesMGreene> Or should I be monitoring some other page, NAS, etc.?
[12:51:46] <Krinkle> NAS?
[12:51:52] <Krinkle> http://swarm.jquery.org:8080/job/QUnit/?
[12:52:57] <JamesMGreene> Network Area Storage :-o
[12:53:11] <snover> attached
[12:53:13] <JamesMGreene> a.k.a. landing skip, dropbox, etc.
[12:53:20] <JamesMGreene> good call snover
[12:53:27] <JamesMGreene> I always just say NAS :)
[12:55:38] <JamesMGreene> Krinkle Ah, thanks
[12:55:57] <jqcommit> 01[13qunit01] 15Krinkle pushed 1 new commit to 06master: 02http://git.io/ipLp7g
[12:55:57] <jqcommit> 13qunit/06master 14f5e2275 15Timo Tijhof: Add Jenkins build status badge.
[12:56:26] <JamesMGreene> <3 Jenkins
[12:56:33] <JamesMGreene> Wish we had a nice system like it at work
[12:56:34] <Krinkle> DaveMethvin: Look ma, we got ourselves a build status badge, and we ain't using Travis
[12:56:54] <JamesMGreene> Instead of our craptacular TFS w/ hacky custom Team Build tasks and workflows... ugh
[12:56:55] <Krinkle> https://github.com/jquery/qunit#readme
[12:57:12] <Krinkle> ours isn't perfect either
[12:57:16] <JamesMGreene> Krinkle: hot :)
[12:57:18] <Krinkle> but it used to be a lot worse
[12:57:35] <JamesMGreene> TFS doesn't give ya much
[12:57:35] <doesallmagic> Project QUnit build #262: SUCCESS in 1 min 48 sec: http://swarm.jquery.org:8080/job/QUnit/262/
[12:57:36] <doesallmagic> Timo Tijhof: Add Jenkins build status badge.
[12:57:41] <JamesMGreene> not great plugins
[12:57:51] <JamesMGreene> and the folks in charge of it hear can barely code a lick
[12:58:01] <JamesMGreene> So they spend most of their time arguing against progress
[12:58:02] <Krinkle> "This was a triumph. I'm making a note here: HUGE SUCCESS. "
[12:59:10] <JamesMGreene> :+1:
[12:59:16] <JamesMGreene> =Þ
[12:59:36] <Krinkle> I'm wondering how hard it is to modify the status names in jenkins
[13:00:24] <Krinkle> !jenkins
[13:00:25] <doesallmagic> Krinkle did you mean me? Unknown command ''
[13:00:25] <doesallmagic> Use '!jenkins help' to get help!
[13:00:30] <Krinkle> !jenkins help
[13:00:30] <doesallmagic> Available commands:
[13:00:31] <doesallmagic> abort <job> - specify which job to abort
[13:00:31] <doesallmagic> alias [<alias> [<command>]] - defines a new alias, deletes one or lists all existing aliases
[13:00:32] <doesallmagic> botsnack [<snack>] - om nom nom
[13:00:32] <doesallmagic> build <job> [now|<delay>[s|m|h]] [<parameterkey>=<value>]* - schedule a job build, with standard, custom or no quiet period
[13:00:33] <doesallmagic> cb - list jobs which are currently in progress
[13:00:33] <doesallmagic> comment <job> <build-#> <comment> - adds a description to a build
[13:00:34] <doesallmagic> currentlyBuilding - list jobs which are currently in progress
[13:00:34] <doesallmagic> h [<job>|-v <view>] - show the health of a specific job, jobs in a view or all jobs
[13:00:35] <doesallmagic> health [<job>|-v <view>] - show the health of a specific job, jobs in a view or all jobs
[13:00:35] <Krinkle> I didn't know it had commands
[13:00:35] <doesallmagic> jobs [<job>|-v <view>] - show the status of a specific job, jobs in a view or all jobs
[13:00:36] <doesallmagic> q - show the state of the build queue
[13:00:36] <doesallmagic> queue - show the state of the build queue
[13:00:37] <doesallmagic> s [<job>|-v <view>] - show the status of a specific job, jobs in a view or all jobs
[13:00:37] <doesallmagic> schedule <job> [now|<delay>[s|m|h]] [<parameterkey>=<value>]* - schedule a job build, with standard, custom or no quiet period
[13:00:38] <doesallmagic> status [<job>|-v <view>] - show the status of a specific job, jobs in a view or all jobs
[13:00:38] <doesallmagic> testresult [<job>|-v <view>] - show the test results of a specific job, jobs in a view or all jobs
[13:00:38] <Krinkle> oh god
[13:00:39] <doesallmagic> userstat <username> - prints information about a Jenkins user
[13:02:08] <Krinkle> !jenkins build QUnit now
[13:02:08] <doesallmagic> Krinkle: you're not allowed to build job QUnit!
[13:02:11] <Krinkle> ha
[13:02:15] <JamesMGreene> lol
[13:02:27] <Krinkle> probably uses some kind of irc whitelist that we haven't configured.
[13:02:30] <JamesMGreene> pwned
[13:02:30] <Krinkle> anyway, good to know.
[13:02:48] <JamesMGreene> Did you use this thingie? https://wiki.jenkins-ci.org/display/JENKINS/Embeddable+Build+Status+Plugin
[13:02:54] <Krinkle> JamesMGreene: Yep
[13:03:07] <JamesMGreene> See? This is what I'm talking about :)
[13:03:15] <Krinkle> and https://wiki.jenkins-ci.org/display/JENKINS/IRC+Plugin
[13:03:15] <JamesMGreene> Thriving plugin community
[13:04:38] <Krinkle> JamesMGreene: It's plugin installation process is similar to wordpres, except without the ftp stuff
[13:04:45] <Krinkle> all from the web interface
[13:04:55] <Krinkle> I just upgraded all plugins to the latest versions a minute ago
[13:06:16] <JamesMGreene> seksai
[13:17:38] <jzaefferer> Krinkle: Let's also tag releases for node-testswarm. Makes it easier to figure out what was actually published to npm.
[13:17:58] <Krinkle> I've done that already
[13:18:05] <jzaefferer> Krinkle: also, what's with the -alpha postfix?
[13:18:10] <Krinkle> 0.3 1.0.0 and yesterday 1.0.1
[13:18:18] <Krinkle> unpublished version currently in git
[13:18:27] <jzaefferer> ah, true
[13:18:38] <jzaefferer> sorry, confused those tags
[13:18:40] <Krinkle> I forgot to remove -alpha before you made the release
[13:18:47] <jzaefferer> lemme make you an owner
[13:19:07] <Krinkle> https://github.com/jzaefferer/node-testswarm/tags
[13:19:10] <jzaefferer> what's your npm username?
[13:19:15] <Krinkle> 'krinkle'
[13:19:36] <jzaefferer> okay, you can publish now
[13:20:50] <Krinkle> jzaefferer: so how can I publish v1.0.1
[13:21:04] <Krinkle> the head of the repository is at v1.0.2-alpha now
[13:21:04] <JamesMGreene> Is that not going to become a jquery org repo?
[13:21:17] <JamesMGreene> btw, are there any guidelines around that? ^
[13:21:20] <Krinkle> Oh, right. I just git checkout 
[13:22:10] <jzaefferer> exactly
[13:22:38] <jzaefferer> JamesMGreene: we had a discussion once about moving repos to the jquery organization. node-testswarm didn't make it, along with others like Scott's grunt-wordpress
[13:23:14] <jzaefferer> There's no specific guidelines I know of, though scott_gonzalez can probably tell you when something should be on the jQuery account
[13:26:42] <jqcommit> 01[13node-testswarm01] 15Krinkle tagged 06v0.2.0 at 140bd7bdc: 02http://git.io/7EyUqw
[13:32:27] <JamesMGreene> grunt-wordpress I can see but node-testswarm seems pretty jQuery related
[13:32:30] * JamesMGreene shrugs
[13:32:31] <b-ot> JamesMGreene: ¯\_(ツ)_/¯
[13:34:22] <JamesMGreene> Mainly wondering about my various in-flight QUnit addons
[13:34:45] <JamesMGreene> We already talked about qunit-assert-html a bit, assuming that one stays OUT unless I can support the same browsers as QUnit
[13:35:13] <Krinkle> JamesMGreene: out, out of core?
[13:36:31] <JamesMGreene> Krinkle jzaefferer Should I make the JSHint overrides in the Gruntfile.js or in the actual files?
[13:36:50] <JamesMGreene> out = left on my account
[13:37:11] <JamesMGreene> vs jquery org
[13:37:36] <Krinkle> jzaefferer: basically like you use "pre" in qunit, except that I prefer a dash and the word alpha (seems more semver, but I think both work when there is no "beta", only alpha/pre)
[13:37:51] <Krinkle> since alpha/beta are known suffixes, and pre is probably ignored
[13:37:53] <Krinkle> dont know
[13:38:14] <Krinkle> JamesMGreene: Not in the gruntfile, that's not picked up by editors and jshint-cli
[13:38:21] <Krinkle> what kind of overrides?
[13:38:45] <Krinkle> if it is for multiple files, it needs a separate jshintrc file, othewise use /*jshint*/ header
[13:38:48] <Krinkle> you already asked this/
[13:39:38] <JamesMGreene> Just confirming
[13:39:52] <JamesMGreene> I prefer the gruntfiles but the editors bit is the difference in opinion
[13:40:22] <Krinkle> if it is in the gruntfile, it is lost information that is only applied when you run grunt. not when you're actually editing the files (which I find much more valuable)
[13:40:24] <jzaefferer> Krinkle: the intentation with "pre" is that its never released as such. While alpha can be a regular release
[13:40:31] <Krinkle> don't you have an editor that lints as you type?
[13:40:40] <Krinkle> jzaefferer: true
[13:40:49] <JamesMGreene> yeah
[13:41:07] <JamesMGreene> But I usually just ignore it and run Grunt :-P
[13:41:12] <jzaefferer> JamesMGreene: use .jshintrc and make sure grunt/jshint reads that via the jshintrc option. That way plugins like SublimeLinter can pick up the settings as well 
[13:41:26] <JamesMGreene> jzaefferer: Yup, that's how I have it setup
[13:41:27] <jzaefferer> also stop ignoring your editor and fix your setup :p
[13:41:31] <JamesMGreene> This was just a question for overrides
[13:41:35] <Krinkle> it also allows one to e.g.run jshint --checkstyle-reporter and export the xml file and read it into jenkins for pretty statistics and what not
[13:41:53] <JamesMGreene> k, roger
[13:42:16] <jzaefferer> JamesMGreene: for singular overrides, inside files, but try to avoid those
[13:42:42] <JamesMGreene> Yup
[13:43:03] <JamesMGreene> Do we want `browser:true` in the rc?  I think we need it for now
[13:43:52] <Krinkle> JamesMGreene: the current settings can be evaluated later if you like. I assume jshint still works the same and our code hasn't changed.
[13:44:00] <JamesMGreene> k
[13:44:10] <Krinkle> I recall this tweet from jzaefferer
[13:44:18] <JamesMGreene> (though not true for 1 thing =))
[13:44:29] <Krinkle> a tool that figures out the strictest possible settings and removes redundant tolerations
[13:44:50] <Krinkle> e.g. laxing "strict: false" while it passed with true, and adding bitwise:true if it passes etc.
[13:45:01] <Krinkle> a shrinkwrap to fix status quo
[13:45:18] <Krinkle> jzaefferer: did you ever find such tool?
[13:45:20] <jzaefferer> yeah, I think someone was working on that. Forgot who that was :/
[13:46:27] <Krinkle> jzaefferer: I've installed a build-status-badge plugin in our jenkins, and upgraded all plugins (except for Maven, which may be incompatible with our jenkins version)
[13:47:13] <Krinkle> http://swarm.jquery.org:8080/job/QUnit/badge/icon
[13:47:14] <Krinkle> etc.
[13:47:29] <Krinkle> once a project is properly passing we can start spreading these
[13:47:39] <Krinkle> though only qunit for now as the others have too many false positives to promote the badge
[13:48:03] <jzaefferer> Ah, nice
[13:48:06] <JamesMGreene> bah, definitely some .jshintrc conflicts
[13:48:16] <JamesMGreene> I'll just go for the most aggressive behavior and see what happens
[13:49:45] <Krinkle> JamesMGreene: Or just leave them as-is ;-) - is everything else working with the grunt 0.4 PR?
[13:50:24] <JamesMGreene> yeah, was working great so far (with sub-foldered .jshintrc files)
[13:50:41] <JamesMGreene> I can't leave them
[13:51:10] <JamesMGreene> they're conflicts in settings, e.g. `latedef:true`/`latedef:false`
[13:51:44] <Krinkle> JamesMGreene: what do you mean?
[13:51:56] <Krinkle> only move the one from qunit to root, that's all, right?
[13:51:59] <Krinkle> the one in test can stay
[13:52:08] <Krinkle> it needs to be there due to all the test globals
[13:52:30] <Krinkle> and it is much laxer than the rest
[13:52:31] <Krinkle> test is a mess
[13:52:48] <JamesMGreene> Well
[13:53:06] <JamesMGreene> Right now I'm just making an aggressive one in the root w/o axing the others (though I'm hoping to not need them)
[13:53:16] <JamesMGreene> but since you know the codebase better than I do right now, you are likely correct :)
[14:06:53] <JamesMGreene> whoa whoa
[14:06:55] <JamesMGreene> jzaefferer
[14:07:00] <JamesMGreene> You told me not to do this!
[14:07:03] <JamesMGreene> elem.className = window.jQuery ? jQuery.trim( set ) : ( set.trim ? set.trim() : set );
[14:07:13] <JamesMGreene> (from qunit.js)
[14:07:34] <JamesMGreene> tsk tsk
[14:07:41] <JamesMGreene> "this" = "reference jQuery"
[14:11:08] <Krinkle> conditionally it should be fine, we do that in a few places to improve stuff
[14:11:19] <Krinkle> but it isn't very improving, just prettification
[14:12:51] <DaveMethvin> seems like you'd just want to define your own trim() in QUnit to avoid strange variations, although practially it won't matter ... in a situation like IE7 without jQuery loaded the string won't be trimmed at all
[14:14:17] <Krinkle> it is a lazy optimisation
[14:14:23] <Krinkle> I'm not justifying it
[14:14:47] <Krinkle> I think we're better off (more predictable and consistent) just removing the jquery stuff
[14:14:56] <DaveMethvin> agreed
[14:15:09] <Krinkle> clearly the fallback is acceptable, might as well make it standard. And if not acceptable, we need to bring in the code to qunit.
[14:15:45] <DaveMethvin> it's basically just a simple half-line regex anyway, might as well do that instead of a complex conditional
[14:17:04] <JamesMGreene> yup
[14:17:52] <JamesMGreene> Well, for this commit, I'll just add the jQuery global (JSHint comment) into the qunit.js file
[14:18:03] <JamesMGreene> Not putting that in the root .jshintrc
[14:19:08] <JamesMGreene> `arguments.callee` too? oh noes
[14:19:43] <Krinkle> JamesMGreene: What are you doing all?
[14:19:53] <Krinkle> the jshint file is passing for the current status of the repo 
[14:19:57] <Krinkle> I'm not sure what you're doing..
[14:20:12] <JamesMGreene> Tightening
[14:20:20] <JamesMGreene> I guess I can leave it for a separate PR
[14:20:27] <Krinkle> That would make reviewing easier :)
[14:20:32] <Krinkle> atomic changes
[14:20:42] <DaveMethvin> +1
[14:22:29] <JamesMGreene> I'm always torn between atomic and those damn little tweaks
[14:25:32] <jqcommit> 01[13qunit01] 15Krinkle pushed 1 new commit to 06master: 02http://git.io/2VfkDQ
[14:25:32] <jqcommit> 13qunit/06master 1445aab57 15Timo Tijhof: Upgrade node-testswarm to v1.0.1...
[14:27:12] <doesallmagic> Project QUnit build #263: SUCCESS in 1 min 51 sec: http://swarm.jquery.org:8080/job/QUnit/263/
[14:27:12] <doesallmagic> Timo Tijhof: Upgrade node-testswarm to v1.0.1
[14:37:58] <JamesMGreene> There ya go... no bells, no whistles
[14:37:59] <JamesMGreene> https://github.com/jquery/qunit/pull/423
[14:37:59] <b-ot> JamesMGreene: Pull request #423 by JamesMGreene (18s ago): Build: Upgraded to Grunt 0.4.0. Fixes #377.
[14:38:06] <JamesMGreene> later
[15:36:00] <Krinkle> Not sure if there's anyone here with jquery-color access
[15:36:01] <Krinkle> https://github.com/jquery/jquery-color
[15:36:09] <Krinkle> https://github.com/jquery/jquery-color/pull/55
[15:36:09] <b-ot> Krinkle: Pull request #55 by Krinkle (2m ago): Add build status badge and minor clean up in readme
[15:45:12] <rwaldron> gnarf ^^
[16:35:10] <Krinkle> For those that often use bit.ly/jqsource, I created bit.ly/jqsrc which is shorter and defaults to https. for that its worth :)
[17:16:31] <bjohn465> Hey guys. I'm looking for some feedback on a commit I added to a pull request (https://github.com/jquery/jquery/pull/1196).
[17:16:32] <b-ot> bjohn465: Pull request #1196 by bjohn465 (1d 22h ago): Handling iteration over inherited properties before own properties. Fixes #12199
[18:09:06] <JamesMGreene> OK, so I've got to ask
[18:09:20] <JamesMGreene> http://contribute.jquery.org/style-guide/js/ #7 Quotes
[18:09:30] <JamesMGreene> Strings that require inner quoting must use double outside and single inside.
[18:09:30] <JamesMGreene> ```
[18:09:30] <JamesMGreene> var html = "<div id='my-id'></div>";
[18:09:31] <JamesMGreene> ```
[18:09:42] <JamesMGreene> Isn't that technically invalid HTML...?
[18:09:57] <JamesMGreene> At least in the XHTML world, if not elsewhere?
[18:10:49] <DaveMethvin> http://dev.w3.org/html5/html-author/#single-quote-attr
[18:13:05] <JamesMGreene> Huh, sure enough
[18:13:05] <JamesMGreene> http://www.w3.org/TR/xml/#NT-AttValue
[18:13:16] <JamesMGreene> Whoever trained me in XML was a liar
[18:13:46] <JamesMGreene> That said, I really hate producing inconsistently quoted HTML :-\
[18:14:13] <JamesMGreene> Will I get mocked for escaping the double quote instead? >_>
[18:14:35] <JamesMGreene> (in QUnit land)
[18:14:38] <DaveMethvin> you could do that, i think we do it in the unit tests
[18:14:54] <DaveMethvin> i don't like escaped quotes
[18:15:17] <JamesMGreene> Well personally I prefer single quotes on the outside so this rarely comes up for me :)
[18:26:56] <JamesMGreene> Krinkle|detached jzaefferer Updated https://github.com/jquery/qunit/pull/423
[18:26:57] <b-ot> JamesMGreene: Pull request #423 by JamesMGreene (3h 49m ago): Issue #377 - Build: Upgraded to Grunt 0.4.0
[18:27:09] <snover> \x22
[18:27:09] <snover> :)
[18:27:21] <JamesMGreene> lol
[18:27:41] <JamesMGreene> k, gotta do some chores
[18:27:44] <JamesMGreene> back in a while
[18:44:00] <bjohn465> Krinkle: Thanks for taking a look at that and catching the missing space.
[19:04:57] <rwaldron> why the fuck do people think that single quotes in html is invalid?
[19:05:13] <rwaldron> I will never understand where that myth came from
[19:05:19] <rwaldron> sorry for being so aggro
[19:39:27] <JamesMGreeneAway> Like I said, I thought it was an XML thing but apparently the trainer and/or online resources I learned from many years ago all lied about requiring double quotes for attributes
[19:39:48] <JamesMGreeneAway> Plus, double quotes are clearly the defacto standard
[19:40:00] <JamesMGreeneAway> So you never really see single quote markup examples
[19:41:40] <JamesMGreene> In other words, we just didn't know any better :)
[20:29:47] <JamesMGreene> So if I believe an old "fixed" jQuery core bug was never actually fixed, should I request it to be reopened or file a new issue?
[20:34:32] <miketaylr> JamesMGreene: reopen the ticket and link to a testcase showing it's still broken
[20:37:32] <JamesMGreene> k
[20:37:38] <JamesMGreene> thanks miketaylr
[20:41:16] <jqcommit> 01[13qunit01] 15Krinkle pushed 2 new commits to 06master: 02http://git.io/k3akmg
[20:41:16] <jqcommit> 13qunit/06master 14240ce58 15Timo Tijhof: Composite Addon: Clean up code....
[20:41:16] <jqcommit> 13qunit/06master 14ef7a0cf 15Timo Tijhof: Composite Addon: Fix inability to look into assertions...
[20:44:15] <doesallmagic> Project QUnit build #264: SUCCESS in 3 min 8 sec: http://swarm.jquery.org:8080/job/QUnit/264/
[20:44:15] <doesallmagic> * Timo Tijhof: Composite Addon: Clean up code.
[20:44:16] <doesallmagic> * Timo Tijhof: Composite Addon: Fix inability to look into assertions
[20:50:16] <jqcommit> 01[13qunit01] 15Krinkle pushed 1 new commit to 06master: 02http://git.io/ft9eOg
[20:50:16] <jqcommit> 13qunit/06master 14ced38da 15James M. Greene: Addons: Extend QUnit.assert, don't extend the root 'QUnit' object anymore....
[20:52:36] <Krinkle> JamesMGreene: Commit subjects should be < 70 characters. The body can have longer lines, but the subject should be < 70 and separated from the body by an empty line
[20:52:48] <Krinkle> that way it is nicely displayed in emails, github references, git-log etc.
[20:52:53] <doesallmagic> Project QUnit build #265: FAILURE in 2 min 47 sec: http://swarm.jquery.org:8080/job/QUnit/265/
[20:52:53] <doesallmagic> Timo Tijhof: Addons: Extend QUnit.assert, don't extend the root 'QUnit' object anymore.
[20:52:55] <Krinkle> https://github.com/jquery/qunit/commit/ced38da838bfa137b1c2e6385ee062a5e215768a
[20:52:56] <b-ot> Krinkle: James M. Greene (5d 4h ago): Addons: Extend QUnit.assert, don't extend the root 'QUnit' object anymore.  See JamesMGreene/qunit-assert-html#3 for more details. Closes #418.
[20:53:08] <JamesMGreene> k
[20:53:21] <JamesMGreene> P.S. What did you push for the Composite addon?
[20:53:37] <JamesMGreene> Commits from my PR?
[20:53:38] <Krinkle> JamesMGreene: Some clean up, click links above / see commit message
[20:53:43] <Krinkle> No
[20:53:48] <JamesMGreene> Oh dear
[20:53:53] <Krinkle> Those wouldn't have your name on it
[20:53:54] <JamesMGreene> :-|
[20:53:59] <Krinkle> Would*
[20:54:26] <Krinkle> a time related test is failing in firefox
[20:54:28] <Krinkle> that happens sometimes
[20:54:36] <Krinkle> we should see about making that test less unreliable
[20:54:42] <Krinkle> http://swarm.jquery.org/job/50
[20:55:01] <Krinkle> re-running
[20:55:17] <JamesMGreene> Really wish you hadn't done that Composite push :(
[20:56:58] <JamesMGreene> I fixed all that in my PR
[20:57:14] <JamesMGreene> And supposedly I fixed that inability to look at assertions more correctly
[20:57:21] <JamesMGreene> per discussions with scott_gonzalez and jzaefferer
[21:00:46] <JamesMGreene> Your first commit is basically the same as this one: https://github.com/JamesMGreene/qunit/commit/85a9e6a033e04dde3b8f0f5c2269101de4f02751
[21:00:46] <b-ot> JamesMGreene: James M. Greene (2w 5d ago): QUnit Composite: Reduced API surface area.
[21:01:15] <JamesMGreene> And this is the correct fix for your 2nd commit: https://github.com/JamesMGreene/qunit/commit/128059fe5ee2e59a33177b4c58861ac55ea60a38
[21:01:15] <b-ot> JamesMGreene: James M. Greene (2w 5d ago): QUnit Composite: Fixed bug with use of inline style instead of CSS class that prevented the test results from ever being expanded.
[21:02:03] <JamesMGreene> Both of those [and many more] commits from https://github.com/jquery/qunit/pull/408
[21:02:04] <b-ot> JamesMGreene: Pull request #408 by JamesMGreene (1mon 3d ago): QUnit Composite - First round of major cleanup
[21:02:40] <JamesMGreene> Can we just revert your commits and just push my damn PR instead? :-P
[21:06:28] <Krinkle> JamesMGreene: I didn't see that PR.
[21:07:18] <Krinkle> I can rebase your PR if you don't want to, it's my mistake
[21:07:26] <JamesMGreene> Well, you commented on it twice :)
[21:07:29] <Krinkle> I'd rather not undo history, that's messy.
[21:07:34] <Krinkle> a month ago
[21:07:40] <Krinkle> for all I know it was already merged.
[21:07:44] <JamesMGreene> sadly no
[21:09:04] <Krinkle> JamesMGreene: If it's alright with you, I'm going to push your PR to a branch on jquery/qunit so we can work on it
[21:09:14] <Krinkle> PRs can go from within a repository as well one branch to another
[21:09:53] <JamesMGreene> OK
[21:10:04] <JamesMGreene> Alternatively, we still need to move composite to qunit-contrib-composite
[21:10:15] <Krinkle> that too
[21:10:25] <JamesMGreene> We could always just move the version from before your commits and then apply my PR
[21:10:46] <JamesMGreene> I'm up for it
[21:11:10] <Krinkle> There's a few things I noticed in your PR that I got but you didn't
[21:11:16] <JamesMGreene> Oh?
[21:11:24] <Krinkle> and a pointless $.extend()
[21:11:25] <JamesMGreene> From your first commit obviously, then
[21:11:32] <Krinkle> I don't know
[21:11:34] <JamesMGreene> lemme take a look
[21:11:51] <Krinkle> JamesMGreene: You have such long branch names..
[21:12:49] <JamesMGreene> I'm not seeing it
[21:13:01] <JamesMGreene> Hey, long names aren't so bad
[21:13:28] <JamesMGreene> https://github.com/jquery/qunit/pull/421 had a frickin' date-timestamp in the branch name
[21:13:28] <b-ot> JamesMGreene: Pull request #421 by dmitrygusev (2d 10h ago): Fix typos
[21:13:57] <Krinkle> yeah, but it's just spell<tab>
[21:14:07] <Krinkle> anyway
[21:14:13] <JamesMGreene> but I will take your subtle hint under consideration ;)
[21:14:26] <JamesMGreene> My next branch will be called "a"
[21:14:36] <Krinkle> I wonder which name the next will have.
[21:14:37] <JamesMGreene> a la minification
[21:15:03] <JamesMGreene> Krinkle: I'm not seeing what you fixed that I didn't
[21:15:10] <JamesMGreene> Can you elaborate?
[21:15:34] <Krinkle> you brought in addclass/hasclass for code that I just removed.
[21:16:28] <JamesMGreene> I did what you did there originally but scott_gonzalez and jzaefferer said that was wrong
[21:16:33] <Krinkle> nothing big, just small things
[21:16:44] <JamesMGreene> Oh, I see the extend thing you were talking about now
[21:16:58] <JamesMGreene> You just tack the `testSuites` on to the object directly
[21:17:08] <JamesMGreene> I suppose that's less work, eh?
[21:17:13] <Krinkle> that's what $.extend() does.
[21:17:22] <Krinkle> I merged the QUnit.iframe  (this.iframe) and local iframe.
[21:17:25] <JamesMGreene> Then what's the perceived benefit? :)
[21:17:27] <Krinkle> you also cleared that from the api
[21:17:34] <Krinkle> which is nice
[21:17:37] <JamesMGreene> Using .extend does make it very clear what your intent is, IMHO
[21:17:38] <Krinkle> but kept it separate
[21:17:58] <Krinkle> no, I find it unneccecary overhead for no reason. If you don't understand adding properties there is a bigger problem.
[21:18:23] <Krinkle> I like pretty code, but I'm also pure about minimalism
[21:18:38] <Krinkle> which imho results in even prettier code, but oh well.
[21:18:40] <JamesMGreene> I suppose that's a good approach for addons
[21:19:16] <JamesMGreene> But I assume extend would be the preferred best practice when adding more than 1 property?
[21:19:41] <Krinkle> Maybe, maybe not. I rarely use it to add properties. Only when merging objects.
[21:19:43] <JamesMGreene> Or would you want that purely for recursive stuff?
[21:19:57] <JamesMGreene> OK, I've got no qualms with that
[21:20:06] <JamesMGreene> I'm onboard
[21:20:24] <Krinkle> It depends on whether it is for jquery core (where every byte is being bitched about and run time performance doesn't matter apparently) - or code that I am closer to.
[21:20:33] <JamesMGreene> Should I fix that in my PR now?
[21:20:34] <Krinkle> :P
[21:20:56] <Krinkle> If you want to that'd be great. I'm about to rebase it myself if you prefer that.
[21:20:56] <JamesMGreene> What are we gonna do with this thing? :)
[21:21:39] <Krinkle> JamesMGreene: The reason I personally held off reviewing this PR is because it is hard to see what is alternative (better) coding and what changes behaviour
[21:21:49] <Krinkle> at this second I'm looking at the once() function you added.
[21:21:51] <JamesMGreene> Understood
[21:21:59] <JamesMGreene> That's why I left it as 10 commits instead of 1 ;)
[21:22:05] <Krinkle> sure
[21:22:24] <JamesMGreene> k
[21:22:45] <JamesMGreene> the once impl was yanked from Lo-Dash and then reduced by a few unnecessary lines
[21:22:46] <Krinkle> null>undefined
[21:22:56] <Krinkle> but what for?
[21:23:32] <JamesMGreene> By which you mean why not just do it inline since I only use it once?
[21:23:36] <Krinkle> tracking progress in multiple commits is nice, though I try to avoid having multiple commits where one undoes something from the other
[21:23:55] <Krinkle> JamesMGreene: No, I mean when would that function be called more than it should?
[21:23:55] <JamesMGreene> Well
[21:24:02] <Krinkle> I don't see that in the old version
[21:24:15] <JamesMGreene> It was 1 commit to start but it wasn't getting merged and I needed to keep fixing Composite for my day job
[21:24:23] <JamesMGreene> so I just kept adding more commits
[21:24:55] <Krinkle> Right
[21:25:36] <JamesMGreene> oh sure
[21:25:49] <JamesMGreene> Basically I'm setting it up for the subsequent changes I need to make
[21:25:50] <Krinkle> In that case I'd have a fork where I do that, and then a topic branch for the PR where it is done as revised atomic changes.
[21:25:54] <JamesMGreene> but that's not necessarily clear from this PR
[21:26:02] <Krinkle> QUnit.module( null, {
[21:26:07] <Krinkle> that's interesting
[21:26:17] <JamesMGreene> Isn't it, though? :-P
[21:27:00] <Krinkle> so are you rebasing or am I?
[21:27:43] <JamesMGreene> Uhh, I'm not sure I know how to do all the cross-branch PR magic you're talking about so either you can do it or you can teach me how
[21:27:55] <Krinkle> deal
[21:28:05] <Krinkle> okay, checkout latest jquery/qunit master
[21:28:40] <Krinkle> I'm doing this at the same time, I'll name mine slightly different and my efforts will be wasted and yours will go in. Just to see what we end up with :)
[21:28:43] <Krinkle> I got a little time
[21:28:53] <Krinkle> git co -b composite-cleanup
[21:28:54] <JamesMGreene> Sooooo
[21:28:57] <JamesMGreene> g co master
[21:29:00] <JamesMGreene> g pull
[21:29:37] <JamesMGreene> Want to do this in a private message? :-P
[21:30:07] <Krinkle> ok
[21:30:08] <JamesMGreene> Or we can teach the room :)
[21:30:12] <JamesMGreene> I don't mind either way
[21:30:18] <Krinkle> I'm fine here
[21:30:29] <JamesMGreene> ok, so I'm with ya
[21:30:34] <Krinkle> if somebody wants silence they can say so at any time and we'll go PM
[21:30:44] <JamesMGreene> did you want that branch name or are you doing a different one?
[21:30:55] <Krinkle> I'm naming mine composite
[21:31:01] <JamesMGreene> Or does it not matter till the push anyway?
[21:31:08] <JamesMGreene> That's one thing that always confused me
[21:31:13] <Krinkle> nah, git br -m anotherone
[21:31:37] <JamesMGreene> ok, onward
[21:31:40] <Krinkle> branches can be renamed at any time
[21:31:46] <JamesMGreene> Well that I know
[21:31:51] <Krinkle> ok
[21:32:10] <Krinkle> you can even push to and from different names across repositories without a working copy
[21:32:11] <JamesMGreene> What I meant was that I always do `g push origin {branchName}` so the local branch name seems kinda pointless...?
[21:32:16] <Krinkle> such as a few minutes ago (I'll keep this short)
[21:32:30] <JamesMGreene> i.e. you could have a different branch name locally than your remote
[21:32:31] <Krinkle> my working copy of qunit was a few weeks out of date. I wanted to update my fork at Krinkle/qunit.
[21:32:50] <Krinkle> so I did git remote update, which contrary to git-pull does not update my local master branch
[21:32:59] <Krinkle> then I did "git push origin upstream/master:master"
[21:33:23] <Krinkle> which pushes jquery/qunit:master to krinkle/qunit:master while my local branch can be completely different
[21:33:37] <Krinkle> anyway, maybe you already knew that. fun tricks
[21:33:45] <Krinkle> now what I do is choose one of the changes in your PR and work on that.
[21:33:53] <JamesMGreene> You mentioned that push last night but not the git remote update bit
[21:34:26] <Krinkle> yeah, "git remote update" is like "git pull" but it only downloads the references in the database, without actually forwarding your local branches
[21:34:41] <Krinkle> so that references like "upstream" etc. are up to date.
[21:34:43] <JamesMGreene> same as g fetch upstream?
[21:34:51] <Krinkle> git remote update === git fetch --all
[21:34:54] <Krinkle> yeah, same thing
[21:35:04] <JamesMGreene> k, interesting
[21:35:05] <Krinkle> like, exactly the same.
[21:35:10] <JamesMGreene> so many hammers in git
[21:35:36] <JamesMGreene> So normally I end up doing
[21:35:40] <JamesMGreene> g fetch upstream
[21:35:45] <JamesMGreene> g merge upstream/master
[21:36:04] <Krinkle> I'm assuming you are in master at that point
[21:36:07] <JamesMGreene> yeah
[21:36:09] <Krinkle> (g co master)
[21:36:10] <Krinkle> ok
[21:36:17] <Krinkle> git pull is the same
[21:36:26] <Krinkle> or git remote update; git rebase
[21:36:38] <JamesMGreene> git pull only pulls from my fork, though, right?
[21:36:45] <Krinkle> that last one works because master is tracking upstream/master, so it defaults to rebasing/forwarding.
[21:36:53] <Krinkle> JamesMGreene: That depends
[21:36:55] <Krinkle> JamesMGreene: good point
[21:37:00] <Krinkle> do "git branch -vv"
[21:37:15] <Krinkle> what does [...] say next to master ? 
[21:37:24] <Krinkle> do you track upstream or origin in your master
[21:37:39] <JamesMGreene> upstream
[21:37:52] <JamesMGreene> Not sure what you want to see
[21:37:57] <Krinkle> okay
[21:38:08] <JamesMGreene> * composite-cleanup ced38da Addons: Extend QUnit.assert, don't extend the root 'QUnit' object anymore.
[21:38:08] <JamesMGreene>   master            ced38da [origin/master] Addons: Extend QUnit.assert, don't extend the root 'QUnit' object anymore.
[21:38:08] <JamesMGreene>   pr_421            7f5e2b1 Fix typos
[21:38:08] <Krinkle> so you have master <hash> [upstream/master] <commit.msg>
[21:38:12] <Krinkle> ah, origin
[21:38:29] <Krinkle> git-pull fetches from the remote branch you track, which is specified in [brackets]
[21:38:29] <JamesMGreene> I mean I have a remote upstream defined
[21:38:48] <JamesMGreene> Do you typically track upstream/master instead?
[21:38:49] <Krinkle> so if master is tracking origin/master then it fetches remote and merges origin/master
[21:38:54] <Krinkle> no, origin
[21:39:05] <Krinkle> if I want to update, I do "git pull upstream master"
[21:39:23] <JamesMGreene> oh cool
[21:39:27] <Krinkle> yeah
[21:39:30] <JamesMGreene> Yeah I refer git pull
[21:39:34] <JamesMGreene> I'll have to start using that
[21:39:43] <JamesMGreene> g merge annoys me
[21:40:21] <JamesMGreene> K, good tips
[21:40:25] <JamesMGreene> back to the rebasing
[21:40:29] <Krinkle> yep
[21:40:33] <JamesMGreene> What's next?
[21:40:37] <Krinkle> so the first thing we could do is rename the files
[21:40:46] <Krinkle> and remove what we want to remove
[21:40:56] <Krinkle> that seems like a good atomic change we can combine in one commit
[21:40:57] <JamesMGreene> Yes, I'd recommend going in commit order if possible for sure :-P
[21:41:28] <Krinkle> and adding the notes, too
[21:41:45] <Krinkle> in this case I see that that change fits exactly as it was originally
[21:41:48] <Krinkle> https://github.com/JamesMGreene/qunit/commit/1a57aa5b6ef1a2e84fe86409813c7190a84aa2b7
[21:41:48] <b-ot> Krinkle: James M. Greene (2w 5d ago): QUnit Composite: Restructured to match other addons' folders.
[21:42:08] <Krinkle> so I'll do (I'm in branch "composite" which is still the same as upstream/master right now)
[21:42:13] <Krinkle> I'll do git cherry-pick 1a57aa5b6ef1a2e84fe86409813c7190a84aa2b7
[21:42:27] <Krinkle> which applies that patch out of context onto my current branch
[21:43:12] <Krinkle> Then I'll slightly reformat that commit message to make sure the subject fits in 70 chars, and remove the "QUnit" word at the start.
[21:43:42] <Krinkle> and the full-stop at the end because I'd like to keep subjects as titles, not sentences (so no stop)
[21:44:07] <Krinkle> I'm being verbose here, tell me if its too much :)
[21:44:40] <JamesMGreene> "fatal: bad object" :-o
[21:44:56] <Krinkle> did you create those commits on a different computer?
[21:45:04] <JamesMGreene> nope
[21:45:12] <JamesMGreene> oh wait
[21:45:14] <JamesMGreene> h/o
[21:45:20] <Krinkle> they're not in your database by default since that commit is not in jquery/master, but in your fork. I had to fetch it first
[21:45:29] <Krinkle> I left that out since I presumed you already had it
[21:45:49] <JamesMGreene> Well
[21:45:52] <JamesMGreene> I made it in my fork
[21:46:04] <JamesMGreene> but we are working in the actual qunit repo now, right?
[21:46:16] <Krinkle> What do you mean
[21:46:17] <JamesMGreene> Or should I be in my fork?
[21:46:27] <Krinkle> do you have 2 directories on your computer one your fork and one jquery?
[21:46:31] <JamesMGreene> yeah
[21:46:35] <Krinkle> aaaaa
[21:46:45] <Krinkle> Lets phase that out (unless you like it)
[21:46:53] <JamesMGreene> I'm open to whatever
[21:47:09] <JamesMGreene> Just not familiar with doing them both in one
[21:47:16] <Krinkle> so just like you can have a remote 'upstream' (in your fork checkout directory), you can have any number of remotes
[21:47:27] <JamesMGreene> yup
[21:47:43] <Krinkle> So essentially my local copy of the jquery repo is my fork
[21:47:55] <Krinkle> that's what I push to origin=Krinkle/qunit
[21:47:59] <JamesMGreene> and then you do what, git co upstream/qunit?
[21:48:07] <Krinkle> and I push to upstream if I want to push there
[21:48:11] <JamesMGreene> er
[21:48:12] <JamesMGreene> upstream/master
[21:48:30] <JamesMGreene> oh
[21:48:36] <Krinkle> JamesMGreene: Okay, do you have any local branches that aren't on github that you have in your fork?
[21:48:49] <JamesMGreene> let me double check
[21:49:16] <Krinkle> if not, I'd say delete that directory. Then in the jquery repo checkout, do "git remote -v" and check what remotes you have.
[21:50:48] <JamesMGreene> So delete my fork dir instead of my upstream dir?
[21:51:05] <JamesMGreene> (I have "qunit" and "qunit.upstream" as folders, btw)
[21:51:27] <Krinkle> doesn't matter which, but since we already did a little work in one of them these last few minutes, Its easier if we keep that one so we don't have to do that over.
[21:51:43] <Krinkle> Okay, I'd rename the one you keep to qunit of course :)
[21:51:55] <JamesMGreene> but don't we have to switch the remotes then?
[21:52:00] <JamesMGreene> (if I keep the upstream dir)
[21:52:10] <Krinkle> you can add remotes by url
[21:52:29] <Krinkle> If you want to be sure you don't miss anything do one more "git push" from your fork directory
[21:52:29] <JamesMGreene> but the "origin" == upstream in that dir
[21:52:40] <Krinkle> JamesMGreene: remotes can be renamed as well
[21:52:53] <JamesMGreene> OK, well, show me the way, Yosa
[21:52:55] <JamesMGreene> Yoda
[21:52:59] * JamesMGreene fails
[21:53:16] <Krinkle> they're purely local names (could be named jquery and james)
[21:53:26] <Krinkle> no worries :)
[21:54:14] <JamesMGreene> For some reason `rm -rf {dir}` takes for damn ever in Git Bash for Windows
[21:54:21] <JamesMGreene> Must be all those node_modules
[21:54:24] <Krinkle> interesting
[21:54:50] <Krinkle> maybe do it via Explorer?
[21:54:56] <JamesMGreene> origin	git@github.com:jquery/qunit.git (fetch)
[21:54:56] <JamesMGreene> origin	git@github.com:jquery/qunit.git (push)
[21:55:04] <Krinkle> okay
[21:55:17] <Krinkle> git remote rename origin jquery
[21:55:23] <Krinkle> git remote rename origin upstream
[21:55:26] <Krinkle> whichever you prefer
[21:55:34] <JamesMGreene> upstream ,done
[21:55:38] <Krinkle> git remote rename add origin <git @ url of your fork>
[21:55:52] <JamesMGreene> -rename
[21:56:00] <Krinkle> shown on the github page at SSH, I always mistype the : instead of /, so I just copy it from there
[21:56:14] <Krinkle> yeah
[21:56:18] <JamesMGreene> yup yup, done
[21:56:23] <Krinkle> cool
[21:56:25] <Krinkle> git remote update
[21:56:26] <JamesMGreene> origin	git@github.com:JamesMGreene/qunit.git (fetch)
[21:56:26] <JamesMGreene> origin	git@github.com:JamesMGreene/qunit.git (push)
[21:56:26] <JamesMGreene> upstream	git@github.com:jquery/qunit.git (fetch)
[21:56:26] <JamesMGreene> upstream	git@github.com:jquery/qunit.git (push)
[21:56:40] <Krinkle> that'll take a few seconds to do the initial fetch of your origin
[21:56:44] <Krinkle> new origin
[21:56:59] <JamesMGreene> done
[21:57:06] <Krinkle> lol, this is like human ssh :P
[21:57:13] <Krinkle> handshake ?
[21:57:17] <JamesMGreene> uh oh, we forgot to handsake
[21:57:19] <JamesMGreene> lol
[21:57:21] <JamesMGreene> nice
[21:57:26] <Krinkle> hehe
[21:57:33] * JamesMGreene shakes Krinkle's hand
[21:57:43] <JamesMGreene> nrrrdcore
[21:57:48] * Krinkle smiles friendly, but lets go to get the keyboard
[21:58:01] <JamesMGreene> onward
[21:58:14] <Krinkle> oh, I almost forgot. your master branch is probably pointing to the wrong remote so git-pull doesn't do what you expect
[21:58:22] <Krinkle> where do you want a plain git-pull to pull form
[21:58:25] <Krinkle> from*
[21:58:27] <Krinkle> origin, right?
[21:58:48] <Krinkle> so, git checkout master; git pull origin master -u; the -u sets it as the tracking so it remembers it as the default next time
[21:59:02] <Krinkle> basically it sets the [brackets] name in "git branch -v"
[21:59:21] <JamesMGreene> yeah 
[21:59:57] <Krinkle> great, so now you have all branches available and can push and pull anywhere
[22:00:07] <JamesMGreene> my git branch -v doesn't have brackets now
[22:00:35] <Krinkle> you did checkout master and pull with -u ?
[22:01:05] <JamesMGreene> yup
[22:01:13] <Krinkle> what does it say then?
[22:01:45] <JamesMGreene>   composite-cleanup  ced38da Addons: Extend QUnit.assert, don't extend the root 'QUnit' object anymore.
[22:01:45] <JamesMGreene> * master             ced38da Addons: Extend QUnit.assert, don't extend the root 'QUnit' object anymore.
[22:01:45] <JamesMGreene>   pr_421             7f5e2b1 Fix typos
[22:01:57] * JamesMGreene deletes that last branch
[22:03:33] <Krinkle> Hm.. looks like git pull -u doesn't do what I thought it did
[22:03:40] <Krinkle> git branch master -u origin/master
[22:03:43] <Krinkle> that sets it manually
[22:04:12] <JamesMGreene>   composite-cleanup ced38da Addons: Extend QUnit.assert, don't extend the root 'QUnit' object anymore.
[22:04:12] <JamesMGreene> * master            ced38da [ahead 5] Addons: Extend QUnit.assert, don't extend the root 'QUnit' object anymore.
[22:05:00] <Krinkle> JamesMGreene: ahead 5?
[22:05:02] <Krinkle> that's odd
[22:05:19] <Krinkle> ah
[22:05:23] <Krinkle> ahead of your fork
[22:05:31] <Krinkle> your fork is still outdated
[22:05:34] <Krinkle> git push origin
[22:05:59] <Krinkle> or just git push, since origin should be the default now
[22:06:11] <JamesMGreene>   composite-cleanup ced38da Addons: Extend QUnit.assert, don't extend the root 'QUnit' object anymore.
[22:06:11] <JamesMGreene> * master            ced38da Addons: Extend QUnit.assert, don't extend the root 'QUnit' object anymore.
[22:06:22] <Krinkle> great
[22:06:24] <Krinkle> so that's over with
[22:06:26] <Krinkle> back to composite
[22:06:28] <JamesMGreene> (still no brackets, though)
[22:06:35] <Krinkle> yeah, that's odd
[22:06:42] <Krinkle> maybe it omits it on windows if it is "origin"
[22:07:04] <JamesMGreene> I don't have a lot of faith in it considering I can't even paste into it
[22:07:27] <Krinkle> Oh well :)
[22:07:45] <Krinkle> I notice that composite is still on the same head, so you didn't apply the first patch yet, right?
[22:07:52] <Krinkle> Ah, right, because the object was not found
[22:07:58] <Krinkle> try again, it should be there now
[22:08:24] <Krinkle> if not, you can fetch it from remote 'origin' (git fetch origin <sha1>)
[22:08:39] <JamesMGreene> * composite-cleanup 7e1d286 QUnit Composite: Restructured to match other addons' folders.
[22:08:39] <JamesMGreene>   master            ced38da Addons: Extend QUnit.assert, don't extend the root 'QUnit' object anymore.
[22:08:51] <JamesMGreene> cherry-pick worked fine now
[22:09:10] <Krinkle> do you have an alias for a pretty display of the log?
[22:09:55] <JamesMGreene> yeah
[22:09:58] <JamesMGreene> g lsd :)
[22:10:04] <Krinkle> what's in a name
[22:10:16] <Krinkle> if you use it you'll see that this is now the first commit away from master
[22:10:21] <JamesMGreene> alias.lsd=log --graph --decorate --pretty=oneline --abbrev-commit --all
[22:10:28] <Krinkle> https://github.com/Krinkle/dotfiles/blob/master/gitconfig#L10
[22:10:36] <Krinkle> similar to mine, but with --all
[22:11:08] <Krinkle> great
[22:11:09] <Krinkle> so next
[22:11:19] <Krinkle> btw, I'd remove the word "QUnit" from the commit message
[22:11:23] <Krinkle> git commit --amend
[22:11:48] <JamesMGreene> done
[22:11:56] <Krinkle> next 'Composite: Reduced API surface area.'
[22:12:05] <JamesMGreene> And removed the stop, btw
[22:12:14] <Krinkle> we can probably skip that one for now
[22:12:22] <JamesMGreene> That commit?
[22:12:32] <Krinkle> yeah, since that's already done in master
[22:12:36] <JamesMGreene> Hmm
[22:12:44] <JamesMGreene> I guess we can try that way :-P
[22:12:47] <Krinkle> it wouldn't cherry-pick anyway due to conflict
[22:12:54] <Krinkle> just going through and applying what's left to be done.
[22:13:07] <JamesMGreene> So the other 8 commits, yes?
[22:13:12] <Krinkle> https://github.com/jquery/qunit/pull/408/commits
[22:13:12] <b-ot> Krinkle: Pull request #408 by JamesMGreene (1mon 3d ago): QUnit Composite - First round of major cleanup
[22:13:17] <Krinkle> one at a time
[22:13:21] <JamesMGreene> well yeah
[22:13:29] <JamesMGreene> I'm not that crazy
[22:13:30] <Krinkle> coding style, yeah, but will have to be done by hand again
[22:13:34] <Krinkle> lets do that now
[22:14:58] <Krinkle> and commit it
[22:14:59] <JamesMGreene> Sooooo
[22:15:43] <JamesMGreene> Just take the HEAD one and then reapply the changes by hand, right?
[22:16:18] <Krinkle> we're in composite, we cherry-picked "Restructured to match other addons' folders."
[22:16:24] <Krinkle> then made some manual edits for coding style
[22:16:34] <Krinkle> and git-add-p / git commit that
[22:16:45] <JamesMGreene> "then made some manual edits for coding style"
[22:16:52] <Krinkle> in your editor
[22:17:15] <JamesMGreene> w.r.t. My PR Commit #3 "Fixing some minor coding style inconsistencies."?
[22:17:37] <Krinkle> You can try cherry-picking it, but I figured it would conflict and it's only 4 lines.
[22:17:54] <Krinkle> dont want to resolve a 4 line conflict, I'll do it again
[22:18:06] <Krinkle> what do you use btw, I'm always curious what Windows users prefer for their code editor.
[22:19:32] <JamesMGreene> What's git-add-p?
[22:19:46] <Krinkle> "git add -p"
[22:20:02] <Krinkle> it's like git diff, git add ., but with more control and not everything at once
[22:20:09] <Krinkle> it's interactive addition
[22:20:43] <Krinkle> JamesMGreene: What do you usually use to add a file to a commit, git commit -a?
[22:20:55] <JamesMGreene> It apparently doesn't work since I cherry-picked that commit
[22:21:07] <JamesMGreene> I manually add them, usually
[22:21:11] <Krinkle> ok
[22:21:18] <Krinkle> but then you don't see the diff
[22:21:22] <JamesMGreene> does -p just add all modified files
[22:21:24] <JamesMGreene> ?
[22:22:03] <Krinkle> git add -p, basically does: git status, take the modified files, show a diff for one, you do Y or N, diff the next, you do Y/N, and then you're done.
[22:22:04] <JamesMGreene> I usually just diff the staged before I commit
[22:22:10] <Krinkle> that works too
[22:22:16] <Krinkle> but it's an extra step :)
[22:22:23] <JamesMGreene> indeed
[22:22:35] <JamesMGreene> this -p business sounds cool
[22:22:47] <Krinkle> but you cherry-picked, that means they're already staged.
[22:22:53] <Krinkle> check git diff --staged 
[22:23:04] <Krinkle> or did you get a conflict indeed?
[22:23:07] <JamesMGreene> conflict
[22:23:09] <Krinkle> or is it already comitted?
[22:23:15] <Krinkle> JamesMGreene: thought so ;-)
[22:23:18] <JamesMGreene> conflict, ready to commit
[22:23:33] <Krinkle> git rebase --abort; or commit as you like.
[22:24:02] <Krinkle> we can try -p later, there's a few more coming up
[22:24:08] <JamesMGreene> yup
[22:24:10] <JamesMGreene> committed
[22:24:21] <Krinkle> so what does lsd look like now?
[22:24:33] <Krinkle> no merge commit I hope
[22:25:07] <JamesMGreene> * 034b002 (HEAD, composite-cleanup) Composite: Fixing some minor coding style inconsistencies.
[22:25:07] <JamesMGreene> * 9f39a78 Composite: Restructured to match other addons' folders
[22:25:07] <JamesMGreene> * ced38da (upstream/master, upstream/HEAD, origin/master, master) Addons: Extend QUnit.assert, don't extend the root 'QUnit' object anymore.
[22:25:18] <JamesMGreene> all good
[22:25:25] <Krinkle> k
[22:25:33] <Krinkle> https://github.com/JamesMGreene/qunit/commit/010e590f767f42356fff1fa080832ec63eb222f1
[22:25:33] <b-ot> Krinkle: James M. Greene (2w 5d ago): QUnit Composite: Switched `for` loops to jQuery's preferred coding style.
[22:25:56] <Krinkle> lets put that in the previous commit
[22:26:03] <JamesMGreene> cherry-pick or manual?
[22:26:26] <Krinkle> cherry-pick would add a new commit
[22:26:46] <Krinkle> git cherry-pick --no-commit (or -n) <sha1>
[22:26:51] <Krinkle> that'll put it in your stage instead.
[22:27:16] <JamesMGreene> conflict anyway I guess
[22:27:16] <Krinkle> then we can `git commit --amend -c HEAD` to add it to last commit
[22:27:26] <Krinkle> yeah, making do a manual this time
[22:27:29] <Krinkle> maybe*
[22:27:37] <JamesMGreene> why the `-c HEAD`?
[22:27:49] <Krinkle> that'll preload the commit message with that from HEAD
[22:27:59] <Krinkle> is usually the default, but after a cherry pick it might be dirty
[22:28:35] <JamesMGreene> oh ok
[22:28:51] <JamesMGreene> so it just skips the editor phase of git commit --amend
[22:29:40] <Krinkle> no, -c will still load the editor, but preload the message of HEAD
[22:29:48] <Krinkle> -C (capital c) will skip the editor.
[22:30:08] <Krinkle> which we want in this case
[22:30:09] <Krinkle> yeah
[22:30:13] <Krinkle> no need to update the commit messag
[22:30:41] <JamesMGreene> btw, I use WebStorm; Notepad++ or vim for quick stuff
[22:30:59] <Krinkle> OK
[22:31:05] <Krinkle> so just made a 1 line edit
[22:31:13] <Krinkle> git add -p; git commit --amend -c HEAD
[22:31:21] <Krinkle> (the -c HEAD is actually redundant this time)
[22:31:36] <JamesMGreene> So hey
[22:31:37] <JamesMGreene> for this one
[22:31:41] <Krinkle> -C HEAD
[22:31:47] <JamesMGreene> Are we adding that chunk you removed back in now?
[22:31:59] <Krinkle> no, not yet. Maybe later
[22:32:10] <Krinkle> that's not part in this topic
[22:32:21] <JamesMGreene> Well this commit adds variables for it
[22:32:34] <JamesMGreene> plus you left a dead var in there, tsk tsk ;)
[22:32:39] <Krinkle> we're doing it manaully, right? So there is nothing to be added.
[22:32:48] <Krinkle> good point
[22:32:48] <JamesMGreene> Right, so just skip those
[22:32:53] <Krinkle> lets remove that on this one (var i)
[22:33:06] <Krinkle> see, that's why we should stricten jshintrc
[22:33:13] <Krinkle> I have unused:true enabled always
[22:33:21] <Krinkle> but it isn't here and I already missed it.
[22:33:25] <Krinkle> th
[22:33:26] <Krinkle> thx
[22:33:54] <JamesMGreene> Yeah, that's why I want to tighten up those .jshintrc files
[22:33:56] <JamesMGreene> very lax
[22:34:10] <Krinkle> next: https://github.com/JamesMGreene/qunit/commit/128059fe5ee2e59a33177b4c58861ac55ea60a38
[22:34:11] <b-ot> Krinkle: James M. Greene (2w 5d ago): QUnit Composite: Fixed bug with use of inline style instead of CSS class that prevented the test results from ever being expanded.
[22:34:12] <Krinkle> skiip
[22:34:25] <Krinkle> next: https://github.com/JamesMGreene/qunit/commit/447d21027ce526dd412096332afb18cc0007fed7
[22:34:25] <b-ot> Krinkle: James M. Greene (2w 5d ago): QUnit Composite: Ensure the iframe is initialized once and only once per test run.
[22:34:57] <Krinkle> that's a new one
[22:35:15] <Krinkle> it won't apply, but you can copy it from github in your editor
[22:35:24] <Krinkle> though I'm considering perhaps doing it slightly different
[22:35:31] <JamesMGreene> I'll have unit tests to explain this one later ;)
[22:35:36] <Krinkle> I get it
[22:35:37] <JamesMGreene> What might you change?
[22:35:44] <Krinkle> I ran into this earlier today
[22:35:52] <Krinkle> when calling testSuites() multiple times
[22:35:56] <JamesMGreene> yup
[22:36:02] <Krinkle> JamesMGreene: Don't call QUnit.begin unconditinally.
[22:36:27] <Krinkle> ah, you aren't
[22:36:29] <Krinkle> you moved that too
[22:36:52] <JamesMGreene> yeah, the callback setup for QUnit composite was very sloppy
[22:37:00] <JamesMGreene> I moved almost all of them before the PR was done
[22:37:41] <JamesMGreene> I mean, even so
[22:37:45] <Krinkle> https://github.com/JamesMGreene/qunit/blob/447d21027ce526dd412096332afb18cc0007fed7/addons/composite/qunit-composite.js#L45
[22:37:47] <Krinkle> what about that line
[22:37:54] <JamesMGreene> That `QUnit.begin` could be in an else block instead of where it is?
[22:37:59] <Krinkle> when can it start without begin?
[22:38:34] <JamesMGreene> I was probably being over protective there
[22:38:39] <Krinkle> ok
[22:38:50] <JamesMGreene> but let me explain
[22:39:02] <JamesMGreene> Here's the [crappy] test page I was picturing someone doing
[22:39:13] <JamesMGreene> but perhaps it would still all happen before `begin`
[22:39:20] <JamesMGreene> qunit.js
[22:39:27] <JamesMGreene> normal `test` script(s)
[22:39:31] <JamesMGreene> qunit-composite.js
[22:39:36] <JamesMGreene> `testSuites` calls
[22:39:57] <JamesMGreene> I guess as long as those are in the normal markup, they would still all be there before `begin`
[22:40:05] <Krinkle> QUnit.test() doesn't execute a test, it schedules a test
[22:40:09] <JamesMGreene> right
[22:40:09] <Krinkle> yep
[22:40:20] <JamesMGreene> I think I was thinking of the AMD folks
[22:40:34] <Krinkle> so the call to asyncTest from testSuites, won't be handled before begin
[22:40:34] <JamesMGreene> but even jrburke just says people should have script tags for the qunit framework includes
[22:41:31] <Krinkle> I don't think it matters, in MediaWiki for instance (my other job, main job actually) we load qunit asynchrously too.
[22:41:43] <Krinkle> but our loading system handles it properly, no issues.
[22:41:57] <Krinkle> dependenies etc.
[22:41:58] <Krinkle> anyway
[22:42:21] <JamesMGreene> So it sounds like you want to hack this commit yup
[22:42:22] <Krinkle> I've named isInited, hasBoundBegin, and left the rest mostly the same
[22:42:35] <JamesMGreene> Bound?
[22:42:38] <Krinkle> (but without the protective part)
[22:42:43] <Krinkle> .bind() -> has been bound
[22:42:56] <Krinkle> whether we bound the handler to begin() yet
[22:43:15] <Krinkle> because it hasn't actually inited yet per se.
[22:43:17] <Krinkle> semantics
[22:43:49] <Krinkle> it threw me off at first
[22:44:03] <Krinkle> I thought, if it checks whether it has initiated, it might as well use "iframe" as a check
[22:44:12] <Krinkle> but then I realised that the var is a bit misnamed
[22:44:50] <JamesMGreene> sure
[22:45:04] <JamesMGreene> So what did you do with initIFrame here?
[22:45:06] <JamesMGreene> Make it a var?
[22:45:35] <Krinkle> https://gist.github.com/Krinkle/f485b3e2011f6548ca78
[22:45:35] <JamesMGreene> since your surface redux changes don't match mine
[22:46:08] <JamesMGreene> oh, nice
[22:46:20] <Krinkle> my gut says I should actually even put hasBoundBegin = true; above the begin() call, to account for QUnit.begin() doing the impossible.
[22:46:50] * Krinkle updated
[22:48:00] <JamesMGreene> so you probably just left the `initIFrame` implementation intact (i.e. didn't take any of these changes) right?
[22:48:31] <Krinkle> indeed
[22:48:41] <JamesMGreene> OK, that's cool
[22:48:47] <JamesMGreene> like that
[22:48:50] <Krinkle> https://gist.github.com/Krinkle/f485b3e2011f6548ca78
[22:48:55] <Krinkle> git log -n4 -p
[22:49:52] <Krinkle> -n3 *
[22:49:53] <JamesMGreene> Ah
[22:50:16] <JamesMGreene> you snuck in a style fix that I missed (tonight)
[22:50:28] <Krinkle>  iframeWin.QUnit.done( QUnit.start ); ?
[22:50:34] <JamesMGreene> L58/59 in your gist
[22:50:36] <JamesMGreene> yup
[22:50:56] <Krinkle> I figured so. That's the one that wasn't there when you did it originally
[22:51:04] <Krinkle> it used to be wrapped in a function
[22:51:15] <Krinkle> which I got rid of earlier today in the other commit
[22:51:39] <Krinkle> start() is detachable
[22:51:56] <JamesMGreene> So let's just say we're going to use your rebase :)
[22:52:11] <JamesMGreene> I don't want to have to get that tweak back into the previous commit :-P
[22:52:26] <Krinkle> yeah, that's a pain, no matter how many tricks
[22:52:42] <Krinkle> I did keep your authorship on most, so it's still going to be your change.
[22:52:49] <Krinkle> shall we continue?
[22:53:09] <Krinkle> not reflected in that log, I see. /me fixes that
[22:54:28] <JamesMGreene> commit?
[22:54:33] <JamesMGreene> Assuming so
[22:55:10] <Krinkle> yep
[22:55:31] <JamesMGreene> k, next
[22:55:37] <Krinkle> I applied the git refs from your PR: https://gist.github.com/Krinkle/f485b3e2011f6548ca78
[22:55:44] <Krinkle> (author/date)
[22:56:02] <Krinkle> next: https://github.com/JamesMGreene/qunit/commit/12fc0da2d673b2a58844ed8c168aa5f66f85ae36
[22:56:02] <b-ot> Krinkle: James M. Greene (2w 5d ago): QUnit Composite: Removed a callback that showed which test was running since QUnit core already takes care of that.
[22:56:13] <Krinkle> I was wondering about that code
[22:56:18] <Krinkle> it doesn't do anything, does it.
[22:56:31] <JamesMGreene> well, it just repeats what QUnit core already did :-{
[22:56:36] <Krinkle> yep
[22:56:49] <JamesMGreene> might not have when it was originally created, I would guess
[22:57:00] <JamesMGreene> these addons were pretty stale
[22:57:10] <Krinkle> yeah
[22:57:17] <Krinkle> so it doens't apply cleanly with cherry-pick
[22:57:33] <Krinkle> just remove it manually, git add -p, and git commit -C 12fc0da2d673b2a58844ed8c168aa5f66f85ae36
[22:57:46] <Krinkle> that will re-use the commit message of that original change
[22:57:52] <Krinkle> (which I then ammend without "QUnit")
[22:58:31] <JamesMGreene> it was a long message, though
[22:58:33] <Krinkle> and rephrase since it is too long
[22:58:34] <Krinkle> yeah
[22:58:55] <JamesMGreene> I just went with "Composite: Removed a useless callback"
[22:59:48] <JamesMGreene> next commit is intersting =)
[23:00:36] <JamesMGreene> This will be a very manual one
[23:01:08] <Krinkle> so some of these changes are obsolete, but I'm trying to understand the rest.
[23:01:30] <Krinkle> so what does QUnit.module( null, { do?
[23:04:25] <JamesMGreene> Remember the Dev Leads email chain where they were talking about breaks happening due to leveraging "coincidental" behavior?
[23:04:38] <JamesMGreene> that applies here, lol
[23:04:44] <JamesMGreene> We should probably remove it
[23:06:13] <JamesMGreene> The actual goal of this commit is to prevent these Composite logging callbacks from being invoked by normal tests
[23:06:27] <Krinkle> Right
[23:06:29] <JamesMGreene> For that, I have the `executingComposite` flag
[23:06:44] <Krinkle> So you group the tests in a module, so you know when to stop
[23:06:50] <JamesMGreene> but I set that by bastardizing a module setup/teardown
[23:07:15] <JamesMGreene> If there is another way to do it, I'd be happy for it
[23:07:58] <JamesMGreene> but due to the `test` function queuing rather than executing, the module setup/teardown (or adding fake tests before and after) were the crappy options that came to mind
[23:08:26] <Krinkle> module makes sense
[23:08:29] <JamesMGreene> the `module( null` bit is just a circumstantially convenient hack that kept it out of the UI
[23:08:29] <Krinkle> but let's name it :)
[23:08:35] <Krinkle> Yeah
[23:08:52] <JamesMGreene> Right... the trouble is I don't want it in the UI ;)
[23:09:22] <JamesMGreene> Well
[23:09:28] <JamesMGreene> and this may not be a good approach anyway
[23:09:33] <Krinkle> with a name argument and a fallback to a counter
[23:09:41] <JamesMGreene> because if the user has a module set this will disrupt it
[23:09:53] <JamesMGreene> and change the module lifecycle
[23:09:59] <Krinkle> Composite is a high level plugin, not an assertion or test level, but module level I'd say.
[23:10:13] <Krinkle> I like your approach
[23:10:31] <JamesMGreene> just depends on if the users is mixing and matching `test`s plus `testSuites`
[23:10:43] <JamesMGreene> which I advise against, of course, but I'm sure it will happen
[23:11:12] <Krinkle> We could rename it to QUnit.compose
[23:11:31] <Krinkle> so it doesn't list between other test* properties
[23:11:37] <Krinkle> anyway, I'm trying the following
[23:11:38] <Krinkle> QUnit.testSuites = function( name, suites ) { 
[23:11:43] <Krinkle> QUnit.module( name || 'Composition #' + modules++, {
[23:11:54] <Krinkle> eh, argument snafu
[23:11:56] <Krinkle> wrong order
[23:12:01] <Krinkle> for the fallback to make sense
[23:12:27] <JamesMGreene> huh?
[23:12:43] <JamesMGreene> also, use double quotes omg :-P
[23:12:54] <JamesMGreene> lol, oh double quotes....
[23:12:57] <Krinkle> I use single quotes everywhere.
[23:13:00] <JamesMGreene> ditto
[23:13:03] <Krinkle> except in jquery projects
[23:13:11] <Krinkle> and I believe 80% of the people here are the same
[23:13:13] <JamesMGreene> jquery org projects
[23:13:14] <Krinkle> nobody wants them
[23:13:22] <Krinkle> yes
[23:13:28] <Krinkle> we'll fix that in the future
[23:13:28] <JamesMGreene> Change the style guide, man! :-P
[23:13:42] <Krinkle> see, if jshintrc had quotmark set, I'd do it.
[23:13:43] <JamesMGreene> I was just complaining about that earlier tonight
[23:13:57] <Krinkle> cause I'd see it highlight it as I type.
[23:14:22] <Krinkle> the jquery way:
[23:14:24] <Krinkle> QUnit.testSuites = function( name, suites ) {
[23:14:25] <Krinkle> 	if ( arguments.length < 2 ) {
[23:14:25] <Krinkle> 		suites = name;
[23:14:26] <Krinkle> 		name = "Composition #" + modules++;
[23:14:28] <Krinkle> 	}
[23:14:38] <Krinkle> or === 1
[23:14:57] <JamesMGreene> === 1, for me
[23:15:16] <Krinkle> ok
[23:15:30] <JamesMGreene> Does QUnit have any such overloaded methods?
[23:15:39] <Krinkle> no, fortunately not yet.
[23:15:44] <JamesMGreene> Hmm
[23:16:08] <JamesMGreene> So do we want to do this? :-P
[23:16:12] <Krinkle> I guess
[23:16:18] <Krinkle> lets see how far we get
[23:16:20] <JamesMGreene> For BW compat sake
[23:17:19] <Krinkle> I think we crossed that line already
[23:17:30] <Krinkle> but anyway, this is actually compatible
[23:17:41] <Krinkle> progress: https://gist.github.com/Krinkle/f485b3e2011f6548ca78
[23:18:46] <JamesMGreene> `modules = 1;` to its own line
[23:18:53] <Krinkle> yep
[23:19:46] <Krinkle> now we need to get the teardown
[23:19:50] <Krinkle> hm..
[23:20:13] <Krinkle> do we want to toggle display none when not in a test?
[23:20:20] <Krinkle> so that it is hidden after the last test
[23:21:11] <Krinkle> JamesMGreene: btw, teardown/begin is before after each (async)Test, not at start/end of the entire module
[23:21:18] <Krinkle> just pointing out the obvious
[23:21:30] <JamesMGreene> Yeah
[23:21:37] <JamesMGreene> That's why I had to hack around it with the counter
[23:21:48] <Krinkle> right
[23:21:52] <JamesMGreene> I wish there was a module version
[23:22:36] <JamesMGreene> So your Q is do we want to display:none the iframe after each `testSuites` completion instead of in `QUnit.done`? That would make sense to me, certainly
[23:22:55] <Krinkle> ok
[23:23:28] <Krinkle> the Test constructor internally already has points for before/after the module
[23:23:31] <JamesMGreene> Pretty sure you shouldn't have moved that `QUnit.begin` to instead of the module setup, though
[23:23:58] <Krinkle> Hm..indeed
[23:24:08] <Krinkle> extra overhead
[23:24:10] <JamesMGreene> This commit was changing the other callback registrations
[23:24:11] <Krinkle> works, but pointless
[23:24:22] <JamesMGreene> Would it work?
[23:24:27] <Krinkle> sure
[23:24:33] <JamesMGreene> how?
[23:24:48] <JamesMGreene> wouldn't that listener not be added until after QUnit actually began?
[23:24:52] <Krinkle> the first time it is called,it binds it and immediatelyt executed
[23:24:57] <Krinkle> ah, it doesn't have memory?
[23:25:09] <JamesMGreene> `QUnit.begin`? I don't think so
[23:25:12] <Krinkle> indeed
[23:25:15] <Krinkle> it should
[23:25:16] <Krinkle> oh well
[23:25:18] <Krinkle> details :P
[23:25:21] <Krinkle> like document-ready
[23:25:24] <JamesMGreene> another day :-P
[23:25:33] <Krinkle> $.Callbacks( "once memory" )
[23:25:50] <JamesMGreene> Yeah would be nice
[23:25:59] <JamesMGreene> but probably not that useful for your average QUnit user
[23:26:26] <JamesMGreene> But yeah, this commit is all about changing the other callback registrations
[23:26:50] <JamesMGreene> with the `executingComposite` flag
[23:28:20] <Krinkle> https://gist.github.com/Krinkle/f485b3e2011f6548ca78?2
[23:29:26] <Krinkle> I guess it would miss logging outside tests but inside the module this way
[23:29:37] <Krinkle> but I see we ignore those logs, right?
[23:29:54] <JamesMGreene> Don't the `testDone` callbacks get called AFTER `teardown`, though?
[23:30:21] <JamesMGreene> i.e. this would never let the `testDone` callback fire
[23:30:21] <Krinkle> Hm..
[23:30:33] <JamesMGreene> And this is why this addon needs real unit tests
[23:30:34] <JamesMGreene> lol
[23:30:42] <JamesMGreene> brutal
[23:31:21] <Krinkle> Oh, I ddn't run those yet
[23:31:30] <Krinkle> yeah, it's called after teardown
[23:31:33] <Krinkle> bah
[23:31:36] <JamesMGreene> yup
[23:31:38] <Krinkle> but
[23:31:43] <JamesMGreene> welcome to crazy counter central
[23:31:45] <Krinkle> do we need logs for assertions or tests
[23:31:49] <Krinkle> or both
[23:32:01] <Krinkle> nvm
[23:32:06] <Krinkle> I'm confusing testDone() with log()
[23:32:23] <JamesMGreene> just the tests (suites)
[23:32:58] <Krinkle> what do you mean
[23:33:12] <Krinkle> we need both assert() info and test() info
[23:33:18] <JamesMGreene> yes
[23:33:25] <Krinkle> log() and testDone() respectively
[23:33:29] <JamesMGreene> yes
[23:33:40] <JamesMGreene> but we don't need to do anything special for the log callback
[23:33:50] <JamesMGreene> We just `QUnit.push` and let it do its thang
[23:33:56] <Krinkle> yep
[23:34:06] <JamesMGreene> `testDone` has special handling for suites
[23:34:14] <Krinkle> though, due to the collapse bug I fixed earlier, it wasn't visible that it isn't working properly actually
[23:34:32] <Krinkle> JamesMGreene: git stash; git checkout master;
[23:34:39] <Krinkle> run the composite test
[23:35:03] <Krinkle> then click (single click) on one of the tests
[23:35:10] <Krinkle> "undefined" "undefined"
[23:35:39] <JamesMGreene> lol
[23:35:40] <JamesMGreene> Fixed in my PR
[23:35:48] <Krinkle> presumably
[23:35:55] <JamesMGreene> just sayin'... :)
[23:35:57] <Krinkle> this is  because log() doesn't just get assertions
[23:36:19] <Krinkle> this wasn't visible before because they were hard display none'd
[23:36:32] <JamesMGreene> yup
[23:36:50] <JamesMGreene> when I made them visible then I noticed it too
[23:39:04] <JamesMGreene> Really wish we started with my PR ;)
[23:39:06] <JamesMGreene> lol
[23:39:14] <JamesMGreene> manual merges are painful
[23:39:25] <JamesMGreene> though this is making for lots of good discussion
[23:42:20] <Krinkle> https://gist.github.com/Krinkle/f485b3e2011f6548ca78?3
[23:42:23] <Krinkle> getting closer
[23:42:29] <Krinkle> left once() out for now
[23:42:30] <JamesMGreene> Anyway, the fix for the "undefined"s is in the next commit https://github.com/JamesMGreene/qunit/commit/0f0fde1746428e72bf77fe668cfdb53342b1ede5#L0R117
[23:42:30] <b-ot> JamesMGreene: James M. Greene (2w 5d ago): QUnit Composite: Improved the defensive coding techniques used while working with the iframe.
[23:42:32] <Krinkle> dirty but works
[23:42:53] <Krinkle> it seems a small change now, did I forget something?
[23:43:26] <JamesMGreene> gimme a minute to look through it
[23:43:27] <JamesMGreene> quick note
[23:43:35] <JamesMGreene> your `    modules = 1,` has leading spaces instead of a tab
[23:43:51] <Krinkle> no
[23:44:08] <Krinkle> that's probably github
[23:44:22] <Krinkle> when I pasted it into the textarea, it converted it
[23:44:29] <Krinkle> it does that sometimes among the first few lines
[23:44:31] <Krinkle> I noticed it before
[23:44:35] <Krinkle> the first tab is eaten
[23:46:29] <JamesMGreene> Hmm
[23:46:56] <JamesMGreene> I think the teardown is basically worthless now
[23:47:21] <JamesMGreene> You could just add the `moduleDone` callback somewhere else
[23:47:28] <Krinkle> in setup
[23:47:39] <Krinkle> that was the same in your change though
[23:48:15] <JamesMGreene> Or even outside of it
[23:48:34] <JamesMGreene> yeah, but my use of `once` changes how it behaves
[23:48:49] <Krinkle> either way, could've gone into setup
[23:48:54] <JamesMGreene> Your means all subsequent `moduleDone` calls will set that
[23:49:02] <Krinkle> yeah
[23:49:03] <Krinkle> :)
[23:49:19] <Krinkle> dirty
[23:49:24] <JamesMGreene> But if we leave it without the `once` functionality, then there isn't any need to add the same `moduleDone` handler every time someone runs `testSuites`
[23:49:38] <Krinkle> Right
[23:49:41] <JamesMGreene> So we should just add it once instead
[23:49:47] <JamesMGreene> just like the iframe creation
[23:49:52] <Krinkle> yep
[23:50:02] <Krinkle> oh yeah, this is going to eat memoty
[23:50:47] <Krinkle> wait, why are we counting test suites
[23:51:01] <Krinkle> *module* done
[23:51:02] <Krinkle> not test done
[23:51:44] <JamesMGreene> Hmm?
[23:52:00] <JamesMGreene> Right, thus why I'm saying teardown is useless now
[23:52:06] <Krinkle> Yep
[23:52:15] <Krinkle> DaveMethvin: Hi again
[23:52:19] <Krinkle> yep, still here.
[23:52:28] <Krinkle> https://gist.github.com/Krinkle/f485b3e2011f6548ca78?4
[23:52:34] <Krinkle> JamesMGreene: ^
[23:53:04] <Krinkle> %5
[23:53:33] <JamesMGreene> kill `suiteCount`
[23:53:54] <Krinkle> indeed
[23:54:11] <Krinkle> %R
[23:54:35] <JamesMGreene> 6? :)
[23:54:40] <Krinkle> Refresh
[23:54:47] <Krinkle> it r14 actually
[23:54:59] <Krinkle> 17 even
[23:55:48] <JamesMGreene> k
[23:56:36] <JamesMGreene> now move `QUnit.testDone`, `QUnit.moduleDone`, and `QUnit.done` all into the `if ( !hasBoundBegin )` block
[23:57:43] <JamesMGreene> We only want to call those once per run, too
[23:58:41] <JamesMGreene> _then_ we should be up to par with this commit
[23:59:04] <JamesMGreene> Oh, we also need to update the README.md for the new signature
