[04:21:58] <jqcommit> [13qunit] 15JamesMGreene opened pull request #643: Logging: Added Test's runtime to `QUnit.log` details (06master...06assert-timing) 02http://git.io/XH9Zhw
[05:42:28] <scott_gonzalez> ?tell markelog I saw a comment from you on https://github.com/jscs-dev/node-jscs/pull/606, but I can't reply because the comment seems to be gone.
[05:42:28] <b-ot> scott_gonzalez: Iâ€™ll tell markelog about that.
[05:42:52] <scott_gonzalez> Anyway, the rules are more complicated than what's actually written in the style guide.
[05:43:19] <scott_gonzalez> The first/last parameter exceptions are really only for multiline function calls.
[05:43:48] <scott_gonzalez> So short calls *should* have a space:
[05:43:53] <scott_gonzalez> foo( "a", { b: "c" } )
[05:43:58] <scott_gonzalez> Long calls should not:
[05:44:01] <scott_gonzalez> foo( "a", {
[05:44:06] <scott_gonzalez>   b: "c"
[05:44:09] <scott_gonzalez> })
[05:44:45] <scott_gonzalez> Same for first parameter. foo( { a: "b" }, c ) should have a space.
[05:44:50] <scott_gonzalez> foo({
[05:44:56] <scott_gonzalez>    a: "b"
[05:45:00] <scott_gonzalez> }, c );
[05:45:22] <scott_gonzalez> Objects and arrays have the same treatement in this regard.
[05:45:43] <scott_gonzalez> And you're correct that it's only creation, not access, that comes in to play.
[05:46:08] <scott_gonzalez> ?tell markelog read the channel history start at my first message
[05:46:08] <b-ot> scott_gonzalez: Iâ€™ll tell markelog about that.
[06:32:03] <JamesMGreene> jzaefferer leobalter Krinkle: Any hot issues for QUnit that you'd like tackled first if I have time?  Otherwise I'll just keep grabbing them at random as they interest me
[06:32:59] <leobalter> I'm reviewing your PRs atm
[06:33:12] <leobalter> a lot of good work there
[06:33:20] <JamesMGreene> thanks
[06:33:25] <JamesMGreene> Finally had some time ;)
[06:35:02] <Krinkle> JamesMGreene: https://github.com/jquery/qunit/issues/531
[06:35:14] <Krinkle> I guess #422 at first
[06:35:37] <Krinkle> I've been a bit reserving on wanting to do it, but I'd love to just see it done. 
[06:35:38] <JamesMGreene> Want me to take #422 back from you?
[06:35:43] <JamesMGreene> can do
[06:35:58] <Krinkle> cleared assignee
[06:36:05] <jqcommit> [13qunit] 15Krinkle unassigned issue #422: Implement QUnit callbacks event listener style 02http://git.io/Wx5GAA
[06:37:29] <JamesMGreene> Well that was rude since I had already self-assigned it :-P
[06:37:33] <Krinkle> That one, together with proper var done = async(); done() stuff (thus enabling us to run async tests in paralell by default, e.g. up to 5 at the time or whatever). 
[06:37:45] <jqcommit> [13qunit] 15JamesMGreene assigned issue #422: Implement QUnit callbacks event listener style 02http://git.io/Wx5GAA
[06:38:17] <Krinkle> JamesMGreene: It didn't show that on my screen. API must be lacking conflict resolution and just overwrite assuming I was aware of the latest state
[06:38:38] <JamesMGreene> Likely so, and as I figured. No offense taken :)
[06:39:09] <jqcommit> [13qunit] 15JamesMGreene assigned issue #534: Implement async/done callback system 02http://git.io/Mfd9rg
[06:39:34] <JamesMGreene> I'm still a bit doubtful of #531
[06:40:15] <JamesMGreene> It's slightly conflicts with #422, depending on whose event names "win"
[06:40:39] <JamesMGreene> Guess it never hurts to ask
[06:56:55] <jqcommit> [13qunit] 15JamesMGreene assigned issue #531: Standard reporter interface 02http://git.io/xZi4Fg
[08:44:54] <jqcommit> [13jquery] 15zyayhj opened pull request #1645: Update Data.js (06master...06patch-1) 02http://git.io/9s8T0w
[08:46:05] <jqcommit> [13jquery] 15zyayhj closed pull request #1645: Update Data.js (06master...06patch-1) 02http://git.io/9s8T0w
[13:42:23] <jzaefferer> JamesMGreene Krinkle: I'd like us to implement better async handling for 1.16, so that we can start promoting that
[13:42:51] <Krinkle> jzaefferer: Wanna go the same route as with assert? E.g. faux API first, and have implementation follow
[13:43:06] <JamesMGreene> I can tackle that after the event emitter work
[13:43:43] <Krinkle> jzaefferer: It shouldn't be too complicated though, and unlike assert, it will have larger semantic differences I'd rather avoid.
[13:43:46] <JamesMGreene> In fact, I already assigned it to myself earlier today
[13:43:48] <jzaefferer> I think event emitter can come later
[13:43:59] <Krinkle> e.g. keep increment-based thing for back-compat with stop/start globals
[13:44:13] <JamesMGreene> Eh, event emitter is super easy
[13:44:14] <Krinkle> and implement async() unique callback returning logic now.
[13:44:18] <jzaefferer> replacing stop/start affects every project, while the logging affects the grunt-qunit plugin and a few other places
[13:44:21] <JamesMGreene> I'm almost done with it already, just adding tests
[13:44:37] <jzaefferer> So for async handling I'm currently looking for the right ticket or comment
[13:45:00] <JamesMGreene> https://github.com/jquery/qunit/issues/534 ?
[13:45:02] <jzaefferer> JamesMGreene: gotcha, I assumed that would be more complicated. But then your 90% done might be just 20% after a review ;)
[13:45:06] <Krinkle> https://github.com/jquery/qunit/issues/534
[13:45:13] <JamesMGreene> lol, pessimist
[13:45:34] <jzaefferer> Thanks
[13:45:44] <jzaefferer> So this comment: https://github.com/jquery/qunit/issues/534#issuecomment-51205736
[13:45:49] <JamesMGreene> The biggest question plaguing me on the event emitter stuff is if we stick with the new event names we discussed in the issue or not
[13:46:03] <jzaefferer> I very much like the concept tape has, except we could just use our existing expect() method
[13:46:23] <Krinkle> jzaefferer: There is a difference beyond API surface though
[13:46:29] <Krinkle> with async/done vs. end()
[13:46:33] <jzaefferer> When you use it, the test turns async, and is done when you called the specified number of assertions
[13:46:33] <Krinkle> I dont mind enforcing .end() everywhere
[13:46:43] <Krinkle> but it means you can't work with multiple callbacks easily
[13:46:58] <jzaefferer> Along with the promise support, we'd have two approaches that should nicely complement each other
[13:47:12] <JamesMGreene> I need to run but I'll catch up with you guys later
[13:47:16] <jzaefferer> plan() doesn't require done() or end() calls anywhere
[13:47:25] <jzaefferer> that's the beauty of it
[13:47:35] <Krinkle> I'm not convinced supporting promises built-in is useful.
[13:48:43] <Krinkle> jzaefferer: right, so there's three approaches possible
[13:48:56] <jzaefferer> The ember guys are using them already: https://github.com/rwjblue/ember-qunit#async-example
[13:49:11] <Krinkle> two of which require a fixed number of assertions to be known in advance in order to make use of async testing, instead of having expeted # being a separate opt-in feature.
[13:49:31] <Krinkle> 1. async() returns done(), can be called multiple times, if called one or more, all unique dones() have to be invoked to end the test.
[13:49:41] <Krinkle> 2. all tests are async-ish, they end with end() is called, required always
[13:50:07] <Krinkle> 3. expect/plan(Number), as soon as Nth assertion is seen, test ends. Else it times out or errors for too many assertions on that test object.
[13:50:50] <jzaefferer> 4. return promise?
[13:51:07] <Krinkle> I don't like forcing all users to know the number of tests. It's a burden to maintain. Some projects want it, and require it, that's fine, but I don't like it as a prerequisite to use async testing.
[13:51:14] <Krinkle> what would that look like?
[13:51:34] <jzaefferer> Like this: https://github.com/rwjblue/ember-qunit#async-example
[13:52:01] <jzaefferer> That's pretty much what James implemented now in https://github.com/jquery/qunit/pull/634
[13:52:47] <Krinkle> it makes the tests awkward imho. Forcing a return value and a fair amount of bootstrapping and clutter in the tests to generate promises where you need them.
[13:53:01] <Krinkle> https://github.com/jquery/qunit/issues/534#issuecomment-47450327
[13:53:20] <Krinkle> how'd that end up being? new Promise here, new promise there, then you need a .when(), and another wrapped around the callbacks.
[13:54:28] <Krinkle> Those users that have a promise readily available without clutter can easily call myoromise.then(done) at the end
[13:54:34] <Krinkle> so one supports the other easily.
[13:55:35] <Krinkle> if we have artbirrary nesting of tests, then I'd be easier sold on this, becuase you can just create a separate test for each assertion that has a promise.
[13:55:50] <Krinkle> Thoughts?
[13:57:43] <jzaefferer> I've updated the ticket description to include the options we are discussing: https://github.com/jquery/qunit/issues/534#issue-27563274
[13:58:44] <jzaefferer> Overlaps quite a bit with your comment
[13:58:49] <Krinkle> cool
[13:59:31] <jzaefferer> The only time I used Promises was when I needed to wrap N API calls into a single callback. jQuery's $.Deferred made that a bit easier.
[13:59:44] <Krinkle> $.when?
[13:59:50] <jzaefferer> Otherwise I'm not convinced of using Promises everywhere
[14:00:15] <jzaefferer> Yeah, using $.when.apply( $.when, array )
[14:00:39] <jzaefferer> Was annoying that I had to use apply that way, since just passing an array will resolve the promise using the array as the value...
[14:01:00] <jzaefferer> What do you think about getting rid of asyncTest?
[14:01:54] <jzaefferer> var done() = assert.async(); still seems like the best choice. Explicit, flexible, scoped to the test
[14:02:30] <jzaefferer> As you show in your example, explicit support for promises saves you very little
[14:02:44] <jzaefferer> And counting assertions isn't not always desirable or practical, and also relies on rather implicit semantics
[14:48:13] <jzaefferer> Krinkle: thoughts?
[14:53:12] <jqcommit> [13qunit] 15jzaefferer pushed 1 new commit to 06master: 02http://git.io/ZlBSHQ
[14:53:12] <jqcommit> 13qunit/06master 1402f59f1 15James M. Greene: HTML Reporter: Output runtime of each assertion in results...
[14:54:10] <jzaefferer> Krinkle: would also be good to get your feedback on https://github.com/jquery/qunit/issues/633#issuecomment-53442372
[14:58:41] <Krinkle> jzaefferer: It sounds like you're saying for modules, the naming setup/teardown beforeEach/afterEach both works, but we prefer beforeEach/afterEach because for someothing else that isn't module(), setup/teardown doens't work well as name?
[14:58:47] <Krinkle> What other thing?
[16:21:06] <jqcommit> [13qunit] 15JamesMGreene closed pull request #640: Perf: Use `Error#stack` without throwing when available (06master...06unthrown-stack) 02http://git.io/xkGjpw
