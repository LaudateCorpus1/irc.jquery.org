[05:17:31] <doesallmagic2> Project jQuery Migrate Core build #18: FAILURE in 30 min: http://jenkins.jquery.com/job/jQuery%20Migrate%20Core/18/
[05:57:10] <jqcommit> [13api.jquery.com] 15AurelioDeRosa opened pull request #522: Update visible-selector.xml (06master...06patch-1) 02http://git.io/pnC8Sw
[06:05:18] <doesallmagic2> Project jQuery Migrate Core 1.x build #221: STILL UNSTABLE in 30 min: http://jenkins.jquery.com/job/jQuery%20Migrate%20Core%201.x/221/
[06:07:50] <jqcommit> [13api.jquery.com] 15kswedberg closed pull request #521: Update wrapAll.xml (06master...06patch-2) 02http://git.io/bHWa4w
[06:20:03] <jqcommit> [13api.jquery.com] 15kswedberg tagged 06v1.11.12 at 149310bfa: 02http://git.io/D7SeKQ
[09:42:41] <doesallmagic2> Project jQuery Migrate Core build #19: STILL FAILING in 30 min: http://jenkins.jquery.com/job/jQuery%20Migrate%20Core/19/
[10:21:46] <mikesherov_> DaveMethvin: yt?
[10:21:54] <mikesherov_> check this out: https://bugzilla.mozilla.org/show_bug.cgi?id=1019721
[10:25:53] <DaveMethvin> mikesherov: the chrome/ff guys are on the track of some good tools for dealing with Promise, the difficulties come in when using a shim
[10:28:02] <mikesherov_> right
[10:28:09] <scott_gonzalez> FWIW, it looks like NPO (https://github.com/getify/native-promise-only) is <1.5k min+gzip
[10:28:30] <scott_gonzalez> I ran the current source through closure-compiler.appspot.com and got 1.23k
[10:28:46] <scott_gonzalez> That's usually pretty similar to uglify results.
[10:28:58] <scott_gonzalez> And that includes the UMD wrapper.
[10:29:16] <mikesherov_> and there are probably smaller implementations
[10:29:26] <mikesherov_> imagine if gibson0421 took a whack at it
[10:29:33] <mikesherov_> that thing would be like .1KB
[10:30:17] <scott_gonzalez> heh
[10:30:31] <scott_gonzalez> Yeah, so I don't think the size of a shim should deter us.
[10:31:30] <scott_gonzalez> I wonder why https://github.com/getify/native-promise-only/blob/master/lib/npo.src.js#L16-L18 isn't just `timer = setImmediate || setTimeout;`
[10:31:37] <DaveMethvin> scott_gonzalez: are you saying jQuery core should always include a shim? i thought the user was going to do that
[10:32:39] <mikesherov_> You know my stance. I was for including ES5 shim when necessary, so I'm fine with always including a promise shim
[10:32:55] <scott_gonzalez> Well, sticking with the [].forEach()/{}.keys(), we probably wouldn't include it.
[10:33:08] <scott_gonzalez> But I think that Promises are new enough that we should include it.
[10:33:10] <mikesherov_> with the ability to exclude it obviously if you're deploying in an environment that gaurantees native promises
[10:33:40] <scott_gonzalez> My preference is including it by default, but I could go either way, as long as we go with standards :-)
[10:33:57] <mikesherov_> We have a real chance to move forward in a big way here
[10:34:01] <scott_gonzalez> I could see 2.x not including it.
[10:34:14] <scott_gonzalez> But we'd need to be clear about which browsers need the shim even for 2.x
[10:34:33] <scott_gonzalez> My view of what 2.x should be has always been a bit different than the rest of the team.
[10:34:38] <mikesherov_> but still, we'd provide a blessed shim, that is either included or excluded by default?
[10:34:42] <scott_gonzalez> I've always thought 2.x should be "future jQuery"
[10:35:03] <DaveMethvin> the problem is getting to future jquery but releasing it in the present
[10:35:06] <mikesherov_> meaning, don't use this?
[10:35:07] <scott_gonzalez> Yeah, we should definitely bless a solution. And it's fine if that solution is maintained by someone else.
[10:35:32] <mikesherov_> Right, but we'd pull it in with bower, and AMD require it inside jQuery, so it's not global
[10:35:36] <scott_gonzalez> Well, we'd only choose things that make sense.
[10:35:45] <scott_gonzalez> Like requring Promise to exist in 2.x would be fine in my vision.
[10:35:53] <mikesherov_> I see
[10:35:55] <DaveMethvin> which Promise tho?
[10:35:58] <scott_gonzalez> Because it works in real environments today and there is a set of use cases where that's sane.
[10:36:15] <mikesherov_> so, jQuery that works with the future, and also works with the present as long as you use blessed shims
[10:36:20] <scott_gonzalez> and it's possible to shim for some larger set of environments.
[10:37:21] <DaveMethvin> it's important to not use passive voice here though and be sure we know who's doing what when this is mixed together
[10:37:23] <scott_gonzalez> Right, and none of the "well, this mobile device has an issue that we're willing to work around in 2.x"
[10:37:25] <DaveMethvin> for example,
[10:37:39] <DaveMethvin> if we are choosing a Promise shim for everyone i suspect we'll piss people off
[10:38:00] <mikesherov_> not if it's a shim that the community agrees on and supports
[10:38:05] <scott_gonzalez> Who cares? We shouldn't let the community drama drive technical decisions.
[10:38:08] <mikesherov_> like a set of canonical shims
[10:38:18] <mikesherov_> agreed about ignoring the drama
[10:38:30] <mikesherov_> but still, can use this as opportunity to truly support our mission
[10:38:32] <DaveMethvin> there's a difference between drama and real technical issues
[10:38:40] <scott_gonzalez> Right, we pick a shim based on its technical merit of adhering to the spec, being maintained, etc.
[10:38:45] <mikesherov_> jQuery needs true canonical shims
[10:38:52] <mikesherov_> because the community needs it
[10:39:13] <scott_gonzalez> If someone says "But I prefer X over Y because Z" we say "Great. So build without Y and manually include X.
[10:39:20] <scott_gonzalez> "Go away, we have working software"
[10:39:36] <mikesherov_> right
[10:39:46] <DaveMethvin> you'll need to define how that process would work, we'd need some form of dependency injection?
[10:39:54] <mikesherov_> meaning, we can use our existing momentum and market saturation to move the community forward
[10:40:02] <scott_gonzalez> Nah, you just include the shim before jQuery.
[10:40:05] <mikesherov_> right now, we are holding back because solutions don't exist
[10:40:12] <DaveMethvin> i thought we were including it ourselves?
[10:40:13] <scott_gonzalez> We only do this on things that are actually spec'd.
[10:40:20] <mikesherov_> but still, dependency injection is the same as UMD
[10:40:36] <mikesherov_> you can inject promises via AMD
[10:40:42] <scott_gonzalez> If we include it ourselves, it'd just be another module that you can manually exclude in a custom build.
[10:40:46] <mikesherov_> literally, modules ARE DI containers
[10:41:03] <DaveMethvin> okay but i'm still thinking we're at 90% using the monolithic file
[10:41:12] <mikesherov_> Right
[10:41:13] <DaveMethvin> so are we just talking to the 10%?
[10:41:22] <mikesherov_> but this is looking at the present as an indication of the future
[10:41:37] <mikesherov_> and those numbers won't move if we don't give people reason or ability to move in a real way
[10:41:38] <scott_gonzalez> 90% using the monolithic file is probably where we want to be today anyway.
[10:41:56] <mikesherov_> the 10% are the 10% who will use $.xhr
[10:42:01] <mikesherov_> for about 3 years
[10:42:01] <DaveMethvin> let me restate. will the people using the monolithic file use $.xhr?
[10:42:12] <mikesherov_> IMO: ye
[10:42:14] <scott_gonzalez> Hopefully
[10:42:14] <mikesherov_> IMO: yes
[10:42:35] <DaveMethvin> ok, how? will they include a Promise shim separate from jquery?
[10:42:38] <mikesherov_> again, we can make the Promise shim be in by default but excludable
[10:42:49] <scott_gonzalez> What mikesherov_ said.
[10:42:53] <DaveMethvin> excludable from the monolithic file?
[10:42:59] <DaveMethvin> it's monolithic
[10:43:02] <mikesherov_> excludable from a built version
[10:43:06] <scott_gonzalez> Excludable from a custom build.
[10:43:12] <scott_gonzalez> We're talking ~1k.
[10:43:16] <mikesherov_> if you're in the 90%, you get monolith, which includes a promise shim
[10:43:23] <DaveMethvin> you changed the topic, i wasn't talking about custom builds
[10:43:33] <mikesherov_> if you're in 10%, you exclude the shim and provide your own
[10:43:41] <DaveMethvin> ok, mikesherov says it's in the monolithic file
[10:43:53] <scott_gonzalez> So the simple answer should be monolithic includes the Promise shim.
[10:43:59] <mikesherov_> right
[10:44:12] <scott_gonzalez> We can have a complex answer which is based on whether 2.x should include the Promise shim by default.
[10:44:14] <mikesherov_> same as my opinion of by default including things like .forEach
[10:44:49] <scott_gonzalez> .forEach() is a bit trickier because support is so widespread (depending on the project)
[10:45:00] <scott_gonzalez> For Globalize, it's literally one browser version.
[10:45:29] <DaveMethvin> ok, gotta run for a while but bbl
[10:45:36] <mikesherov_> yeah
[10:45:59] <mikesherov_> was just explaining where my stance comes from, let's ignore forEach for now
[10:47:03] <scott_gonzalez> So I agree the simple answer is to include Promise shim in the monolith.
[10:47:06] <mikesherov_> scott_gonzalez: minify this please: https://github.com/then/promise
[10:47:36] <scott_gonzalez> That's tough, it has an external dependency.
[10:47:47] <scott_gonzalez> I'll try.
[10:48:22] <scott_gonzalez> mikesherov_: Does that work in the browser?
[10:48:35] <scott_gonzalez> It's very node-specific source.
[10:48:53] <mikesherov_> no, but it can be adapted
[10:49:03] <mikesherov_> meaning, just to see what the canonical stuff looks like
[10:49:12] <scott_gonzalez> It's bigger than NPO.
[10:49:35] <mikesherov_> then/promise seems to compile down to Compiled Size:	1.01KB gzipped
[10:49:37] <mikesherov_> anyway
[10:50:16] <scott_gonzalez> ~1.5k
[10:50:38] <scott_gonzalez> mikesherov_: How did you get 1k?
[10:50:47] <scott_gonzalez> Did you include index.js, core.js, and asap?
[10:50:56] <doesallmagic2> Project jQuery Core build #1170: UNSTABLE in 15 min: http://jenkins.jquery.com/job/jQuery%20Core/1170/
[10:51:14] <mikesherov_> asap is literally setTimeout
[10:51:22] <mikesherov_> but yeah
[10:51:32] <mikesherov_> just looking at possible minimum size
[10:51:39] <mikesherov_> seems around 1KB, like you said
[10:51:45] <scott_gonzalez> Even without asap, it's 1.37k for me.
[10:51:48] <scott_gonzalez> index + core
[10:51:51] <mikesherov_> kk
[10:53:01] <scott_gonzalez> 1.34 with the requires removed and `asap = setTimeout`
[10:53:14] <scott_gonzalez> complies with no warnings at that point.
[10:53:18] <scott_gonzalez> *compiles
[10:53:43] <scott_gonzalez> I'd say we'll probably get close to 1k total if we worked on it.
[10:53:54] <scott_gonzalez> We'd also have to see how the size is affected with the rest of core.
[10:55:30] <scott_gonzalez> A quick test of throwing 1.11.1 in the mix shaves .17 off of then/promise
[10:56:43] <mikesherov_> right
[10:56:49] <scott_gonzalez> Similar for NPO, shaves off .13
[10:56:56] <scott_gonzalez> So we're pretty close to 1k.
[10:56:57] <mikesherov_> we could get it under 1K for sure
[10:57:04] <mikesherov_> and would be GREAT for us as a foundation
[10:57:09] <scott_gonzalez> yeah
[10:57:13] <mikesherov_> to help with the shim standardization process
[23:00:17] <jqcommit> [13jquery] 15rkanagarajnr opened pull request #1616: Test branch (06master...06test-branch) 02http://git.io/800FAw
[23:30:45] <jqcommit> [13jquery] 15parimalasnr opened pull request #1617: Nr test (06master...06nr_test) 02http://git.io/ZapO7Q
