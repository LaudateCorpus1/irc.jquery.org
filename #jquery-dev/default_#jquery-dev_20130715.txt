[04:18:14] <jqcommit> 01[13qunit01] 15jzaefferer merged 06bower-json into 06master: 02http://git.io/V1DYvQ
[04:22:49] <jqcommit> 01[13qunit01] 15jzaefferer pushed 1 new commit to 06master: 02http://git.io/AS3dNg
[04:22:49] <jqcommit> 13qunit/06master 14259606f 15Katie Gengler: Use `id` function for selection elements in two places that were not using it. Closes gh-463
[06:31:10] <sizcommit> 01[13sizzle01] 15timmywil pushed 2 new commits to 06master: 02http://git.io/uZdOrg
[06:31:10] <sizcommit> 13sizzle/06master 14e5019d4 15Timmy Willison: bower dependencies -> devDependencies
[06:31:10] <sizcommit> 13sizzle/06master 14e1fc2f8 15Timmy Willison: Lint json manifests during development
[07:09:14] <scott_gonzalez> danheberden DaveMethvin gnarf jzaefferer mikesherov rwaldron ryanneufeld s5fs timmywil
[07:09:21] <scott_gonzalez> I'm working on the CLA check for pull requests.
[07:09:34] <scott_gonzalez> How can we limit this to checking only the new commits form the PR?
[07:09:34] <timmywil> scott_gonzalez: woohoo!
[07:10:04] <scott_gonzalez> What information, if any, do we have at the time that we run our tasks in travis?
[07:10:44] <scott_gonzalez> We can audit the entire branch, but that means that every PR will fail for quite a while because we have a lot of existing commits that aren't accounted for yet.
[07:10:49] <timmywil> you mean jenkins? or are some projects using travis? either way, idk. :P
[07:11:45] <scott_gonzalez> Oh, I thought all projects were doing at least minimal checks in travis already.
[07:11:47] <scott_gonzalez> https://travis-ci.org/jquery/jquery-ui/builds/8985812
[07:11:58] <timmywil> although, judging from our testswarm test, it seems like jenkins has the latest commit sha
[07:12:32] <timmywil> seems like it would be redundant for core to use travis
[07:13:17] <scott_gonzalez> Travis gives us immediate feedback on PRs.
[07:13:31] <scott_gonzalez> It'll tell the contributor if they have lint errors, etc.
[07:13:40] <scott_gonzalez> Before we even get involved.
[07:13:40] <timmywil> so does jenkins
[07:13:57] <scott_gonzalez> You have jenkins running on PRs?
[07:14:12] <timmywil> but neway, I imagine jenkins/travis git/github plugins provide the env vars
[07:14:37] <timmywil> we have jenkins set up to run testswarm for PRs
[07:14:52] <timmywil> iirc
[07:16:20] <timmywil> scott_gonzalez: I imagine Krinkle would know this stuff
[07:16:48] <scott_gonzalez> Too bad he's no online right nwo.
[07:17:07] <timmywil> yea
[07:18:30] <scott_gonzalez> Oh well, I'll switch to something else for now.
[07:20:15] <timmywil> scott_gonzalez: how late will the UI/Mobile meeting go at the Austin Conference? could I fly out that night and make the meeting?
[07:20:46] <scott_gonzalez> Yeah. We'll start in the morning.
[07:20:55] <timmywil> cool
[09:30:26] <m_gol> DaveMethvin, did you have time to look at my e-mail?
[09:30:41] <DaveMethvin> um, which one?
[09:31:18] <m_gol> about onwheel in IE
[09:31:41] <DaveMethvin> oh yeah, i pinged the IE eng folks about it
[09:31:43] <m_gol> though that tells me the answer :D
[09:31:46] <m_gol> oh, nice :)
[09:31:46] <DaveMethvin> and i commented on the ticket too
[09:31:51] <DaveMethvin> it was a while back
[09:32:16] <DaveMethvin> i understand why all the browser guys don't want to have .onXXX properties
[09:32:22] <DaveMethvin> but they need to give us some way to detect
[09:33:58] <m_gol> they replied to me that there is a way to detect
[09:34:04] <m_gol> via some hasFeature
[09:34:13] <m_gol> and when filtering out browsers that cheat :D
[09:34:21] <DaveMethvin> right but if you look at that API it's obsolete
[09:34:29] <m_gol> replace one UA-sniffing with another one, yeah
[09:34:30] <DaveMethvin> firefox doesn't support it anymore
[09:35:40] <m_gol> what was their response?
[09:35:46] <DaveMethvin> nothing yet
[09:36:31] <DaveMethvin> what I want is an Element.canGenereateEvent("wheel")
[09:36:36] <m_gol> oh well, my bug doesn't exist anymore, apparently...
[09:36:45] <snover> complete with typos
[09:36:45] <m_gol> who removes bug reports from their tracker... :(
[09:36:51] <m_gol> ;)
[09:36:58] <DaveMethvin> Genereareararate
[09:37:00] <m_gol> http://connect.microsoft.com/IE/feedback/details/782835/missing-onwheel-attribute-for-the-wheel-event-although-its-supported-via-addeventlistener
[09:37:18] <snover> the events that start with DOM miss onXXX attributes too
[09:37:23] <m_gol> the more ereareere the more true the result
[09:38:02] <DaveMethvin> i've had that prob with connect in the past
[09:38:13] <DaveMethvin> it's not a very good bug tracker
[09:38:19] <m_gol> yeah
[09:38:23] <DaveMethvin> unlike Trac /sarcasm :D
[09:38:27] <m_gol> :D
[09:38:41] <m_gol> and you don't event talk to people there but to "Microsoft Internet Explorer Team"
[09:38:59] <snover> is the wheel event something defined in a particular specification?
[09:39:14] <m_gol> snover: yes, lemme look
[09:39:36] <DaveMethvin> http://www.w3.org/TR/DOM-Level-3-Events/#events-wheelevents
[09:40:00] <m_gol> if it were truly cross-browser, we might even support it in jQuery, like all mouse* events
[09:40:21] <m_gol> but polyfills for it are ugly and require UA-sniffing or using obsolete supports API
[09:40:35] <snover> whose obsolete supports api?
[09:40:36] <m_gol> and polyfills supporting IE6+ are even uglier ;)
[09:40:50] <m_gol> MS's hasFeature or sth like that
[09:40:59] <snover> hasFeature is a DOM standard
[09:41:08] <snover> document.implementation.hasFeature(feature, version)
[09:41:47] <m_gol> hmm
[09:41:56] <snover> document.implementation.hasFeature("Events", "3.0")
[09:42:27] <m_gol> document.implementation.hasFeature('Events.fgdfsghsdfgwerwer', '3.0')
[09:42:29] <m_gol> true in Firefox
[09:42:31] <m_gol> meh
[09:42:48] <m_gol> and I'd need document.implementation.hasFeature('Events.wheel', '3.0')
[09:43:59] <m_gol> so UA-sniffing either way
[09:44:27] <m_gol> actually, Firefox's hasFeature returns true to everything
[09:44:28] <m_gol> ...
[09:44:54] <m_gol> > document.implementation.hasFeature('sfgsdfgsdfgsdf', 'sdfgsdfgsdfg')
[09:44:54] <m_gol> true
[09:45:03] <DaveMethvin> https://bugzilla.mozilla.org/show_bug.cgi?id=801425
[09:46:09] <m_gol> DaveMethvin: why was it considered useless?
[09:46:57] <DaveMethvin> m_gol i dunno, it's not very specific is it? Seems like it only works for SVG now. https://developer.mozilla.org/en-US/docs/Site_Compatibility_for_Firefox_19
[09:48:23] <m_gol> I hope they don't just think JS feature detection via some hasFeature-like API is unnecessary
[09:48:49] <m_gol> btw, I hope at the very least MS adds onwheel attribute in IE11
[09:49:04] <m_gol> otherwise the most popular mousewheel plugin will break
[09:49:10] <m_gol> and mine, too ;)
[09:49:23] <DaveMethvin> aw cmon m_gol you can always use navigator.userAgent.indexOf() :D
[09:49:42] <m_gol> yeah, I'd have to look for Trident now
[09:49:58] <m_gol> since IE is no longer IE, apparently ;)
[09:50:05] <m_gol> even navigator.appName reports Netscape
[09:50:17] <m_gol> in IE11
[09:50:25] <DaveMethvin> and the *spec* says to do that, mind blowing
[09:50:31] <m_gol> yeah :D
[09:50:42] <m_gol> either the full browser name or "Netscape"
[09:53:11] <DaveMethvin> https://github.com/whatwg/dom/commit/cdf75764431b41dd2e3e6ca671b39ca3c8d55262
[09:53:11] <b-ot> DaveMethvin: Aryeh Gregor (8mon 4w ago): Rewrite hasFeature() to be more practical
[09:53:16] <scott_gonzalez> m_gol: hasFeature() is useless because you're expecting the browser to properly report whether it has features/bugs.
[09:53:34] <m_gol> how is that different from @supports?
[09:54:26] <scott_gonzalez> Because it actually runs through the same code path as the selector itself
[09:55:02] <DaveMethvin> in m_gol's ticket the IE guys suggested .hasFeature but it is explicitly frowned upon here: https://github.com/whatwg/dom/commit/cdf75764431b41dd2e3e6ca671b39ca3c8d55262#L0R4578
[09:55:02] <b-ot> DaveMethvin: Aryeh Gregor (8mon 4w ago): Rewrite hasFeature() to be more practical
[09:55:21] <m_gol> scott_gonzalez: anyway, the problem is there's no way to detect if a browser supports particular event
[09:55:21] <scott_gonzalez> @supports is "can you parse this set of properties?"
[09:55:21] <b-ot> scott_gonzalez: memorised ‚Äúsupports‚Äù.
[09:55:28] <DaveMethvin> haha
[09:55:33] <m_gol> which makes it impossible to feature-detect
[09:55:38] <m_gol> love those bots :D
[09:55:40] <DaveMethvin> ?supports
[09:55:41] <b-ot> DaveMethvin: "can you parse this set of properties?"
[09:55:42] <scott_gonzalez> m_gol: It's supposed to be .onXXX check.
[09:55:43] <bot-t> DaveMethvin, jQuery.support | jQuery API Documentation - A collection of properties that represent the presence of different browser features or bugs. http://api.jquery.com/jQuery.support/
[09:55:47] <scott_gonzalez> But it's not currently reliable.
[09:56:03] <m_gol> scott_gonzalez: but having the onXXX attribute is not required
[09:56:10] <scott_gonzalez> It should be.
[09:56:17] <DaveMethvin> well it isn't :)
[09:56:17] <m_gol> and IE folks said that's exactly why they don't want to implement it
[09:56:20] <scott_gonzalez> There has been no other sane proposal on any mailing list.
[09:56:24] <DaveMethvin> and i don't like .onXXX props anyway
[09:56:43] <DaveMethvin> the only reason we would want them is for feature detects
[09:56:51] <m_gol> yeah
[09:57:03] <DaveMethvin> they're specifically stopped by things like CSP
[09:57:21] <m_gol> AngularJS has a nicer version of onclick, ng-click - it's nicer because it's scoped so it's not this awful global thing
[09:57:49] <m_gol> but the usual onsth... I've only seen it in feature detects recently
[09:58:10] <DaveMethvin> also it's not done automatically by browsers, it' basically part of template processing
[09:58:16] <scott_gonzalez> This is the most recent thread I remember: http://lists.whatwg.org/htdig.cgi/whatwg-whatwg.org/2010-September/028634.html
[09:59:30] <DaveMethvin> there would definitely be some issues in defining such a method but it would be useful
[10:00:01] <DaveMethvin> whether an element can actually fire an event can depend on a lot of things including hardware and css
[10:00:15] <scott_gonzalez> A method for events seems like it would be much more reliable than the generic hasFeature().
[10:00:30] <DaveMethvin> definitely
[10:00:37] <DaveMethvin> esp since hasFeature lies :)
[10:02:04] <m_gol> so it's either supportsEvent or requiring onevent properties
[10:02:16] <m_gol> we have to have it specced bc current situation is a mess
[10:02:47] <m_gol> eh
[10:02:52] <m_gol> one problem
[10:03:04] <m_gol> it can work only for lowercase events
[10:03:22] <m_gol> because HTML ;)
[10:07:10] <m_gol> btw, jdalton had some gripes with QUnit: https://twitter.com/jdalton/status/356217526738366465
[10:07:10] <b-ot> m_gol: @jdalton: I've had nothing but probs w/ QUnit releases. For a unit testing lib you'd think they'd be all over testing their own API. Not the case :/
[10:08:15] <DaveMethvin> dunno the specifics on that, maybe jzaefferer or jamesmgreene could follow up
[10:08:22] <scott_gonzalez> No need to follow up.
[10:08:29] <scott_gonzalez> He reported a bug.
[10:08:35] <DaveMethvin> ohok
[10:08:39] <scott_gonzalez> It was node-specific.
[10:11:16] <scott_gonzalez> https://github.com/jquery/qunit/pull/401#issuecomment-20465068
[10:11:16] <b-ot> scott_gonzalez: Pull request #401 by twada (5mon 2w ago): Fix errors on non-browser environments
[10:12:47] <m_gol> k
[10:45:40] <scott_gonzalez> Krinkle: you around?
[10:46:00] <Krinkle> Just catching up on the weekend stuff, I'll be here in a minute
[10:46:04] <scott_gonzalez> ok
[10:52:51] <scott_gonzalez> DaveMethvin rwaldron: http://bugs.jquery.com/ticket/11060#comment:9 didn't seem very dramatic to me.
[10:54:23] <scott_gonzalez> But isn't this fixed?
[10:54:25] <Krinkle> here
[10:54:31] <rwaldron> scott_gonzalez: it's very dramatic
[10:54:34] <rwaldron> very "woe is me"
[10:54:51] <rwaldron> " guess I will use .attr but I think this peculiar behaviour with large numbers needs to be explicitly spelled out in the documentation (or even better fixed) because I had to Google this issue and came upon this bug by way of the blog post mentioned above after scratching my head for over an hour trying to work out what the hell was going on."
[10:54:59] <rwaldron> Really?
[10:55:06] <rwaldron> smallest fiddle.
[10:55:23] <Krinkle> scott_gonzalez: jzaefferer: The ajax tests are failing (at least some of them) because of POST request failing on build.jenkins.jquery.com, the static server somehow isn't set up properly to handle POST.
[10:55:51] <rwaldron> scott_gonzalez yes, it's "fixed"
[10:56:07] <rwaldron> in that you get a string if your number value is > 2^53
[10:56:14] <scott_gonzalez> rwaldron: I'm sure lots of people actually go through those exact steps.
[10:56:27] <rwaldron> instead of a really wrong rounded value
[10:57:08] <scott_gonzalez> A response of "This is already fixed, please upgrade your version of jQuery" would've been much more useful for that person.
[10:57:22] <scott_gonzalez> Granted, they probably wouldn't ever see your response since they commented anonymously...
[10:57:27] <rwaldron> scott_gonzalez ok, I'll edit my response
[10:57:44] <scott_gonzalez> Thanks :-)
[10:57:58] <scott_gonzalez> Krinkle: Is it running through apache or nginx?
[10:58:01] <rwaldron> I thought explaining to them IEEE double precision floating point 64 bit number behaviour was pretty nice
[10:58:27] <rwaldron> scott_gonzalez: http://bugs.jquery.com/ticket/11060#comment:10
[10:58:40] <Krinkle> scott_gonzalez: gnarf set it up, nginx afaik.
[10:59:04] <scott_gonzalez> rwaldron: Much better.
[10:59:15] <scott_gonzalez> Krinkle: Yeah, I think we've had this problem somewhere else too.
[10:59:27] <scott_gonzalez> I forget where though.
[10:59:30] <rwaldron> UGH. I hadn't noticed that trac strips out "^"
[10:59:53] <scott_gonzalez> It treats the ^ as superscript.
[11:00:15] <rwaldron> well, that would've worked nicely, except that it didnt
[11:00:22] <scott_gonzalez> heh
[11:00:22] <rwaldron> superscript would've been very appropriate
[11:00:28] <snover> ‚Äúsorry, javascript can‚Äôt deal with numbers bigger than 253, it runs out of fingers‚Äù
[11:00:29] <rwaldron> 2^53
[11:00:31] <rwaldron> amirite?
[11:00:36] <Krinkle> https://github.com/jquery/infrastructure/issues/176#issuecomment-20989235
[11:00:38] <rwaldron> snover exactly.
[11:00:47] <scott_gonzalez> Yup, except that in the email notification it made the rest of your comment superscript :-P
[11:00:56] <rwaldron> omfg
[11:00:59] <rwaldron> hilarious
[11:01:38] <snover> I‚Äôm glad that Wikipedia has an article on ‚ÄúFinger binary‚Äù
[11:01:58] <snover> with plenty of examples
[11:02:23] <scott_gonzalez> Krinkle: I've got a question about what data is availble to travis/jenkins when testing PRs.
[11:02:32] <scott_gonzalez> I want to write the code to verify CLA signatures.
[11:02:45] <scott_gonzalez> But I'm not sure what info is available, if any, to know which commits to check.
[11:03:21] <snover> TRAVIS_COMMIT_RANGE: The range of commits that were included in the push or pull request.
[11:03:28] <snover> TRAVIS_PULL_REQUEST: The pull request number if the current job is a pull request, "false" if it's not a pull request.
[11:04:49] <Krinkle> That's not available to Jenkins.
[11:05:10] <scott_gonzalez> Krinkle: Is the goal to have all PRs go through Travis for all projects?
[11:05:22] <Krinkle> And we'll probably want to run this on master as well to ensure things are correct. At least considering we don't have a culture yet where we require tests to pass before merging ;-)
[11:05:24] <scott_gonzalez> If so, limiting to Travis is probably fine.
[11:05:56] <scott_gonzalez> What does Jenkins have?
[11:06:03] <scott_gonzalez> Just a branch name? Nothing?
[11:06:15] <Krinkle> Both Travis and Jenkins run from within a git clone
[11:06:31] <Krinkle> so you can list the e-mail addresses from HEAD and HEAD..origin/master with a git log --format='...'
[11:06:51] <Krinkle> then pass that to whatever API you use to verify them.
[11:07:29] <gnarf> Krinkle: the block for the POST stuff is in builds.jenkins.jquery.com's server 
[11:07:50] <gnarf> look at /etc/nginx/conf.d/vhost_autogen.conf on jenkins
[11:08:12] <Krinkle> I'm trying to find it in puppet
[11:08:15] <Krinkle> is it puppetized?
[11:08:17] <gnarf> yes
[11:08:23] <Krinkle> https://github.com/jquery/infrastructure/blob/puppet-master/manifests/nodes/jenkins.pp
[11:08:42] <gnarf> https://github.com/jquery/infrastructure/blob/puppet-master/manifests/nodes/jenkins.pp#L54
[11:08:51] <Krinkle> scott_gonzalez: We can do special handling of PR, but it'd be useful to just make it work generically (so for pushes to master and for local testing as well)
[11:09:09] <Krinkle> gnarf: Does that cover POST to php?
[11:09:37] <scott_gonzalez> Krinkle: I'd need to know which branch the PR is for.
[11:10:17] <scott_gonzalez> For example, a PR against 1.x-master would need HEAD..origin/1.x-master
[11:10:32] <gnarf> Krinkle: post to php shouldn't create an error
[11:10:33] <Krinkle> scott_gonzalez: Depends whether you want a PR for a branch that contains commits not verified to pass. We don't limit linting to changed files only either.
[11:10:50] <Krinkle> gnarf: I don't see how that makes POST work, comments don't run.
[11:11:05] <scott_gonzalez> Every branch of every repo will fail on a full test right now.
[11:11:35] <scott_gonzalez> So it may just be a matter of cleaning up that mess first.
[11:12:25] <Krinkle> scott_gonzalez: That's never a bad idea ;-)
[11:12:27] <gnarf> Krinkle: post to a non-php page is a 405 error in nginx
[11:12:30] <gnarf> so it error pages it
[11:12:51] <gnarf> Krinkle: i'll investigate it more in a second
[11:13:11] <Krinkle> Can't we (reasonably) make it work without erroring internally first? I wonder why it would discriminate on method
[11:13:21] <Krinkle> maybe part of jquery::nginx::simplephp{ ?
[11:13:37] <gnarf> Krinkle: no, standard files do not normally accept a POST in nginx
[11:13:42] <gnarf> it doesn't make sense to POST to a file
[11:13:52] <gnarf> if we just POST'ed php it would work
[11:13:59] <gnarf> but we POST to a .txt or whatever
[11:14:05] <gnarf> that makes less than 0 sense
[11:14:13] <Krinkle> sure
[11:14:24] <Krinkle> But wouldn't the php module take care of this?
[11:14:48] <Krinkle> it feels wrong to have to "fix" this at the level of an individual vhost
[11:15:45] <gnarf> Krinkle: this "fix" was at the same level on the old jenkins server
[11:15:47] <gnarf> and worked properly
[11:15:56] <gnarf> also, is host name dependant
[11:16:28] <DaveMethvin> we talked about this in the core meeting today, and i discussed with jzaefferer a couple of days ago ... a better solution than changing ngnix would be to have our core tests post to a PHP page and we can grab the content from the existing pages where needed
[11:16:29] <Krinkle> toggling php on at the vhost level makes sense, but individual lines like error 405@ { proxy_method GET, not sure if that's the line that makes it work, but that seems a little odd.
[11:16:58] <Krinkle> core ajax tests do post to a php page.
[11:16:58] <gnarf> Krinkle: that is the same fix we used on the old jenkins box
[11:17:06] <gnarf> Krinkle: they also post to a non-php page
[11:17:12] <Krinkle> k
[11:18:11] <Krinkle> POST http://builds.jenkins.jquery.com/jquery/c33108cad16ba6ff831d5cbc45b9dfbf12650e0e/test/data/name.html?13739122460715470
[11:18:14] <Krinkle> 502 Bad Gateway
[11:18:17] <Krinkle> yeah
[11:18:20] <gnarf> right
[11:18:33] <gnarf> problem is that the box seems incapable of connecting to itself on the public ip
[11:18:43] <gnarf> i.e. telnet builds.jenkins.jquery.com 80 fails
[11:18:49] <Krinkle> o_O
[11:19:02] <DaveMethvin> well that ain't good
[11:22:11] <gnarf> fixed
[11:23:29] <gnarf> cc Krinkle
[11:25:30] <gnarf> Krinkle: just pointed it at localhost and made sure to set the right host header: https://github.com/jquery/infrastructure/blob/puppet-master/manifests/nodes/jenkins.pp#L58-L59
[11:35:21] <gnarf> can no longer blame red jenkins on me DaveMethvin http://swarm.jquery.org/job/879 --- ajax passing
[11:35:38] <gnarf> though not in ies?
[11:35:40] * gnarf shrug
[11:37:22] <DaveMethvin> i think we should just fix it so we don't need to change ngnix config, i'm planning to do that
[11:37:59] <gnarf> DaveMethvin: sure, but the nginx is fixed now
[11:38:16] <DaveMethvin> yeah, thanks for that
[11:38:37] <DaveMethvin> oh the order done doesn't work b/c order isn't valid css for all browsers 
[12:51:23] <jqcommit> 01[13qunit01] 15Krinkle 04deleted 06bower-json at 1415d8b77: 02http://git.io/wYUrYw
[21:40:26] <JamesMGreene> Heeeeey smart JS people
[21:40:50] <JamesMGreene> Is there any Object property that CANNOT be overridden/hidden by adding an "own" property by the same name?
[21:46:15] <JamesMGreene> (Assuming no property configuration is involved, a la `defineProperty`, `freeze`, etc.)
[21:58:05] <snover> no
