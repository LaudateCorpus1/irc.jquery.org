[02:11:28] <doesallmagic2> Project jQuery Core Periodic build #373: STILL UNSTABLE in 15 min: http://jenkins.jquery.com/job/jQuery%20Core%20Periodic/373/
[08:59:46] <sizcommit> [13sizzle] 15mgol pushed 3 new commits to 06master: 02https://git.io/vroBf
[08:59:46] <sizcommit> 13sizzle/06master 1417afc90 15MichaÅ‚ GoÅ‚Ä™biowski: Build: Add .npmrc with save-exact=true...
[08:59:46] <sizcommit> 13sizzle/06master 146f7e56a 15MichaÅ‚ GoÅ‚Ä™biowski: Build: Update most dependencies...
[08:59:46] <sizcommit> 13sizzle/06master 14ed285e3 15MichaÅ‚ GoÅ‚Ä™biowski: Build: Update browsers
[09:18:08] <sizcommit> [13sizzle] 15gibson042 closed pull request #330: Build: Update grunt-jscs (06master...06grunt-jscs-1.6) 02https://git.io/ve1Gw
[10:48:43] <danemacmillan> Anyone here know when the official release jQuery 3.0 will happen? Is the RC safe for use in production?
[10:50:05] <DaveMethvin> danemacmillan: we'd love feedback about 3.0, that will determine when it ships
[10:50:56] <DaveMethvin> danemacmillan: have you tried it? Any problems?
[10:52:39] <danemacmillan> My team is considering it, but because we run a busy ecomm site with a JavaScript-heavy checkout, we're a bit hesitant.
[10:53:18] <danemacmillan> We'd obviously test, but going live it's hard to say with certainty how shipped code will run in the wild.
[10:53:51] <DaveMethvin> sure...do you have error telemetry installed so that you know when javascript errors are happening on your pages?
[10:54:00] <danemacmillan> Yeah, we use New Relic
[10:54:17] <DaveMethvin> that will help to identify issues tehn
[10:54:18] <DaveMethvin> then
[10:54:22] <DaveMethvin> also be sure to use Migrate
[10:54:31] <DaveMethvin> it can find most of the big stuff before you ship
[10:54:43] <danemacmillan> Is Migrate on the jQuery site?
[10:54:52] <DaveMethvin> it's in the blog post
[10:55:01] <DaveMethvin> on our cdn and also npm
[10:57:25] <danemacmillan> Hm, okay. We JUST upgraded to 2 last week and have yet to push it to production, so with this latest announcement, we're rethinking 2 and just jumping to 3. I think we'll give it a shot and use the Migrate plugin.
[10:58:07] <DaveMethvin> as long as you don't need ie8 support that should be fine, be sure to read thru the upgrade guide
[10:59:05] <DaveMethvin> most of the other browsers dropped were very old like Android 2.3, big in china still but not much elsewhere
[10:59:30] <danemacmillan> No no, we actively made the decision to drop ie8 and below several months ago and have just come around the time to upgrade the lib.
[11:00:11] <danemacmillan> Yeah, we have a few clients on old Androids, but they're barely a blip for revenue.
[11:08:39] <danemacmillan> We're going to give it a try.
[12:59:26] <jqcommit> [13jquery-migrate] 15jordandh opened issue #194: Hosted migration file returning 404 02https://git.io/vrK35
[13:07:22] <jqcommit> [13jquery-migrate] 15dmethvin pushed 1 new commit to 06master: 02https://git.io/vrKGg
[13:07:22] <jqcommit> 13jquery-migrate/06master 1494d9800 15Dave Methvin: Update paths to latest 3.x...
[13:08:31] <doesallmagic2> Project jQuery Migrate 3.x build #88: SUCCESS in 1 min 23 sec: http://jenkins.jquery.com/job/jQuery%20Migrate%203.x/88/
[13:08:31] <doesallmagic2> Dave Methvin: Update paths to latest 3.x
[13:08:59] <jqcommit> [13jquery-migrate] 15dmethvin closed issue #194: Hosted migration file returning 404 02https://git.io/vrK35
[13:18:33] <jqcommit> [13jquery-migrate] 15dmethvin opened issue #195: Fix the regexp test in release.js before 3.0 final 02https://git.io/vrKnS
[15:28:39] <jqcommit> [13jquery] 15dmethvin opened pull request #3127: [WIP] Event: Use one native handler per jQuery handler (06master...06v4-demux-handlers) 02https://git.io/vrKXF
[15:39:01] * Krinkle wants $.ready.then() instead of $.ready.promise().then
[15:39:23] <Krinkle> I think this is happening but not in the old version I'm using yet :
[15:39:25] <Krinkle> :(
[15:57:13] <m_gol> Krinkle: the recommended practice for 3.0 is actually $.when($.ready).then()
[15:57:32] <m_gol> as we don't guarantee the type of $.ready, just that it's a thenable
[15:57:47] <Krinkle> m_gol: Yeah, but whenable and thenable are not the same.
[15:57:58] <Krinkle> whenable is "has .promise() or .then()"
[15:58:02] <Krinkle> thenable is well, then() naturally
[15:58:17] <Krinkle> Pre 3.0 there is no .then() on $.ready 
[15:58:25] <m_gol> right
[15:58:42] <Krinkle> for cases when there is not multiple promises I sometimes use $.ready instead of $() when I can't be sure that the input is a function.
[15:59:17] <Krinkle> On Wikipedia some legacy scripts have their own "when ready" script that is being replaced with $(), but often that went wrong due to garbage being passed that was previously ignored and now resulting in jQuery objects being created.
[15:59:44] <Krinkle> It'd also be nice if there was a jQuery ready method that didn't pass itself as first argument.
[16:00:32] <Krinkle> that's caused various breakages as well due to weird scripts that re-use the same method like "function doStuff(root) { root = root || document; .. }
[16:00:32] <Krinkle>  and then pass it to whenReady(doStuff) and also call it on sub trees that are created by JS.
[16:00:49] <Krinkle> Which I accidentally broke by replacing with $() which then caused an infinite loop.
[16:00:58] <Krinkle> because doStuff later on uses $(root)
[16:01:03] <Krinkle> m_gol: $($) is not fun :)
[16:02:46] <m_gol> ;)
[16:03:01] <m_gol> var myReady = fn => $.when($.ready).then(() => fn())
[16:03:27] <Krinkle> Exactly.
[16:03:41] <Krinkle> or $(() -> fn())
[16:04:44] <m_gol> right, that's better :)
