[01:36:25] <jqcommit> [13qunit] 15jzaefferer opened issue #569: Validate testNumber and module parameters 02http://git.io/fOMXtw
[04:04:59] <jqcommit> [13qunit] 15jzaefferer opened issue #570: Improve default message for ok assertion 02http://git.io/Ppbvsw
[05:26:32] <m_gol> DaveMethvin: forgot to mention at last meeting: I have a couple of PRs to jquery-migrate; if you had time to look at them, that'd be great
[05:26:59] <DaveMethvin> thanks m_gol  i saw those and just haven't had a chance
[05:30:22] <m_gol> k
[05:30:34] <m_gol> I'd like to finally start testing migrate on oldIE
[06:08:06] <jqcommit> [13qunit] 15leobalter opened issue #571: Removal of raises, same and equals 02http://git.io/0R5jxA
[06:24:28] <jqcommit> [13qunit] 15leobalter opened pull request #572: Asserts: Improved the default message from assert.ok (06master...06570-ok-message) 02http://git.io/htLtuQ
[07:37:09] <jqcommit> [13qunit] 15leobalter opened pull request #573: Assert: Removal of raises, same and equals (06master...06571-deprecated-removal) 02http://git.io/fAe4kg
[07:48:37] <jqcommit> [13qunit] 15jzaefferer closed pull request #573: Assert: Removal of raises, same and equals (06master...06571-deprecated-removal) 02http://git.io/fAe4kg
[08:16:08] <jqcommit> [13qunit] 15jzaefferer closed pull request #572: Asserts: Improved the default message from assert.ok (06master...06570-ok-message) 02http://git.io/htLtuQ
[08:58:00] <Krinkle> markelog: ping
[08:58:08] <markelog> hey there
[08:59:44] <Krinkle> markelog: Is there any way to suppress the warning for dot notation or camel case identifier?
[09:00:01] <Krinkle> even if its an ugly work around
[09:00:04] <Krinkle> it's too smart
[09:00:14] <Krinkle> even ['foo_' + 'bar'] doesn't fool it
[09:00:23] <Krinkle> https://github.com/wikimedia/mediawiki-extensions-VisualEditor/blob/master/modules/ve-mw/init/targets/ve.init.mw.ViewPageTarget.init.js#L157-L163
[09:00:38] <Krinkle> mw.config.get( 'wgNamespaceIds' ).education_program
[09:00:47] <Krinkle> > Error: All identifiers must be upper case or camel case
[09:00:55] <Krinkle> I know inline configuration is still work in progress
[09:01:13] <m_gol> btw, I think this error is just wrong
[09:01:13] <Krinkle> I currently disabled that rule entirely and use jshint instead, but I;m upgrading jshint now
[09:01:25] <m_gol> you often can't change what you get
[09:01:35] <m_gol> IMO it should be enforced only on assignment
[09:01:45] <m_gol> when if you did it yourself, you'll be warned anyway
[09:01:55] <m_gol> and if you got it from outside, you don't need to hack around it
[09:01:58] <Krinkle> Sure, but most cases the objects you deal with are in your own control, just not in this file.
[09:02:04] <Krinkle> Hm.. interesting.
[09:02:11] <m_gol> yes, but then it'll catch it in this other file ;)
[09:02:34] <Krinkle> if it does both vars, props and object literal assignments, I guess that would work.
[09:02:50] <Krinkle> Except when it's defined by parsing json or by a function like .set( key, value )
[09:02:55] <m_gol> yup, that's what I'd expect
[09:02:59] <m_gol> yeah, right
[09:03:02] <Krinkle> but then I guess the json parsing is upstream interface
[09:03:07] <m_gol> maybe that's why it checks everywhere
[09:03:07] <Krinkle> and .set() should have .get()
[09:03:23] <Krinkle> so I'd say +1
[09:03:26] <m_gol> but IMO it provides more harm than good that it checks everywhere
[09:03:30] <Krinkle> yeah
[09:03:42] <Krinkle> Got any ideas for how to work around it at the moment? Or shall I disable the rule for the time being?
[09:03:54] <Krinkle> I'm okay with ugly code as long as it's temporary
[09:04:05] <m_gol> eval? ]:->
[09:04:14] <Krinkle> ha
[09:04:14] <Krinkle> [ true && 'education_program' ]
[09:04:18] <markelog> Krinkle: not currently
[09:04:20] <Krinkle> gotcha you smart ass
[09:04:22] <m_gol> :)
[09:04:29] <markelog> it's planning for 2.0
[09:04:53] <Krinkle> I thought of that because of your eval?
[09:04:59] <markelog> some rules will change their names, so for now it's premature
[09:05:03] <Krinkle> Did 1 ? : first but figured && works too
[09:05:13] <m_gol> :)
[09:05:22] <m_gol> btw, seems like jsHint is lacking active maintainers... Anton is busy recently and PRs and issues pile up
[09:05:54] <markelog> i guess this is a problem for all popular projects
[09:06:04] <m_gol> :)
[09:06:05] <markelog> in jscs we also have this problem
[09:06:13] <m_gol> I'm still on 2.3.0 because of a regression that was introduced in 2.4
[09:06:35] <m_gol> current is 2.5.0
[09:06:48] <m_gol> well, it's a little different, though
[09:06:51] <m_gol> JSCS is a new project
[09:06:52] <markelog> only if someone would sponsor those projects, so people could work on them full-time
[09:06:57] <m_gol> so it has a clean code base
[09:07:04] <m_gol> jsHint has a legacy
[09:07:07] <markelog> i'm not sure if that is the reason :-)
[09:07:12] <m_gol> I've actually tried fixing the bug myself
[09:07:18] <markelog> i did a lot to make some stuff more proper
[09:07:20] <m_gol> but the code is completely unreadable :(
[09:07:22] <m_gol> :)
[09:07:39] <markelog> as far as i understand, it's because it's a fork of jslint
[09:07:41] <Krinkle> I'm upgrading all my projects to 2.5 this week
[09:07:44] <m_gol> yeah
[09:07:44] <Krinkle> jshint
[09:07:48] <markelog> a lot of old code
[09:07:49] <Krinkle> was mostly blocked on jscs
[09:07:53] <Krinkle> not anymore now :)
[09:08:08] <markelog> because of the inline rules?
[09:08:09] <m_gol> I use const/let in the code and jsHint got the temporal dead zone rules wrong
[09:08:12] <Krinkle> except for this one, but I'm going to work around this one before I dont have time again
[09:08:21] <Krinkle> markelog: well, no, those aren't in jscs yet
[09:08:25] <Krinkle> was blocked by onevar not working
[09:08:29] <Krinkle> and other rules not yet existing
[09:08:50] <m_gol> with let/const I actually prefer to not use stuff like onevar :)
[09:08:52] <markelog> this helped https://github.com/mdevils/node-jscs/commit/2718cbde40bb67d143e9ddad535ffc88379b44c7
[09:08:53] <markelog> right?
[09:09:47] <m_gol> jsHint is mostly one 5000-line file
[09:10:03] <markelog> nightmare
[09:10:08] <markelog> that's what it is
[09:10:11] <markelog> )
[09:10:14] <m_gol> it's funny how unused vars are handled
[09:10:31] <m_gol> each new var has identifier set to "unused" instead of "var"
[09:10:37] <m_gol> it's changed to "var" on first use
[09:10:43] <m_gol> but then there's "const"
[09:10:47] <m_gol> and it's always "const"
[09:11:00] <m_gol> so there's a separate structure with a property unused that is set to true or false
[09:11:12] <m_gol> this structure applies to var/unused as well but then it's ignored :P
[09:11:22] <m_gol> so "var" with {unused: true} is used
[09:11:40] <m_gol> and "let" is handled in a completely different way and I wasn't able to track that down
[09:11:58] <m_gol> even though I spent a couple of hours just looking at jsHint
[09:12:00] <markelog> also enjoyed reading https://github.com/jshint/jshint/pull/1658
[09:12:10] <m_gol> yeah ;)
[09:12:12] <markelog> " but I have no idea how to make it work for let"
[09:12:25] <markelog> this speaks colors )
[09:16:21] <m_gol> yeah, jslint is one 4278-line  file as well
[09:16:27] <m_gol> so I can see where it came from :P
[09:18:23] <m_gol> so I started looking at ESLint for my own projects out of all that
[09:18:40] <m_gol> I guess it's a competition to the jsHint+JSCS tandem ;)
[09:19:56] <jqcommit> [13qunit] 15leobalter opened issue #574: jshint not checking for trailing comma on test/* 02http://git.io/IG5qMg
[09:21:31] <jqcommit> [13api.jquery.com] 15usmonster opened pull request #490: jQuery.parseJSON: Function has multiple return types, not just Object. (06master...06490-parsejson-has-multiple-return-types) 02http://git.io/xgf65g
[09:22:46] <markelog> m_gol: they have a lot of problems to unfortunately :(, pretty unstable right now
[09:22:54] <markelog> but they have inline rules!
[09:23:15] <m_gol> what problems for example?
[09:23:51] <markelog> some rules are unstable just like ours i suppose
[09:23:54] <markelog> and it's slow
[09:24:11] <jqcommit> [13qunit] 15jzaefferer closed issue #490: Move QUnit.expect to QUnit.assert.expect 02http://git.io/3XSvxw
[09:24:17] <markelog> i have guy setting next to me, who complain a lot about it )
[09:25:25] <jzaefferer> hey markelog - any thoughts about https://github.com/jzaefferer/commitplease/pull/19 ?
[09:26:14] <markelog> i did check it out, want to try on some new commits with this pull
[09:27:09] <markelog> i'm not familiar with commitplease code base, so it could take some time
[09:27:31] <m_gol> markelog: I've added ESLint to one rather large project recently and copied over all jsHint rules I've used
[09:27:42] <m_gol> (except indent since it's missing)
[09:27:55] <m_gol> and jsHint checks everything in 3.7s, ESLint in 3.1s
[09:28:03] <m_gol> so not sure if it's that slower ;)
[09:28:27] <markelog> hm, maybe something changed
[09:28:29] <jqcommit> [13jquery] 15dcherman opened pull request #1580: Event: Extend the jQuery.Event prototype instead of paving over it (06master...06bug_15090) 02http://git.io/0ztl_A
[09:28:39] <m_gol> I know they worked on performance recently
[09:28:46] <m_gol> not sure how recently, though ;)
[09:30:14] <jzaefferer> markelog: good luck with the commitplease codebase, I heard its several files with one at 62 lines!!11 :-)
[09:31:07] <jzaefferer> Installing the commit hook was really the hard part, and you won't even have to look at any of that
[09:31:32] <jzaefferer> Anyway, this shouldn't be blocking anyone, so might as well stay open a while longer
[09:32:20] <markelog> m_gol: just timed eslint on the one of our projects
[09:32:32] <markelog> 27s for "eslint ."
[09:32:39] <markelog> and 3s for "jscs ."
[09:32:44] <m_gol> lol
[09:32:52] <m_gol> do you have jsHint to compare there?
[09:33:04] <markelog> now, but i start to wounder :-)
[09:33:07] <m_gol> JSCS for me runs much faster as well
[09:33:43] <markelog> gonna try it tomorrow, would be intersting )
[09:34:22] <markelog> jzaefferer: oh no! It will take me a week to figure out! )
[09:34:41] <jzaefferer> btw. esformatter can mess up your entire code base in less than a second!
[09:34:43] <markelog> should try it tomorrow
[09:35:06] <markelog> well, i could do that too )
[09:35:18] <m_gol> just checked all times: jsHint 3.9s, ESLint 3.4s, JSCS 1.3s
[09:35:19] <jzaefferer> I still haven't given up hope that it might become usable one day...
[09:35:37] <m_gol> though it's a little unfair since ESLint has more or less the same options as jsHint set up
[09:35:56] <m_gol> and JSCS is able to work more or less in place with all of its spacing rules
[09:46:46] <markelog> m_gol: do use jquery preset?
[09:47:11] <m_gol> no, it's not a jQuery-related project
[09:47:59] <markelog> did you created one yourself?
[09:49:10] <m_gol> I don't use a preset but yeah, I set it up myself
[10:06:40] <markelog> m_gol: did you follow some guide like https://github.com/rwaldron/idiomatic.js ?
[10:11:32] <m_gol> markelog: not really, it's basically what we've used so far in the company
[10:11:38] <m_gol> but a lot aligns
[10:11:52] <m_gol> I generally don't use spaces so much, I prefer if (sth) to if ( sth ) etc.
[10:30:18] <leobalter> jzaefferer: there will be a day we'll be able to adapt the conventions to the code thrown by esformatter :)
[11:27:02] <rwaldron> m_gol ping
[11:27:22] <rwaldron> m_gol can you rebase https://github.com/jshint/jshint/pull/1659 and I will land it?
[11:30:43] <rwaldron> m_gol actually, I rebased it on my end, all good
[11:48:40] <jqcommit> [13qunit] 15leobalter opened pull request #575: [WIP] JSHint: Use global .jshintrc in test files (06master...06574-jshint-es3-part2) 02http://git.io/7XzmZQ
[11:52:07] <scott_gonzalez> rwaldron: I don't want to get into an argument about this on GitHub, but I would hardly say that one is correct and one is wrong re: https://github.com/jquery/jquery/pull/1580/files#r12706259
[11:53:31] <scott_gonzalez> One modifies the prototype, one replaces it. If you were to say that one is "correct", I'd say that extending is correct. But I really don't want to get into that discussion. You're just being very authoratative about something not being correct when it's actually perfectly fine.
[11:59:50] <dcherman> scott_gonzalez: for my own info, is that something you want to continue to discuss outside of github?  as i mentioned, i don't particularly care which way my PR goes, i only used $.extend due to the 1 byte difference.  if you want to discuss it further, i'll hold off on fixing the PR later so i don't have to bounce back and forth if the decision changes again
[12:00:22] <scott_gonzalez> No, I don't care which one lands.
[12:03:03] <scott_gonzalez> Overwriting the prototype and setting the constructor manually is what's done for Tween.
[12:03:43] <scott_gonzalez> We overwrite prototypes in other places as well, but don't always fix the constructor.
[12:10:01] <DaveMethvin> dcherman scott_gonzalez I guess I'd prefer setting the constructor just for consistency with Tween and to avoid extend
[12:10:12] <DaveMethvin> even tho it's not time critical
[12:10:25] <DaveMethvin> although on a phone, every little bit helps
[12:11:35] <rwaldron> scott_gonzalez The correct way to "fix" an overridden constructor property is to explicitly define the property with value of the correct constructor function object. it's not subjective. 
[12:11:47] <dcherman> DaveMethvin: fwiw i actually agree with that, and it's how i would do it in my own code for initially defining the proto most likely.  i just had the historical focus on gzip size in the back of my head as i was doing that
[12:15:11] <scott_gonzalez> Or just don't break it in the first place, which is what the patch does.
[12:27:30] <m_gol> rwaldron: thx for the merge
[12:28:00] <rwaldron> m_gol np, it qualified under anton's new priorities
[12:28:02] <rwaldron> :)
[12:28:05] <m_gol> :)
[12:28:36] <m_gol> rwaldron: any chance to get this one prioritized in any way: https://github.com/jshint/jshint/pull/1658?
[12:28:46] <m_gol> breaks valid const-let code so I'm stuck on 2.3.0
[12:29:14] <m_gol> it's half done since I'm apparently too stupid to understand jsHint code ;)
[12:38:17] <rwaldron> rxaviers ping
[12:38:29] <rxaviers> hey!
[12:38:31] <rwaldron> hi!
[12:39:03] <rwaldron> rxaviers we're going to participate in a new github feature and they've asked us to "prime" the feature by setting up a new label called "help wanted"
[12:39:25] <rwaldron> globalize is one of the repos that I don't have contributor access to, so I can't set it up myself
[12:39:50] <rxaviers> I can add that label, sure.
[12:40:03] <rxaviers> is it simple as that?
[12:40:23] <rwaldron> rxaviers so if you could create a label for issues called "help wanted", then mark any issues in globalize that you think would be a good way to get others involved
[12:40:30] <rwaldron> even if it's like docs or whatever
[12:40:36] <rwaldron> anything you think you need help on
[12:40:40] <rwaldron> or dont want to do ;)
[12:40:46] <rwaldron> yep
[12:40:49] <rwaldron> simple as that
[12:41:11] <rwaldron> the github feature is going to aggregate these labelled issues into a "directory" of sorts
[12:41:12] <rwaldron> I think?
[12:41:16] <rwaldron> someting like that
[12:41:45] <rxaviers> cool
[12:41:47] <rwaldron> so when people are thinking "i want to get involved, but how??" they can look at this aggregation and find things to work on
[12:42:06] <rxaviers> awesome, will add that for Globalize
[12:42:29] <rwaldron> thanks!!
[12:43:35] <rwaldron> gseguin ^^ read back to "15:38:17]  <rwaldron>	 rxaviers ping" 
[12:43:51] <rwaldron> gseguin can you do the same on jquery-mobile?
[12:44:05] <rwaldron> gseguin and api.jquerymobile.com
[12:44:08] <rwaldron> thanks <3
[13:46:07] <gseguin> rwaldron: I'll take care of it
[13:48:35] <rwaldron> gseguin that's awesome, thank you
[13:50:21] <gseguin> rwaldron: created the label. arschmitz, uGoMobi: next triage session think of using it
[13:50:28] <rwaldron> rad
[13:50:33] <rwaldron> thanks a ton
[13:50:48] <gseguin> you're welcome
[13:57:45] <uGoMobi> gseguin: thanks, I will use it
[14:39:49] <jqcommit> [13api.jquery.com] 15acdcjunior opened issue #495: :checkbox, :password and other selectors have innacurate documentation 02http://git.io/9NCwvQ
[16:05:58] <jqcommit> [13api.jquery.com] 15scottgonzalez pushed 1 new commit to 06master: 02http://git.io/sYK2aw
[16:05:59] <jqcommit> 13api.jquery.com/06master 14a93a1cc 15Scott González: Build: Use vagrant for sample config
[16:10:15] <jqcommit> [13jquery.com] 15scottgonzalez pushed 1 new commit to 06master: 02http://git.io/og9OZQ
[16:10:15] <jqcommit> 13jquery.com/06master 14a3e20a9 15Scott González: Build: Use vagrant for sample config
[16:21:06] <Krinkle> rwaldron: You're a jshint collaborator? Nice. When did that happen?
[17:46:03] <jqcommit> [13jquery] 15murphe opened pull request #1581: 1.9 stable (06master...061.9-stable) 02http://git.io/VkrEeA
[17:47:53] <jqcommit> [13jquery] 15murphe closed pull request #1581: 1.9 stable (06master...061.9-stable) 02http://git.io/VkrEeA
[17:48:13] <jqcommit> [13jquery] 15murphe reopened pull request #1581: 1.9 stable (06master...061.9-stable) 02http://git.io/VkrEeA
[17:48:58] <jqcommit> [13jquery] 15murphe closed pull request #1581: 1.9 stable (06master...061.9-stable) 02http://git.io/VkrEeA
[18:50:00] <jqcommit> [13jquery] 15hoosin opened pull request #1582: update (06master...06master) 02http://git.io/H_0kMw
[18:50:19] <jqcommit> [13jquery] 15hoosin closed pull request #1582: update (06master...06master) 02http://git.io/H_0kMw
[19:48:04] <jqcommit> [13jquery-migrate] 15carpii opened issue #64: Improved .prop() vs .attr() warnings 02http://git.io/xCwgcg
