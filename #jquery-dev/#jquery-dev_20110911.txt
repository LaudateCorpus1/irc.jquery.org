[11:14:11] <Margle> could someone explain to me how jQuery is able to call a function without ()?, e.g.: $.ajax(); instead of $().ajax()?
[11:14:20] <Margle> what is _that_ called?
[11:14:49] <Margle> Sorry, I found my answer.
[15:26:31] <jqcommit> [jquery] timmywil created 1.7/sizzle (+3 new commits): http://git.io/WwkBEA
[15:26:31] <jqcommit> [jquery/1.7/sizzle] Starting transfer of Sizzle attribute retrieval to jQuery.attr - timmywil
[15:26:31] <jqcommit> [jquery/1.7/sizzle] Now passing all tests while using jQuery.attr - timmywil
[15:26:31] <jqcommit> [jquery/1.7/sizzle] Adding new jQuery selector test page. Fixes #5637. Fixes #7128. - timmywil
[15:26:46] <JohnResig> timmywil: nice
[15:28:08] <timmywil> JohnResig: thx! have a look when you get a chance.  I left Sizzle able to work independently.
[15:30:37] <jqcommit> [jquery] timmywil pushed 1 new commit to 1.7/sizzle: http://git.io/vuXGVA
[15:30:37] <jqcommit> [jquery/1.7/sizzle] Update sizzle - timmywil
[15:30:44] <sizcommit> [sizzle] timmywil created 1.7/sizzle (+3 new commits): http://git.io/RzM8sw
[15:30:44] <sizcommit> [sizzle/1.7/sizzle] Minor style edits and starting transfer to jQuery.attr - timmywil
[15:30:44] <sizcommit> [sizzle/1.7/sizzle] If Sizzle.attr is present, compare the result to null and undefined instead of empty string - timmywil
[15:30:44] <sizcommit> [sizzle/1.7/sizzle] Reenable querySelectorAll - timmywil
[15:31:12] <timmywil> I have more tests to add, but I think that takes care of 6 bugs
[18:39:05] <jqcommit> [jquery] dmethvin created 1.7/event (+32 new commits): http://git.io/M2Q-tg
[18:39:05] <jqcommit> [jquery/1.7/event] Fix bad calls to .undelegate(). - Dave Methvin
[18:39:05] <jqcommit> [jquery/1.7/event] jQuery 1.7 event work: - Dave Methvin
[18:39:05] <jqcommit> [jquery/1.7/event] Cleanup for on/off unit test. - Dave Methvin
[18:41:59] <timmywil> DaveMethvin: we're havin fun aren't we
[18:42:00] <timmywil> :)
[18:42:07] <DaveMethvin> awwww yeah!
[18:42:07] <bot-t> (23 hours 50 mins ago) <timmywil> tell DaveMethvin idk. I don't think there were even any forced updates end of july. Looks like a github issue.
[18:42:29] <DaveMethvin> actually it HAS been fun, but man it's a lot of work
[18:42:36] <timmywil> agreed!
[18:42:48] <timmywil> im just going to keep saying it.
[18:42:51] <timmywil> sizzle is a beast
[18:43:05] <DaveMethvin> i either admire you or think you're damn crazy
[18:43:10] <timmywil> lol
[18:43:15] <timmywil> i pick CRAZY
[18:43:21] <DaveMethvin> leaning that way
[18:43:51] <DaveMethvin> the last coupla days i've been trying to nail a couple of bugs but each time i think i have it fixed i realize i've broken something
[18:44:05] <DaveMethvin> it's a bunch of IE8 bugs that can only be tested interactively
[18:44:16] <DaveMethvin> so i spent a whole day working on a better test page
[18:44:22] <timmywil> heh
[18:44:31] <DaveMethvin> so now i have a GREAT test page, but no bug fix
[18:44:41] <timmywil> I finally got full suite passes in every browser except ie9, which has some random xml fail
[18:45:11] <DaveMethvin> i get fails on chrome 13 unless i run in incognito, must be some of my browser plugins
[18:46:27] <timmywil> oh! check this out https://github.com/jquery/jquery/blob/e4c12d97734b9624fda04c8d080c602608a81041/test/unit/selector.js
[18:46:38] <timmywil> see inline comments at the bottom
[18:46:59] <timmywil> $('[selected]') is impossible in IE6/7
[18:47:20] <timmywil> but the ones not commented are just fine
[18:48:03] <DaveMethvin> oh great, why'd IE8 have to screw up on the most common one? :/
[18:48:14] <timmywil> did i say ie6/7
[18:48:16] <timmywil> yes, ie8
[18:48:24] <DaveMethvin> yeah the only one with qSA
[18:48:26] <timmywil> yea
[18:48:51] <timmywil> checked, readonly, all the rest ie8 does fine
[18:49:30] <DaveMethvin> i still need to create perf tests for the stuff I did
[18:49:44] <DaveMethvin> to make sure i didn't break that too badly
[18:49:57] <DaveMethvin> it should be faster but i have been surprised before
[18:50:13] <DaveMethvin> i pushed a bunch of stuff into the event add/remove so the delivery should be faster
[18:50:52] <timmywil> we could make a special case just for the selected attribute, but that would be really dirty in the qsa logic
[18:51:17] <DaveMethvin> yeah wouldn't want to sully that beautiful Sizzle code ... Bwahahaha
[18:52:24] <timmywil> this is docs#6358 btw
[18:52:26] <bot-t> [#6358]  (assigned bug) - http://jqbug.com/6358
[18:52:40] <timmywil> so i might say wontfix and try to explain
[18:53:13] <timmywil> it's not worth the performance hit to check for one attribute in one browser
[18:53:44] <DaveMethvin> most likely not
[18:54:22] <DaveMethvin> something i thought about exploring was a selector cache for simple selectors
[18:55:23] <DaveMethvin> i put one in for the delegate event selector handling because in some early tests it seemed to  help a lot
[18:55:33] <timmywil> such as?
[18:55:37] <DaveMethvin> but i need to circle back and see whether it's worth the code
[18:55:47] <DaveMethvin> lemme get a link to the code
[18:56:05] <timmywil> qwery uses a cache of regex's it builds
[18:56:16] <timmywil> but that's not what makes it faster
[18:56:38] <DaveMethvin> https://github.com/jquery/jquery/blob/1661189cfb5c1020f2be5adb453b3dcc0a743942/src/event.js
[18:56:40] <timmywil> anyway, that's not actually related
[18:57:19] <DaveMethvin> all the stuff starting quick* is part of the selector parsing, quickIs is all that has to run at event delivery time
[19:00:31] <timmywil> i'll be honest.  I haven't dug into event.
[19:01:05] <timmywil> so I can't image the codepath
[19:01:09] <timmywil> imagine*
[19:02:35] <timmywil> hmm, maybe i can
[19:02:41] <timmywil> quick matching for delegation?
[19:02:48] <DaveMethvin> so basically what it does is parse out something of the form tag#id.class[attr=value] and keep the parsed regexp so it can call quickIs
[19:02:49] <DaveMethvin> yeah
[19:03:08] <DaveMethvin> so i've got an element and i need to know if it's "a.external" or such
[19:03:34] <DaveMethvin> for a limited case of selectors it's faster for me to do it myself
[19:04:36] <DaveMethvin> but only b/c i can push the selector parsing to event setup time
[19:05:11] <DaveMethvin> running that regexp at event time is much slower than just calling Sizzle
[19:05:34] <DaveMethvin> but calling quickIs is much faster, you can see it basically doesnt' do much at all
[19:06:02] <timmywil> and matchesSelector?
[19:06:15] <DaveMethvin> yep
[19:06:19] <DaveMethvin> and when i looked at the selectors people were using in real code, those cases covered nearly 75% of selectors
[19:06:33] <timmywil> no i mean document.documentElement.matchesSelector
[19:06:40] <DaveMethvin> right
[19:06:50] <DaveMethvin> i had a jsperf around here from july
[19:06:56] <DaveMethvin> lemme see if i can find it
[19:07:04] <timmywil> clever devil
[19:07:17] <timmywil> im impressed
[19:07:19] <DaveMethvin> well, clever if the final code proves to be faster
[19:07:30] <DaveMethvin> i didn't complicate it too much i think
[19:07:48] <DaveMethvin> and even if it's not, i can throw away all the quick* and the code gets much SMALLER
[19:07:55] <DaveMethvin> so i win either way :P
[19:08:01] <timmywil> good deal
[19:08:24] <timmywil> I think we could do a lot to speed up sizzle too
[19:08:40] <DaveMethvin> it always helps to have some fresh eyes on the problem
[19:09:03] <timmywil> we duplicate the common case code
[19:09:11] <timmywil> we just do it earlier
[19:09:34] <DaveMethvin> that's exactly the situation we had with event, very similar code in two places
[19:09:47] <DaveMethvin> and it wasn't duped to improve performance
[19:09:58] <DaveMethvin> or at least, it didn't seem to be doing that :)
[19:10:07] <timmywil> maybe that was the theory :P
[19:10:23] <DaveMethvin> i think it's just the crusty stuff that code grows over time
[19:10:31] <timmywil> And my initial idea of making Sizzle faster may not make jQuery faster, but I'm saving all that for 1.8
[19:10:51] <timmywil> right now I'm happy knocking out 6 selector bugs
[19:11:05] <DaveMethvin> yeah i'm done with heroics for 1.7, mainly would like to get it all landed
[19:11:12] <DaveMethvin> and see the final bug death count
[19:11:43] <timmywil> I think we could certainly shorten the stacks within Sizzle.
[19:11:44] <DaveMethvin> i won't be at the meeting tomorrow, i'll be on a plane
[19:11:52] <timmywil> ok
[19:12:01] <DaveMethvin> so if you could maybe sweet talk john into 1.6.4?
[19:12:05] <timmywil> will you be able to release tomorrow or should I bug JohnResig to do it?
[19:12:07] <timmywil> ha
[19:12:08] <timmywil> yea
[19:12:28] <DaveMethvin> at least it shoudl be easier from now on, i made a list
[19:12:34] <DaveMethvin> need to publish that somewhere for the team
[19:13:12] <timmywil> well, I'm perfectly happy with just one or two having server access
[19:13:37] <DaveMethvin> yeah it's mainly knowing the steps, even if the steps involve just contacting ppl
[19:13:38] <timmywil> so it may just be you and john for a long while
[19:13:45] <timmywil> ah
[19:13:46] <timmywil> i see
[19:14:06] <timmywil> i ended up contacting google
[19:14:07] <timmywil> btw
[19:14:22] <DaveMethvin> thanks!
[19:14:56] <DaveMethvin> so have you heard from jauboug this weekend? he said his september was gonna be crazy
[19:14:59] <timmywil> all we need to do is email them the files with the names jquery.js and jquery.min.js
[19:15:10] <timmywil> I haven't seen him
[19:15:20] <timmywil> I think I still have a tell out there for him
[19:15:33] <timmywil> asking him to rebase
[19:16:10] <DaveMethvin> if john does 1.6.4 tomorrow we can prolly start landing 1.7 stuff late in the week
[19:16:18] <DaveMethvin> i'll be back home on friday
[19:16:36] <DaveMethvin> but will prolly be doing a few things on the road as well
[19:16:44] <DaveMethvin> i can rebase jaubourg's stuff if he's too busy
[19:17:27] <DaveMethvin> I'm just worried we'll barely have 1.7 landed by the conference!
[19:19:53] <timmywil> i think we could start landing stuff tomorrow
[19:20:01] <timmywil> at least on a separate branch
[19:20:19] <timmywil> i've been too busy with sizzle or I would have created one already
[19:20:29] <DaveMethvin> yeah we could land on a branch for sure
[19:21:01] <DaveMethvin> i am just hoping to be lazy and use the -git build to test all the fiddles for the bugs i want to close
[19:21:15] <timmywil> Once the branch is created, it will be cake to move it into master.
[19:21:20] <DaveMethvin> otherwise i have to use custom resources, boo hoo
[19:21:30] <DaveMethvin> don't make me click!
[19:21:47] <DaveMethvin> yeah as long as everything is rebased it's not problem at all
[19:22:09] <timmywil> let's just squash all of the commits :)
[19:22:52] <timmywil> git commit -am "1.7 HAWTNESS"
[19:23:17] <DaveMethvin> definitely squash, since we have all the commit history on the branches
[19:23:25] <DaveMethvin> otherwise it will be a mess
[19:27:14] <timmywil> well, maybe we could squash some of it, but I don't think all of it
[19:27:34] <timmywil> i was kidding
[19:28:10] <DaveMethvin> the commit history on my branch is pretty messy, pretty much a log of my dead ends and tries
[19:28:23] <DaveMethvin> usually the history on master is pretty clean
[19:28:34] <DaveMethvin> and then we do squash commits from the pull requests
[19:28:34] <timmywil> it will be a mixture. we can't reduce 100 commits to 1 that just says 1.7 stuff.
[19:28:58] <DaveMethvin> agreed
[19:29:15] <timmywil> tho it would be funny
[19:29:17] <DaveMethvin> i think we'd want to keep each person's commits separate
[19:29:35] <DaveMethvin> but i am not sure how to selectively squash what I did
[19:30:10] <timmywil> there isn't a way to do it cleanly
[19:30:20] <DaveMethvin> i still have about a half-dozen smaller bug tickets to get to, but i figured i would just do those as separate pulls
[19:30:23] <timmywil> unless we squashed all of your commits to one
[19:30:39] <timmywil> squashing a pull is fine.  it usually addresses only one issue
[19:30:54] <timmywil> but squashing a branch that may have fixes for several bugs is a bad idea
[19:31:25] <DaveMethvin> yeah but when you're refactoring code sometimes bugs just disappear
[19:31:31] <timmywil> You could do some git magic to squash a certain collection of your commits, but that can get really complicated
[19:31:36] <DaveMethvin> even though you don't have a specific commit for it
[19:32:26] <timmywil> it's really all or nothing with squash.  I'm ok with seeing some nonsense commits as long as the important commits are intact.
[19:33:37] <timmywil> yea, it's your chance to write a story!
[19:33:57] <DaveMethvin> actually it's not too bad https://github.com/jquery/jquery/commits/1.7/event
[19:34:06] <timmywil> git commit -am "First, I went to the story and I came back and this bug was fixed already."
[19:34:47] <timmywil> remember my attr rewrite?
[19:34:52] <timmywil> like 80-something commits
[19:35:03] <DaveMethvin> and i do need a few commits for test cases on those bugs anyway so most likely the unmentioned ones will get mentioned
[19:35:04] <timmywil> jaubourg too
[19:36:05] <timmywil> I mean, we could squash it and see what it looks like
[19:36:19] <DaveMethvin> i'm okay with unsquashed now that i look at it
[19:36:24] <DaveMethvin> it's not as bad as i thought
[19:38:12] <DaveMethvin> alright, i've got to roll ... i have a 6:30am flight outta here. going to th Microsoft Windows 8 developer conference in anaheim all week
[19:38:37] <DaveMethvin> cya later timmywil
[19:38:52] <timmywil> DaveMethvin: have a safe flight
[21:15:16] <jqcommit> [jquery] timmywil pushed 1 new commit to 1.7/sizzle: http://git.io/VrLchQ
[21:15:16] <jqcommit> [jquery/1.7/sizzle] Confirming no exception is thrown when calling .is() on a window or document. Fixes #10178. - timmywil
[21:15:50] <sizcommit> [sizzle] timmywil pushed 1 new commit to 1.7/sizzle: http://git.io/fRFDeQ
[21:15:50] <sizcommit> [sizzle/1.7/sizzle] No exception is thrown when calling .is() on a window or document. Fixes jQuery bug #10178. - timmywil
