[04:10:33] <morrijr> There appears to have been some changes between 1.7.2 and 1.8.0 (and on going into current git version) which have seriously slowed class selectors in IE7 - has anyone else noticed?
[08:54:25] <timmywil> DaveMethvin: your move
[08:54:55] <DaveMethvin> timmywil: aw man, now i gotta read some more
[08:55:55] <timmywil> heehee
[08:56:44] <DaveMethvin> timmywil: i'd rather really sit down and look at the api than just expose things one by one
[08:56:57] <DaveMethvin> i agree that $.text is probably fine
[08:57:10] <DaveMethvin> but it's more than we are just doing this without thinking about an end result
[08:57:13] <timmywil> DaveMethvin: which methods concern you?
[08:57:25] <DaveMethvin> the inconsistency concerns me mostly
[08:57:39] <DaveMethvin> like the $.data one
[08:57:48] <DaveMethvin> which is mostly the fault of $.fn.data really
[08:58:01] <DaveMethvin> but also $.attr with its special args
[08:58:30] <DaveMethvin> i don't want to document pass!
[08:59:10] <DaveMethvin> in fact i want to remove it
[08:59:18] <gibson042> DaveMethvin: don't we have a ticket to do just that?
[08:59:24] <DaveMethvin> same as with $.data(name, value, pvt)
[08:59:36] <timmywil> I think we can deal with that
[08:59:36] <DaveMethvin> if not we should gibson042
[08:59:56] <gnarf> DaveMethvin: so, the bloat of singles on jQuery. is real
[08:59:57] <DaveMethvin> but if we're going to expose a lower level api it shoudl be consistent
[09:00:00] <DaveMethvin> so it's easy to remember
[09:00:06] <DaveMethvin> and easy to document and use
[09:00:21] <timmywil> I am very much for this API
[09:00:21] <gibson042> I was misremembering see ?12519
[09:00:23] <bot-t> [#12519] Public API methods should not have private arguments (closed bug: fixed in v1.9) - http://jqbug.com/12519
[09:00:24] <timmywil> is my point
[09:00:34] <timmywil> and I want to overcome the issues in order to get us there
[09:00:50] <timmywil> so let's not give up so quickly
[09:00:55] <gnarf> would it make sense to start collecting the "single" methods on some prop?
[09:00:58] <DaveMethvin> i'm not giving up
[09:01:17] <DaveMethvin> i'm saying we shouldn't just open a ticket on api.jquery.com to document what we have
[09:01:22] <DaveMethvin> it's an important decision
[09:01:27] <DaveMethvin> and we should look at what we have
[09:01:34] <DaveMethvin> and the implications of documenting it
[09:01:55] <timmywil> ok, it just seemed the conversation was gravitating towards dropping it
[09:02:09] <DaveMethvin> well like john said, "Fear adding new methods"
[09:02:17] <DaveMethvin> he didn't say "Don't add new methods"
[09:02:21] <DaveMethvin> and clearly we have since ten
[09:02:23] <DaveMethvin> then
[09:02:31] <DaveMethvin> you don't have enough fear timmywil :)
[09:02:47] <timmywil> we can weigh each other out then
[09:03:06] <DaveMethvin> i also wanted to add a ticket about adding underscores to some stuff in 1.9 to make it clear it's private
[09:03:20] <DaveMethvin> for example $.buildFragment
[09:03:52] <timmywil> yea, that's another conversation. If it's private, I don't think it should be static
[09:04:25] <timmywil> there's inconsistency in calling methods internal and exposing them at the same time
[09:04:34] <DaveMethvin> agreed
[09:05:00] <DaveMethvin> also $.access
[09:05:11] <DaveMethvin> which although it's exposed has has its signature changed a few times
[09:05:19] <DaveMethvin> and isn't documented
[09:05:36] <timmywil> now, maybe we want some of these methods exposed for super users? If so, perhaps we could have some kind of plugin author documentation or something.
[09:05:51] <gnarf> $.access might be a hold over from the individual file days
[09:06:01] <gibson042> gnarf: yes
[09:06:02] <DaveMethvin> right i think that's why a lot of them are there gnarf
[09:06:26] <DaveMethvin> no matter who/what we expose and document it for, once we do that we can't change it easily
[09:06:27] <gibson042> but if we go to AMD style modularization, we'll still need something similar
[09:06:42] <gnarf> I mean, it might sound silly, but what if we made $._.
[09:06:43] <gnarf> :)
[09:06:50] <timmywil> didn't kswedberg have a list of properties somewhere, documented and undocumented?
[09:06:55] <DaveMethvin> yeah
[09:07:01] <DaveMethvin> lemme see if i can find that
[09:07:39] <DaveMethvin> doesn't seem to be a google doc
[09:08:35] <gibson042> +1 to a static container of "private" properties
[09:09:57] <DaveMethvin> What does everyone think of gnarf's $._.whatever? I like that it makes a face ._.
[09:10:08] <gnarf> DaveMethvin: i liked the face too
[09:10:31] <timmywil> the _methodName convention seems like enough to me
[09:10:37] <DaveMethvin> we'll need a property $._.$ and can call it the Princess Leia
[09:10:43] <timmywil> heh
[09:10:46] <gnarf> heh
[09:10:48] <gibson042> awesome
[09:11:18] <gnarf> Well, I started thinking about it like this - if we were to ever do something like johnbender's category theory talk suggested
[09:11:45] <gnarf> we will need/want an "individual" method for most methods on the proto
[09:12:18] <gnarf> I'd hate to start colliding with jQuery.method and jQuery.fn.method although the signatures make sense
[09:12:22] <DaveMethvin> correction, people would *demand* an individual method for "consistency"
[09:12:34] <DaveMethvin> kinda like we have to accept function args for everything now
[09:13:09] <DaveMethvin> i like the idea too but to make it consistent I see a whole nother round of api upheaval
[09:13:12] <DaveMethvin> and to what purpose?
[09:13:22] <DaveMethvin> are the benefits really that great?
[09:13:28] <DaveMethvin> it's not a performance bottleneck
[09:13:50] <gnarf> there are some inconsistencies already btw
[09:13:51] <timmywil> it is worth it
[09:14:00] <gnarf> like $.fn.data() is responsible for pulling data out of attrs
[09:14:03] <gnarf> but $.data() doesn't
[09:14:05] <DaveMethvin> yes
[09:14:29] <DaveMethvin> there are also inconsistencies with function args to several methods
[09:14:50] <DaveMethvin> i mean there are inconsistencies all over the place ... should we fix those and break the api?
[09:15:01] <DaveMethvin> will users benefit enough to justify the pain?
[09:15:12] <timmywil> too much fear!
[09:15:28] <gnarf> DaveMethvin: I was just kinda thinking of like "jQuery.single.____"
[09:15:32] <gnarf> or even
[09:15:39] <gnarf> jQuery.fn.method._ being the single version
[09:16:26] <gnarf> DaveMethvin: as a plugin author, i find myself liking the "single" version of a lot of these functions
[09:16:41] <DaveMethvin> okay, so what is being proposed here ... is it a previously unnanounced brreaking change for 1.9 and 2.0?
[09:16:45] <gnarf> as a jQuery user, i could prolly care less
[09:16:55] <DaveMethvin> or are you just asking for $.text to be docuemnted?
[09:17:03] <DaveMethvin> if the latter then we need to do nothing
[09:17:09] <DaveMethvin> other than not breaking $.text
[09:17:15] <DaveMethvin> we don't even have to document it
[09:17:18] <DaveMethvin> right now
[09:17:22] <gnarf> people use it
[09:17:30] <DaveMethvin> yeah so we won't break it
[09:17:53] <DaveMethvin> or are there other things?
[09:18:01] <timmywil> "all over the place" is an overstatement. We can take care of private parameters. The $.data consistency would change how $.data deals with data-*, or we could just leave it intentionally inconsistent.
[09:18:05] <DaveMethvin> $.attr?
[09:18:50] <timmywil> `pass` is the only concern I have with $.attr
[09:19:11] <DaveMethvin> it shouldn't be there ... i know gibson042 suggested we just pull that out and special case it in .init
[09:19:17] <gnarf> there are other things, but the more of these "singles" we expose, the more we continue the jQuery.method is the single version of jQuery.fn.method
[09:19:49] <timmywil> gnarf: it's already like that
[09:19:49] <DaveMethvin> but we're not proposing to break any public api for 1.9/2.0 right?
[09:20:14] <DaveMethvin> like, $.data can't really change without messing ppl up
[09:20:21] <gnarf> nope, I'm kind of thinking it might be worth starting to collect the "singles" in another namespace/convention than same method name on jQuery
[09:20:44] <timmywil> gnarf: why?
[09:20:47] <DaveMethvin> but we couldn't get rid of them on $
[09:20:54] <DaveMethvin> so it seems like we'd need them in both places
[09:21:04] <DaveMethvin> and $ is nowhere near as full as $.fn
[09:21:08] <timmywil> putting things under an umbrella doesn't always make sense
[09:21:21] <DaveMethvin> really $ shoudl only be used by us
[09:21:36] <timmywil> ugh, no
[09:21:45] <gibson042> heh, there's your $._.$
[09:21:50] <gnarf> timmywil: it makes more sense if we ever want to make something like the category theory
[09:21:50] <gibson042> :P
[09:21:58] <DaveMethvin> help me obi-wan
[09:22:59] <gnarf> timmywil: i'm not suggesting we actually do it, I'm just suggesting we think about what convention we'd like to adopt for it before we start exposing all of them
[09:23:47] <DaveMethvin> right, let's think about this and realize we can't really change what we have already unless we're gonna break stuff, and we already said we'd give people notice so it can't happen in 1.9/2.0
[09:23:48] <gnarf> if we were to do something like jQuery.elem.css( elem, key, value ) and jQuery.elem.data( elem, key value ) and jQuery.elem.text( elem, value ) etc
[09:24:02] <gnarf> DaveMethvin: $.text = $.elem.text --- compat done
[09:24:05] <DaveMethvin> the best we can do right now is document what is there, and i don't think we need to be in a  hurry to do that
[09:24:34] <DaveMethvin> nobody is proposing that we remove or change $.text
[09:24:54] <DaveMethvin> and the people already using it know it exists
[09:25:00] <gnarf> right
[09:25:05] <gibson042> FYI: core only sends pass=true to $.attr in .init
[09:25:16] <gibson042> dunno what those UI folks are doing though
[09:25:26] <DaveMethvin> i think they finally eliminated their uses too
[09:25:26] <gnarf> if we do put a bunch of stuff on $.elem we could generate all the $.fn. functions on top of it
[09:25:43] <DaveMethvin> gnarf: i wonder how much of a size hit that would be
[09:25:45] <timmywil> I know I tend to gravitate to thinking low-level. I like promoting the most efficient codepath rather than the easiest.
[09:25:58] <timmywil> in this case, they can be the same
[09:26:00] <timmywil> imo
[09:26:20] <DaveMethvin> timmywil: i agree on that, i LIKE that `this` is a DOM element in callbacks
[09:26:34] <DaveMethvin> but it drives me crazy to see $(this).is(":checked")
[09:26:38] <DaveMethvin> when this.checked would do
[09:26:46] <DaveMethvin> etc
[09:26:50] <gnarf> what about $(this).text() vs $.text(this)
[09:26:55] <timmywil> agreed
[09:26:56] <DaveMethvin> sure
[09:27:12] <timmywil> I'm sorry, but you won't see me writing $(this).text()
[09:27:18] <gnarf> I do a lot
[09:27:24] * DaveMethvin goes back to find all timmywil's old code
[09:27:31] <gnarf> only cuz I never looked and saw the $.text( ) :)
[09:27:33] <timmywil> hehe
[09:27:42] <timmywil> I mean, I wrote it
[09:28:00] <gnarf> I don't use $.data( elem ) (because it doesn't read data-*)
[09:28:00] <timmywil> so maybe I'm biased :)
[09:28:19] <gnarf> whereas my ultimate "single use" data fn would
[09:28:24] <DaveMethvin> that's funny, it's exactly why i like it gnarf
[09:28:39] <timmywil> DaveMethvin: +1
[09:28:41] <gnarf> DaveMethvin: a lot of times when I'm using .data() i am storing keys on the attrs
[09:28:45] <DaveMethvin> at least $.fn.data doesnt fire events now
[09:29:29] <DaveMethvin> anyway, i am not opposed to a lower level api but i think it needs some thought
[09:29:34] <gnarf> if we did do something like $.elem.data( elem ) it could read attrs and still proxy to the underlying $.data
[09:29:45] <gnarf> I agree, we don't need to solve it in 1.9 either
[09:29:51] <gnarf> but its something to noodle over
[09:30:06] <timmywil> okies, need to eat
[09:30:18] <DaveMethvin> let's get 1.9 dones!
[09:30:22] <timmywil> peace/love, I'll argue more later
[09:30:31] <DaveMethvin> argue? naw, debate!
[09:30:50] <timmywil> FIGHT
[09:30:57] <DaveMethvin> death match!
[09:31:06] <DaveMethvin> only one api will survive
[09:31:48] <gnarf> strangely as soon as timmywil said "fight" the song I'm listening to did as well :)
[09:31:49] <gnarf> http://open.spotify.com/track/0Fwh2QCpv7gGsLqhXuWHtC
[09:31:49] <socialhapy> ★ DJ Fresh - Fight (Popularity: ▮▮▮▮▮▯▯▯▯▯)
[09:36:39] * ryanneufeld draws the circle of death
[10:08:16] <johnbender> DaveMethvin: "Get off my lawn"
[10:08:19] <johnbender> awesome.
[10:31:08] <mikesherov> DaveMethvin: it's fun to disagree with you
[10:31:16] <mikesherov> that's your best superpower
[10:31:26] <DaveMethvin> you have the right to be incorrect mikesherov :P
[10:32:45] <DaveMethvin> the 1.9 guide is going to be one LONG document
[10:33:03] <ryanneufeld> Who can I pester about jenkins?
[10:33:19] <DaveMethvin> whatsup with jenky ryanneufeld
[10:33:19] <mikesherov> DaveMethvin: John teaches that
[10:33:24] <ryanneufeld> for non-jquery releated stuff
[10:33:35] <DaveMethvin> gnarf perhaps?
[10:33:46] <ryanneufeld> I always bug him
[10:33:54] <ryanneufeld> i was hoping to bother someone else for a change :P
[10:33:56] <DaveMethvin> that's because he knows too much
[10:34:19] <DaveMethvin> i know nothing of jenkins, the other poss would be Krinkle|detached
[10:34:22] <DaveMethvin> but he's detached
[10:34:25] <DaveMethvin> :)
[10:34:36] <ryanneufeld> hrm
[10:34:48] <gnarf> jzaefferer or Krinkle|detached
[10:35:40] <ryanneufeld> Ha, figured it out
[10:35:48] <ryanneufeld> known_hosts
[10:35:58] <ryanneufeld> ssh keys for git checkouts
[10:36:25] <DaveMethvin> victory!
[10:37:30] <gnarf> DaveMethvin: damn my memory
[10:37:52] <DaveMethvin> gnarf: if you have memory you're doing better than me
[13:57:04] <jqcommit> [qunit] Krinkle created propEqual (+1 new commit): http://git.io/vSRX9w
[13:57:04] <jqcommit> qunit/propEqual 611fe0e Timo Tijhof: Assert: Implement propEqual and notPropEqual. Fixes #317....
[14:54:20] <doesallmagic> Project QUnit build #215: STILL FAILING in 30 min: http://swarm.jquery.org:8080/job/QUnit/215/
[14:54:20] <doesallmagic> krinklemail: Lint: Tighten .jshintrc options and enforce them.
[17:54:29] <jqcommit> [testswarm] Krinkle created ua-parser (+2 new commits): http://git.io/nji3jw
[17:54:29] <jqcommit> testswarm/ua-parser 2b5accd Timo Tijhof: Migrate from Browscap to ua-parser. Fixes #187....
[17:54:29] <jqcommit> testswarm/ua-parser 2288d01 Timo Tijhof: ua-parser: Update History, README. Soft fail in init.php...
[17:57:50] <jqcommit> [testswarm] Krinkle created ua-parser (+2 new commits): http://git.io/OtdyQQ
[17:57:50] <jqcommit> testswarm/ua-parser aae2ef4 Patrick Kettner: Migrate from Browscap to ua-parser. Fixes #187....
[17:57:50] <jqcommit> testswarm/ua-parser 73d19e6 Timo Tijhof: ua-parser: Update History, README. Soft fail in init.php...
