[01:51:15] <jqcommit> [13jquery] 15mzgol closed pull request #1641: css: $.fn.remove–°ss method (06master...06master) 02http://git.io/oa1Saw
[08:16:00] <ssssMd>  hi can anyone help me a littl? i have a cdtimer that is stucksomehow
[13:17:57] <snover> DaveMethvin: yt?
[13:18:15] <DaveMethvin> snover: yep
[13:18:45] <snover> wanna play a game of library vendors vs browser vendors?
[13:19:02] <DaveMethvin> i do think it would be worth discussing this with them
[13:19:49] <snover> let‚Äôs do it
[13:20:00] <DaveMethvin> something so fundamental as the pointing event model should not be broken into eternity
[13:20:24] <snover> no kidding. this perf rational is also driving me insane
[13:20:29] <snover> rationale*
[13:20:31] <DaveMethvin> did you see the new chrome ticket to turn touch events into pointer events basically?
[13:20:48] <snover> i read their document about the features they wanted to add
[13:20:51] <snover> on google docs
[13:21:08] <DaveMethvin> https://code.google.com/p/chromium/issues/detail?id=404128
[13:21:14] <snover> yeah, that one
[13:22:09] <DaveMethvin> that seems like it would be a LOT harder, you have to maintain backcompat at the same time you add a bunch of new functionality
[13:22:43] <snover> lipstick on a pig comes to mind
[13:22:50] <DaveMethvin> we should really be calling Apple out for not participating in this as well
[13:23:03] <snover> yeah
[13:23:04] <DaveMethvin> one of google's big reasons seemed to be "well Apple wont' go along"
[13:23:06] <snover> it just kills me
[13:23:06] <snover> like
[13:23:09] <snover> yeah! wtf!
[13:23:32] <DaveMethvin> so microsoft didn't go along for like 8 years and we moved ahead
[13:23:42] <snover> exactly
[13:24:03] <snover> what happens when someone does not implement a standard everyone else agrees to? they lose market share as apps break on their platform
[13:24:07] <DaveMethvin> but NOOOO, if it's apple we have to let them dictate the direction by their silence
[13:24:49] <snover> the perf argument too. either you are going to get slower (but still fast) native pointer events, or everyone is going to use a library because the touch api sucks and then the events everyone actually uses are going to be just plain slow
[13:25:04] <snover> because they‚Äôll always be library-wrapped
[13:25:12] <DaveMethvin> i really like pointer events but if the browser vendors aren't going to standardize on them it's hard to make the case that the libraries should
[13:25:46] <DaveMethvin> we'll end up with all the translation quirks and the browser guys will be like, "use the native touch api"
[13:27:11] <snover> on the other hand, selectors api (from jquery/sizzle) and web components (from dojo/dijit) both provide examples where library manufacturers did something and then it evolved into a web standard
[13:27:45] <snover> there‚Äôs some consideration here, i‚Äôm still working on processing and getting past my emotional response so i can formulate a cogent path forward
[13:28:03] <DaveMethvin> at this point, mobile is king and apple+google is 90% of the mobile browser market ... so we need to convince at least one out of two
[13:28:26] <DaveMethvin> the hipster mobile browser market
[13:28:56] <snover> seems like things are going from ‚Äúmobile first‚Äù to ‚Äúeveryone else last‚Äù
[13:29:06] <DaveMethvin> i have to think we could tweak pointer events to deal with whatever problems have been identified
[13:29:26] <snover> the perf complaint is addressed already afaik by pointer capturing
[13:29:32] <DaveMethvin> it's not widely deployed so it's not like we have to deal with horrible compat issues
[13:30:25] <snover> i just can‚Äôt believe that element targeting is such a big perf problem. we were doing this on Pentiums with 16MB of RAM with no JIT
[13:31:24] <DaveMethvin> my concern is that using pointer events for an interaction layer means everyone but IE gets some big shim (potentially perf issues)
[13:31:43] <snover> everyone already does: jQuery.Event.
[13:31:54] <DaveMethvin> it's not that big by itself :)
[13:32:39] <DaveMethvin> i want a bare-bones api anyway that avoids all the wrapping of jQuery.Event and the special events api
[13:32:43] <DaveMethvin> which i'm working on
[13:32:58] <DaveMethvin> that was all basically for ie<9 support
[13:33:02] <snover> last i heard, mozilla was still committed to pointer events
[13:33:06] <DaveMethvin> yeah
[13:33:18] <DaveMethvin> i guess we could forge ahead 
[13:33:42] <DaveMethvin> with pointer events
[13:34:40] <DaveMethvin> so is the google complaint that you MUST use capturing to avoid the perf problem?
[13:34:52] <DaveMethvin> and that it's not by default?
[13:35:12] <snover> that seems to be the thing that they always cite, the hit test
[13:35:34] <DaveMethvin> esp with shadow dom .... wonder who proposed THAT ????
[13:35:56] <snover> well, mouse API already does hit testing, so wtf?
[13:36:11] <DaveMethvin> i guess that's not a concern on a nexus phone, silly
[13:36:30] <snover> the other thing is that Touch API has some capability of batching multiple touch changes into one event, though i have no idea how often that happens
[13:37:40] <DaveMethvin> i really feel like the browser and framework guys need to communicate more, i guess angular gets a little more access but maybe i'm just jealous
[13:38:26] <DaveMethvin> the browser+w3c always think they're delivering manna from heaven and by the time app developers get it the stuff is pretty nasty
[13:39:17] <snover> yeah. i don‚Äôt really understand why, or what happens. communicating with library people would be a start. my experience has generally been that whenever i proactively try to raise issues i get dismissed out-of-hand
[13:39:46] <DaveMethvin> it's not a problem until it's solidified in a standard and released ... and then it's too late to change!
[13:40:04] <DaveMethvin> you can't BREAK THE WEB SNOVER
[13:40:13] <snover> did you read my ill-advised rant on es6/tc39?
[13:40:21] <DaveMethvin> on twitter?
[13:40:35] <snover> from twitter, i posted a big brain dump gist
[13:40:42] <DaveMethvin> oh no
[13:40:51] <snover> https://gist.github.com/csnover/6210bc20379476d18e1a
[13:41:21] <snover> a key difference in this case is that the touch api has never, ever worked fine
[13:41:53] <DaveMethvin> syntax changes should meet a high bar
[13:42:07] <DaveMethvin> kind of hard to feature detect that kind of stuff :)
[13:42:39] <DaveMethvin> the JIT can always make it fast when needed
[13:42:49] <snover> yeah, the only way to do it is with something like @cc_on
[13:42:59] <DaveMethvin> NO NO NO
[13:43:05] <snover> i‚Äôm just saying that is the only way to do it
[13:43:26] <snover> like, if you want to insert unknown syntax into something
[13:43:33] <DaveMethvin> like trimming your hair with a blowtorch
[13:43:38] <DaveMethvin> yeah it works ... but the downsides
[13:43:45] <snover> of course. it‚Äôs not a good idea.
[13:44:27] <snover> the comment i posted in response to mathias describes the ways i could think of to integrate forward-compatible syntax
[13:44:52] <snover> none of them are good. the real solution is ‚Äúif you want more syntax, compile‚Äù
[13:45:02] <DaveMethvin> i do think there are good syntax changes, like destructuring assignment
[13:45:44] <snover> sure, but it‚Äôs kind of like being given a chest of gold in the desert when you are dying of thirst
[13:50:45] <DaveMethvin> so snover, kborchers was trying to get a group together to talk about pointer events and what we do now, are you interested?
[13:51:37] <snover> sure
[13:52:20] <DaveMethvin> i dunno if we can change any minds, but if pointer events still seem like the right model for frameworks then we could go for it
[13:52:37] <kborchers> i will add you snover 
[13:53:13] <snover> ok, thanks
[13:53:40] <kborchers> snover: PM me the e-mail you would like me to use
[13:56:00] <snover> kborchers: is it for a ML or just a group email?
[13:56:12] <kborchers> just a group e-mail
[13:56:20] <kborchers> to schedule the call
[16:55:39] <snover> kborchers: do you know when that is going out?
