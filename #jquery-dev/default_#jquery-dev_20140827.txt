[06:31:17] <JamesMGreene> jzaefferer Krinkle leobalter scott_gonzalez: I will likely not be able to attend the QUnit meeting today as I have a overlapping business meeting.  I'll be at my desk but probably too distracted to pay attention to the meeting.
[06:31:55] <Krinkle> OK
[06:45:15] <jzaefferer> JamesMGreene: That's fine, as long as you can update the promise PR before that :-)
[06:45:27] <JamesMGreene> lol, sorry, no can do :)
[06:45:30] <JamesMGreene> Work is very busy this morning
[06:45:39] <JamesMGreene> but soon!
[06:45:44] <jzaefferer> Alright. Anyway, looking forward to that update
[06:48:18] <JamesMGreene> Me too :+1:
[06:57:20] <leobalter> +1 to that promise PR, but I'm not sure if I'll be able to attend the meeting today, probably going to leave soon for having lunch with some people
[07:41:51] <jzaefferer> Okay, let's skip then
[08:16:00] <jzaefferer> leobalter: can you review the dump.maxDepth PR?
[10:07:00] <jqcommit> [13qunit] 15Krinkle labeled issue #637: Add ability to mark a Test as skipped or incomplete 02http://git.io/IXEVpw
[10:07:10] <jqcommit> [13qunit] 15Krinkle unlabeled issue #637: Add ability to mark a Test as skipped or incomplete 02http://git.io/IXEVpw
[10:12:46] <JamesMGreene> Krinkle|detached: Another term that is sometimes used in other test frameworks is "inconclusive". Not sure if that fits as well with the feature we're discussing, though
[11:32:03] <Krinkle> JamesMGreene: Yeah, I copied these from phpunit (which has Skipped and Incomplete)
[11:32:06] <Krinkle> I still think we shouldn't do either though
[11:44:18] <JamesMGreene> Krinkle: Why?
[11:44:31] <Krinkle> I refer to the issue thread.
[11:45:45] <JamesMGreene> Krinkle: Do you mean the _previous_ PR thread?
[11:45:55] <JamesMGreene> I don't see any comments from you in the current issue thread
[11:53:31] <Krinkle> Yeah, https://github.com/jquery/qunit/pull/434
[11:53:44] <Krinkle> that should've been on an isuse.
[11:53:53] <JamesMGreene> Totally
[11:54:10] <JamesMGreene> That's the trouble with PR submitted without discussion/issues created first  :-\
[13:13:07] <jqcommit> [13qunit] 15jzaefferer pushed 1 new commit to 06master: 02http://git.io/N9wg9w
[13:13:07] <jqcommit> 13qunit/06master 146f643cf 15JoÌˆrn Zaefferer: Readme: Another release instructions updates
[13:54:28] <jqcommit> [13qunit] 15jzaefferer closed pull request #578: jsDump: Add a depth parameter to object parsing (06master...06shallow) 02http://git.io/M2w9IA
[14:15:23] <Krinkle> jzaefferer: rxaviers: scott_gonzalez: Do you know progress on CLDR/Globalize/Moment?
[14:16:12] <rxaviers> Krinkle, as far as I know not much different than what we had months ago. I may ping iskren and let you know
[14:16:24] <rxaviers> Krinkle, are you interested on using it?
[14:16:59] <Krinkle> Well, my main desire is to have a new version of Moment.js that supports all languages that Wikipedia supports. 
[14:17:12] <Krinkle> Which right now is blocked on it using pure cldr
[14:17:38] <Krinkle> Right now it's only got a few languages, and loads of languages are getting ugly fallbacks, often to English, in the middle of otherwise well-translated interfaces
[14:18:10] <rxaviers> :-[
[14:21:15] <rxaviers> Krinkle, how much do you want it? Would you (and/or wikipedia) be interested in helping to update it, or counting on iskren or moment.js folks to update the library is the only option?
[14:22:00] <Krinkle> well, initially we were just not going to use moment/lang/* files at all and just import the english message keys into our own message system and export it back out again. We'd have it translated in 100s of languages in under a day.
[14:22:18] <Krinkle> But then cldr came up and we ended up just linking up the lang/* files where available and fallback to 'en'
[14:22:42] <Krinkle> e.g. dynamically construct lang.js embedding the message strings in js
[14:23:23] <Krinkle> 'moment.values(' . json_encode($i18n>getValuesFor('moment')) . ');' // pseudo-code
[14:24:02] <jzaefferer> Well, we're making progress on Globalize, but the collaboration with Moment dried up and so far hasn't produced anything that can be used, as far as I know
[14:24:04] <Krinkle> https://docs.google.com/document/d/1V8X33uphHUeUEhX8AYU4GZ4DrPPGxbbpuydqShDO-Gw/edit was last updated in April
[14:26:05] <jzaefferer> Looking at https://github.com/moment/moment/commits/develop - Iskren is still working on Moment
[14:29:48] <rxaviers> Krinkle, if you or anyone on wikipedia have time to spend on it, I'm sure iskren would be positive on accepting that.
[14:29:53] <Krinkle> I'm still very confused by cldr.js and Globalize though. I'm going through seas and walls of text, but still haven't found an actual example.
[14:30:21] <rxaviers> Krinkle, https://github.com/jquery/globalize/#usage
[14:30:28] <rxaviers> there are three Hello World flavors
[14:30:48] <jzaefferer> If the issue is about using Globalize, we can address it!
[14:30:51] <Krinkle> I need to be able to bundle it, e.g. not expose cldr data directories directly (both for scalability and for optimising agains extra http requests)
[14:32:22] <Krinkle> is there a distro or build script to generate something where it fetches cldr json files, and cldr.js and gives 1 js file per  lang code for the kind of keys Globalize/Moment.js needs? Then in the bundler I'd load cldr+en.js where en.js is presumably just Cldr.load( 'en', { .. } )
[14:33:35] <Krinkle> the generation of en.js I can dynamically in MediaWiki, in fact that's probably easier to maintain. The bundler of cldr would do cldr.js + concatenate a Cld.load call for the current user langage
[14:37:19] <Krinkle> Hm.. OK. I think I've got an idea. cldrjs examples are nice
[14:39:21] <rxaviers> Cool ;) and yes, you can do what you want... I can walk you through it.
[14:41:38] <rxaviers> the only missing piece is updating moment.js to use globalize+cldrjs instead.
[14:41:53] <Krinkle> rxaviers: I get that there's no One answer, but my main question would be, what do I load?
[14:42:22] <rxaviers> https://github.com/jquery/globalize/#2-cldr-content
[14:42:26] <Krinkle> e.g. the module 'cldr' Wikipedia software would define, would provide cldr.js and a generated script invoking Cldr.load with the contents of one or more json files.
[14:42:57] <Krinkle> So we'll need to make sure that anything that ends up cldrjs in our infrastructure, we add the relevant files to it each time.
[14:43:09] <Krinkle> ends up using*
[14:44:25] <Krinkle> if we end up having 4 js libraries that use different data structures from cldr via cldr.js, it would end up loading all 4 even if you only need 1.
[14:44:53] <Krinkle> So perhaps need to give them their own module (like with jquery plugins) so a module can depend on 'cldr.something' instead of plain 'cldr'.
[14:45:15] <rxaviers> If the 4 js different libraries use cldrjs, all of them use the same data loaded once.
[14:45:56] <Krinkle> What I mean is, cldr.js only provides the interface, there's nothing in it by default (which makes ense)
[14:46:01] <rxaviers> I think I got what you mean.
[14:46:11] <rxaviers> You are concerned with loading a custom set of CLDR data. Is that correct?
[14:46:18] <Krinkle> if globalize needs the Number and Date data, that needs to become part of our 'cldr' module.
[14:46:31] <Krinkle> Soon there'll be a shitload of data loaded for everythign that needs 'cldr'.
[14:46:33] <rxaviers> that's correct.
[14:46:58] <Krinkle> as we keep adding more to our list of loaded json files that are used somewhere else, thus breaking hte point of having modular dependencies.
[14:47:21] <Krinkle> it's a  bit like having 'jquery' as a dependency, and anything we have that uses jquery depends on 'jqueyr' and if it needs a plugin, we concatenate it to jquery.js
[14:47:23] <rxaviers> Since the end-application feeds the CLDR data, you can bundle the very minimal CLDR portion you need.
[14:48:01] <Krinkle> yes, but it's not a one page application. Different sub sites have different needs.
[14:48:16] <rxaviers> + I am able to provide you an excellent tool to figure out what the minimal data looks like.
[14:48:39] <Krinkle> I mean is there fundamentally can't/musn't be 1 minimal data set.
[14:48:46] <Krinkle> it depends on what other libraries are loaded on that page.
[14:49:39] <Krinkle> e..g. mw.use("globalize") will load globalize and its dependencies, which should include cldr+ the data it needs for globalize. But another page might load "foolib" which needs cldr and another set of data.
[14:49:44] <Krinkle> another page might want both.
[14:50:03] <rxaviers> That's why I do NOT encourage libraries to embed data. But, to use cldr.js and let users decide what to load.
[14:50:28] <Krinkle> I know.
[14:50:39] <rxaviers> to give you an example.
[14:50:48] <Krinkle> there's a paradox here
[14:51:06] <rxaviers> Globalize Number module would require: cldr/supplemental/likelySubtags.json + cldr/main/`locale`/numbers.json
[14:51:37] <rxaviers> That's the minimal superset of data.
[14:51:58] <Krinkle> This isn't a static html page where the user is an author writing the html and one would, one day, add Globalize, and check if the cldr script tag contains date/numbers and if not add a get() for it.
[14:51:58] <rxaviers> Although, you (end-application) are able to tune that. You are able to load even less.
[14:52:03] <rxaviers> (depending of your number usage)
[14:53:43] <Krinkle> I think the problem I see is well exposed in the npm example
[14:53:44] <Krinkle> https://github.com/jquery/globalize/blob/master/doc/hello-world/node-npm/main.js
[14:54:43] <Krinkle> nvm.
[14:55:03] <rxaviers> =-)
[14:55:03] <Krinkle> The problem is there is no end user where one can just insert arbitrary extra load calls based on the documentation telling me to add it.
[14:55:45] <Krinkle> I'm not sure how to phrase it, but there's a fundamental problem here.
[14:56:18] <Krinkle> do you feel like you're seeing the problem?
[14:56:23] <Krinkle> (and maybe the solution)
[14:56:37] <rxaviers> I couldn't see the problem yet 
[14:56:59] <rxaviers> Who is end user for you?
[14:57:38] <Krinkle> basically I need to be in a position where you have this: globalize needs cldrjs and wants numbers and date data. libfoo needs cldrjs and wants currency data. Page A loads globalize, page B loads libfoo, page C loads both. Page A should have cldr+numbers+date, B, cldr+currency, C, cldr+date+number+currency
[14:57:57] <Krinkle> simple modular dependencies.
[14:58:15] <rxaviers> ok, I started visualizing what you need better. thinking...
[14:58:34] <Krinkle> there is no 'end point' where you can just manually fetch the json data, because no one module is the single universal end point. 
[14:58:42] <Krinkle> (as a proper modular structure is)
[15:00:37] <rxaviers> Does page A, B and C load different JS bundle?
[15:00:51] <rxaviers> Let's forget CLDR data for a moment...
[15:01:54] <Krinkle> Yes, the js bundles are autogenerated based on a normalised/uniqued/sorted list-hash of which modules that page needs. So ptentially each page has a different bundle. There are exceptoins for cache sharing, e.g. certain module categories have their own cache key in a separate request (e.g. anything using jquery.ui uses a separate bundle so that it's shared between different pages sets both using jquery ui
[15:01:54] <Krinkle> )
[15:03:07] <Krinkle> so loading module foo+bar+baz basically loads bits.wikimedia.org/modules/af03 and foo+bar bits.wikimedia.org/modules/9f0a and if bar=jquery.ui, that might get its own request.
[15:03:18] <rxaviers> Ok the same should happen for CLDR content... Your server can as well autogenerate the needed CLDR portions and bundle everything together. Because, there's a one-on-one mapping between Globalize modules and CLDR content.
[15:04:15] <Krinkle> foo might depend on jquery.cookie (which is its own module) and thus load that too.
[15:04:37] <Krinkle> so you'd recommend I create cldrjs "plugins", similar to jquery plugins. And then individual modules can depend on that. (dependies are always shared, never loaded twice)
[15:05:06] <Krinkle> so globalize would depend on jquery, cldrjs, cldrjs.date, clrdjs.numbers and the latter two generated scripts embedding the relvant json files in a cldr load call?
[15:05:48] <Krinkle> (not jquery, I forgot globalize is not dependant)
[15:08:29] <rxaviers> It seems a dependency management issue, similar to what we have with CSS when bundling different JS'es...
[15:09:17] <rxaviers> Skipping the CLDR content again... How do you manage that foobar may depend on another JS dependency?
[15:09:25] <rxaviers> Do you use AMD?
[15:09:39] <Krinkle> ResourceLoader
[15:09:44] <Krinkle> it's a lot like require/provide.
[15:09:52] <Krinkle> mw.loader.implement, mw.loader.use
[15:10:03] <rxaviers> Can it handle CSS or other content dependencies as well?
[15:10:08] <Krinkle> yep
[15:10:12] <Krinkle> js, css, i18n
[15:10:15] <Krinkle> 1 request
[15:10:44] <rxaviers> can you declare that something depends on a json?
[15:10:48] <Krinkle> While not imensely complex, it's one of my proudest creations (I'm not the original author, but I really like it)
[15:10:57] <Krinkle> no, but modules can be files or generated files.
[15:11:18] <Krinkle> a generated file would be a PHP class (or nodejs script) that generates valid javasript code
[15:11:41] <rxaviers> so, that's where I see light.
[15:12:09] <Krinkle> (further reading if you're interested in the load framework itself, later, https://www.mediawiki.org/wiki/ResourceLoader/Features)
[15:12:24] <Krinkle> For example, the language data module we have right now: https://github.com/wikimedia/mediawiki-core/blob/master/includes/resourceloader/ResourceLoaderLanguageDataModule.php
[15:12:33] <rxaviers> I would for example wrap globalize/number.js into your ResourceLoader scheme stating that it depends on globalize (core) and the `cldr/main/{locale}/numbers.json`
[15:12:53] <Krinkle> (btw module server requests are fragmented by site theme and user language) 
[15:12:55] <rxaviers> then I would wrap globalize.js stating it depends on cldr.js and `cldr/supplemental/likelySubtags.json`
[15:13:23] <Krinkle> it generates a js script that calls mw.language.setData( ... ) with json encoded data from another system.
[15:13:42] <Krinkle> we'd have one that generates Cldr.load calls and reads json files from disk, no problem. 
[15:13:52] <Krinkle> cool
[15:14:10] <Krinkle> I guess we'll need to come up with arbitrary separation of which json files to consider one 'cldr' plugin.
[15:14:16] <Krinkle> or a separate plugin for each cldr json file..
[15:14:39] <Krinkle> but I'll figure that out
[15:14:51] <rxaviers> For Globalize, we have a very clear dependencies list of json files (which is in a table on https://github.com/jquery/globalize/#2-cldr-content)
[15:14:58] <Krinkle> here's jquery ui mess for example: https://github.com/wikimedia/mediawiki-core/blob/master/resources/Resources.php#L382-L402
[15:15:25] <Krinkle> Yeah, that's nice.
[15:15:27] <rxaviers> If you have the same for the other libraries that use CLDR, I think it shall work just fine.
[15:15:37] <Krinkle> Yep
[15:16:13] <rxaviers> About jQuery UI,  that will change as soon as we update it to use the new Globalize.
[15:16:28] <Krinkle> I'd define a module 'cldr.likelySubtags': { dependencies: 'cldrjs', class: 'CldrJsDataModule', args: ['supplemental/likelySubtags.json'] }
[15:16:34] <Krinkle> or something like that
[15:16:55] <rxaviers> cool
[15:17:11] <Krinkle> and then define 'globalize': { dependencies: ['cldr.likelySubtags', 'cldr.number', 'cldr.date']
[15:17:45] <Krinkle> eh.. maybe separate .date since those 3 json files are basically specific to globalize
[15:17:49] <rxaviers> Exactly! Although, note globalize (core) depends on supplemental likelySubtags only.
[15:17:57] <Krinkle> yeah
[15:18:00] <rxaviers> Globalize Number module would depend on cldr.number, and so on.
[15:18:16] <rxaviers> What you showed me seems great
[15:18:20] <Krinkle> cldr.main, cldr.sup.timeData, cldr.sup.weekData prolly better
[15:18:21] <rxaviers> One challenge
[15:18:33] <rxaviers> how do you define a variable dependency?
[15:18:35] <rxaviers> {locale}
[15:18:41] <Krinkle> since 'date' is an arbitrary group of 3 files specific to globalize/date
[15:18:45] <Krinkle> rxaviers: variable how?
[15:18:47] <rxaviers> cldr/main/{locale}/numbers.json
[15:18:49] <Krinkle> user language, right?
[15:18:55] <rxaviers> yeap
[15:19:06] <Krinkle> We'd go $langCode = $context->getUser()->getLang()
[15:19:17] <Krinkle> then check file existance, and fallback to 'en' and bundle that one instead.
[15:19:36] <rxaviers> I mean, on ResourceLoader definitions?
[15:19:36] <Krinkle> one front-end page execution only has 1 user language.
[15:19:59] <Krinkle> oh, right. I'll probably define CldrJsDataModule to take something other than file names.
[15:20:22] <Krinkle> but indeed support a {lang} placeholder and expand that
[15:20:22] <rxaviers> cool. So, I think you are all set
[15:20:30] <rxaviers> =-)
[15:20:44] <Krinkle> it gets touch when the variable is something other than language
[15:20:52] <Krinkle> for those I'll probably have to fetch *
[15:20:57] <Krinkle> tough*
[15:21:05] <Krinkle> (wildcard)
[15:21:41] <Krinkle> yeah, so now what's missing is something we use (jquery.ui, moment.js) actually using it :)
[15:21:57] <Krinkle> then I'll start implementing it sometime after we get it downstream.
[15:22:21] <Krinkle> It's a lot of groundwork, but it'll be worth it.
[15:23:01] <Krinkle> special modules are defined on top of the file btw, if you were looking: https://github.com/wikimedia/mediawiki-core/blob/master/resources/Resources.php#L30-L52
[15:23:39] <Krinkle> some of those aren't generated as much as they fetch the script from a non-disk storage (e.g. wiki database, we have certain script files editable from the wiki like a CMS)
[15:24:08] <Krinkle> evil, admin users contributing arbitrary javascript to customise their wiki.
[15:24:22] <rxaviers> yeap, updating jQuery UI to use the new Globalize is my next step. (jzaefferer and I are reviewing it this week)
[15:24:29] <Krinkle> cool
[15:25:13] <rxaviers> about moment.js though, I heard no update..
[15:25:47] <rxaviers> I need to leave now. But, please just let me know how things evolve on your side. Ping me needing anything
[15:25:56] <Krinkle> thx, will do
