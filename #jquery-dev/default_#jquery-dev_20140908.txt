[01:30:58] <jqcommit> [13jquery-migrate] 15jainjitendra opened issue #73: jQuery.load() remove ajax:select tag of AjaxTag Library 02http://git.io/n3XR3Q
[02:04:32] <jqcommit> [13jquery-migrate] 15mzgol closed issue #73: jQuery.load() remove ajax:select tag of AjaxTag Library 02http://git.io/n3XR3Q
[02:15:35] <jqcommit> [13jquery] 15deveshkrsingh opened pull request #1651: Update .jshintrc (06master...06patch-1) 02http://git.io/vSd-DQ
[04:48:17] <doesallmagic2> Project jQuery Migrate Core build #38: SUCCESS in 2 min 16 sec: http://jenkins.jquery.com/job/jQuery%20Migrate%20Core/38/
[05:36:10] <doesallmagic2> Project jQuery Migrate Core 1.x build #240: SUCCESS in 2 min 9 sec: http://jenkins.jquery.com/job/jQuery%20Migrate%20Core%201.x/240/
[09:26:56] <jqcommit> [13qunit] 15jzaefferer pushed 1 new commit to 06master: 02http://git.io/2-HXVQ
[09:26:56] <jqcommit> 13qunit/06master 147b99db9 15JoÌˆrn Zaefferer: Tests: Remove invalid comment...
[09:30:14] <doesallmagic2> Project QUnit build #457: SUCCESS in 3 min 33 sec: http://jenkins.jquery.com/job/QUnit/457/
[09:30:15] <doesallmagic2> joern.zaefferer: Tests: Remove invalid comment
[10:01:06] <scott_gonzalez> Just double checking, did anyone need me to do anything before Chicago?
[12:19:59] <JamesMGreene> jzaefferer: You around?
[12:23:20] <Heavensrevenge> hello
[12:24:14] <Heavensrevenge> anyone from the QUnit team here? have some oddity upgrading from 1.14 -> 1.15 in a project i inherited
[12:25:28] <JamesMGreene> Heavensrevenge: Here but have to leave in 5 minutes. What's up?
[12:26:10] <Heavensrevenge> https://github.com/passwordmaker/chrome-passwordmaker/blob/master/test/import.js is my test, how should i correctly use a global or setup for tests instead of this? since its complaining about it after upgrade
[12:27:04] <JamesMGreene> What's the issue/error you are actually getting?
[12:27:08] <Heavensrevenge> "Cannot read property 'profiles' of null" is the error
[12:28:46] <JamesMGreene> I don't see anything there that QUnit would be affecting
[12:28:52] <Heavensrevenge> most likely its not the correct way of settig things up, but i also dont know how to correct do test set-up
[12:29:20] <JamesMGreene> The `QUnit.testStart = fn` setup is pretty old school but I believe that's still supported
[12:29:31] <Heavensrevenge> thing is, it worked fine in 1.14, only after trying to uupgrade to 1.15 last night since i didnt even know 1.15 was released
[12:29:34] <JamesMGreene> Let me make a little gist to show an updated setup
[12:29:58] <Heavensrevenge> or link me to one, but if you have time id gladly like a little example
[12:31:18] <JamesMGreene> Heavensrevenge: I don't know why QUnit 1.15 would break this for you but here is a bit more modern setup: https://gist.github.com/JamesMGreene/e490b7ac76968f140d25
[12:32:12] <JamesMGreene> sorry, g2g
[12:32:27] <JamesMGreene> Other QUnit folks that may or may not be around: jzaefferer leobalter Krinkle 
[12:33:09] <Heavensrevenge> thanks for the quick example JamesMGreene, ill ask them if i can catch them and i dont figure out whats going on
[12:43:31] <Krinkle> Heavensrevenge: Invoke testStart instead of assigning it
[12:44:43] <Krinkle> Alternatively, you could define var testenv = { setup: function () { ... } }; and pass testenv as second argument to each of your module() calls
[12:44:53] <Heavensrevenge> well id like to stay with current best practice and not stay to the oriogional way it was coded
[12:44:55] <Krinkle> but that's not global :)
[12:46:04] <Heavensrevenge> well, id raher avoid using a "global" if possible im just not sure how to correctly initialie state for a test
[12:47:11] <Heavensrevenge> is there a way to shove all dependencies in the setup funtion Krinkle? using a var declaration in there apparently doesnt work?
[12:47:38] <Krinkle> Heavensrevenge: I assume you're saying you want to avoid a global varible, not to avoid "global" (=all modules) setup?
[12:47:56] <Krinkle> in taht case, don't use a global variable.
[12:47:58] <Krinkle> Wrap your file in a closure
[12:48:15] <Krinkle> rdf_doc1 doesn't have to be global either
[12:51:19] <Heavensrevenge> how would you do that setup? or is there some place you can direct me to see some examples i should mimic?
[12:51:27] <Krinkle> I just told you
[12:51:36] <Heavensrevenge> i try to aviod closures
[12:51:40] <Krinkle> 7 minutes ago
[12:51:46] <Heavensrevenge> unnessecary complexity with funcy control flow
[12:52:05] <Krinkle> if you're avoiding closures, you're avoiding quality code that doesnt't scream "I pretent to write in a different language"
[12:52:09] <Heavensrevenge> what about without a closure, isnt there a "qunit way" of doing this?
[12:52:28] <Krinkle> pretend, even.
[12:52:42] <Krinkle> testStart(function () { .. }) should work
[12:52:53] <Krinkle> like you had it, but invoking it instead of assigning it. Does that work?
[12:53:47] <Krinkle> If you want to share values in a scope but not have closures, you will end up with global variables. which is bad.
[12:54:27] <Krinkle> If you're okay with repeating the module setup config, you can use a member property
[12:54:39] <Heavensrevenge> how far off was james's gist?
[12:54:39] <Krinkle> maybe you have tests in multiple files?
[12:54:44] <Heavensrevenge> https://gist.github.com/JamesMGreene/e490b7ac76968f140d25
[12:55:17] <Heavensrevenge> sadly stuff works when i declare everything in a testcase
[12:55:27] <Heavensrevenge> i would just like to avoid the test setup duplication
[12:55:32] <Krinkle> https://gist.github.com/Krinkle/3224765b48cceeeb3611
[12:56:05] <Krinkle> that moves the rdf doc to a private scope (each test has its own 'this' object)
[12:56:20] <Heavensrevenge> interesting look, ill see if i can beat that into shape
[12:57:29] <Krinkle> Heavensrevenge: Next step: Feed that urge in you of not liking globals, and apply it to your consumption of QUnit as well. Assert methods are scoped as of recent QUnit versions. So that concurrency becomes a possibility.
[12:57:44] <Krinkle> test( -> equal(a, b)
[12:57:52] <Krinkle> test( (assert) ->  assert.equal(a, b)
[12:58:24] <Heavensrevenge> i was wondering about whether passin in assert mattered or not but never made a diff so never bothered to ask
[12:58:45] <Krinkle> I assume by passing in you mean also using it?
[12:58:53] <Heavensrevenge> but that code was getting... a few years old and now that is breaks in 1.15 may as well modernize it if possible
[12:58:56] <Krinkle> the globals are deprecated and going away in 2.x
[12:59:35] <Heavensrevenge> yes, ive seen some examples using assert but since i never needed to pass it in and access it it didnt seem important to pass i nassert
[13:23:47] <Heavensrevenge> thanks for clarifying some things Krinkle , just seemed a little odd setting the once variables as this. members in the modules setup functin
[13:24:41] <Krinkle> Heavensrevenge: Well, that's only to save a global
[13:25:04] <Krinkle> https://gist.github.com/Krinkle/3224765b48cceeeb3611#file-b-js works, too
[13:26:00] <Krinkle> or with closure to not have even 1 extra global variable  https://gist.github.com/Krinkle/3224765b48cceeeb3611#file-c-js
[13:27:38] <Krinkle> if you need the setup in multiple test files, you'd move this to an init.js file (without the closure in that case since you want it global in order to share between files)
[13:30:46] <Heavensrevenge> also, is it also good practice to pass in the assert object and use it assert.equal vs just calling equal/deepEqual?
[13:31:10] <Krinkle> if you pass in the assert object nothing changes (it'd just be an unused parameter).
[13:31:34] <Krinkle> QUnit always passes it to the test() callback function. But to old code the parameter is hidden since javascript doesn't enforce call signatures.
[13:31:53] <Krinkle> use the local assert parameter as object with methods.
[13:32:36] <Krinkle> Each test has its own assert host. Previously the globals pointed at a static 'currentTest' reference that we'd swap after each test, much like a global variable
[13:32:41] * Krinkle shivvers :P
[15:12:56] <jzaefferer> Heavensrevenge Krinkle: The second example here should be a good reference: http://api.qunitjs.com/QUnit.module/
[15:14:04] <jzaefferer> Heavensrevenge: It would still be good if you could put together a jsfiddle or jsbin with your failure, as minimal as possible. Unless you have a bug in your testsuite, nothing should break from 1.14 to 1.15; if it does, please file an issue
[15:15:13] <Heavensrevenge> hello jzaefferer 
[15:16:31] <Heavensrevenge> well i only came here to find the current best practice in terms of test setup-up because my test cases failed after moving from 1.14 to 1.15
[15:17:31] <Heavensrevenge> the original file was made a long time ago so was hoping there would bea better or more correct way to do the setup
[15:24:26] <ryanneufeld> kborchers: you around?
[15:34:39] <jzaefferer> Heavensrevenge: okay. Moving away from assiging to testStart is definitely an improvement. The example on the QUnit.module page qualifies as best practice
[15:43:59] <Heavensrevenge> jzaefferer, https://github.com/passwordmaker/chrome-passwordmaker/blob/master/test/import.js is how my tests look now, vs before
[15:46:48] <jzaefferer> Heavensrevenge: looks good. No more errors? One idea: Use deepEqual when comparing all properties of an object
[15:49:31] <Heavensrevenge> no more errors, is there a certain test you see deepEqual to be a better fit?
[18:43:42] <kborchers> ryanneufeld: i am now for a few minutes
[20:34:49] <jqcommit> [13api.jquery.com] 15bradvogel opened issue #559: jquery#after "Inserting Disconnected DOM nodes" example doesn't work 02http://git.io/A1Rr2Q
[22:34:34] <doesallmagic2> Project jQuery Core Weekly build #91: STILL UNSTABLE in 12 min: http://jenkins.jquery.com/job/jQuery%20Core%20Weekly/91/
