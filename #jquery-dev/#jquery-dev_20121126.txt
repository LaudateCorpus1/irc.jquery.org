[00:19:31] <sizcommit> [13sizzle] 15gibson042 pushed 1 new commit to 06master: 02http://git.io/di1BlQ
[00:19:31] <sizcommit> 13sizzle/06master 14ac765b6 15Richard Gibson: No ticket: remove unnecessary regex escapes
[00:26:37] <jqcommit> [13jquery] 15gibson042 opened pull request #1046: Fix #12959: Optimize library-wide patterns (06master...0612959)  02http://git.io/z1Ornw
[01:57:17] <ilan> hello
[02:50:13] <jqcommit> [13jquery] 15jaubourg pushed 1 new commit to 06ajax-unit: 02http://git.io/cFqeTQ
[02:50:13] <jqcommit> 13jquery/06ajax-unit 14603e70b 15jaubourg: Greatly simplifies ajaxTest
[03:10:24] <jqcommit> [13jquery] 15jaubourg pushed 1 new commit to 06ajax-unit: 02http://git.io/rsGQog
[03:10:24] <jqcommit> 13jquery/06ajax-unit 14512b826 15jaubourg: Removes unnecessary closure and apply
[08:15:04] <scott_gonzalez> paul_irish: http://jsfiddle.net/PPpUu/ isn't working for me in Canary.
[08:15:19] <scott_gonzalez> I've got 25.0.1335.0 canary
[08:15:57] <scott_gonzalez> Oh, nevermind.
[08:16:16] <scott_gonzalez> But it only stops the calendar widget from popping up.
[08:16:21] <scott_gonzalez> It's still a tri-split spinner.
[09:00:47] <DaveMethvin> timmywil gnarf gibson042 jaubourg rwaldron mikesherov and all other interested people of Earth: meeting time!
[09:46:35] <jqcommit> [13jquery] 15gibson042 pushed 1 new commit to 06master: 02http://git.io/otn--Q
[09:46:35] <jqcommit> 13jquery/06master 140766240 15Richard Gibson: Fix #12959: Optimize library-wide patterns
[10:17:13] <doesallmagic> Project jQuery Core build #515: FAILURE in 30 min: http://swarm.jquery.org:8080/job/jQuery%20Core/515/
[10:17:14] <doesallmagic> richard.gibson: Fix #12959: Optimize library-wide patterns
[10:17:49] <DaveMethvin> a little trigger happy there swarmy
[10:20:20] <DaveMethvin> just re-scheduled it
[10:22:34] <DaveMethvin> yay! http://swarm.jquery.org/job/1592
[13:15:55] <gnarf> anyone else having trouble with github today?
[14:08:50] <Krinkle> DaveMethvin: re: HEAD request issues with browserstack in #jquery-meeting; can you elaborate ? (I didn't know about that)
[14:09:24] <DaveMethvin> Krinkle: it was some problem they had maybe, um, a month ago? but it was fixed
[14:09:37] <DaveMethvin> i didn't know the details
[14:11:24] <Krinkle> ok, must've gone past me, never noticed that issue.
[14:11:38] <DaveMethvin> it was broken over about 2 days but it was a weekend
[14:17:45] <Krinkle> DaveMethvin: btw, new icons: http://swarm.jquery.org/
[14:17:53] <Krinkle> clean up the mobile ones as well
[14:18:19] <Krinkle> using OS-label bubbles now (it used to do some weird 3-layer composition, but that was just a mess)_
[14:18:29] <DaveMethvin> Krinkle: i came SOOO close to putting in my own ie6 icon, that one looks much too nice to be ie6
[14:18:50] <Krinkle> I agree, but I think it is the real deal.
[14:18:53] <DaveMethvin> it should have holes and dirt all over it
[14:18:58] <Krinkle> haha
[14:19:01] <DaveMethvin> or that trollface one
[14:19:13] <Krinkle> as for style, it was ahead of its time
[14:19:21] <Krinkle> with the 3D-like blur
[14:19:30] <DaveMethvin> http://blog.j03h.com/wp-content/uploads/2012/04/IE-6-troll-internet-explorer-browser-trollface.png
[14:19:38] <DaveMethvin> that one
[14:19:47] <Krinkle> That's IE7 style actually
[14:19:53] <Krinkle> but yeah, nice one!
[14:19:55] <DaveMethvin> tbh i like the ie8 one best
[14:19:59] <Krinkle> me too
[14:20:05] <Krinkle> (ie7 / ie8 is the same icon btw)
[14:20:16] <Krinkle> we could get a special icon theme for halloween/aprils fools next year
[14:20:37] <DaveMethvin> with ie6 every day is april fools day
[14:21:24] <Krinkle> lol
[14:21:25] <Krinkle> yeah
[15:34:06] <doesallmagic> Project jQuery Core build #516: STILL FAILING in 30 min: http://swarm.jquery.org:8080/job/jQuery%20Core/516/
[17:01:58] <jqcommit> [13jquery] 15jaubourg pushed 2 new commits to 06master: 02http://git.io/tkew0w
[17:01:58] <jqcommit> 13jquery/06master 140877d42 15Richard Gibson: Fix #12959: Optimize library-wide patterns
[17:01:58] <jqcommit> 13jquery/06master 14c4858c1 15jaubourg: Merge branch 'master' of github.com:jquery/jquery
[17:02:40] <DaveMethvin> yah00000!
[17:03:15] <DaveMethvin> hey waitaminit
[17:12:18] <mikesherov> ?
[17:19:16] <pbramos> gibson042: Are you around?
[17:32:23] <doesallmagic> Project jQuery Core build #517: STILL FAILING in 30 min: http://swarm.jquery.org:8080/job/jQuery%20Core/517/
[17:32:23] <doesallmagic> * j: Total revamping of the ajax unit tests
[17:32:24] <doesallmagic> * j: Greatly simplifies ajaxTest
[17:32:24] <doesallmagic> * j: Removes unnecessary closure and apply
[17:32:25] <doesallmagic> * j: Fix #12959: Optimize library-wide patterns
[17:40:05] <jqcommit> [13jquery] 15jaubourg pushed 2 new commits to 06master: 02http://git.io/IIdvBw
[17:40:05] <jqcommit> 13jquery/06master 14e679f6c 15jaubourg: Use strictEqual rather than equal
[17:40:05] <jqcommit> 13jquery/06master 14b9dfcfd 15jaubourg: sandboxes start for real this time (fixes test failures in IE)
[17:50:06] <gibson042> yeah pbramos, what's up?
[17:50:22] <pbramos> Hey, I wanted to talk about my pull request for #4087 if you had a chance
[17:50:27] <gibson042> sure
[17:50:35] <pbramos> I've been thinking about alternatives, and I'm not sure there are any better ones.
[17:51:17] <pbramos> The main issue is with building the fragment.  When .clean is sucking in the child elements, there needs to be a way to check if the element being sucked into the fragment is both the original/destination
[17:51:52] <pbramos> I have a slightly more elegant version of the solution in that pull request, but didn't know if it was worth doing another pull request without talking with someone first.
[17:52:30] <pbramos> https://github.com/jquery/jquery/pull/1033
[17:52:31] <socialhapy> â˜… Pull request on jquery by PaulBRamos (1w, 2d ago): #4087 - insertAfter, insertBefore, etc do not work when destination is original element
[17:52:34] <pbramos> for reference
[17:52:46] <gibson042> so the proxy approach doesn't work out?
[17:53:02] <pbramos> The problem with the proxy approach is that you have 2 options
[17:53:08] <pbramos> 1) Always use the proxy
[17:53:13] <pbramos> 2) Check to see if you need the proxy
[17:53:30] <pbramos> But if we can check to see if we need the proxy to begin with, we already know not to suck the element into the fragment
[17:54:00] <pbramos> #1 I think is not a good way to handle this, as it creates extra overhead for the majority of cases
[17:54:08] <gibson042> agreed
[17:54:58] <gibson042> #2 is not so bad; that would just mean adding a callback parameter to .clean, right?
[17:55:10] <pbramos> It's not that simple
[17:55:18] <pbramos> .clean is the actual problem in this scenario
[17:55:45] <pbramos> When it appends the child elements to the fragment, that creates the problem, since the destination is now within that fragment and not in the DOM
[17:56:02] <gibson042> right
[17:56:10] <pbramos> I might not be understanding your suggested solution
[17:56:24] <gibson042> you'd need to fire the callback after nodes have been identified but before they get appended to the fragment
[17:57:22] <pbramos> We still need a way to identify that one of the child elements is part of the selection that was made, right?
[17:57:57] <gibson042> yeah, but you'd have that information
[17:58:08] <pbramos> How so
[17:58:25] <pbramos> My solution relies simply on that information, but suggestions were made that my way of determining that could be problematic
[18:00:38] <pbramos> I think I see what you're suggesting now...
[18:00:47] <gibson042> well, .before etc. call this.domManip
[18:01:09] <gibson042> so .domManip has as `this` the jQuery collection
[18:01:44] <gibson042> and can pass the callback down into `clean`
[18:02:11] <pbramos> Right, I get what your'e saying now
[18:02:44] <gibson042> yeah, it'll be called around here: https://github.com/PaulBRamos/jquery/blob/6fb68d22f4b136f0b467cf060ea3286f8cc6fcce/src/manipulation.js#L785
[18:03:46] <pbramos> right
[18:03:52] <pbramos> Take a look at this
[18:03:52] <pbramos> https://github.com/PaulBRamos/jquery/commit/964a072ff0537dcf3a1641073110f640d7caadb5
[18:03:53] <socialhapy> â˜… Commit on jquery by Paul Ramos (5d, 20h ago): #4087 - dom manipulation removes elements completely if destination and origin are the same element
[18:04:44] <pbramos> I believe I'm essentially doing the same thing here, without the callback
[18:06:30] <gibson042> but the worrisome parts are in doing it before buildFragment, and only relying on `this[0]`
[18:07:02] <gibson042> as opposed to all elements in `this`
[18:07:18] <pbramos> That was a point of question for me as well
[18:07:42] <pbramos> What worries you about that (I'm just trying to understand)
[18:08:01] <gibson042> also, args at that point can contain elements, strings, jQuery sets, whatever
[18:10:32] <pbramos> I see your point.
[18:10:42] <gibson042> there are so many ways to call into domManip that it's easy for things to fall through the cracks
[18:11:15] <gibson042> but you're guaranteed to have nodes at the end of `clean`
[18:11:41] <pbramos> cool thanks for talking through this with me
[18:12:04] <pbramos> I'm going to try the callback method, as I agree that probably makes the most sense.
[18:12:25] <gibson042> ok
[18:13:52] <gibson042> it may also be possible to skip the callback and just pass the `this` set directly; that'll depend upon whether or not dealing with elements in the set is always the same
[18:14:48] <gibson042> and of course, clean is skipped if we're reusing a previously-generated fragment, but that may not matter here
[18:15:16] <gibson042> those variations will become clear as you're in the code; I don't expect them to be too complex
[18:15:36] <pbramos> 'this' is already passed along from domManip to buildFragment to clean
[18:15:40] <pbramos> as 'context'
[18:15:56] <pbramos> Which gets set to the document in buildFragment.
[18:16:01] <pbramos> That section of code actually confuses me a bit.
[18:16:22] <gibson042> right; I can help explain that part
[18:16:32] <pbramos> https://github.com/PaulBRamos/jquery/blob/6fb68d22f4b136f0b467cf060ea3286f8cc6fcce/src/manipulation.js#L505
[18:18:56] <gibson042> buildFragment needs a suitable document for calling createDocumentFragment
[18:19:20] <gibson042> and we get the document from that second argument
[18:19:32] <gibson042> but it can take many forms
[18:20:09] <gibson042> because parseHTML also uses buildFragment
[18:21:03] <gibson042> although even so, it looks simplified from the last time that part was touched
[18:22:31] <pbramos> I see
[18:23:22] <gibson042> at any rate, this would be a separate parameter
[18:23:40] <gibson042> which would only be passed by domManip, not parseHTML
[18:25:24] <pbramos> Right.  That clears up some things for me.
[18:27:45] <gibson042> and I think you can ignore the caching in buildFragment, because that's only used for string args, which means new generated content (e.g., `$elems.before("new text and <b>html</b>")` )
[18:28:10] <gibson042> whereas the problematic cases like $elems.before( $elems ) will always dive into `clean`
[18:33:24] <pbramos> Yeah I was looking at that earlier.
[19:19:16] <doesallmagic> Project jQuery Core build #518: STILL FAILING in 30 min: http://swarm.jquery.org:8080/job/jQuery%20Core/518/
[19:19:16] <doesallmagic> * j: Use strictEqual rather than equal
[19:19:17] <doesallmagic> * j: sandboxes start for real this time (fixes test failures in IE)
[21:32:22] <paul_irish> TIL about elem.normalize()
