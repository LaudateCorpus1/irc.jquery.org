[04:54:03] <gnarf> mikesherov: had to go with octotron :) https://github.com/jquerybot
[10:08:19] <jqcommit> [13jquery] 15gibson042 pushed 1 new commit to 06master: 02http://git.io/Wq6h1A
[10:08:19] <jqcommit> 13jquery/06master 14a938d7b 15Richard Gibson: No ticket: compress ajax. Close gh-1041.
[10:28:34] <doesallmagic> Project jQuery Core build #512: STILL FAILING in 20 min: http://swarm.jquery.org:8080/job/jQuery%20Core/512/
[10:28:34] <doesallmagic> * Corey Frang: Adding job name for pull request jobs coming from mergeatron
[10:28:35] <doesallmagic> * Corey Frang: Using the right matched param
[10:28:35] <doesallmagic> * richard.gibson: No ticket: compress ajax. Close gh-1041.
[10:53:15] <jqcommit> [13jquery] 15Krinkle opened pull request #1042: No Ticket: Rename TestSwarm job name pattern for PR. (06master...06swarm-pr-job)  02http://git.io/4M_jFA
[11:55:32] <jqcommit> [13jquery] 15dmethvin pushed 1 new commit to 06master: 02http://git.io/rukuqg
[11:55:32] <jqcommit> 13jquery/06master 14ae215fd 15Dave Methvin: Fix #12134. Make .serialize() HTML5-compliant; provide a propHook for shimming.
[12:18:02] <doesallmagic> Yippie, build fixed!
[12:18:02] <doesallmagic> Project jQuery Core build #513: FIXED in 22 min: http://swarm.jquery.org:8080/job/jQuery%20Core/513/
[12:18:03] <doesallmagic> dave.methvin: Fix #12134. Make .serialize() HTML5-compliant; provide a propHook for shimming.
[12:18:12] <jqcommit> [13jquery] 15dmethvin pushed 1 new commit to 06master: 02http://git.io/NYmp8A
[12:18:12] <jqcommit> 13jquery/06master 1484629a9 15Scott GonzÃ¡lez: Fix #12869. Zoom the body after support tests; avoids layout changes in IE8/9/10 in IE7 mode. Close gh-1025.
[12:26:34] <jqcommit> [13jquery] 15dmethvin pushed 1 new commit to 06master: 02http://git.io/AvYIsQ
[12:26:34] <jqcommit> 13jquery/06master 14516a7a8 15Corey Frang: Fix #12803. Add jQuery.fx.start as a hook point. Close gh-1024.
[12:26:59] <Krinkle> DaveMethvin: dropped "Mac OS X" from swarm UA ID "safari_6_0"
[12:27:14] <DaveMethvin> oh good!
[12:27:23] <DaveMethvin> Krinkle: https://github.com/jquery/jquery/pull/1042 why did that fail?
[12:27:23] <socialhapy> â˜… Pull request on jquery by Krinkle (1h, 34m ago): No Ticket: Rename TestSwarm job name pattern for PR.
[12:27:39] <Krinkle> DaveMethvin: could be 1 of 2 reasons
[12:27:56] <Krinkle> DaveMethvin: Our ajax tests are a little unstable, Safari 4 randomly passes/fails
[12:28:01] <DaveMethvin> well mainly i wanted to know if it was safe to land ... :D
[12:28:20] <Krinkle> DaveMethvin: Or mergatron doesn't properly merge into the latest origin/master and thus an old bug from a few days back that was fixed is back
[12:28:27] <Krinkle> It is safe to land
[12:28:30] <Krinkle> look at the diff :)
[12:28:31] <DaveMethvin> seemed reasonable to me
[12:28:35] <DaveMethvin> yeah
[12:28:46] <DaveMethvin> which made the failure all the more strange
[12:28:51] <Krinkle> nod
[12:31:20] <jqcommit> [13jquery] 15dmethvin pushed 1 new commit to 06master: 02http://git.io/OBkmlQ
[12:31:20] <jqcommit> 13jquery/06master 1453a0666 15Timo Tijhof: Grunt: Rename TestSwarm job name pattern for PR. Close gh-1042....
[12:31:41] <DaveMethvin> okay, gotta run
[12:31:47] <DaveMethvin> let's hope it all works 
[12:51:42] <jqcommit> [13jquery] 15Krinkle opened pull request #1043: JSHint: Make compatible with jshint, lint test/data, clean up jshintrc files (06master...06grunt-lint)  02http://git.io/UWqPJA
[13:39:39] <doesallmagic> Project jQuery Core build #514: SUCCESS in 22 min: http://swarm.jquery.org:8080/job/jQuery%20Core/514/
[13:39:39] <doesallmagic> * dave.methvin: Fix #12869. Zoom the body after support tests; avoids layout changes in IE8/9/10 in IE7 mode. Close gh-1025.
[13:39:40] <doesallmagic> * dave.methvin: Fix #12803. Add jQuery.fx.start as a hook point. Close gh-1024.
[13:39:40] <doesallmagic> * dave.methvin: Grunt: Rename TestSwarm job name pattern for PR. Close gh-1042.
[13:46:33] <Krinkle> jzaefferer: ping
[13:53:38] <jzaefferer> Krinkle: pong
[13:53:52] <Krinkle> jzaefferer: I'm thinking of prepping some work on Assertion
[13:54:04] <Krinkle> jzaefferer: do we need backwards compatibility with the non-context model?
[13:54:30] <jzaefferer> non-context model?
[13:54:50] <Krinkle> jzaefferer: where one calls ok() or QUnit.assert.ok() instead of (local) assert instance passed to test()
[13:55:19] <jzaefferer> only ok() needs backwards-compability, the other two are rather new and barely in documentation
[13:55:30] <Krinkle> other one, not other two.
[13:55:35] <Krinkle> but yeah
[13:55:47] <Krinkle> so that means we have to keep a global instance around that we update internally after and before each test
[13:55:48] <jzaefferer> okay
[13:56:06] <Krinkle> which is though, since ok() doesn't even have a context.
[13:56:12] <Krinkle> not even a this
[13:56:13] <jzaefferer> tough?
[13:56:14] <Krinkle> (it is global)
[13:56:17] <Krinkle> hard
[13:56:28] <jzaefferer> tough != though ;)
[13:56:38] <Krinkle> though indeed.
[13:57:03] <jzaefferer> I feel like I don't have enough context to follow your stream of thoughts here...
[13:57:03] <Krinkle> so even if we do legacy_assert = new Assert(), and update legacy_assert.test with config.currentTest after each test, it wouldn't work
[13:57:15] <Krinkle> and then expose legacy_assert as globals
[13:57:26] <Krinkle> So we'd have to duplicate all assertion methods somehow
[13:57:35] <jzaefferer> what the breaking change anyway?
[13:57:35] <Krinkle> to make the context within the function.
[13:57:42] <Krinkle> jzaefferer: isn't that obvious?
[13:57:59] <Krinkle> we're going to have an object constructor Assertion
[13:58:05] <Krinkle> we instantiate one for each Test
[13:58:10] <Krinkle> and pass it as the first argument
[13:58:22] <Krinkle> that will also make async stuff much easier (as you said so yourself)
[13:58:34] <jzaefferer> "I'm thinking of prepping some work on Assertion" - no its not obvious, "some work" is pretty generic
[13:58:34] <Krinkle> as it will stay connected to the related Test
[13:58:54] <Krinkle> I'm thinking about how to implement it
[13:59:07] <jzaefferer> Which ticket(s) are you referring to?
[13:59:12] <Krinkle> Anyhow, the way it'll probably be is that a member of the Assertion object like "test" will refer to the Test object.
[13:59:22] <Krinkle> the one you opened afaik
[13:59:41] <Krinkle> https://github.com/jquery/qunit/issues/331
[13:59:42] <socialhapy> â˜… Issue #331 on qunit (jzaefferer; 1m, 1w ago): Make async testing more convenient and reliable
[14:00:11] <Krinkle> However, if the test reference is a property of the Assertion object, that means we have a problem, we can't reuse it for the legacy methods
[14:00:12] <jzaefferer> I can't remember everything I did 5 weeks ago ;)
[14:00:20] <Krinkle> well, I mentioned a lot of keywords so far.
[14:00:31] <jzaefferer> yeah, I know
[14:00:32] <Krinkle> as the legacy methods as called without context.
[14:00:37] <Krinkle> are*
[14:00:44] <jzaefferer> trying to get back into the whole context
[14:00:53] <Krinkle> "context" :D
[14:00:56] <jzaefferer> how about you prototype something without any backwards compability?
[14:01:03] <jzaefferer> and we'll see what actually breaks
[14:01:13] <Krinkle> that's what I asked on line 1
[14:01:21] <Krinkle> what will break is obvious, everything.
[14:01:35] <Krinkle> ok() will throw an exception saying "test" is undefined.
[14:01:43] <Krinkle> or whatever
[14:01:48] <Krinkle> actually, I have an idea
[14:01:52] <Krinkle> context can be bound
[14:02:03] <Krinkle> simple wrapper function
[14:02:25] <Krinkle> that does mean we have to know which assertion methods we will have in advance, (which we can't, since Assert.prototype will be mutable)
[14:02:37] <Krinkle> but we only have to support the old methods for the old way.
[14:02:40] <Krinkle> so it'll be find
[14:02:41] <Krinkle> find*
[14:02:44] <Krinkle> find*
[14:02:45] <Krinkle> what?
[14:02:50] <Krinkle> my d key is broken
[14:02:53] <Krinkle> no it ins't
[14:02:57] <Krinkle> fine
[14:02:58] <Krinkle> :D
[14:03:06] <jzaefferer> (y)
[14:03:12] <Krinkle> jzaefferer: thanks, I have my solution. Talking helps.
[14:03:25] <jzaefferer> (image Skype's thumb-up in place of that)
[14:03:26] <jzaefferer> okay
[14:03:44] <jzaefferer> I'm happy to review the output (when I'm more into the whole programming thing, apparently not so much right now)
[14:03:55] <Krinkle> I'll let you know when I have something.
[14:05:30] <jzaefferer> cool, thanks
[14:06:17] <jzaefferer> it seems like this could be one of those big improvements that won't be obvious on the outset, but makes working with QUnit even nicer. 
[14:06:27] <Krinkle> yep
[14:07:01] <Krinkle> jzaefferer: the model I'm thinking of is [void] assert.async() and assert.done()
[14:07:08] <Krinkle> which is like start() and stop() now
[14:07:29] <Krinkle> Where asyncTest will call assert.async() for you
[14:07:43] <Krinkle> jzaefferer: btw, we could also be more ambitious and allow multiple async paths within one test
[14:07:50] <Krinkle> e.g. var done = assert.async(); and done();
[14:08:04] <Krinkle> then we'd have to check after each done() if there are more async's running or not.
[14:08:20] <jzaefferer> well, we've got the semaphore in place already
[14:08:25] <Krinkle> exactly
[14:08:40] <Krinkle> although it will be confusing with the (old?) asyncTest
[14:08:44] <Krinkle> you'd have stuff like this:
[14:09:12] <Krinkle> QUnit.asyncTest(.. function (assert) { ..... assert.done();... var done2 = assert.async(); done2()
[14:09:22] <Krinkle> how do you get a reference to the first done
[14:09:45] <Krinkle> maybe deprecate asyncTest?
[14:12:52] <jzaefferer> that's probably a good idea. The name sucks anyway
[14:36:45] <Krinkle> jzaefferer: k
[14:37:53] <jzaefferer> I'd also like to get rid of the "expect" argument in test (and asyncTest)
[14:38:12] <Krinkle> jzaefferer: Hm.. in favour of what?
[14:38:18] <Krinkle> calling assert.expect ?
[14:38:20] <jzaefferer> calling expect(x)
[14:38:26] <jzaefferer> or assert.expect, yeah
[14:38:31] <Krinkle> jzaefferer: ok
[14:39:03] <Krinkle> jzaefferer: what I don't like though (and is the reason asyncTest and test(.. [, expect], ..) was created) is many lines boilerplate for every single test
[14:39:28] <Krinkle> QUnit.test( ..., function ( assert) { assert.async(); assert.expect( .. ); assert.ok(); assert.done(); } );
[14:39:33] <Krinkle> it gets a little repeatative
[14:39:44] <jzaefferer> well
[14:39:50] <gnarf> Krinkle: jzaefferer: still both here?
[14:39:53] <gnarf> cool
[14:39:54] <Krinkle> maybe we can deprecate the expect principle entirely though in the new model
[14:40:08] <jzaefferer> Doesn't Yehuda's suggestion address that? https://gist.github.com/2138c7bf20da83e823e8
[14:40:13] <Krinkle> I'm not sure how it can come short. Whatever assertion is there will run, if not another failure will be visible.
[14:40:31] <Krinkle> because we'd have context
[14:41:17] <Krinkle> jzaefferer: No, not really.
[14:41:32] <gnarf> random question - Do you feel that letting 2 swarm runs run at the same time would create failures... I feel like this would be a generally better use of jenkins' time --- If there are two jobs in swarm, there might be more time when "overlapping" that the world won't wait forever on IE7 :)
[14:41:54] <Krinkle> gnarf: 2 things
[14:42:04] <jzaefferer> I'd rather allow browserstack-testswarm to start more IEs when everything else is done
[14:42:11] <jzaefferer> its currently limited to 2, right?
[14:42:18] <Krinkle> gnarf: 1) IE7 slowness is a bug in browserstack, their IE7 vm image is broken and doesn't boot properly 50% of the time
[14:42:27] <gnarf> jzaefferer: testswarm wont spawn more than 2 afaik
[14:42:30] <Krinkle> gnarf: jzaefferer: it has to be limited to no more than 1 at a time
[14:42:40] <Krinkle> if there is 2, the older one will not finish in time
[14:42:56] <jzaefferer> gnarf: at least non-testswarm jobs can now run in parallel
[14:42:56] <Krinkle> because clients run from top down (by design)
[14:43:01] <Krinkle> yes that's okay
[14:43:18] <gnarf> Krinkle: so it prioritizes "new" tests instead of "old" tests?
[14:43:24] <Krinkle> gnarf: Yes
[14:43:27] <gnarf> hrm
[14:43:32] <jzaefferer> Krinkle: can we spawn more IE7s when everything else is done? instead of limiting to two
[14:43:46] <Krinkle> jzaefferer: browserstack limit is 10 VMs per account, 2 of the same image.
[14:43:53] <gnarf> jzaefferer: i'm 99% sure browserstack will just queue them
[14:43:54] <jzaefferer> ah
[14:43:57] <jzaefferer> okay
[14:44:14] <jzaefferer> so we have to pester them to fix their IE7 image?
[14:44:33] <gnarf> krinkle already mailed em
[14:44:41] <gnarf> I'm just thinking from like a "use of time" standpoint
[14:44:42] <Krinkle> gnarf: yes, but queuing it more than 2 won't do any good. By the time the first one fails, the script will start a third one before the second one fails.
[14:45:05] <gnarf> right now, there are 8 workers that COULD be working on the next test, but aren't because there is one test left in IE7
[14:45:17] <Krinkle> I know
[14:45:34] <Krinkle> but there is no point in going ahead with the next build
[14:45:38] <Krinkle> it will still be bottlenecked.
[14:45:54] <Krinkle> browsers start in < 10 seconds.
[14:45:59] <gnarf> yeah, i supposed this is mainly the ie7 bug
[14:46:22] <gnarf> Krinkle: have you tried another OS for IE7 ? does it spawn any more reliably in win7 vs winxp?
[14:46:32] <gnarf> or whatever choices you get for ie7
[14:46:36] <Krinkle> I dont think there is an OS choice for IE7
[14:46:37] <gnarf> i don't even remember if there is one
[14:46:39] <gnarf> boo
[14:46:43] <Krinkle> nope
[14:47:00] <gnarf> Krinkle: did you receive any reply from browserstack yet?
[14:47:10] <Krinkle> no, it's been about 4 days
[14:47:14] <Krinkle> (inc. weekend)
[14:47:19] <Krinkle> I expect a reply on monday
[14:47:40] <Krinkle> gnarf: what's weird is that the GUI is fine
[14:47:47] <Krinkle> I am starting IE7 from the GUI now
[14:47:49] <Krinkle> it is in the swarm
[14:47:54] <Krinkle> ... and running runs.
[14:48:25] <Krinkle> gnarf: jzaefferer: did you both get the e-mail on cc ?
[14:48:30] <gnarf> i did
[14:49:06] <Krinkle> gnarf: jzaefferer: 52/199 IE7 workers over the last 24 hours are bad starts. (workers that are terminated by the script because they are "running" but not in the swarm)
[14:49:16] <gnarf> Krinkle: can you PM me the run url rather than me digging out the key? :)
[14:49:17] <Krinkle> that's like 25 %
[14:49:28] <jzaefferer> yeah, got it
[14:49:37] <Krinkle> gnarf: PM
[14:54:59] <Krinkle> grmpf, I'm still stuck on a cable.
[14:55:10] <Krinkle> very "mobile" this laptop.
[14:55:47] <Krinkle> somehow on my way back from DC my airport antenna has damaged (magnetic damage according to the Apple Store here). It says "Hardware not installed" in the WiFi menu.
[14:56:06] <Krinkle> google tells me it is a fairly common issue, but no solution (tried all sorts of stuff)
[14:56:21] <Krinkle> so I'm currently with an improvised 15m ethernet cable through my house.
[14:57:24] <Krinkle> spend 4 hours trying to get a compatible USB Wifi adapter and gave up for a cable instead.
[14:57:55] <Krinkle> anyhow, will get it repaired soon, but gonna take my laptop away for a week. Can't have that, so I need to drive to the repairshop on the other side of the country and have it done on priority
[15:01:13] <jzaefferer> ugh
[15:04:52] <gnarf> i hate having to repair the laptop
[15:07:38] <Krinkle> the only way I can get it repaired is if I drive down there myself, twice (once for research, once for repair). The regular procedure is to have the store send it back and forth and have me approve the cost of the repair in between.
[15:08:01] <Krinkle> gnarf: jzaefferer: https://splunk.jquery.com:8000/en-US/app/search/browserstack
[15:08:14] <Krinkle> various new queries available. clarkbox and I have been working on that last week
[15:08:24] <Krinkle> needed to make various changes to testswarm-browserstack to make it more machine readable
[15:09:07] <gnarf> whats happening with safari 6 atm?
[15:11:48] <gnarf> jzaefferer: are you getting the deploy emails btw?
[15:13:36] <jzaefferer> gnarf: yeah, been ignoring most of my inbox for the last two days :/
[15:14:28] <gnarf> jzaefferer: yeah, understandable :) -- The deploy script output might get a little spammy, but at least all the leads + anyone they want to add will be able to look at the report really easily
[15:15:13] <Krinkle> gnarf: That's the other browser stack bug
[15:15:21] <Krinkle> gnarf: Safari 6 is not a worker
[15:15:22] <Krinkle> yet it is
[15:15:36] <Krinkle> I mean, there is no online worker according to testswarm-browserstack
[15:15:43] <Krinkle> also when I check on browserstack, the worker doesn't exist
[15:15:45] <jzaefferer> gnarf: its lacking most of the info I was looking for, I'll provide some details later
[15:15:49] <Krinkle> it was terminated
[15:15:54] <Krinkle> but it is still ghosting
[15:16:12] <jzaefferer> since BrowserStack IE10 doesn't load what I'm looking for, I'll just go to bed now and try again tomorrow...
[15:16:16] <gnarf> Krinkle: i had one running... but it wasn't receiving any tests - i mean, its just spinning there like forever....
[15:16:33] <Krinkle> hm.. ok
[15:16:39] <Krinkle> http://swarm.jquery.org/result/541101
[15:16:50] <Krinkle> running, last ping 2 seconds ago, start: 30 minutes ago
[15:16:51] <Krinkle> wtf
[15:18:15] <gnarf> jzaefferer: alright - short of setting up some custom service to track these deploys, I don't know how to get what you wanted out of it.
[15:18:31] <gnarf> jzaefferer: the working directiory is like the first command in the deploy output :)
[15:19:49] <Krinkle> gnarf: can you tell me how web-base-template is deployed? I figured from looking at the current HEAD on jq01 and the github history that it is deployed automatically based on tags (so I created a tag for my commit).
[15:19:49] <gnarf> Krinkle: thats what I'm sayin --- wtf :)
[15:19:54] <Krinkle> but I can't find where this logic is
[15:20:14] <gnarf> Krinkle: /usr/local/notifier
[15:20:20] <Krinkle> is it in puppet?
[15:20:30] <Krinkle> I know that notifier generally is
[15:20:33] <gnarf> yes
[15:20:37] <gnarf> what are you wanting to do?
[15:20:38] <Krinkle> but I couldn't find any thing that calls it for jq01 and/or wordpress
[15:20:40] <Krinkle> nothing
[15:20:47] <Krinkle> just curious to see how it works
[15:20:51] <gnarf> the git-clone sets it up
[15:20:56] <Krinkle> yes, that much I found
[15:20:58] <gnarf> update => true
[15:20:58] <Krinkle> jquery::gitclone
[15:21:02] <Krinkle> ah, update > true?
[15:21:04] <Krinkle> I dind't see that
[15:21:08] <gnarf> that includes the notifier stuff
[15:21:12] <gnarf> dig inside of jquery::gitclone
[15:21:36] <Krinkle> nope
[15:21:44] <Krinkle>   jquery::gitclone{
[15:21:44] <Krinkle>     "web-base-template":
[15:21:44] <Krinkle>       path => "$wp_docroot/web-base-template",
[15:21:46] <Krinkle>       repo => "https://github.com/jquery/web-base-template",
[15:21:48] <Krinkle>   }
[15:21:50] <Krinkle> no update => true
[15:21:59] <Krinkle> I knew about that option
[15:22:15] <gnarf> line 67
[15:22:26] <gnarf> update defaults to true
[15:22:33] <gnarf> in jquery::gitclone
[15:22:35] <Krinkle> ?
[15:22:37] <Krinkle> oh..
[15:23:13] <Krinkle> gnarf: which itself defaults to tag ?
[15:23:25] <Krinkle> (as opposed to latest HEAD or latest branch  X head)
[15:23:33] <gnarf> any semver tag on live, any master commit on stage
[15:24:03] <Krinkle> nice
[15:24:04] <gnarf> line 51 in jquery::postreceive does some crazy logic to determine that :)
[15:24:59] <gnarf> Krinkle: do you want deploy outputs btw?
[15:25:14] <Krinkle> "deploy outputs" ?
[15:25:16] <Krinkle> what's that
[15:25:30] <gnarf> notifier sends the output of the deploy script via email now as well as logging to syslog
[15:25:58] <Krinkle> nah, no thanks.
[15:26:20] <Krinkle> gnarf: do you have any swarm clients with username "browserstack" (just checking)
[15:26:23] <gnarf> nope
[15:26:25] <Krinkle> ok
[15:26:29] <gnarf> i use /run/gnarf :)
[15:26:36] <Krinkle> yeah
[15:26:40] <Krinkle> wtf man, this is really weird
[15:26:48] <Krinkle> even more so because it is now connected for an 1 hour
[15:26:51] <Krinkle> http://swarm.jquery.org/user/browserstack
[15:27:07] <Krinkle> even if they are a ghost, they should still terminate after 30 minutes (max worker run time)
[15:27:18] <gnarf> can we just kill it somehow? force swarm to give up that ghost?
[15:27:24] <Krinkle> Nope
[15:27:30] <Krinkle> it isn't a dead ghost
[15:27:32] <Krinkle> its very much alive
[15:27:36] <Krinkle> a little bit
[15:27:46] <Krinkle> it is still doing ping requests back to the swarm from inject.js
[15:27:57] <Krinkle> and responds as well and refreshes (to get new runs)
[15:28:14] <Krinkle> however it appears it is dead enough that it isn't running tests but alive enough to occupy tests
[15:28:22] <Krinkle> :/
[15:28:29] <Krinkle> we've got ourselves a zombie
[15:28:52] <Krinkle> let me do some counter trickery
[15:28:55] <gnarf> no way to invalidate that worker on the swarm side?
[15:31:24] <Krinkle> not the worker, no
[15:31:31] <Krinkle> but I reset the job run
[15:31:35] <Krinkle> (or part of it anyway)
[15:33:17] <Krinkle> I simulated as if that worker was timed out, so that the runs it is holding hostage are reset
[15:33:34] <Krinkle> the worker will still be there, but it can't do anything because we never do a re-run in the same worker
[15:33:50] <Krinkle> anyhow, that was hackery. No idea how this has happened.
[15:33:59] <Krinkle> looks like that IE6 does ajax, but no iframe.
[15:34:40] <Krinkle> it has let go
[15:34:41] <Krinkle> nice
[15:34:58] <Krinkle> http://swarm.jquery.org/user/browserstack
[15:35:34] <Krinkle> gnarf: The latest version of testswarm and testswarm-browserstack also improve performance by primitive load balancing
[15:35:44] <Krinkle> previously we used api v1 which meant only windows
[15:36:25] <Krinkle> now that we can select from both, the script will compare the browser descriptor from testswarm with the ones from browserstack and pick a random one from the ones available that match 100% 
[15:36:47] <Krinkle> so "Chrome 23" can be on 5 different OSes, since it has no specifics about os and version.
[15:39:16] <gnarf> nice
[15:39:21] <gnarf> random suggestion
[15:39:38] <gnarf> I would think that a new client connecting should get pending reruns before new tests
[15:39:49] <gnarf> although i know why its done the other way around i think
[15:39:57] <gnarf> the rerun could be killing the browser
[15:40:23] <Krinkle> pending reruns arent after new tests
[15:40:28] <gnarf> just makes more sense to me because the "old" client's can't perform the rerun themselves that a new client should get that first
[15:40:51] <Krinkle> gnarf: The run query is straight (includes re-runs as well as fresh runs)
[15:40:56] <gnarf> for instance, there is a hole in "maniuplation" for ie7 right now, presumably the first test had a fail
[15:41:03] <Krinkle> it picks the latest one, which can be a re-run or a run
[15:41:34] <gnarf> the second worker seemed to skip over that hole and not come back until the whole thing filled up
[15:41:47] <Krinkle> if there is a whole, it means it hasn't been run yet, or it timed out.
[15:41:52] <Krinkle> not a re-run
[15:42:12] <Krinkle> time outs are reset to 0 as fresh runs
[15:42:26] <Krinkle> re-runs happen if the run failed (with actual results). 
[15:42:30] <gnarf> my worker ran that test - i watched it :)
[15:42:35] <Krinkle> sure
[15:43:02] <Krinkle> in the job tables, a pending re-run is no different than a completed fresh run, except that at any moment the red square could be switched for a yellow progress one.
[15:43:56] <gnarf> i'm also curious if we should ask browserstack for permission to setup a second api user spawning a second pool of workers - presumably that makes everything twice as fast? :)
[15:44:15] <Krinkle> away ahead :)
[15:44:23] <Krinkle> I brought it up
[15:44:32] <Krinkle> we can already do that if we want
[15:44:47] <gnarf> I just wanna make sure browserstack would be cool with it
[15:44:47] <Krinkle> since we have a team organisation with an X amount of accounts we can create
[15:44:54] <Krinkle> and API users are no different then regular users
[15:45:01] <Krinkle> (you can log into api.bs.com with your regular account)
[15:45:06] <Krinkle> they aren't cool with it
[15:45:36] <Krinkle> they specifically asked us not to do that
[15:45:49] <gnarf> darn
[15:46:02] <Krinkle> but I presume we can talk about raising the limit
[15:46:23] <Krinkle> I mean, if anything, I can easily set up another instance of testswarm-browserstack with my login credentials
[15:46:26] <Krinkle> and you as well
[15:46:28] <Krinkle> and 10 other people
[15:46:37] <Krinkle> it is in no way detectable from what I can see
[15:46:44] <Krinkle> but lets not be a dick :P
[15:47:08] <gnarf> yeah - if they don't want it happening, lets not make it happen
[15:47:42] <gnarf> also, have you made any progress in the runner without an iframe?
[15:47:49] <gnarf> i know we were kicking the idea around
[15:47:51] <Krinkle> I do it every now and then to debug and test the script. Its just `node src/cli.js` from a testswarm-browserstack (fill in config.json with your credentials and set limit to 1 so that it doesn't go crazy)
[15:47:55] <gnarf> i had a thought about how we could do it
[15:48:07] <Krinkle> gnarf: right now I'm focussed on 2 major tasks
[15:48:13] <Krinkle> gnarf: TestSwarm "Projects" refactor
[15:48:20] <Krinkle> (jquery/testswarm#148)
[15:48:25] <Krinkle> and QUnit.Assertion constructor
[15:48:29] <gnarf> just make the swarminject submit a form that redirects to the next test runner
[15:48:52] <Krinkle> gnarf: I do have  local branch experimenting with this as well
[15:49:03] <Krinkle> but still some things to figure out
[15:49:13] <Krinkle> as usual, browsers have bugs and unexpected weirdnesses
[15:49:17] <gnarf> :)
[15:49:34] <Krinkle> IE < 8 and Opera to be specific
[15:49:50] <Krinkle> but it'll work
[15:50:19] <Krinkle> gnarf: k, gonna put up a movie now. ttyl
[15:50:36] <gnarf> ciao
[16:59:33] <jqcommit> [13jquery] 15orkel opened pull request #1044: Improve wrapMap (06master...06end-tags)  02http://git.io/MTr_VA
[18:17:36] <jaubourg> hi there
[18:17:47] <jaubourg> DeveMethvin: you around?
[18:17:56] <jaubourg> DaveMethvin even ;)
[18:29:16] <DaveMethvin> jaw-bore, jaubourg even :D
[18:30:32] <jaubourg> hey
[18:30:56] <jaubourg> about to push the ajax unit test rewrite in a branch :)
[18:31:22] <DaveMethvin> ok, i'll take a look
[18:33:11] <jqcommit> [13jquery] 15jaubourg created 06ajax-unit (+1 new commit): 02http://git.io/_0h15w
[18:33:11] <jqcommit> 13jquery/06ajax-unit 14d31cef3 15jaubourg: Total revamping of the ajax unit tests
[18:33:49] <jaubourg> DaveMethvin: https://github.com/jquery/jquery/blob/ajax-unit/test/unit/ajax.js
[18:34:12] <jaubourg> I created a helper called ajaxTest which simplifies testing ajax requests, especially when you have to wait for multiple ones ;)
[18:35:01] <jaubourg> It's quite aggressive but I only removed one test (the one testing the order of the success callbacks which was redundant with test in the unit for $.Callbacks)
[18:35:24] <jaubourg> re-ordered so that each method has all its tests ran, than all the tests created for an issue
[18:35:39] <jaubourg> ajax, ajaxPrefilter... post
[18:36:02] <DaveMethvin> i like it! would it be possible to DRY out all the ajaxStart/Stop/etc attachments?
[18:36:12] <DaveMethvin> lots of duplication there
[18:37:11] <jaubourg> possibly, but I'd like to have this in first... it's much more readable and would probably make it much simpler to dry out things and refactor
[18:37:26] <DaveMethvin> yeah sure, one step at a time
[18:37:48] <jaubourg> let me make a PR for this so that we can have people bikeshedding and have it tested properly
[18:37:51] <DaveMethvin> I also have that branch that eliminates global events, so the #foo will need to be document before that lands
[18:38:06] <DaveMethvin> before my branch lands, not yours 
[18:38:23] <jaubourg> yep, but that shouldn't be a big problem ;)
[18:38:36] <DaveMethvin> nope, pretty search-and-replacey
[18:41:53] <jqcommit> [13jquery] 15jaubourg opened pull request #1045: Total revamping of the ajax unit tests (06master...06ajax-unit)  02http://git.io/1sbJfA
[18:41:59] <jaubourg> DaveMethvin: https://github.com/jquery/jquery/pull/1045
[18:42:00] <socialhapy> â˜… Pull request on jquery by jaubourg ( ago): Total revamping of the ajax unit tests
[18:42:23] <jaubourg> Damn, it took me a loooooot of time :/
[18:42:35] <jaubourg> I so understand now why I didn't want to do it :P
[18:42:50] <DaveMethvin> and by the time you realized it, too late! :P
[18:44:11] <jaubourg> yeah, I was at test 56 out of a 107 and had the "oh fuck" moment right there :P
[18:44:38] <rwaldron> DaveMethvin all I asked for was tickets
[18:44:40] <jaubourg> Ended up rewriting and refactoring inside the tests a lot more than I anticipated
[18:44:49] <rwaldron> and all I get, per usual, is a bunch argument
[18:44:50] <jaubourg> hey rick
[18:45:03] <DaveMethvin> rwaldron: it did come off kind of gripey
[18:45:09] <rwaldron> not really
[18:45:15] <rwaldron> there was smiley
[18:45:18] <DaveMethvin> lol!
[18:45:25] <DaveMethvin> well in THAT case
[18:45:32] <rwaldron> I'm sick of asking that dude for tickets.
[18:46:04] <jaubourg> rwaldron: look at the new ajax unit tests and rejoice \o/
[18:46:26] <jaubourg> or tell me I missed a space or something... meh :P
[18:46:34] <jaubourg> :)
[18:46:39] <rwaldron> its cool
[18:46:51] <rwaldron> just makes me look more like an asshole for asking people to create tickets
[18:47:03] <rwaldron> instead of going off the reservation like it's the X-Games.
[18:47:30] <rwaldron> it's a thing of beauty though
[18:47:50] <jaubourg> we like the fact you're the asshole, makes us all look hippies or something ;)
[18:48:02] <jaubourg> yeah, the unit tests are readable again
[18:48:18] <jaubourg> at last I might add
[18:48:23] <rwaldron> Seems strange when DaveMethvin says I sound gripey and this contributor constantly argues with me when I ask for tickets
[18:48:37] <DaveMethvin> see you're sounding gripey again
[18:48:55] <rwaldron> Right now, I'm intentionally being/sounding gripey
[18:49:22] <rwaldron> no point in having a ticket tracker if we're not going to use it.
[18:49:29] <jaubourg> well, you cannot beat the frenchman regarding coming up as unsufferable in PRs
[18:49:35] <rwaldron> let's just rimraf it and be done, shall we?
[18:49:42] <DaveMethvin> sacre bleu!
[18:50:32] <rwaldron> jaubourg this looks super nice
[18:50:50] <jaubourg> I'm this close to split the ajax unit tests in several files... it's too big right now, far too big
[18:50:54] <jaubourg> rwaldron: thanks :)
[18:50:56] <DaveMethvin> hey jaubourg i think i found a line you didn't touch! :D
[18:51:08] <jaubourg> OMG WHERE LET ME MAKE A COMMIT
[18:52:06] * rwaldron takes dogs for walks
[18:52:19] <DaveMethvin> aw yeah the setup/teardown will fix the WETness issue easily
[18:53:04] <jaubourg> DaveMethvin: funny, now that the source is visible in a webpage I see your point about the #foo events code
[18:53:45] <jaubourg> it's just a question of creating a function that accepts a boolean and returns the setup func
[18:53:54] <DaveMethvin> yep
[18:53:59] <jaubourg> but it wasn't that obvious in the IDE
[19:03:33] <jaubourg> OK, 4am, time to sleep Oo
[19:03:39] <jaubourg> night guys :)
[23:27:17] <jqcommit> [13testswarm] 15Krinkle pushed 1 new commit to 06master: 02http://git.io/SjyQcQ
[23:27:17] <jqcommit> 13testswarm/06master 141ef883e 15Timo Tijhof: Merge "icon-cleanup": Composition, add "small" class, update imgs....
