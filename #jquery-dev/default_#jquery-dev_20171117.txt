[01:03:56] <saptaks> gibson042: Math.round( parseFloat( divStyle.width.split( "px" )[ 0 ] ) ) + "px" works but I am not sure this is the best way to do it.
[01:04:02] <saptaks> Though this fixes the error.
[01:04:19] <saptaks> But it is I guess bloating the file size to some extent
[01:06:28] <gibson042> well, you don't need the .split(â€¦) because parseFloat operates on string prefixes
[01:06:56] <gibson042> and there may also be a shorter way to get the rounding
[01:07:14] <saptaks> gibson042: okay. checking
[01:07:42] <gibson042> `v - v % 1` is equivalent, but IIRC we don't currently have a variable to pull that trick on
[01:08:04] <gibson042> oops, not equivalent
[01:08:11] <gibson042> that's Math.floor
[01:08:25] <saptaks> gibson042: Yes. That's Math.floor
[01:08:49] <gibson042> well, if there's no better way then Math.round will work
[01:09:06] <saptaks> gibson042: Ok I will try and see if there is a better way.
[01:09:26] <gibson042> but also note that we probably need this in a function for _all_ the comparisons that currently require exact match
[01:13:57] <gibson042> `(v + 0.5) - (v + 0.5) % 1` works (or equivalently, `(v += 0.5) - v % 1` etc.), but Math.round may be smaller than either
[01:14:19] <gibson042> anyway, thanks for playing with it
[01:14:55] <saptaks> gibson042: I am looking forward to being a full time contributor to jQuery. :D
[01:15:04] <gibson042> awesome; glad to read it
[01:15:16] <saptaks> I contributed once before to sizzle. But couldn't continue due to other commitments.
[01:15:24] <saptaks> But now really looking forward.
[01:17:37] <gibson042> It comes at a good time, I and the rest of the core team have been swamped by other obligations lately. There's so much I want to do with jQuery that I haven't been able to.
[01:17:51] <saptaks> gibson042: what is the maximum characters in a line standard that is followed in jQuery codebase? I couldn't find it in style guide.
[01:18:25] <gibson042> http://contribute.jquery.org/style-guide/js/#spacing
[01:18:34] <gibson042> shoot for 80, absolutely no more than 100
[01:21:06] <saptaks> gibson042: ok. got it.
[01:21:23] <saptaks> gibson042: I was following 80 only. wanted to confirm.
[01:22:51] <saptaks> gibson042: also you said that we might need this for all the comparisons that require exact match. Can you guide me to like where I might start looking to get that done?
[01:23:11] <saptaks> Also, how do I confirm whether all comparisons do require rounding?
[01:23:54] <gibson042> the ones in computeStyleTests
[01:25:00] <gibson042> there's lots of checking for exact match against pixel strings
[01:25:11] <gibson042> which apparently should be rounded
[01:30:39] <saptaks> gibson042: okay. So I am making a separate function in the css/support.js file for this rounding operation and using it for all the exact matchings in computeStyleTests till we have an exhaustive list of all other pixel matching?
[01:30:43] <saptaks> Does that sound good?
[01:30:58] <gibson042> yes; perfect
[01:35:54] <saptaks> gibson042: one question though. This error doesn't happen with 2.1.4, but happens in latest version. Was wondering why.
[01:38:04] <gibson042> We tweaked the values to reduce file size, and apparently selected one that Chrome doesn't zoom exactly. This kind of thing is so sensitive.
[01:38:59] <gibson042> https://github.com/jquery/jquery/commit/44cb97e0cfc8d3e62bef7c621bfeba6fe4f65d7c is probably the offending commit
[01:57:00] <saptaks> gibson042: Okay. So previously we were storing the value of div and all the computations in the memory instead of re-calculating it on zooming if I understand the commit. Am I right?
[01:57:35] <gibson042> yes, but I don't think recalculation will be necessary
[01:58:29] <gibson042> the problem was small errors under zoom... the value _should_ be exactly 36px, but instead it's 35.997px or something
[01:59:41] <gibson042> so we just need to recognize that such a value is not the wild divergence that indicates lack of support
[02:00:03] <gibson042> by allowing some slop in the comparison
[02:02:50] <saptaks> gibson042: okay. So right now to me rounding seems a good fix at least for this issue.
[02:03:06] <gibson042> I agree
[05:21:23] <jqcommit> [13jquery] 15Sami-L opened issue #3849: angular 5 Uncaught ReferenceError: jQuery is not defined at Object... 02https://git.io/vFyyp
[07:37:56] <jqcommit> [13jquery] 15mgol closed issue #3849: angular 5 Uncaught ReferenceError: jQuery is not defined at Object... 02https://git.io/vFyyp
