[10:36:29] <stephen> Can anyone link me to the release notes explaining the need for 2.1.3?
[10:36:47] <arthurvr> here you go http://blog.jquery.com/2014/12/18/jquery-1-11-2-and-2-1-3-released-safari-fail-safe-edition/
[10:36:54] <stephen> Thanks
[10:38:14] <stephen> Hmm.. I suppose what I mean is what happened to 2.1.2? Was it a mistake in configs or something?
[10:39:10] <stephen> According to GitHub 2.1.2 and 2.1.3 are behind by the same number of commits, so i can't see a difference
[10:40:50] <m_gol> stephen: it's all in the blog post arthurvr linked to
[10:41:04] <stephen> I'll read it again. Thanks
[10:41:09] <m_gol> "You may notice that we skipped" etc.
[10:41:33] <stephen> Yeah, just found that
[10:41:41] <stephen> Suits me right for just searching for 2.1.2
[10:41:44] <stephen> Thanks folks
[10:43:01] <m_gol> stephen: it all started with https://github.com/jquery/jquery/issues/1788#issuecomment-67340458
[10:48:03] <stephen> Well now. That was awfully generous of you all to work so hard on something not /technically/ supported at that time
[10:49:21] <stephen> A million Angular developers testing everything using Grunt tasks both thank you and remain silent.
[11:43:47] <jqcommit> [13jquery] 15gibson042 opened pull request #1991: Callbacks: Update locking behavior (06compat...062015-01-callbacks) 02http://git.io/KqYjBg
[12:28:29] <stephen> So, I'm attempting to use the GitHub API to allow my team's TFS to create a new Product Backlog Item whenever jQuery (or any 3rd party JS lib we use) releases a new stable version. 
[12:30:51] <stephen> It looks like the way with this team would be to watch for new tags (as opposed to releases, your team doesn't use that full feature). Milestones seem a bit more valid for reading the included resolved issues, but am I right in assuming that only gets created by your team at release?
[12:31:33] <stephen> Again, if you have release process docs, I'm happy to read those instead
[12:35:03] <stephen> https://github.com/jquery/jquery/wiki/Release-process
[12:35:05] <stephen> Found it
[12:45:34] <m_gol> stephen: doesn't GitHub equate tags with releases? https://github.com/jquery/jquery/releases
[12:46:30] <stephen> m_gol: It does, but the way jQuery does it, if you hit http://api.github.com/repos/jquery/jquery/releases you'll notice it's empty
[12:46:50] <stephen> m_gol: It's because only binaries are associated with it
[12:49:06] <stephen> Well, I got that backwards 
[12:49:11] <m_gol> stephen: yeah, so you need to go with tags; I don't want to add yet another step to our release process without a dire need; it's already complicated ;)
[12:49:14] <stephen> But here's a good explaination of why: https://stackoverflow.com/questions/22180185/github-api-returns-empty-assets-for-release-array
[12:49:23] <stephen> No, no.
[12:49:32] <stephen> Please, I don't want to add to your process.
[12:50:04] <stephen> I'm just making sure my code's logic is accurate. Of course I first went for the releases endpoint, but no matter
[12:50:53] <m_gol> sure; we always tag so that should be safe
[12:51:01] <m_gol> or you can query npm
[12:51:14] <m_gol> that's even safer as npm doesn't allow to mess with already published versions
[13:44:25] <stephen> Actually, I need the versions, not the latest.
[13:44:59] <stephen> Project is too complicated for the powers that be to allow automatic update to latest.
[13:45:37] <stephen> So instead new vesions get created as a backlog item for each project using the library
[13:46:06] <stephen> And the work of upgrading is prioritized in a sprint like any other backlog item
[13:46:12] <stephen> Seems like a fair trade
[14:05:36] <m_gol> stephen: sounds great; most people just stick with whatever ancient version they started with
[14:13:05] <stephen> Hah... That's entirely the problem on this team. My first week I got 3 tickets for bugs that were fixed in versions of jquery and jquery-ui 5 years ago.
[14:14:35] <stephen> When I realized that 70% of the tickets were already fixed, I came up with this instead. Once I get it working, every project starts adding at least +1 version to their sprints until they are current.
[14:15:09] <stephen> I'd rather them jump entirely, but that's up to each project's Product Owner.
[18:36:47] <Krinkle> stephen: m_gol: For comparison, QUnit does use them. https://github.com/jquery/qunit/releases
[18:53:55] <stephen> I must have missed a few lines Krinkle 
[18:55:00] <Krinkle> stephen: coiuple hours ago, you were talking about https://github.com/jquery/jquery/wiki/Release-process and https://github.com/jquery/jquery/releases
[18:56:11] <stephen> Ah, yes]
[23:28:37] <jqcommit> [13jquery] 15phistuck opened issue #1992: $.ajax Does Not Fire Success On Same Origin Non CORS Requests In Internet Explorer 9 - 10 02http://git.io/f6mCAg
