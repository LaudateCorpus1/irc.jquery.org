[17:20:52] <johnbender> DaveMethvin: quick question for you
[17:20:56] <johnbender> if you have a second
[17:21:05] <DaveMethvin> sup johnbender
[17:21:14] <johnbender> DaveMethvin: it's sort of a question about memory managment in the DOM
[17:21:20] <johnbender> a topic on which I'm ignorant
[17:21:41] <johnbender> DaveMethvin: it doesn't look like $.fn.remove nulls or undefs references to the removed elements
[17:21:58] <johnbender> is it just assumed the collection will get gc'd
[17:21:59] <johnbender> ?
[17:22:06] <johnbender> and so will the element ref along with it?
[17:22:19] <DaveMethvin> once they're out of the DOM and have no more refs they will get gced
[17:22:22] <johnbender> or does `removeChild` do that for you
[17:22:35] <johnbender> DaveMethvin: ok so it's just assumed the user will scope things like smart people?
[17:22:40] <johnbender> -?
[17:22:44] <johnbender> I like that approach :)
[17:22:54] <DaveMethvin> well the user can want a ref after the remove
[17:23:03] <DaveMethvin> like to remove, then later reinsert
[17:23:04] <johnbender> DaveMethvin: fact!
[17:23:10] <johnbender> you are completely right
[17:23:11] <DaveMethvin> although they'd generally use .detach()
[17:23:21] <DaveMethvin> because that saves the data and events
[17:23:22] <johnbender> the difference being the data
[17:23:23] <johnbender> yah
[17:23:24] <johnbender> ok
[17:23:29] <johnbender> DaveMethvin: thank you!
[17:23:33] <DaveMethvin> k, np
