[08:30:25] <jaubourg> plop
[08:31:58] <gibson042> hey jaubourg; I've got another commit for ajaxTest (abandoning jQuery.when
[08:32:16] <gibson042> do you want to review, or shall we just go for it?
[08:33:30] <jaubourg> go for it, I'll review as it is comitted ;)
[08:37:38] <jqcommit> [13jquery] 15gibson042 pushed 1 new commit to 06master: 02http://git.io/g6czMA
[08:37:38] <jqcommit> 13jquery/06master 144ada325 15Richard Gibson: More improvements per @jaubourg
[08:41:53] <jaubourg> gibson042: you can get rid of the map and use each ;)
[08:42:08] <jaubourg> oh no, you can't
[08:42:09] <jaubourg> <>
[08:42:12] <jaubourg> ><
[08:42:14] <gibson042> :)
[08:42:15] <jaubourg> sorru about that
[08:42:19] <jaubourg> sorry even
[08:42:22] <jaubourg> nice :)
[08:42:22] <gibson042> need to keep those requests
[08:42:27] <jaubourg> for abort
[08:42:29] <jaubourg> got it
[08:48:54] <jaubourg> gibson042: there's still a race condition though... if an ajax request early fails while it's supposed to be successful, requests before it won't be aborted because requests is not filled yet... that's why it was divided in two loops, one to create the list of requests, one to attach the handlers and handle completion
[08:50:01] <jaubourg> gotta go walk the dog bbiab
[08:50:11] <gibson042> I think that's desirable now... there are no more auto-aborts because we want results from the successful calls
[08:50:54] <jaubourg> oh, you just abort if there are pending requests now?
[08:50:57] <gibson042> and the test isn't allowed to finish until all requests end
[08:50:59] <gibson042> yeah
[08:51:10] <jaubourg> ok, cool
[08:51:30] <jaubourg> let me read that again
[08:52:56] <jaubourg> got you, you may wanna throw the options for something unexpected so that the message points to the right request, like strictEqual( options, undefined, "unexpected " + status ); or something?
[08:53:08] <jaubourg> anyway, dog is getting impatient ;)
[08:53:26] <gibson042> this can wait, walk you dog!
[08:53:30] <gibson042> *your
[09:02:16] <rwaldron> Hi! I'm back from months of travelling and a vacation. are we meeting at noon today, or just waiting until tomorrow in person?
[09:02:41] <jaubourg> I think we'll have a meeting today, not sure it will be long though
[09:03:03] <rwaldron> gnarf ping
[09:03:27] <jaubourg> except I cannot talk in the channel, of course
[09:04:53] <rwaldron> I can
[09:04:56] <rwaldron> i think it's open now
[09:08:05] <doesallmagic> Project jQuery Core build #530: STILL FAILING in 30 min: http://swarm.jquery.org:8080/job/jQuery%20Core/530/
[09:08:05] <doesallmagic> richard.gibson: More improvements per @jaubourg
[09:51:15] <jaubourg> ok
[09:51:19] <jaubourg> meeting done
[09:51:42] <jaubourg> I'll look into tix and close the ones I think don't have consensus
[09:51:57] <jaubourg> bark at me if I do something you disagree with
[09:55:38] <rwaldron> need some opinions...
[09:55:44] <rwaldron> timmywil gibson042 specifically
[09:55:51] <rwaldron> ?9832
[09:55:53] <bot-t> [#9832]  (assigned bug) - http://jqbug.com/9832
[09:56:29] <rwaldron> getting the text leads back to Sizzle, and requires some idiotic special cases in getText
[09:57:32] <rwaldron> basically elem.nodeName === "style" && elem.style.cssText (but only for poorly implemented oldIE)
[09:57:43] <rwaldron> I'd like to close this as won't fix
[09:58:30] <gibson042> rwaldron: I thought I remembered DaveMethvin wanting something for 1.9 just to tie up loose ends, which would come out for 2.0 anyway
[09:58:46] <gibson042> but I'd punt on it if the fix is in Sizzle instead of jQuery
[09:58:51] <rwaldron> exactly
[09:59:13] <rwaldron> The burden is messy and unnecessary
[09:59:17] <rwaldron> ok, closssing
[10:07:34] <Krinkle> jaubourg: (-meeting) rebased
[10:07:39] <Krinkle> It had a few minor conflicts
[10:08:02] <jaubourg> Krinkle: thanks :)
[10:09:17] <jaubourg> all right, guys, I'm very tempted to close this as wontfix but I wanted to know if I was the only one who thought an always async approach is bogus to the extreme: http://bugs.jquery.com/ticket/10467
[10:09:32] <rwaldron> mikesherov ping
[10:10:05] <jaubourg> there was this loooooooong email thread where I answered the rationales for going all async and didn't see any answer to those
[10:12:49] <Krinkle> For the grunt expert here: How to approach the need for named parameters for tasks?
[10:13:10] <mikesherov> rwaldron: what's up?
[10:13:17] <Krinkle> e.g. "grunt testswarm:xxx:xx:xx:xx:xx" doesn't scale well. Right now its in a file, but for some values I'd like to pass a free-form string from cli.
[10:13:17] <jaubourg> oh, we have experts in this chat room now? :P
[10:13:59] <mikesherov> rwaldron: you pinged?
[10:14:53] <jaubourg> mikesherov: I'm wondering is this wasn't because of me: <jaubourg> all right, guys, I'm very tempted to close this as wontfix but I wanted to know if I was the only one who thought an always async approach is bogus to the extreme: http://bugs.jquery.com/ticket/10467
[10:15:24] <mikesherov> No, I agree with always async
[10:15:44] <jaubourg> I'd like to have a rationale about that then
[10:15:45] <mikesherov> unfortunately, lots of programmers rely on "just implement and see if it works" approach
[10:16:06] <mikesherov> if their connection is fast, they may hit a case where the async version is all they ever see
[10:16:22] <mikesherov> but then boom, someone on a slow machine hits the sync version for whatever reason, and it's broken
[10:16:29] <mikesherov> principle of least surprise
[10:16:52] <jaubourg> you realise an all async version is actually a gimped implementation that will never ever be usable in a sync situation?
[10:17:06] <mikesherov> jaubourg: sure
[10:17:32] <jaubourg> AFAIK, jQuery is not in the business of protecting against people doing stupid stuff and never has been
[10:17:44] <mikesherov> I'd rather have a gimped version that works in a consistent fashion than one that has non-deterministic code execution
[10:17:56] <mikesherov> jaubourg: the question is whether it's stupid or not
[10:18:04] <jaubourg> and that's the only argument that comes in this discussion once you forget about fake claims regarding perfs and "purity"
[10:18:12] <mikesherov> The assumption that it's stupid is spurious
[10:18:28] <jaubourg> mikesherov: do you have actual examples where it is not?
[10:18:30] <mikesherov> principle of least surprise is a well known and good principle
[10:18:34] <mikesherov> jaubourg, yes
[10:19:12] <mikesherov> when I was TRYING to get readyState === "interactive" going for 1.8, up until that point, $.ready was ALWAYS async
[10:19:13] <jaubourg> well, gimping an implementation because it doesn't preclude devs from learning about async programming seems weird to me
[10:19:22] <mikesherov> no, it's not about LEARNING about it
[10:19:27] <mikesherov> it's the expected behavior
[10:19:42] <jaubourg> sorry, my window doesn't scroll properly, to I answer to old lines of yourse ;)
[10:19:53] <mikesherov> so $.ready was always async
[10:20:03] <mikesherov> because of conditions beyond the programmers control
[10:20:07] <jaubourg> not that I know of
[10:20:21] <jaubourg> all calbacks were called in sequence in a for loop
[10:20:27] <mikesherov> yes
[10:20:43] <jaubourg> synchronously
[10:20:47] <mikesherov> but the SITUATIONS in which it was executed were OBSERVED to be async
[10:21:13] <jaubourg> not following you
[10:21:25] <mikesherov> var a; $(function(){console.log(a)}); a='hi';
[10:21:33] <mikesherov> This always worked
[10:21:48] <mikesherov> until I was able to get it to be synchronous with readyState interactive
[10:22:20] <jaubourg> except the code is actually very very bad and makes competly bogus assumptions
[10:22:29] <mikesherov> the point being, if the observed behavior 99% of the time is asynchronous, the average programmer will not think to themselves, hmmâ€¦. maybe this is sometimes synchronous
[10:22:43] <mikesherov> yes, they've made an assumption
[10:22:48] <mikesherov> but not a "very very bad" one
[10:23:01] <jaubourg>  well, the code is written out of order
[10:23:02] <mikesherov> they've made a simple to make, easily understandable assumption about the code
[10:23:14] <jaubourg> it's bad when you read it as much as it is when it sync
[10:23:40] <mikesherov> not the point, though
[10:23:53] <mikesherov> what is the argument against always async other than it's "gimped"
[10:24:02] <mikesherov> why would someone want both behaviors?
[10:24:49] <jaubourg> actually, yes, because we're getting in the field of supporting badly written code because of supposed assumptions made by people... except we got 3 tix regarding the sync beheviour of deferreds and its consequences...
[10:25:17] <mikesherov> there is a case to be made for Synchronous javascript
[10:25:19] <jaubourg> mikesherov: $.ajax().then(function() { return $.ajax(); });
[10:25:39] <mikesherov> but that should be controllable and expected
[10:25:39] <jaubourg> you want the second ajax call issued as soon as possible
[10:25:47] <mikesherov> jaubourg: I agree
[10:26:03] <jaubourg> that's the crux of the issue is
[10:26:06] <mikesherov> we're talking about an implementation that leverages deferreds, not the deferreds themselves
[10:26:25] <jaubourg> what should be controllable and expected is that you setTimeout 0 to have some async
[10:26:26] <mikesherov> I believe deferreds should have an expected and predictable execution order
[10:26:54] <jaubourg> I'm talking about deferreds
[10:26:58] <rwaldron> mikesherov sorry, yes I pinged
[10:27:06] <rwaldron> I'm going to go ahead and do the style guide doc
[10:27:26] <mikesherov> I'm not talking about supporting bad code, although I think that's a spurious argument to call code "bad"
[10:27:27] <jaubourg> if something using deferreds want to go async, let it use setTimeout 0 itself and let's leave the deferreds imp sync
[10:27:44] <mikesherov> jaubourg: deferreds are NOT imp sync
[10:27:55] <jaubourg> that should be a choice and you cannot unasync stuff in js
[10:27:56] <mikesherov> they aren't implicitly either
[10:28:05] <mikesherov> you can unasync stuff in JS
[10:28:09] <mikesherov> just not easily
[10:28:12] <jaubourg> how
[10:28:22] <jaubourg> how do you get around a setTimeout 0?
[10:28:37] <mikesherov> wrap in a polling loop
[10:28:53] <jaubourg> eeeeek
[10:28:53] <mikesherov> it's dirty, but not impossible either
[10:29:03] <mikesherov> The point is, you CAN unasync stuff
[10:29:37] <mikesherov> and if you said that deferreds should be consistently sync, well that makes them not deferreds either
[10:30:04] <jaubourg> no quite, setTimeout(function() { flag=true, }, 0 ); while( !flag ) {}
[10:30:17] <jaubourg> the setTimeouted function will never be called
[10:30:52] <jaubourg> mono-threaded
[10:31:43] <mikesherov> right, hmmph
[10:32:07] <jaubourg> and it's not about deferreds it's about promises, which can be used to observe synchronous tasks, not just async... but some people in this community pushed for the asynchronous scenario so much, no-one diffrentiates about the two
[10:32:22] <jaubourg> between the two even
[10:32:35] <mikesherov> look, I like both
[10:32:45] <mikesherov> I just think the principle of least surprise wins here
[10:33:02] <jaubourg> me too, that's why I need a synchronous imp, or else I just have async and I cannot get around it
[10:33:04] <mikesherov> but I'm fine either way, jaubourg, I support you!
[10:33:36] <jaubourg> to be honest, if I could force something async to become sync, I'd do an async imp in the second
[10:33:48] <jaubourg> for the reason you give actually
[10:35:44] <jaubourg> and, mikesherov, thank you for laying out those arguments, because I need to know about them so that I can understand why people want 100% async so badly
[10:36:07] <jaubourg> still waiting for the argument that will make me change my mind
[10:36:12] <mikesherov> yeah, I mean, think about the GREAT programmer who will still make this mistake
[10:36:43] <mikesherov> I think your biggest barrier is your opinion of the people you think would make the bad assumptions. I think it's almost everyone!
[10:37:00] <jaubourg> I know, but think about the same GREAT programmer wanting actual performance when chaining async tasks and then observing something sync.
[10:37:56] <mikesherov> jaubourg: I think thought that's like the closure compiler argument
[10:38:28] <mikesherov> the people who will benefit from that are few and far between. I'd argue that making it simple is the way to go here
[10:39:19] <jaubourg> I don't have a bad opinion of people making mistakes... I make mistakes all the time when I code. I'm just not willing to sacrifice performance and features (that are used twice internally already) because of some perceived "inconsistencies" that have been reported only twice by people outside the team.
[10:40:04] <jaubourg> the closure compiler is another beast entirely imo
[10:40:06] <rwaldron> mikesherov may interrupt for a moment
[10:40:19] <rwaldron> can you guys give a quick look over this
[10:40:20] <rwaldron> https://gist.github.com/894f63641581ce2d7fda
[10:40:25] <mikesherov> rwaldron: will do
[10:40:29] <mikesherov> jaubourg: fair enough
[10:40:56] <rwaldron> hm the type checks part needs some formatting
[10:40:59] <jaubourg> rwaldron: ["nospace"] ?
[10:41:14] <jaubourg> or do we have to have spaces for arrays?
[10:41:40] <rwaldron> where do you see that?
[10:41:45] <rwaldron> [ "like this" ]
[10:41:50] <mikesherov> rwaldron: you got rid of a lot of the white space rules, no?
[10:41:50] <rwaldron> no space when []
[10:41:56] <rwaldron> nope
[10:42:05] <jaubourg> nowhere, I'm just asking if no space wouln't be more consistent with what we have for args
[10:42:05] <rwaldron> unless I missed something
[10:42:16] <jaubourg> open question
[10:42:17] <rwaldron> I consolidated a bunch of things that made sense to consolidate
[10:42:33] <jaubourg> looks good btw
[10:42:37] <rwaldron> thanks
[10:43:21] <jaubourg> AFAIK the only exception to === is == null
[10:43:58] <rwaldron> I find it amusing when JavaScript syntax highlighters invent keywords
[10:43:59] <gibson042> yes, that should probably have an explicit mention in the "Equality" section to complement its example in "Type Checks"
[10:44:11] <rwaldron> eg. double is not special in js
[10:44:20] <rwaldron> jaubourg gibson042 good call, let's be explicit
[10:44:24] * rwaldron changing
[10:45:35] <jaubourg> rwaldron: should we add that when testing variables, the order is varName === value ? gibson042: better for minification?
[10:45:48] <jaubourg> gzip rather
[10:45:54] <gibson042> also rwaldron, variable declaration for the "good" for loop should probably move above it since that's our convention
[10:46:42] <gibson042> jaubourg: I'd leave it be, neither is explicitly better but we do varName operator value so frequently that it'd have to change everywhere if it changes anywhere
[10:47:10] <rwaldron> gibson042 yes. copy-pasta. good lookin' out.
[10:47:34] <gibson042> s/explicitly/inherently/
[10:48:01] <rwaldron> If we had a PR with value op var, I'd kick it back
[10:48:08] <rwaldron> I think we all would
[10:48:20] <rwaldron> but I've only seen it a few times
[10:48:33] <jaubourg> probably needs an else if example and a try/catch/finally one
[10:48:41] <rwaldron> ok
[10:48:46] <gibson042> I dunno, I could be bought for about 75 bytes ;)
[10:49:06] <jaubourg> hahaha
[10:49:18] <jaubourg> you're so cheap, richard
[10:50:18] <jaubourg> it would take a mere 10 for me though
[10:50:41] <gibson042> WHORE!
[10:51:01] <rwaldron> jaubourg added and updated
[10:51:33] <rwaldron> I refuse to succumb to the gzip fiends
[10:51:43] <rwaldron> with their overlong, verbose ways...
[10:51:44] <rwaldron> ;)
[10:51:59] <rwaldron> rewarding blabbermouth code
[10:52:24] <jaubourg> rwaldron: you could also add that assignements within an expression should be avoided but if they simplify the code structure enough without making it unreadable, it has to be surrounded by an extra pair of parenthesis: if ( ( index =, haystack.indexOf( needle ) ) > -1 ) {}
[10:52:46] <jaubourg> there's an extra comma here
[10:53:02] <rwaldron> I think that encourages things that we may not want to encourage
[10:53:06] <jaubourg> probably not a good example though
[10:53:14] <jaubourg> yeah, true
[10:55:03] <mikesherov> rwaldron: where does the proposed style guide mention: ("ok"), ( "ok", "ok" ), ("not", "ok")
[10:55:04] <mikesherov> ?
[10:55:55] <gibson042> mikesherov: search it for "Single argument string literal, no space"
[10:56:23] <mikesherov> got it
[10:56:43] <rwaldron> mikesherov um... it does
[10:56:46] <rwaldron> it doesn't
[10:56:53] <rwaldron> but it never did
[10:56:59] <rwaldron> so I'll I add
[10:57:51] <gibson042> but it needs "Single element array literal", right? ( ["ok"] vs. ["not", "ok"] )
[11:01:26] <gibson042> jaubourg: if we do want an in-condition assignment example, I'd lean towards `while ( (node = node[ DOMDirection ]) )`: https://github.com/jquery/jquery/pull/1046#issuecomment-10723592
[11:01:26] <socialhapy> â˜… Pull request on jquery by gibson042 (1w, 10h ago): Fix #12959: Optimize library-wide patterns
[11:02:29] <pbramos> gibson042: I was going to create a new ticket to remove buildFragment...  Should I wait until https://github.com/jquery/jquery/pull/1052 is merged in, or just go ahead with it?
[11:02:30] <socialhapy> â˜… Pull request on jquery by PaulBRamos (17h, 46m ago): #11989 - Remove fragment cache
[11:03:18] <gibson042> pbramos: it looks like we're about ready to land 1052, so I'd wait
[11:03:48] <jaubourg> gibson042: noce one
[11:03:51] <jaubourg> nice
[11:04:21] <rwaldron> re: buildFragment, I would like to see some concrete performance data that supports removing the createDocumentFragment path (if I've understood correctly)
[11:04:51] <rwaldron> ajpiano ping
[11:05:13] <ajpiano> sup
[11:05:21] <rwaldron> we're working on https://github.com/jquery/jquery.github.com/issues/2
[11:05:21] <socialhapy> â˜… Issue #2 on jquery.github.com (ajpiano; 6d, 16h ago): Import jQuery Core Style Guidelines
[11:05:37] <rwaldron> but I'm a little nauseated that these are all html files
[11:06:05] <rwaldron> and also, not sure why scott_gonzalez cares if the jQuery Core Style Guide is in jquery/jquery or somewhere else
[11:06:13] <rwaldron> Because really... a link is a link
[11:09:13] <jaubourg> Hey Adam
[11:09:18] <pbramos> rwaldron: Re: buildFragment - I don't think the intention is to remove the createDocumentFragment code path, but to just remove the buildFragment function as it's not much more than a wrapper around .clean at this point
[11:09:52] <scott_gonzalez> rwaldron: I don't care if it's on jquery.github.com or jquery.com (which would allow you to use markdown), but ideally the coding standards all live together.
[11:10:08] <rwaldron> pbramos I obviously misunderstood. thanks for the clarification
[11:10:08] <pbramos> All that function does after #11989 is set the context and create the fragment.
[11:10:22] <pbramos> np
[11:10:39] <rwaldron> scott_gonzalez i agree with keeping all together
[11:10:58] <rwaldron> but I basically refuse to change this to HTML at this point
[11:13:24] <rwaldron> ugh
[11:13:58] <rwaldron> at the tc39 meeting last week, a serious tantrum was thrown by one of the longest running members
[11:14:42] <rwaldron> and now I'm trying to piece together some semblance of notes with brendan and sam (a member from northeastern)
[11:14:44] <rwaldron> nightmare.
[11:44:18] <pbramos1> ping
[14:13:33] <Krinkle> jzaefferer: gnarf: Maybe one of you can give another crack at figuring out what css rule is causing the IE8 1px offset bug this time?
[14:13:41] <Krinkle> You figured it out last time :)
[14:14:15] <Krinkle> I appears it is a different one this time (font-size/line-height are still the same)
[14:41:56] <Krinkle> Github made their 404 pages without the user toolbar so they're user agnostic
[14:42:14] <Krinkle> I'm like.. clicking the cloud thinking the profile button would be there, I wasn't even looking
[14:42:38] <Krinkle> they used to have the user toolbar on 404 pages as well
[14:45:16] <Krinkle> lol, twitter stream of complaints about this: https://twitter.com/search?q=github%20404&src=typd
[14:58:05] <jzaefferer> mikesherov: ^ - regarding: "Maybe one of you can give another crack at figuring out what css rule is causing the IE8 1px offset bug this time?"
[15:21:22] <jzaefferer> Krinkle: looks like Safari 6 still runs really badly
[15:21:29] <Krinkle> yep
[15:21:32] <Krinkle> browserstack...
[15:22:00] <Krinkle> https://splunk.jquery.com:8000/en-US/app/search/browserstack
[15:23:45] <Krinkle> jzaefferer: actually it isn't ghosting/disconnecting (like IE7, 139 fail-starts in the last 24 hours)
[15:23:52] <Krinkle> it is in queue
[15:24:16] <Krinkle> as a matter of fact of the 21 spawns for safari 6.0, only 1 failed in the alst 24 hours
[15:24:20] <Krinkle> last*
[15:28:39] <Krinkle> the other 20 did start eventually and without problems
[15:28:48] <Krinkle> it just stays like 2 hours in the queue 
[20:41:25] <sizcommit> [13sizzle] 15gibson042 pushed 1 new commit to 06master: 02http://git.io/aS8X9A
[20:41:25] <sizcommit> 13sizzle/06master 147bef9ba 15Richard Gibson: Fix jQuery #12856: keep PSEUDO regex non-greedy
[20:44:01] <jqcommit> [13jquery] 15gibson042 pushed 1 new commit to 06master: 02http://git.io/rFrAbw
[20:44:01] <jqcommit> 13jquery/06master 143ab2634 15Richard Gibson: Fix #12856: keep PSEUDO regex non-greedy
[21:14:38] <doesallmagic> Project jQuery Core build #531: STILL FAILING in 30 min: http://swarm.jquery.org:8080/job/jQuery%20Core/531/
[21:14:39] <doesallmagic> richard.gibson: Fix #12856: keep PSEUDO regex non-greedy
[22:40:59] <jqcommit> [13jquery] 15jaubourg pushed 1 new commit to 06master: 02http://git.io/zdkq4w
[22:40:59] <jqcommit> 13jquery/06master 14228ab3d 15jaubourg: Organizes the php scripts used for testing better, so that the whole logic of a unit, server-side and client-side, is contained within the unit itself. Nearly all ajax unit tests take advantage of the new 'framework'. Lots of files got deleted because they became redundant or weren't used anymore.
[22:46:06] <jqcommit> [13jquery] 15jaubourg pushed 1 new commit to 06master: 02http://git.io/NekFPA
[22:46:06] <jqcommit> 13jquery/06master 142a419a7 15jaubourg: Fixes spacing
[23:08:27] <doesallmagic> Project jQuery Core build #532: STILL FAILING in 27 min: http://swarm.jquery.org:8080/job/jQuery%20Core/532/
[23:08:27] <doesallmagic> j: Organizes the php scripts used for testing better, so that the whole logic of a unit, server-side and client-side, is contained within the unit itself. Nearly all ajax unit tests take advantage of the new 'framework'. Lots of files got deleted because they became redundant or weren't used anymore.
[23:38:46] <doesallmagic> Project jQuery Core build #533: STILL FAILING in 30 min: http://swarm.jquery.org:8080/job/jQuery%20Core/533/
[23:38:47] <doesallmagic> j: Fixes spacing
