[05:31:21] <gibson042> .
[07:07:26] <DaveMethvin> gibson042: you around?
[07:07:54] <gibson042> yeah, I'll be fixing that Safari glitch in about 10 minutes
[07:08:00] <DaveMethvin> just a quick q
[07:08:01] <DaveMethvin> http://bugs.jquery.com/ticket/13056
[07:08:13] <DaveMethvin> i don't think we want to support class operations on xml do we?
[07:09:01] <DaveMethvin> it's been like that forever, we've always used the property
[07:09:03] <gibson042> Trac's taking forever, but I would say no in general
[07:10:36] <gibson042> then again, it wouldn't be *that* bad to .getAttribute("class")
[07:10:51] <DaveMethvin> a couple of issues
[07:11:04] <DaveMethvin> one is i think the perf may be lower, but we'd need to test that
[07:11:22] <DaveMethvin> the other is that getAttribute returns undefined instead of an empty string so we 'd need to check for that
[07:11:30] <DaveMethvin> if ther'es no class
[07:12:04] <DaveMethvin> but to me it's adding html semantics to xml, there's nothing special about the class attribute in xml
[07:12:08] <DaveMethvin> there is in html
[07:12:32] <gibson042> right, the issue here is (again) SVG
[07:12:55] <gibson042> special semantics on the attribute but not a special property reflecting them
[07:12:56] <DaveMethvin> i would just love to say we don't support xml at all :D
[07:13:24] <DaveMethvin> right, because these xml-based dialects that aren't html
[07:13:35] <DaveMethvin> don't follow the same semantics
[07:13:55] <DaveMethvin> we've tried to placate people on these issues in the past
[07:14:07] <DaveMethvin> we get a few steps in and realize that there are things all over the place
[07:14:19] <DaveMethvin> it just can't be done cleanly
[07:14:23] <gibson042> yeah
[07:14:56] <DaveMethvin> this can't be a common request, i don't think i've ever seen anyone else trying to addClass on an xml doc
[07:15:00] <DaveMethvin> in 6 years
[07:15:03] <gibson042> maybe we should point people to a jQuery SVG plugin when we wontfix these
[07:15:07] <gibson042> someone must have written one
[07:15:14] <DaveMethvin> the ticket has one
[07:15:49] <DaveMethvin> in this case he wants the html-like semantics to work the same in his svg and then the plugin does the rest
[07:16:09] <gibson042> sounds like an issue with the plugin, then
[07:16:24] <gibson042> or a feature request ;)
[07:17:26] <DaveMethvin> imma close this patchwelcome with the caveat that the code should come with a jsperf
[07:17:29] <gibson042> looks like it's already there, even: SVG DOM extension at http://keith-wood.name/svg.html
[07:17:49] <DaveMethvin> yeah, and kbwood is active on our forum too
[07:19:17] <gibson042> that's a good resolution
[07:32:13] <sizcommit> 01[13sizzle01] 15gibson042 pushed 1 new commit to 06master: 02http://git.io/8Ds-RQ
[07:32:13] <sizcommit> 13sizzle/06master 14ba5f09f 15Richard Gibson: Fix Supplemental Plane escapes for Safari 5
[07:35:12] <jqcommit> 01[13jquery01] 15gibson042 pushed 1 new commit to 06master: 02http://git.io/bIgBXw
[07:35:12] <jqcommit> 13jquery/06master 141e7e541 15Richard Gibson: Fix 00bbbe20 test failures
[08:06:49] <doesallmagic> Project jQuery Core build #595: STILL FAILING in 30 min: http://swarm.jquery.org:8080/job/jQuery%20Core/595/
[08:06:50] <doesallmagic> richard.gibson: Fix 00bbbe20 test failures
[09:11:04] <ajpiano> lol ben_alman https://twitter.com/pfreitag/status/282169352151789568
[09:11:34] <ajpiano> i don't even
[09:26:36] <ben_alman> i dunnoes
[10:05:01] <ben_alman> http://twitter.com/cowboy/status/282184861488406528
[10:56:23] <DaveMethvin> rwaldron: i hope you're merging those into a branch
[10:57:14] <DaveMethvin> or are you closing them to re-work?
[10:59:21] <rwaldron> I am
[10:59:24] <rwaldron> 2.0-core is coming
[10:59:29] <DaveMethvin> haha
[10:59:34] <rwaldron> ...if i can get effing grunt to work.
[10:59:38] <DaveMethvin> yeah i am gonna redo mine
[10:59:53] <DaveMethvin> be sure to npm install after you pull
[11:00:01] <rwaldron> i did
[11:00:08] <rwaldron> but it still shows up as 0.3.17
[11:00:32] <rwaldron> what the...
[11:00:40] <rwaldron> local grunt is correct
[11:01:26] <gibson042> rwaldron I ended up making a symlink to node_modules/.bin/grunt
[11:01:48] <rwaldron> good thinkin'
[11:01:59] <rwaldron> I might skip the annoying part and just do that
[11:02:59] <gibson042> also (per Krinkle's suggestions to mikesherov) npm test runs grunt
[11:03:07] <gibson042> but you can't pass arguments that way
[11:03:16] <rwaldron> yeah
[11:03:18] <rwaldron> lame.
[11:03:22] <rwaldron> I'll do it your way
[11:13:55] <jqcommit> [13jquery] 15rwldrn opened pull request #1098: 2.0: Reduce core (06master...062.0-core)  02http://git.io/-XMVaQ
[11:27:56] <timmywil> hmm, how do I run this local grunt
[11:28:02] <timmywil> doesn't seem to have a bin anymore
[11:30:22] <timmywil> oh i see, there's grunt-cli
[11:30:26] <timmywil> ktxhbye
[11:55:39] <rwaldron> DaveMethvin gibson042 mikesherov timmywil we need 151 bytes to drop below 30k
[11:56:01] <DaveMethvin> we'll get there easy
[11:56:14] <DaveMethvin> timmywil mentioned a couple of things i missed in css
[11:56:39] <rwaldron> still need: ajax, dimensions, offset, deferred, callbacks, effects, queue, serialize
[11:56:50] <DaveMethvin> oh yeah, i have ajax about half done
[11:56:52] <rwaldron> so... its looking like a alot of work and tons more pay off
[11:56:59] <rwaldron> DaveMethvin rad
[11:57:03] <DaveMethvin> the others don't have much
[11:57:05] <rwaldron> I just did a complete dry run
[11:57:13] <DaveMethvin> i marked them in the meeting notes
[11:57:23] <rwaldron> once orkel rebases, everything will be all set
[11:57:43] <rwaldron> dry-run of merging that is
[11:57:46] <DaveMethvin> imma redo my pulls, split up the commits for history
[11:58:06] <rwaldron> cool
[11:58:16] <timmywil> I imagine there's not a lot to remove in callbacks/deferred/queue
[11:58:24] <DaveMethvin> also i wanted to land a couple of pulls before we split, so that may need a rebase
[11:58:38] <DaveMethvin> timmywil: i didn't see anything
[11:58:41] <DaveMethvin> so yeah
[11:59:04] <DaveMethvin> once we get the forest out of the way it will be easier to see the remaining trees i suspect
[11:59:08] <timmywil> dimensions defers to css so I think that's good
[11:59:56] <timmywil> not sure about offset
[12:00:12] <DaveMethvin> so timmywil gibson042 i wonder about those extra bytes for that edge case issue with escaped quotes
[12:00:22] <DaveMethvin> that's a lotta bytes
[12:00:28] <timmywil> I wonder the same
[12:00:53] <DaveMethvin> if it has other manifestations maybe, but how common can that be?
[12:00:56] <timmywil> I'd lean towards not landing that
[12:01:46] <DaveMethvin> btw it looks like uglify2 isn't quite as good as uglify after gzip
[12:01:46] <rwaldron> DaveMethvin there are a lot of fails, but they all share a common root
[12:02:29] <DaveMethvin> i saw that on one of them, i think it was mine and i'll go back to redo those anyway
[12:02:31] <rwaldron> data stuff needs to be updated to stop trying to use jQuery.cache || elem[ expando ] directly
[12:02:44] <rwaldron> I made a list in my data PR
[12:02:51] <DaveMethvin> yeah saw that
[12:03:24] <rwaldron> basically, the hide/show thing in css is responsible for most of the failures
[12:03:36] <rwaldron> because most appear to be css, effects, etc
[12:04:17] <DaveMethvin> if we get down to 29k we'll be smaller than 1.5 http://mathiasbynens.be/demo/jquery-size
[12:04:32] <rwaldron> woo!
[12:04:42] <DaveMethvin> we'll definitely be under 30k
[12:05:21] <rwaldron> following the display failures is events
[12:05:26] <rwaldron> which are likely all data related
[12:05:30] <DaveMethvin> after this all lands i want to pull the shortcut event list out of event.js and go to use instanceof MouseEvent/KeyEvent in event.fix
[12:05:45] <DaveMethvin> so that will be a module you can remove in a custom build
[12:05:49] <rwaldron> right now, clean up of events is not happening correctly
[12:06:01] <rwaldron> 3rd is manipulation for the same reason
[12:07:39] <rwaldron> interesting, i missed this before, effects is also making the assumption that jQuery._data( elem, key, value ) the setter is returning the value
[12:07:52] <rwaldron> despite no test ever being written for that behaviour
[12:08:10] <DaveMethvin> well if it failed ... it had a test! :D
[12:08:29] <rwaldron> Um.
[12:08:36] <rwaldron> That TOTALLY doesn't count.
[12:08:40] <rwaldron> :P
[12:14:33] <rwaldron> ok, I'm reifying the behaviour
[12:15:03] <rwaldron> data setting will return the value that was set
[12:16:35] <rwaldron> (when called from static method)
[12:19:00] <gibson042> DaveMethvin timmywil looks like we get about ~32 bytes back by letting Safari 5.x choke on non-BMP codepoint escapes
[12:19:25] <DaveMethvin> So you're saying if we don't land the big version, Safari users will die in a Supplemental Plane crash? I can live with that. 
[12:19:31] <gibson042> :D
[12:20:27] <timmywil> if you're using supplemental characters in your selectors…
[12:20:53] <gibson042> I hear you, I was just pissed about that stupid test failure
[12:21:03] <timmywil> what test failure?
[12:21:29] <gibson042> http://swarm.jquery.org/job/1996
[12:21:57] <timmywil> is that a new test?
[12:22:02] <gibson042> but I would like to leave in the fromCharCode surrogate pair
[12:22:27] <gibson042> yeah, added with the code fix
[12:22:33] <gibson042> and worked on all other browsers
[12:22:39] <timmywil> i see
[12:22:57] <timmywil> fromCharCode surrogate pair? where is this?
[12:23:15] <timmywil> oh i see
[12:23:49] <timmywil> that's not for safari?
[12:24:25] <gibson042> https://github.com/jquery/sizzle/blob/master/sizzle.js#L134 is for whenever we need to parse an escape
[12:25:00] <gibson042> https://github.com/jquery/sizzle/blob/master/sizzle.js#L532-L535 is to recognize Safari's failure to do so
[12:25:14] <gibson042> it's the latter that I think I want to drop
[12:26:02] <timmywil> gotcha
[12:27:11] <timmywil> but the function is only there to translate codepoints?
[12:27:40] <timmywil> why not leave in the codepoints?
[12:27:59] <gibson042> I'm not sure I understand what you're asking
[12:29:00] <timmywil> so is this a proper example $("#\\5B")?
[12:29:07] <gibson042> we need `funescape` to correctly deal with selectors containing backslashes, but we don't necessarily have to detect Safari 5's broken support for them
[12:29:17] <gibson042> timmywil: yes
[12:29:48] <timmywil> but the problem is when we want to document.getElementById(), we remove the backslash and break it?
[12:29:49] <gibson042> I found it when `:lang(fr\b)` gave different results with vs. without qSA
[12:30:26] <timmywil> which I fixed by not remove the backslash
[12:30:33] <timmywil> removing*
[12:31:01] <gibson042> the problem was that we saw that as equal to `:lang(frb)`, when in fact the argument should be "f" + "r" + <vertical tab>
[12:32:18] <timmywil> right, which is why I escaped the backslash, "\b" became "\\b" and was then interpreted as /\b/ in the regex
[12:32:50] <timmywil> maybe these two problems aren't related
[12:33:24] <gibson042> they're not
[12:34:13] <gibson042> the :lang one just showed me necessary changes for my in-progress fix to ?see 13070
[12:34:45] <timmywil> ?13070
[12:34:46] <bot-t> [#13070] filter()/is() does not work correctly with attribute equals selector which contains special characters (closed bug: fixed in v1.9) - http://jqbug.com/13070
[12:34:54] <timmywil> ah yea
[12:35:35] <timmywil> I guess I'm having trouble understanding why all of this is necessary. Can't getElementById handle char codes itself if we pass them correctly?
[12:36:03] <gibson042> this applies to all identifiers and strings
[12:36:47] <gibson042> for e.g. if we see `[attr="\3C00"]`
[12:38:57] <timmywil> is it about telling the difference between "\C000" and "(escaped C)000"?
[12:39:30] <timmywil> because it's followed by a certain number of hex characters
[12:40:50] <timmywil> that would make sense to me, but maybe I'm totally off here.
[12:41:06] <gibson042> it's mostly about knowing that "\whatever" is the same as "whatever" but "\d00d" is the same as "퀍", NOT "d00d"
[12:41:24] <timmywil> right, that's basically what I'm saying
[12:41:44] <timmywil> ok, thanks for giving me time to understand wth is going on
[12:41:52] <gibson042> no problem
[12:42:02] <gibson042> I was in the spec for a while to make sure I had it
[12:42:33] <timmywil> OK, so now that I do, I agree we can ignore Safari's supplemental hijinx
[12:42:54] <timmywil> not worth the bytes
[12:43:20] <gibson042> cool
[12:44:50] <timmywil> DaveMethvin: resolution, removing Safari-specific fix
[12:47:32] <gibson042> -44 bytes
[12:50:56] <sizcommit> 01[13sizzle01] 15gibson042 pushed 1 new commit to 06master: 02http://git.io/5ezdIA
[12:50:56] <sizcommit> 13sizzle/06master 1419c7b34 15Richard Gibson: Revert ba5f09fa edge case fix
[12:52:01] <jqcommit> 01[13jquery01] 15gibson042 pushed 1 new commit to 06master: 02http://git.io/wfJN4g
[12:52:01] <jqcommit> 13jquery/06master 143e1589d 15Richard Gibson: Update Sizzle
[13:22:23] <doesallmagic> Project jQuery Core build #596: STILL FAILING in 30 min: http://swarm.jquery.org:8080/job/jQuery%20Core/596/
[13:22:24] <doesallmagic> richard.gibson: Update Sizzle
