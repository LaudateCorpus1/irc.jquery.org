[08:44:40] <anotherKing> Hello, Can anyone tell me if it's possible to combine on() with toggle()?
[11:37:51] <mikesherov> jaubourg: you here?
[11:46:19] <mikesherov> gnarf: you here?
[12:22:25] <mikesherov> timmywil: you here?
[12:44:30] <mikesherov> https://github.com/jquery/jquery/pull/610
[12:44:31] <socialhapy> â˜… Pull request on jquery by mikesherov (1d, 16h ago): ability to retrieve uncomputed styles in IE<9, fixes #10796
[12:50:38] <mikesherov> DaveMethvin: you here?
[12:50:54] <mikesherov> DaveMethvin: broken link on the "jQuery board" blog post
[12:51:05] <ajpiano> mikesherov: oh?
[12:51:07] <mikesherov> DaveMethvin: http://jquery.org/meetings
[12:51:20] <ajpiano> derp
[12:51:22] <ajpiano> it's meeting
[12:51:24] <ajpiano> thanks mikesherov
[12:51:26] <mikesherov> np
[12:52:32] <ajpiano> fixed
[12:52:38] <ajpiano> thats why we saved tweeting it till tomorrow lol
[12:54:27] <mikesherov> So, bsaically, at this point, you guys are saying that as long as I keep committing pull requests, I'll become part of the jQuery team?
[12:54:32] <mikesherov> basically*
[12:55:31] <ajpiano> mikesherov: yep !
[12:55:52] <mikesherov> cool, that's a great incentive
[12:56:22] <ajpiano> :D
[12:56:26] <mikesherov> My company blogged a few weeks ago about jQuery: http://devblog.snap-interactive.com/
[12:57:00] <ajpiano> mikesherov:  i don't want to rain on DaveMethvin's parade so i would just say you should def make sure you come to the meeting tomorrow
[12:57:20] <mikesherov> Basically, it was a call to action, that anyone, as long as they are willing to be persistent, can and should contribute to open source
[12:57:31] <mikesherov> cool, what time is the meeting?
[12:57:48] <ajpiano> mikesherov: it was really more about like, letting the "jquery team" be like... a team
[12:58:06] <mikesherov> 12pm EST?
[12:58:12] <ajpiano> yessir
[12:58:36] <mikesherov> cool, I'll do my best
[12:58:55] <mikesherov> I usually contrib to and from work on the train, but during work
[12:58:56] <ajpiano> cool
[12:59:03] <mikesherov> I'll see if I can do early lunch to be there
[12:59:09] <ajpiano> mikesherov: yeah i saw that you were talking to DaveMethvin that you work near penn
[12:59:17] <mikesherov> but not* during work
[12:59:17] <ajpiano> where do you commute to
[12:59:21] <ajpiano> i mean from*
[12:59:27] <mikesherov> I commute from Long Island
[12:59:33] <ajpiano> OH YEAH
[12:59:35] <ajpiano> that's where i'm from
[12:59:53] <mikesherov> Where in LI?
[12:59:57] <ajpiano> roslyn
[13:00:00] <mikesherov> I'm in Plainview
[13:00:25] <mikesherov> I thought you were with Bocoup, with Rick?
[13:00:29] <mikesherov> isn't that out of boston?
[13:00:36] <ajpiano> oh man, i used to commute *to* plainview
[13:00:45] <ajpiano> i am with bocoup, but i'm the new york division :D
[13:01:01] <mikesherov> Oh awesome, you commute to Manhattan also?
[13:01:15] <mikesherov> or you remote from home?
[13:01:15] <ajpiano> no, i live in manhattan
[13:01:22] <ajpiano> and work from home
[13:01:23] <ajpiano> yeah
[13:01:27] <mikesherov> oh, cool.
[13:01:33] <ajpiano> yeah, used to do the reverse commute to LI
[13:01:47] <mikesherov> We should all meet up
[13:02:01] <mikesherov> My office is on 7th between 35th and 36th
[13:02:15] <ajpiano> ah, i'm over on 50th and 2nd
[13:02:37] <mikesherov> So, a bit of a walk, but when DaveMethvin comes to town, we should do lunch
[13:02:50] <ajpiano> oh definitely count me in
[13:03:09] <mikesherov> and I have a ping pong table in my office and some video games, if you're into that sort of thing
[13:03:27] <ajpiano> lol, that i am
[13:04:12] <mikesherov> Nice, my company is really trying to get a NY tech scene going
[13:04:38] <ajpiano> that's killer, the one in manhattan seems really... odd
[13:04:39] <mikesherov> we do drinkups and whatnot every once in a while, I'll ping you next time they happen
[13:04:54] <mikesherov> yeah, it is odd. There's a few companies that are into it
[13:04:59] <mikesherov> but it's all business here usually
[13:05:20] <ajpiano> there's a pretty good bkjs meetup i've been to like once
[13:05:29] <ajpiano> who wants to go to brooklyn at 7pm lol
[13:05:45] <mikesherov> LOL, not me
[13:06:19] <mikesherov> so, what, are all bocoup employees jQuery contributors?
[13:06:57] <ajpiano> heh a bunch of us are
[13:07:34] <ajpiano> we have a lot of time for open source and did a fair bit of coalescing on IRC
[13:07:38] <ajpiano> so, there ya go
[13:07:55] <mikesherov> right, that's the dream.
[13:08:34] <mikesherov> I'm trying to get my company to embrace it more, which on a corp level, they do. It's the engineers, surprisingly, who are having a hard time seeing the benefit
[13:08:43] <ajpiano> compared to what?
[13:08:48] <ajpiano> campfire? e-mail?
[13:09:07] <mikesherov> oh, not IRC, contributing to open source
[13:09:21] <ajpiano> ohhhhh
[13:09:22] <ajpiano> lol
[13:09:43] <mikesherov> We use socialcast mostly for IRC style stuff
[13:09:46] <ajpiano> that's tougher
[13:09:48] <mikesherov> and just regular IM
[13:10:06] <ajpiano> your post here is really good
[13:10:11] <mikesherov> but we're all together in the same office, and it's a small team, so mostly it's just talking out loud :-P
[13:10:27] <ajpiano> ah
[13:10:30] <ajpiano> " They were just other devs, and I was developing with them."
[13:10:37] <ajpiano> is so good
[13:11:15] <mikesherov> Thanks! I was basically trying to say that if you think something is impossible or out of your reach, make damn well sure that it's true
[13:11:43] <mikesherov> because once you get past the fear of "jQuery is on 50% of the top 10K sites", it's really just like developing for anything else
[13:11:53] <ajpiano> yeah
[13:12:20] <ajpiano> and we're very open to like, taking people seriously if they try to do so constructively and understand where we're coming from and what the conerns are
[13:12:29] <ajpiano> not just barking about like YOURE BREAKING SEMANTIC VERSIONING in blog comments
[13:12:54] <mikesherov> code review is the number one tool to getting better
[13:13:06] <ryanneufeld> yup
[13:13:06] <mikesherov> at SNAP, every commit is instantly code reviewed
[13:13:17] <ryanneufeld> nice
[13:13:24] <ryanneufeld> ohai
[13:13:50] <mikesherov> ego is the enemy in open source
[13:14:00] <mikesherov> present your argument, and let the best idea win
[13:14:22] <mikesherov> which is why the most recent string of "CC-AO vs. modularization" emails is silly, IMO
[13:14:23] <mikesherov> let's try both
[13:14:25] <mikesherov> see which makes sense
[13:14:45] <mikesherov> and I think that's where we're at right now, which is good. But 80+ emails to get there.... WOAH
[13:14:51] <ajpiano> lol
[13:15:07] <ajpiano> i just sent my first reply in that thread stating exactly that!
[13:15:20] <ajpiano> i didn't realise it was up to 96 until just now
[13:15:33] <ryanneufeld> isn't it good that at least the discussion is happening though?
[13:15:42] <mikesherov> The CC team is saying they are going to make it better
[13:15:47] <mikesherov> let's see that happen
[13:15:56] <mikesherov> and we'll see that happen only when we start trying and seeing what the pain points are
[13:16:12] <ajpiano> yea
[13:16:26] <ajpiano> i'm curious to see if people use jquip and find it useful
[13:17:34] <mikesherov> jquip is a joke
[13:17:42] <mikesherov> it's the "start" of a modular jquery
[13:17:51] <mikesherov> \but it doesn't even include .ready by default
[13:18:11] <mikesherov> I mean, what does it do? wrap qSA?
[13:18:38] <mikesherov> It's a good "glimpse" into what a modular jQuery might mean, but nothing more, really, if you ask me
[13:18:44] <ajpiano> yeah i was gonna say
[13:18:54] <ajpiano> i think people are gonna be frustrated by the lack of functionality
[13:19:14] <mikesherov> frustrated? they'll see it as a waste of a 13K download
[13:19:19] <ajpiano> some people in the thread were like "well, people won't know that they tried to use a module that they didn't load" but that argument doesn't hold water
[13:19:27] <mikesherov> it's not honest when they say that it's 90% of jQuery
[13:19:33] <ajpiano> exactly
[13:19:36] <ajpiano> it's clearly not
[13:19:38] <danzik17> that and if people want the "full" package, i wonder if the resulting code would be significantly larger than what it is right now
[13:19:43] <danzik17> assuming equal functionality
[13:19:56] <mikesherov> it's proably 13% of jquery at 13% of the size
[13:19:59] <mikesherov> which is ACTUALLY good
[13:20:07] <mikesherov> because that is what a modular jQuery should be
[13:20:17] <mikesherov> but the dishonesty of calling it 90% is laughable
[13:21:15] <ryanneufeld> The idea of modular jQuery is attractive
[13:21:52] <ryanneufeld> however with current connections/bandwidth I feel that that there is the attitude of "THOU SHAL NOT USE MORE K THAN IS ABSOLUTELY REQUIRED"
[13:22:01] <ryanneufeld> which I think is total BS
[13:22:35] <ajpiano> the whole point pamela fox is making about load time the last day
[13:22:35] <mikesherov> well, on mobile I think the concerns are real
[13:22:37] <ajpiano> is kinda interesting
[13:22:45] <ajpiano> yeah, exactly
[13:22:50] <ryanneufeld> on mobile sure
[13:22:54] <ryanneufeld> makes sens
[13:23:02] <ryanneufeld> but 12k vs 13k?
[13:23:08] <mikesherov> well, right
[13:23:19] <mikesherov> that's why the current idea of deprecate this or this is silly
[13:23:19] <ajpiano> AND tech moves fast, will these be huge problems on mobile in 3 years?
[13:23:25] <ryanneufeld> nope
[13:23:27] <ryanneufeld> I don't think so
[13:23:41] <ryanneufeld> as it is right now, mobile has advanced faster than most desktop OS
[13:23:42] <mikesherov> with all of the deprecation efforts we listed in that google doc, it was like 1K savings
[13:23:48] <ajpiano> mikesherov: i think we're more trying to deprecate for clarity *and* size
[13:23:59] <mikesherov> ajpiano, agreed
[13:24:10] <mikesherov> if we're talking about clarity and maintainability, 100%
[13:24:18] <ryanneufeld> size should be lower on the list
[13:24:19] <mikesherov> but purely for size, deprecation holds no water
[13:24:26] <ryanneufeld> than most anything else
[13:24:41] <mikesherov> oh, I see, yeah, I agree with that 100%
[13:24:52] <ryanneufeld> it should be on the list
[13:25:09] <ryanneufeld> but there are more important things, I feel, than worrying about a few k
[13:25:10] <mikesherov> meaning, if you can save a byte, but it costs performance, don't save that byte
[13:25:15] <ryanneufeld> yes
[13:25:18] <ryanneufeld> exactly
[13:25:20] <mikesherov> otherwise, jquery should look like 140byt.es
[13:25:36] <ryanneufeld> that's just cool stuff tehre
[13:25:38] <mikesherov> code golfing is so much fun, though!
[13:25:38] <ryanneufeld> *there
[13:25:52] <mikesherov> yeah, I wrote a bbcode parser in 140 k
[13:26:06] <ryanneufeld> you also have to look at the whole picture too, like jquery-ui
[13:26:11] <mikesherov> 140b
[13:26:23] <ryanneufeld> that is a library where making it modular makes total sense
[13:26:35] <mikesherov> https://gist.github.com/1011230
[13:27:14] <mikesherov> yeah, modularity makes sense for the different types of AJAX, and effects, and delegation, maybe...
[13:27:49] <ryanneufeld> it would be cool to be able to just pull out say ajax from jquery
[13:28:03] <ryanneufeld> but then you'd need the deferreds too
[13:28:20] <mikesherov> yeah,
[13:28:22] <ryanneufeld> and if you're gonna go that way, you might as well just hand code native xhr
[13:28:29] <ryanneufeld> if you're *that* concerned with size
[13:28:53] <mikesherov> well, I never use JSONP, should I have to include that?
[13:28:57] <mikesherov> that's what I meant
[13:29:13] <ryanneufeld> I gotcha, but by not including it
[13:29:19] <ryanneufeld> how much space are you saving it?
[13:29:23] <mikesherov> Right
[13:29:33] <mikesherov> which is why I, in theory, agree with John
[13:29:44] <ryanneufeld> I include all of jquery-ui right now
[13:29:45] <ryanneufeld> for dev
[13:29:49] <mikesherov> CC-AO *SHOULD* be the end goal for anyone concerned with size, IMO
[13:30:11] <ajpiano> yeah, i think that closure compiler first is a lot less complicated goal
[13:30:12] <mikesherov> just right your code assuming the whole lib is there, and let a tool tell you what you don't need
[13:30:13] <ajpiano> then modularity
[13:30:33] <ryanneufeld> I agree
[13:30:36] <mikesherov> well, if CC-AO wasn't so complicated, I agree
[13:30:49] <mikesherov> but, it's just like anything else, learn the tricks
[13:30:55] <ryanneufeld> I think we're reaching a point now where webapps need to have build scripts
[13:31:06] <mikesherov> and to John's point, CC-AO is an "small gains over time" solution
[13:31:16] <mikesherov> which I really like
[13:31:46] <mikesherov> rather than this massive effort to all at once, make jQuery modular
[13:32:05] <mikesherov> I like the idea of having small tickets that say "remove dependency in feature XX "
[13:32:08] <ryanneufeld> and risk introducing a shit load of bugs in the process
[13:32:13] <ajpiano> yeah and i'm unpersuaded by the whole "if the user's OTHER code isn't optimised for CC, then it won't be good enough"
[13:32:29] <ryanneufeld> I agree
[13:32:30] <mikesherov> Right
[13:32:33] <ryanneufeld> focus on what you can control
[13:32:47] <ryanneufeld> make it robust, and meet your own quality standards
[13:32:51] <ajpiano> it's saying one user's group of problems is unsolvable because of different group of user's different problems
[13:33:01] <mikesherov> for me, it's all about the lessons from Martin Fowler's Refactoring
[13:33:19] <mikesherov> take it slow, test along the way, know when to stop
[13:33:27] <mikesherov> CC-AO, from a small gains over time perspective, seems far more attractive
[13:34:11] <ryanneufeld> baby steps
[13:34:12] <mikesherov> Right, what we can control is making jQuery work with CC-AO, and if users complain at that point, tell them it's their own damn fault
[13:34:20] <mikesherov> What about Bob?
[13:34:27] <mikesherov> baby steps to the elevator
[13:35:41] <mikesherov> that's why when the AMD thing was first brought up, I volunteered
[13:36:00] <mikesherov> I'm willing to try both approaches, because really sound arguments can be made on both sides
[13:36:07] <mikesherov> it's just a matter of practicality
[13:36:30] <ryanneufeld> the AMD thing is cool
[13:36:49] <ryanneufeld> it's prompted me to take a look at using requireJS or something similar at work
[13:36:52] <mikesherov> and at worst, we'll lern a lot about what we'll need to do for CC-AO ANYWAY
[13:37:02] <mikesherov> learn*
[13:37:14] <ryanneufeld> CC-AO (sorry late to game on this)
[13:37:21] <ryanneufeld> ?
[13:37:33] <mikesherov> Closure Compiler - Advanced Optimization
[13:37:45] <ryanneufeld> ah, k, that's what I thought
[13:37:50] <ryanneufeld> so it takes all your code
[13:37:53] <ryanneufeld> one file
[13:37:56] <mikesherov> http://code.google.com/closure/compiler/docs/api-tutorial3.html
[13:38:01] <ryanneufeld> and does coverage testing on it?
[13:38:07] <ryanneufeld> removes what's never called
[13:38:29] <mikesherov> well, not what's never called, but what's not reachable, to be precise
[13:38:49] <ryanneufeld> ah
[13:39:00] <mikesherov> which is why AMD and CC-AO have similar steps along the way
[13:39:05] <mikesherov> reduced interdependency is a first step in both
[13:39:12] <ryanneufeld> yeah
[13:39:16] <mikesherov> which is why 96 emails on the subject is dumb
[13:39:22] <mikesherov> the first steps are the same for both
[13:39:49] <mikesherov> step 1. reduce interdependency
[13:40:03] <mikesherov> step 2. ???
[13:40:07] <mikesherov> step 3. PROFIT
[13:40:11] <ryanneufeld> YES!
[13:40:21] <ryanneufeld> step 2 is the hard part
[13:40:28] <mikesherov> right
[13:40:34] <ajpiano> mikesherov: i wouldn't fret about the 96 e-mails
[13:40:47] <mikesherov> Oh, I'm not fretting
[13:40:59] <mikesherov> I'm just saying that we got there, and I'm glad, and now what
[13:41:07] <mikesherov> the next steps are still the same
[13:41:16] <mikesherov> and I see the value in a robust discussion of the 2
[13:41:26] <mikesherov> I'm just being a bit brash
[13:41:37] <mikesherov> because I signed up for the mailing list a few days ago
[13:41:47] <mikesherov> like, right before the avalanche happened
[13:41:56] <ajpiano> yeah, i'm curious to see if we actually have a tangible goal out of it
[13:42:43] <mikesherov> well, to ryan's point, step 2 is where the divergence happens
[13:43:08] <mikesherov> testing CC-AO's benefits is an experiment in insanity
[13:43:22] <mikesherov> you have to come up with a interdepedency you want to remove
[13:43:58] <mikesherov> then right a test that shows a function exists in the compiled code that is compiled against some specific usage of functionality
[13:43:59] <ryanneufeld> a lot of testing would be required
[13:44:06] <mikesherov> then remove the interdependence
[13:44:29] <mikesherov> then make sure that function doesn't exist in the compiled code against a specific usage afterwards
[13:44:47] <mikesherov> not only is it making sure that jQuery works as it used to
[13:45:07] <mikesherov> but that making sure the dead code removal you had in mind is in fact removed!
[13:45:36] <mikesherov> and that requires a separate compiled version of jQuery for each test
[13:45:45] <mikesherov> assuming we wanted to be scientific about it
[13:45:51] <mikesherov> it's like a whole nother level
[13:46:24] <ryanneufeld> optimization... the hell of all devs
[13:46:35] <mikesherov> well, it's like knuth said
[13:46:43] <ryanneufeld> just make everyone buy faster computers, and use chrome
[13:46:46] <mikesherov> premature optimization is the root of all evil
[13:46:47] <ryanneufeld> problem solved lol
[13:47:00] <ryanneufeld> I agree, mostly with that statement
[13:47:13] <ryanneufeld> *I agree mostly
[13:47:22] <mikesherov> well, it's wrong if we're talking about databases
[13:47:53] <mikesherov> then not prematurely optimizing is the root of all insanity
[13:48:36] <ryanneufeld> well, over optimizing your DB can be terrible too
[13:48:57] <mikesherov> on the subject of optimizations, I agree again with martin fowler: write clear code first, then run perf tests, then optimize pain points
[13:49:01] <ryanneufeld> like who uses anything above 4NF?
[13:49:13] <ryanneufeld> exactly
[13:49:17] <ryanneufeld> the other thing to keep in mind
[13:49:23] <ryanneufeld> with any interpreted language
[13:49:29] <mikesherov> Oh, well, normalization is not what I meant by optimizaed
[13:49:32] <ryanneufeld> the interpreter is gonna do it's own optimizations
[13:49:41] <ryanneufeld> oh, mea culpa
[13:49:43] <mikesherov> right, but clarity and optimizations are the opposite of each other, is the real point
[13:49:54] <mikesherov> and you should aim for clairty first, and optimize only when it's needed
[13:50:17] <mikesherov> because most of the time, it's the human's reading the code that need to be protected, not cpu cycles
[13:50:17] <ryanneufeld> yes. I have a rule, if it takes more than 80chars of a comment to explain my code, I have to rewrite it
[13:50:38] <ryanneufeld> a personal rule for myseld
[13:50:42] <ryanneufeld> *myself
[13:50:46] <mikesherov> my rule is even more dastardly, if I have to comment on *how* something works, rewrite it
[13:51:01] <mikesherov> comments, to me, should only ever explain a WHY
[13:51:06] <ryanneufeld> exactly
[13:51:19] <mikesherov> unless they are docblocks for automatic documentation
[13:51:28] <mikesherov> and even then, unit tests should cover that too
[13:51:39] <ryanneufeld> like I break knuckles when people us single letter vars for anything other than for loops :p
[13:51:58] <mikesherov> agreed
[13:52:09] <mikesherov> there is no reason ever ever ever ever to make shorter variable names
[13:52:22] <ryanneufeld> thisVariableIsForStoringKeys is also worth a nut shot
[13:52:34] <mikesherov> I mean, unless it's verbose to the point of redundancy
[13:52:52] <ryanneufeld> when foreach($_array as $key => $value) is clear
[13:52:52] <mikesherov> also, I enforce that conditionals to read like a sentence
[13:53:01] <mikesherov> right
[13:53:03] <ryanneufeld> I do that naturally
[13:53:14] <mikesherov> if($this->isSomething())
[13:53:22] <ryanneufeld> and object methods are typically named like that to
[13:53:28] <mikesherov> right
[13:53:39] <mikesherov> some of my devs write query functions as questions
[13:53:40] <ryanneufeld> $char->adjustHeight()
[13:53:53] <mikesherov> $char->isThisDefined()
[13:53:56] <ryanneufeld> $chair->raiseHeight()
[13:53:58] <mikesherov> isn't of $char->isDefined
[13:54:13] <mikesherov> so it looks like ($char->isThisDefined())
[13:54:27] <mikesherov> and I tell them, read if like a sentence, it needs to read like a sentence
[13:54:59] <mikesherov> right, if it's query, it should read like "if this is something"
[13:55:09] <ryanneufeld> yup
[13:55:12] <mikesherov> and if it's command, it should read like "char, raise height!"
[13:55:23] <ryanneufeld> was supposed to be chair :p
[13:55:28] <ryanneufeld> lol
[13:55:36] <mikesherov> LOL
[13:55:55] <ryanneufeld> that was the example my first year java prof used to explain OOP
[13:56:08] <ryanneufeld> It's a thing, it has attributes, and things you can do to it
[13:56:17] <aaronmcadam> didn't he make the whole thing out of interfaces :P
[13:56:20] <ryanneufeld> was a great anology
[13:56:26] <ryanneufeld> no
[13:56:29] <ryanneufeld> we have a dev that does that
[13:56:30] <aaronmcadam> hehe :)
[13:56:31] <ryanneufeld> pisses me off
[13:56:37] <aaronmcadam> yep
[13:56:40] <mikesherov> Yeah, java was useful, but only as a teaching lang to me
[13:56:54] <ryanneufeld> to do one thing you have to inherit an abstract class, that extends another, with has an interface...
[13:56:54] <aaronmcadam> yeah
[13:56:55] <mikesherov> I do like interfaces
[13:57:14] <ryanneufeld> interfaces are great when you don't know what the object is
[13:57:15] <mikesherov> until PHP5.4, it's the only way to enforce some type of multiple inheritance rules
[13:57:16] <ryanneufeld> and you don't care
[13:57:43] <ryanneufeld> you just know that $thing->getValue() is gonna give you what you expect
[13:58:00] <aaronmcadam> i don't use php anymore
[13:58:07] <ryanneufeld> honestly the idea of interfaces blew my mind when I was learning about collections in Java
[13:58:07] <mikesherov> well, right, that's if you are the only one who needs to know
[13:58:29] <ryanneufeld> interfaces make plugins posible
[13:58:35] <ryanneufeld> or easier
[13:58:39] <mikesherov> when you have large teams, interfaces and abstracts are necessary overhead
[13:59:00] <mikesherov> right, like I use Trac, which is almost entirely interface driven
[13:59:07] <mikesherov> and it makes plugin authoring sane
[13:59:12] <ryanneufeld> mhmm
[13:59:29] <mikesherov> if you
[13:59:50] <mikesherov> if you're the only dev or a small team, interfaces seem stupid and unnecessary
[13:59:52] <ryanneufeld> I convinced the phonegap guys to change their plugin infrastructure from extending an abstract class to an interface
[14:00:12] <mikesherov> "isn't it just some fancy documentation of what the class is supposed to do???"
[14:00:17] <mikesherov> YES!
[14:00:21] <ryanneufeld> yes it is
[14:00:26] <ryanneufeld> but that's the point!
[14:00:31] <mikesherov> right
[14:00:51] <ryanneufeld> if you implement an interface you're agreeing to a contract
[14:01:00] <mikesherov> right
[14:01:24] <mikesherov> but again, I didn't personally understand their power until I was in a larger org
[14:01:32] <mikesherov> or in the open source world
[14:01:38] <ryanneufeld> I saw it right away
[14:01:56] <mikesherov> well, I got it, I just felt it was cruft
[14:02:39] <ryanneufeld> I saw it as a workaround for multiple inheritence
[14:02:50] <mikesherov> oh, yeah
[14:03:05] <ryanneufeld> but in a way that let you keep your code decoupled
[14:03:05] <mikesherov> you play around with PHP5.4 yet?
[14:03:10] <ryanneufeld> not yet
[14:03:17] <ryanneufeld> we just moved our prod servers to 5.3
[14:03:22] <mikesherov> it has traits
[14:03:34] <ryanneufeld> that's a new concept to me
[14:04:01] <mikesherov> traits are sets of member vars and methods that can be multiply inherited
[14:04:16] <mikesherov> it's an interface than can have actual functionality in it
[14:04:24] <ryanneufeld> nice
[14:04:28] <ryanneufeld> that is hawt
[14:04:32] <ryanneufeld> super hawt
[14:04:40] <mikesherov> it's PHP's multiple inheritance concept
[14:04:56] <ryanneufeld> the thing is, how do you deal with collisions
[14:04:58] <ryanneufeld> ?
[14:05:21] <mikesherov> http://php.net/manual/en/language.oop5.traits.php
[14:05:29] * ryanneufeld reads
[14:05:29] <mikesherov> they have "use" statements
[14:05:37] <mikesherov> which let you pick and choose
[14:06:18] <ryanneufeld> okay
[14:06:50] <ryanneufeld> so I suppose it would just be an exception if you use two traits that have the same member?
[14:07:00] <mikesherov> probably
[14:07:18] <ryanneufeld> oh, local methods override it
[14:07:40] <ryanneufeld> it's got instead of
[14:07:51] <ryanneufeld> so you have a lot of control then
[14:08:47] <ryanneufeld> this is very cool stuff...
[14:09:10] <mikesherov_> I'm a ghost
[14:09:12] <mikesherov_> Conflict Resolution  If two Traits insert a method with the same name, a fatal error is produced, if the conflict is not explicitly resolved.
[14:09:44] <ryanneufeld> yeah, I can see that
[14:09:46] <ryanneufeld> pretty cool stuff
[14:11:14] <mikesherov_> anyway, I gotta get going. Good chat.
[14:11:37] <ryanneufeld> later
[14:11:47] <ryanneufeld> indeed good chat
