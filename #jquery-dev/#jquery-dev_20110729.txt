[06:35:47] <scott_gonzalez> bot-t: tell eddiemonge are you using $( "body" ) outside of doc ready?
[06:35:48] <bot-t> (16 hours 2 mins ago) <kborchers> tell scott_gonzalez can you take a look at http://jsfiddle.net/kborchers/FwmHP/ when you get a chance and let me know if there are other situations i need to check for flip? thanks
[06:35:50] <bot-t> scott_gonzalez, Okay.
[08:11:15] <DaveMethvin> ben_
[08:11:19] <DaveMethvin> ben_alman:
[08:11:29] <DaveMethvin> do you have a minute to talk about special events?
[08:13:12] <ben_alman> i'm sorry dave, i'm afraid i can't do that
[08:13:16] <ben_alman> j/k i have time
[08:13:18] <ben_alman> what up
[08:15:35] <DaveMethvin> lol
[08:15:46] <DaveMethvin> ok mr wise guy ben_alman
[08:16:10] <ben_alman> i'll try to help
[08:16:15] <DaveMethvin> i was wondering if you knew why the _default event used the document as the "this"
[08:16:25] <DaveMethvin> seems like it shoudl be the event target
[08:17:10] <ben_alman> is e.currentTarget something meaningful in _default ?
[08:17:22] <DaveMethvin> since the called fn gets the event object it can look at event.target, so it's available, but logically it seems wrong to pass the document as this
[08:17:30] <ben_alman> sure
[08:17:44] <ben_alman> http://benalman.com/news/2010/03/jquery-special-events/#default-action
[08:17:46] <ben_alman> see my example
[08:17:50] <DaveMethvin> i didn't know if there was a good reason, or whether i shoudl change it
[08:17:53] <ben_alman> under "The framework code"
[08:18:12] <DaveMethvin> yeah
[08:18:15] <ben_alman> well, it's unlikely that anyone uses `this` if it's the document
[08:18:20] <DaveMethvin> lol yeah
[08:18:27] <ben_alman> so it's probably safe to change
[08:18:28] <ben_alman> but
[08:18:37] <ben_alman> what is `this` in the other functions?
[08:18:43] <ben_alman> event.currentTarget ?
[08:18:48] <aaronmcadam> any reason you're using custom events?
[08:18:56] <aaronmcadam> I just use pubsub nowadays
[08:19:03] <ben_alman> aaronmcadam, this is jQuery special events
[08:19:12] <ben_alman> for creating custom simulated DOM events
[08:19:19] <ben_alman> like tripleclick
[08:19:21] <ben_alman> or clickoutside
[08:19:27] <ben_alman> or polyfilling hashchange
[08:19:30] <aaronmcadam> could you use that to trigger a dom creation event?
[08:19:34] <aaronmcadam> awesome ben_alman
[08:19:40] <ben_alman> http://benalman.com/news/2010/03/jquery-special-events
[08:19:42] <aaronmcadam> remember vaguely reading your post :)
[08:19:47] <ben_alman> heh
[08:19:55] <DaveMethvin> ben_alman:  it's the only case where we call special event handler during trigger, so the other cases aren't exactly parallel
[08:19:59] <aaronmcadam> is that possible, ben?
[08:20:02] <ben_alman> hmmn right
[08:20:05] <aaronmcadam> a dom element creation event?
[08:20:18] <ben_alman> aaronmcadam, sure, using very expensive polling
[08:20:18] <DaveMethvin> in most cases the handler gets called with the element where the event is attached
[08:20:23] <aaronmcadam> does the spec have anything
[08:20:38] <aaronmcadam> ah no hehe can't be doing that :)
[08:20:38] <ben_alman> aaronmcadam, i simulate hashchange in browsers lacking the event with polling
[08:20:53] <ben_alman> DaveMethvin, how about extending _default a little
[08:20:55] <DaveMethvin> hey aaronmcadam can i have ben_alman for a few minutes?
[08:21:02] <DaveMethvin> like extending how?
[08:21:03] <aaronmcadam> haha! sorry dude :P
[08:21:12] <ben_alman> to possibly support an array of default actions
[08:21:13] <ben_alman> i dunno
[08:21:17] <ben_alman> it always seemed totally hacky
[08:21:23] <ben_alman> like, a cool idea, sure
[08:21:27] <ben_alman> but not fleshed out
[08:21:31] <DaveMethvin> anything that doesn't break a lot of code is fine with me
[08:21:45] <ben_alman> not sure i've ever used _default tbh
[08:21:57] <ben_alman> but justin meyer would have some suggestions there, i'm sure :)
[08:22:00] <DaveMethvin> so your original ask for 1.7 was a way to deal better with live events
[08:22:12] <DaveMethvin> oh yeah justinbmeyer would be a good person to ask as well
[08:22:16] <ben_alman> yes
[08:22:21] <ben_alman> he should really be looped in
[08:22:31] <DaveMethvin> i'll email him later
[08:22:33] <ben_alman> because he's given a lot of thought to this stuff
[08:22:35] <ben_alman> ok, great
[08:22:36] <ben_alman> cc me
[08:22:44] <aaronmcadam> trigger a special "justinbmeyer" event maybe :p
[08:22:50] <DaveMethvin> so in 1.7 i got rid of the "live" event
[08:23:06] <ben_alman> i don't even know what the live event is
[08:23:11] <ben_alman> i stayed away from that, i think
[08:23:27] <DaveMethvin> now the handleObj passed to the special handler has a "selector" to tell you that it's a delegated event
[08:23:39] <ben_alman> awesome
[08:23:40] <DaveMethvin> and  you can change your behavior as needed
[08:24:03] <ben_alman> and you still have e.target and e.currentTarget
[08:24:10] <DaveMethvin> yeah
[08:24:40] <ben_alman> i'd like to see a slightly more elegant way of modifying the event object than monkey patching it
[08:25:00] <DaveMethvin> modifying as in how?
[08:25:30] <ben_alman> var oldhandler = handleObj.handler; handleObj.handler = function(e) { e.foo = 1; return oldhandler.apply(this, arguments); };
[08:25:42] <ben_alman> that's so totally gross
[08:25:49] <aaronmcadam> DaveMethvin, are there any events you're trying to implement?
[08:26:04] <aaronmcadam> yeah ben :S
[08:26:05] <ben_alman> if there was a like handleObj.reviver = function(e) { e.foo = 1; }
[08:26:15] <DaveMethvin> aaronmcadam: i'm trying to make sure that everyone can implement what they need to
[08:26:16] <ben_alman> and then if that's set it just gets called on the event object
[08:26:27] <aaronmcadam> when using delegate?
[08:26:29] <ben_alman> the old way would work, but the new way would work better?
[08:26:51] <ben_alman> i dunno. i just don't like having to monkey patch
[08:27:04] <aaronmcadam> yeah
[08:27:04] <DaveMethvin> so that sounds like a pre-call hook to modify the event
[08:27:19] <ben_alman> it could be done in add
[08:27:41] <DaveMethvin> well the code needs to run when the event is delivered
[08:28:00] <DaveMethvin> and in your particular case,  you're modifying the event object for everyone who is called afterwards
[08:28:08] <ben_alman> $.event.special.whatever.add = function(handleObj) { handleObj.eventObjTweaker = function(e) { e.customProp = 1; } };
[08:28:09] <DaveMethvin> which may not be good
[08:28:10] <ben_alman> like that
[08:28:38] <ben_alman> how it's done right now is the same thing but instead of setting a predefined property, the handleObj.handler function is monkey patched
[08:30:19] <DaveMethvin> so would you only want to tweak things on the way in, or both pre and post? I would think the latter
[08:30:22] <ben_alman> hmmn
[08:30:33] <DaveMethvin> again, otherwise you're tarnishing the event object for everyone who comes after
[08:30:51] <DaveMethvin> which may be the intended effect in some cases i guess
[08:30:51] <ben_alman> right but you're typically doing this when creating a new event type
[08:30:58] <ben_alman> and you want to add custom props to the event object
[08:31:16] <ben_alman> like for hashchange event i add an e.fragment property or something
[08:31:21] <DaveMethvin> right
[08:31:25] <ben_alman> non-standard, but convenient
[08:31:37] <ben_alman> some do it by passing in an extra arg via trigger
[08:31:43] <DaveMethvin> for a case like simulating "change" i guess you wouldn't be taking things out either
[08:32:24] <DaveMethvin> there is one builtin case that i have to deal with where i want to undo a change
[08:32:36] <DaveMethvin> if you do a live(mouseenter)
[08:32:55] <DaveMethvin> i have to convert that to mouseover but event.type is delivered as mouseenter
[08:32:58] <ben_alman> hmmn
[08:33:09] <DaveMethvin> if i didn't have backcompat i'd just say screw it
[08:33:13] <DaveMethvin> and document that
[08:33:25] <DaveMethvin> hell, i still may try that :)
[08:33:48] <ben_alman> .event.special.mouseenter.add = function(handleObj) { handleObj.eventObjTweaker = function(e) { e.type = 'mouseover'; } };
[08:33:48] <ben_alman> ?
[08:34:08] <ben_alman> .event.special.mouseenter.add = function(handleObj) { handleObj.eventObjTweaker = function(e) { if ( e.selector ) { e.type = 'mouseover'; } } };
[08:34:12] <ben_alman> that? ^^
[08:34:15] <ben_alman> ignore the 1st one
[08:34:27] <DaveMethvin> yeah, basically
[08:34:36] <DaveMethvin> but i have to undo it after the event is delivered
[08:34:41] <DaveMethvin> technically, to be correct
[08:34:45] <ben_alman> but having handleObj.eventObjTweaker would be nicer than monkey patching handleObj.handler
[08:34:46] <ben_alman> hmmn
[08:34:47] <DaveMethvin> b/c you could have a mouseover as well
[08:34:51] <ben_alman> interesting
[08:35:06] <DaveMethvin> no it's not, it's a pain!
[08:35:07] <ben_alman> maybe have a .realType
[08:35:12] <DaveMethvin> yeah there's a .preType
[08:35:19] <DaveMethvin> it's all in there already but just messy
[08:35:24] <ben_alman> but i see what you're doing there
[08:35:30] <ben_alman> and I DONT LIKE IT
[08:35:38] <ben_alman> but it's more noob-friendly
[08:35:41] <DaveMethvin> actually right now it's hardwired but i like the idea of making it a special event
[08:35:52] <DaveMethvin> so i'll look at doing it that way
[08:36:02] <DaveMethvin> the monkey patching is defn ugly
[08:36:06] <ben_alman> hmmn
[08:36:16] <ben_alman> so .add just gives you the ability to change the event object right up front really
[08:36:30] <ben_alman> but when you say "change it back" when would you change it?
[08:36:50] <DaveMethvin> if i were monkey patching, i'd do it after the call to orighandler
[08:37:22] <ben_alman> you'd almost have to say, for each bound handler, if e.selector then $.extend(jQuery.Event(), e, {type: "newtype"});
[08:37:39] <DaveMethvin> which i wouldn't want to do
[08:37:56] <DaveMethvin> there are only a coupla cases where you'd want to change the event type and then change it back
[08:37:58] <ben_alman> it might be a cool idea to have both the ability to change the event object wholesale like .add does now, and also to change it per-handler executed without modifying the original object
[08:38:02] <ben_alman> but of course
[08:38:03] <DaveMethvin> so those may have to look ugly
[08:38:05] <ben_alman> then if they changed the obj
[08:38:11] <ben_alman> then your changes wouldn't persist
[08:38:15] <ben_alman> your=their
[08:38:18] <ben_alman> man, that sucksz
[08:38:43] <ben_alman> so it's like
[08:38:46] <ben_alman> what you'd have to do
[08:38:55] <ben_alman> for each live event handler
[08:39:04] <ben_alman> store the current type
[08:39:10] <ben_alman> change it in the object
[08:39:14] <ben_alman> after the handler executes
[08:39:17] <ben_alman> change the type back
[08:39:46] <ben_alman> hmmn
[08:40:27] <DaveMethvin> i'm gonna try doing it as a special event tho, that may firewall the ugliness
[08:40:43] <DaveMethvin> i've spent quite a bit of time looking at event handling code in the wild (google codesearch), trying to determine what I'll break
[08:40:56] <DaveMethvin> there isn't much use of special events
[08:41:25] <ben_alman> $.event.special.mouseenter.add = function(o) { var h = o.handler; o.handler = function(e) { if ( e.selector ) { e.type = "mouseover"; } var result = h.apply(this, arguments); e.type = "mouseenter"; return result; }
[08:41:27] <ben_alman> look @ that
[08:41:47] <DaveMethvin> yeah that's basically the idea i think
[08:41:50] <ben_alman> ok
[08:42:10] <ben_alman> that would need to be monkey patched
[08:42:29] <DaveMethvin> actually event better, i wouldn't change the handler unless there was a selector
[08:42:34] <DaveMethvin> even*
[08:42:47] <ben_alman> any "reviver" function property of handleObj would need to operate on the event object initially
[08:42:52] <ben_alman> no
[08:42:56] <ben_alman> you are missing it
[08:43:09] <ben_alman> you have to test at the time the handler is getting executed, no?
[08:43:15] <ben_alman> hmmn.
[08:43:19] <ben_alman> maybe i'm missing it
[08:43:24] <ben_alman> .add is called once for each bind, nm
[08:43:29] <DaveMethvin> at the point where I'm adding the event, i know whether there is a selector (delegated event) or not
[08:43:34] <ben_alman> yeah
[08:43:42] <DaveMethvin> if it's delegated, i need to monkey patch
[08:43:50] <DaveMethvin> otherwise it's good already
[08:44:22] <ben_alman> $.event.special.mouseenter.add = function(o) { var h; if ( e.selector ) { h = o.handler; o.handler = function(e) { var result; e.type = "mouseover"; result = h.apply(this, arguments); e.type = "mouseenter"; return result; }
[08:44:24] <ben_alman> lovely
[08:44:35] <ben_alman> i think i've missed some } but whatev
[08:44:44] <DaveMethvin> yeeah that's the ticket!
[08:45:13] <ben_alman> do this in an each with {enter: "over", leave: "out"}
[08:45:19] <DaveMethvin> right, since i need both
[08:45:46] <DaveMethvin> another thing that tends to happen with our simulating events ...
[08:46:09] <DaveMethvin> is that we need to take an existing event object and piggyback on it, then maybe (or not) let the original event continue
[08:46:29] <DaveMethvin> but we may not want the preventDefault to happen on the original event for example
[08:46:49] <DaveMethvin> i have two or three of those cases in the current code, was trying to think of ways to DRY that out
[08:46:51] <ben_alman> oh right
[08:47:02] <ben_alman> hmmn
[08:47:34] <DaveMethvin> i've already shrunk the code by more than 100 lines, it's kinda scary and i keep wondering whether i've missed something
[08:47:38] <DaveMethvin> but it passes the unit tests
[08:47:47] <ben_alman> wait i was thinking of how .stopPropagation() should NOT behave differently, internally, regardless of .delegate vs .bind handlers and that there should be a .stopDelegatedPropagation() or something
[08:48:13] <DaveMethvin> i think the rewrite deals with this
[08:48:14] <ben_alman> we already talked about that
[08:48:32] <DaveMethvin> yeah, if you .stopPropagation() on a delegated event it will stop
[08:49:02] <DaveMethvin> of course it will have already executed any bound events in children but that's to be expected
[08:49:45] <ben_alman> right. is there a value to having a .stopDelegatedPropagation() or some such to keep the children from all executing if someone wants only certain ones to continue?
[08:50:18] <ben_alman> like, stop propagation for the "parent" element within its "delegates"
[08:50:27] <DaveMethvin> you can stopImmediateProp and it will stop the delegated events in their tracks
[08:50:45] <DaveMethvin> i think i need a picture of what you're describing :)
[08:50:50] <ben_alman> but then it will stop the event from propagating past the parent as well
[08:51:19] <ben_alman> div#foo > div#bar > div#baz
[08:51:31] <ben_alman> $("#foo").delegate("div", "click", fn);
[08:51:43] <ben_alman> body > div#foo > div#bar > div#baz
[08:52:15] <ben_alman> so if you click baz the baz -> bar -> foo propagation is a "fake" propagation done when the event bubbles up to #foo
[08:52:30] <ben_alman> right?
[08:52:33] <DaveMethvin> right
[08:52:43] <ben_alman> i mean, there's a real propagation, but that part is simulated for the .delegate
[08:52:50] <DaveMethvin> well it's one that we do, vs the browser
[08:52:53] <ben_alman> so is there this use case
[08:53:01] <ben_alman> $("#foo").delegate("div", "click", fn);
[08:53:12] <ben_alman> $("body").bind("click", fn2);
[08:53:24] <ben_alman> and you want the fake propagation to stop at #baz
[08:53:32] <ben_alman> without stopping the fn2 from executing
[08:53:45] <ben_alman> .stopOnlyFakePropagation()
[08:53:55] <DaveMethvin> is there a browser analog to that?
[08:54:05] <DaveMethvin> seems like it either propagates or it doesn't
[08:54:15] <ben_alman> i dunno
[08:54:28] <DaveMethvin> i don't mind faking browser semantics but i'm not so hot on creating new semantics
[08:54:32] <ben_alman> ok
[08:54:35] <ben_alman> fine
[08:54:39] <ben_alman> BE THAT WAY
[08:54:43] <DaveMethvin> although another thing i think you mentioned...
[08:54:44] <ben_alman> i can't see a use case
[08:54:54] <DaveMethvin> was being able to easily stopProp at the delegation point
[08:54:55] <ben_alman> i just wanted to point out the possibility that someone might want it
[08:55:12] <ben_alman> ah yes
[08:55:13] <DaveMethvin> like, if i design a component to be dropped into apage
[08:55:23] <DaveMethvin> i want my custom events to stop at my container
[08:55:30] <ben_alman> well
[08:55:37] <DaveMethvin> so they don't pollute things and trigger inadvertent actions above
[08:56:02] <ben_alman> with one .stopPropagation() inside a .delegate-bound event handler you have to choose: is it stopping at the selected child element, or the parent event-bound element
[08:56:16] <ben_alman> DaveMethvin, you wouldn't always want that
[08:56:24] <ben_alman> you may or may not want that
[08:56:31] <ben_alman> i would definitely not make that assumption
[08:56:35] <ben_alman> but still
[08:56:58] <ben_alman> where does .stopPropagation() inside a .delegate-bound event handler stop the delegation, at the parent element?
[08:57:24] <ben_alman> i mean, that's where it *should* in terms of how event objects work, right?
[08:57:44] <DaveMethvin> if it's three levels below the parent (delegated elelement) then if you stopProp it doesn't go above that level
[08:57:54] <DaveMethvin> pretty much like a bound event would
[08:57:59] <ben_alman> ok
[08:58:07] <ben_alman> so it stops it dead in the water right then and there
[08:58:26] <DaveMethvin> yeah, although it will run all handlers at that element unless you stopImmediateProp
[08:58:27] <ben_alman> does it stop it bubbling to parents of the parent as well?
[08:58:31] <DaveMethvin> yeah
[08:58:33] <ben_alman> sure that's fine
[08:58:35] <ben_alman> ok
[08:58:49] <ben_alman> so .stopPropagation() has to behave differently, internally
[08:59:03] <ben_alman> if used in a delegated handler, it stops at the current fake element
[08:59:21] <ben_alman> if used in a bound handler, it stops at the current real element
[08:59:47] <ben_alman> so here's the question
[09:00:38] <ben_alman> is there any way to say, programmatically, from within a delegated handler "don't stop propagation at the current fake element, but stop it at the parent element to which this delegated event handler is really bound" ?
[09:00:50] <ben_alman> i don't see a way of doing that
[09:00:51] <rwaldron> rkatic just filed a ticket that basically introduces a half-cocked function for "really-pseudo-almost-not-even-classical inheritance" using the dummy constructor pattern seen in many "Class" implementations....
[09:01:14] <DaveMethvin> no, there is no way to do that but also no analog to that in the browser
[09:01:25] <DaveMethvin> although that is basically the "don't escape from my container" thing
[09:01:31] <ben_alman> right
[09:01:41] <ben_alman> the only way to do it would be to do this:
[09:01:51] <DaveMethvin> you can do it by having a separate stopProp on the container
[09:02:10] <ben_alman> but to do it programmatically
[09:02:54] <DaveMethvin> but i also wonder whether in a design modularity sense the handler for a child element shoudl be making the decision for the component container
[09:03:17] <DaveMethvin> if the child knows nobody else needs to handle this it shoudl stopProp
[09:03:28] <ben_alman> var flag; $("#parent").delegate("div", "click", function(e) { if ( condition ) { flag = true; } }).click(function(e) { flag && e.stopPropagation(); flag = false; });
[09:03:36] <ben_alman> do you see what i'm getting at there ^ ?
[09:04:28] <ben_alman> so even though the .delegate is bound to the parent, i need ANOTHER handler bound to the parent to handle the flag
[09:04:28] <DaveMethvin> i see what you're saying but not sure if there is a good design that needs it
[09:04:33] <ben_alman> ok.
[09:04:39] <DaveMethvin> there could be
[09:04:45] <ben_alman> i only bring these things up in case there is a use
[09:04:48] <DaveMethvin> i just don't know one from the sample code
[09:04:55] <ben_alman> but most of the time i just follow a train of thought or intuition
[09:05:03] <ben_alman> as such, i have no need for this
[09:05:12] <ben_alman> just thinking that someone else might, if it makes sense
[09:05:19] <DaveMethvin> i definitely think for non-browser events the container *should* stop them
[09:05:27] <DaveMethvin> for clicks its not as clear
[09:05:30] <ben_alman> well
[09:05:42] <ben_alman> it should only stop them if .stopPropagation() was called tho
[09:05:57] <DaveMethvin> oh i meant "should" in the "good design" sense
[09:06:05] <ben_alman> ok
[09:06:14] <DaveMethvin> if it's a custom event for that container then don't let ppl see it outside your container
[09:06:33] <ben_alman> unless the point of the container is to handle its children but still pass it on to another parent that also cares
[09:06:42] <ben_alman> of course, the container could trigger the event, again, on itself
[09:06:55] <DaveMethvin> or more likely a different logical event
[09:07:09] <DaveMethvin> so a click might turn into a commentPosted event
[09:07:20] <ben_alman> but when you're handling children, when does it get triggered? if you trigger it in the .delegate event handler then it happens too early (potentially) and we're stuck with my flag example again
[09:07:21] <ben_alman> well
[09:07:33] <ben_alman> what if you are using a generic "destroy"
[09:07:37] <ben_alman> you destroy a widget
[09:07:52] <ben_alman> it's the last widget in a container so the container destroys itself
[09:07:54] <ben_alman> etc
[09:08:35] <DaveMethvin> having that bubble to the container makes sense, then it checks to see if it's empty and destroys itself i guess
[09:09:04] <ben_alman> so at what point can the container trigger the event on itself?
[09:09:06] <ben_alman> heh
[09:09:12] <ben_alman> ok this hurts my head
[09:09:23] <DaveMethvin> for that case i think it would just bubble up
[09:09:38] <DaveMethvin> settimeout ftw! :P
[09:09:54] <ben_alman> right. it'd be better to have the bubble continue than to have to trigger it on the intermediary container imo
[09:10:20] <DaveMethvin> i think i agree
[09:10:34] <DaveMethvin> well i can't say i disagree :)
[09:11:33] <DaveMethvin> i'm starting a list of changes to the event stuff for 1.7, I'll post a list for you and everyone else to see so we can determine if i made any really dumb assumptions
[09:11:45] <DaveMethvin> i'll try to get it cleaned up and post tonight
[09:11:55] <ben_alman> ok thanks
[09:12:28] <DaveMethvin> i'm going to look at the monkey patching issue, might be able to clean that up
[09:12:47] <DaveMethvin> if i get really ambitous i'll even write some special event unit tests
[09:12:56] <DaveMethvin> would be nice to actually test this stuff
[09:13:34] <ben_alman> i agree
[09:13:39] <ben_alman> and email justin for sure
[10:15:43] <aaronmcadam> why does jQuery add itself to window as jQuery13034934348 or whatever? can't remember
[10:21:36] <rwaldron> It doesn't add itself to the window as anything
[10:21:54] <rwaldron> jQuery and $ are properties of the global object
[10:22:20] <rwaldron> anything that looks like jQuery13034934348 is an expando key used with event and data binding
[10:25:53] <aaronmcadam> ah
[10:25:58] <aaronmcadam> but why the random number/
[10:29:44] <rwaldron> It's a unique key that jQuery developers are less likely to replicate in their own code
[10:29:50] <aaronmcadam> ah cool
[10:29:58] <aaronmcadam> thanks for clarifying rwaldron :)
[10:30:14] <rwaldron> jQuery(elem).data()[ jQuery.expando ] <-- that's jQuery's stuff
[10:30:22] <rwaldron> everything else is your own
[10:30:26] <rwaldron> you're very welcome
[10:47:03] <gnarf> its also not "random"
[10:47:04] <gnarf> :)
[14:25:13] <jaubourg> hi there
[14:27:48] <ryanneufeld> hello
[14:29:11] <ryanneufeld> jaubourg: you able to take a sec to look at a ajax/jsonp conundrum?
[14:30:07] <jaubourg> conundrum?
[14:30:18] <jaubourg> (busy but I can spare some minutes)
[14:30:44] <ryanneufeld> I'm trying to sort out why this: http://jsfiddle.net/WMNaN/3/
[14:30:46] <ryanneufeld> doesn't work
[14:30:51] <ryanneufeld> but http://jsfiddle.net/WMNaN/2/ does
[14:31:25] <ryanneufeld> I'm writing a chrome plugin that needs to pull some json data from our server
[14:31:36] <ryanneufeld> and we use a REST url
[14:31:48] <ryanneufeld> I can't use ?callback=?
[14:31:48] <bot-t> ryanneufeld, jQuery.getJSON() - Load JSON-encoded data from the server using a GET HTTP request. http://api.jquery.com/jQuery.getJSON/
[14:31:57] <ryanneufeld> has to be /callback
[14:32:09] <jaubourg> jsonpCallback is an option to give a callback "name", if it's a function, it's supposed to return a string
[14:32:20] <ryanneufeld> oic
[14:32:33] <jaubourg> but you can use the ?? placeholder for rest
[14:33:22] <ryanneufeld> two ? ?
[14:34:01] <ryanneufeld> hm
[14:34:07] <ryanneufeld> that doesn't seem to work either
[14:34:07] <jaubourg> http://jsfiddle.net/9DEjf/
[14:34:32] <ryanneufeld> well, dang
[14:34:35] <ryanneufeld> that looks simple
[14:34:37] <jaubourg> username/password are not handled in this instance by ajax... something I'd like to tackle
[14:34:52] <jaubourg> you have to add them to the url
[14:35:44] <ryanneufeld> orly
[14:35:51] <ryanneufeld> well, that's not an issue for production
[14:36:18] <jaubourg> yeah, it would require some not-so-pretty url modification when issueing a get request
[14:36:45] <jaubourg> so anyway, use ?? and you can put your callback anywhere in the url
[14:36:54] <jaubourg> even hello/??/world if needed
[14:37:20] <ryanneufeld> oic
[14:37:39] <jaubourg> even ?callback=?? ;)
[14:38:08] <jaubourg> I'd actually love to deprecate the =? mess we have as a back-compat from 1.4.x
[14:39:13] <jaubourg> anyway, ryan, fixes your problems? ;)
[14:39:18] <rwaldron> jaubourg!
[14:39:20] <rwaldron> LOOK!
[14:39:21] <rwaldron> http://www.2ality.com/2011/07/array-from.html
[14:39:23] <jaubourg> hey rick
[14:39:30] <rwaldron> that dude is on TC39 committee
[14:40:07] <ryanneufeld> jaubourg: I'm not sure yet, looks like data being is logged as the url :S
[14:40:51] <jaubourg> rwaldron: funny, I took the other way in node-plus, by implementing array methods on array-like objects... welcome arguments.map()!
[14:42:17] <jaubourg> also implemented the methods for pure objects when it makes sense so ({ field:value, field2:value2 }).map(function( value ) { return "hello " + value; }); would work
[14:43:14] <jaubourg> rwaldron: cool for the mention though I guess, those methods would be handy
[14:43:24] <rwaldron> ryanneufeld should I  look past the syntax error in the first one?
[14:43:34] <rwaldron> Dongtip Chaingtang
[14:43:34] <ryanneufeld> no
[14:43:36] <rwaldron> whoops
[14:43:38] <rwaldron> jsoncallback = ;
[14:43:53] <rwaldron> Unexpected Token
[14:43:56] <rwaldron> ";"
[14:44:17] <ryanneufeld> http://jsfiddle.net/WMNaN/4/
[14:44:17] <ryanneufeld> fixed
[14:44:21] <ryanneufeld> but that's not why it's failing
[14:44:27] <ryanneufeld> jaubourg has me on the right track
[14:44:34] <ryanneufeld> but now there is something else going on....
[14:44:42] <rwaldron> I get a auth box
[14:44:44] <rwaldron> an*
[14:45:46] <ryanneufeld> metrolyrics:metrolyrics
[14:46:58] <rwaldron> An Error Was Encountered
[14:46:58] <rwaldron> The URI you submitted has disallowed characters.
[14:47:14] <rwaldron> is that expected?
[14:48:46] <ryanneufeld> yes, thanks guys
[14:48:53] <ryanneufeld> jaubourg: you fixed it for me
[14:49:02] <ryanneufeld> the problem was pebkac
[14:49:13] <ryanneufeld> usernames and passwords go AFTER the http://
[14:49:15] <jaubourg> cool, sorry if I'm not that responsive, I'm onto something right now
[14:49:17] * ryanneufeld facepalms
[14:49:21] <jaubourg> haha
[14:49:27] <ryanneufeld> no, you've been 100000% helpful man
[14:49:33] <ryanneufeld> thanks a tonne
[14:49:39] <jaubourg> np
[14:51:45] <jaubourg> rwaldron: you should add an Array.prototype.rwaldron() just to see if you can get it into the standard ;)
[14:52:28] <jaubourg> sup btw?
[14:52:54] <rwaldron> eh
[14:53:07] <rwaldron> i'm not a very useful array proto method
[14:53:10] <rwaldron> not much
[14:53:20] <rwaldron> i'm trying to find an RMV that's open tomorro
[14:53:23] <rwaldron> tomorrow*
[14:53:31] <rwaldron> so i can pay a 4 year old fine
[14:53:49] <jaubourg> RMV? dunno the acronym
[14:54:01] <jaubourg> *4* year old fine... and I thought I was late sometimes :P
[14:54:06] <rwaldron> registry of motor vehicle
[14:54:12] <rwaldron> i'm buying a new car
[14:54:18] <rwaldron> but i need to settle some shit first
[14:54:24] <jaubourg> oh, ok
[14:54:26] <ryanneufeld> so now I'm getting an uncaught reference error with the jquery generated name
[14:54:30] <rwaldron> i purposely didnt pay it
[14:54:34] <rwaldron> it's bullshit
[14:54:54] <jaubourg> man, I'd so need to actually get a driving license at one point or another
[14:55:02] <rwaldron> i used own a nissan pathfinder and the city declared it "abandoned" and towed it
[14:55:10] <rwaldron> it was parked on the street, legally registered
[14:55:19] <rwaldron> someone made a mistake
[14:55:26] <rwaldron> and I have ot pay for it
[14:55:39] <jaubourg> yeah,  but I guess it's too late to contest it, right?
[14:56:00] <rwaldron> ryanneufeld is metrolyris your service?
[14:56:05] <rwaldron> lyrics*
[14:56:09] <ryanneufeld> yes
[14:56:11] <ryanneufeld> we own it
[14:56:19] <rwaldron> you can have it ignore query params
[14:56:24] <ryanneufeld> it does
[14:56:27] <ryanneufeld> but when it does
[14:56:31] <ryanneufeld> it redirects
[14:56:32] <rwaldron> it doesnt
[14:56:38] <rwaldron> it does something unexpected
[14:56:47] <rwaldron> i would make it _not_ do that
[14:56:52] <rwaldron> and you'll be all set
[14:56:56] <rwaldron> http://beta.metrolyrics.com/metrolyricsapi/search/lyrics/find/Motorhead/format/jsonp/
[14:57:00] <rwaldron> right?
[14:57:02] <ryanneufeld> yup
[14:57:05] <ryanneufeld> that should work fine
[14:57:10] <rwaldron> so if your service is suppsoed to ignore them,
[14:57:14] <ryanneufeld> data's hugged
[14:57:16] <rwaldron> http://beta.metrolyrics.com/metrolyricsapi/search/lyrics/find/Motorhead/format/jsonp/?foo=bar
[14:57:23] <rwaldron> shouldnt do anything differnt
[14:57:32] <rwaldron> but it does
[14:57:40] <ryanneufeld> I agree
[14:57:52] <rwaldron> if it didnt, you could allow jquery to append that callback nonsense to the end
[14:57:53] <ryanneufeld> our PM wrote it though, so I have to be delicate :{
[14:57:56] <rwaldron> and it would be ignoreed
[14:58:00] <rwaldron> and you'd be golden
[14:58:07] <ryanneufeld> familiar with code igniter?
[14:58:13] <ryanneufeld> that's what it's built with
[14:58:15] <rwaldron> delicate doesn't write good software
[14:58:22] <rwaldron> you do
[14:58:27] <rwaldron> tell him to smarten up
[14:58:31] <rwaldron> he's a bottle neck
[14:58:36] <rwaldron> get him fired
[14:58:56] <ryanneufeld> haha, no thanks, we actually like him
[14:59:15] <ryanneufeld> by delicate I mean I can't say "hey asshole fix your shit"
[15:00:00] <ryanneufeld> any how, I'll have to have a chat with him about it, cause it's really messed up, and I don't want to do all this duck punching to make it work
[15:02:37] <rwaldron> i'm also really curious as to why every/thing/is/like/this?
[15:04:15] <ryanneufeld> seems/to/be/the/standard/or/part/of/the/spec?
[15:04:38] <rwaldron> um.
[15:04:46] <rwaldron> query=string&params=true
[15:04:47] <jaubourg> typical code igniter routing
[15:04:48] <rwaldron> ?
[15:05:04] <jaubourg> very good for SEO
[15:05:15] <ryanneufeld> indeed
[15:05:19] <jaubourg> node express is alike
[15:05:23] <ryanneufeld> and SEO is our bread and butter
[15:05:50] <rwaldron> so, my point is not which one is better
[15:05:54] <rwaldron> my point is, pick one
[15:06:01] <ryanneufeld> jaubourg: any suggestions for why I'm getting the error" uncaught reference
[15:06:05] <rwaldron> the redirect is your worst enemy
[15:06:17] <rwaldron> if you're going to use pretty paths, then do that
[15:06:18] <ryanneufeld> yeah, I agree, I prefer the restful
[15:06:22] <ryanneufeld> the pretty paths
[15:06:29] <jaubourg> ryan: without the code at hand, no clue
[15:06:36] <rwaldron> but _really_ ignore query params
[15:06:36] <ryanneufeld> that can be arranged
[15:06:42] <ryanneufeld> agreed
[15:06:42] <rwaldron> dont penalize
[15:06:53] <rwaldron> in that case, you'll be gold pnyboy
[15:07:38] <ryanneufeld> https://gist.github.com/01b4646d249291da96d4
[15:08:00] <ryanneufeld> the ajax call starts on line 38
[15:09:33] <ryanneufeld> this is part of a chrome extension... I'm not sure if that has any bearing on it
[15:11:39] <ryanneufeld> gah, sonnofa gun
[15:11:51] <jaubourg> encodeURIComponent rather than escape for videoTitle maybe?
[15:11:52] <ryanneufeld> Chrome lets you get past the SOP using their permissions
[15:12:02] <ryanneufeld> I don't need jsonp now :S
[15:12:09] <ryanneufeld> thanks a lot guys
[15:12:11] <rwaldron> good call
[15:12:18] <rwaldron> did i miss that?
[15:12:22] <ryanneufeld> I'm gonna push for fixing the bugs in the api
[15:12:24] <rwaldron> did you mention it before?
[15:12:36] <ryanneufeld> the encodeURIComponent ?
[15:12:41] <ryanneufeld> no one mentioned that
[15:12:46] <rwaldron> i actually _just_ made a chrome extension doing cors-y stuff last week
[15:13:01] <ryanneufeld> but the URI component makes + instead of %20 right?
[15:13:19] <ryanneufeld> ?mdc encodeURIComponent
[15:13:20] <bot-t> ryanneufeld, encodeURIComponent - MDN Docs - Encodes a Uniform Resource Identifier (URI) component by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character ... https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/encodeURIComponent
[15:13:45] <ryanneufeld> hmm, apparently not
[15:15:23] <ryanneufeld> anyway, thanks alot guys, even if I didn't need it, I know more about JSONP now than I did before
[15:15:30] <ryanneufeld> also I don't recall seeing the ?? in the docs
[15:16:01] <ryanneufeld> yeah, it's not there...
[15:20:01] <jaubourg> I'd be suprised
[15:20:25] <ryanneufeld> I checked the $.ajax() docs, searched the page for
[15:20:28] <ryanneufeld> ?? and nothing
[15:21:09] <jaubourg> I'll be damned
[15:22:10] <ryanneufeld> hence why I was asking you directly, also your the guy who wrote it, so who better to ask :p
[15:22:49] <jaubourg> ?tell kswedberg seems like we completely forgot to talk about ?? as an alternative to =? to specify jsonp callbacks in URLs on the ajax doc page :/
[15:22:50] <bot-t> jaubourg, Okay.
[15:23:18] <jaubourg> ryan: thank for the pointer on the doc being incomplete, this is VERY helpful
[15:23:55] <ryanneufeld> np, thanks for the help with my code. same thing, very helpful :)
[16:42:04] <jaubourg> do we return elem.css( "opacity" ) as a string by design or to make it impossible to simply test for !elem.css( "opacity" ). Passed half an hour on this one :/
[17:15:00] <clarkbox> FYI im messing around with view.jquery.org right now
[17:15:05] <clarkbox> will be back to normal in a few
[18:00:14] <clarkbox> ok view.jquery.org is back to normal
[18:00:21] <clarkbox> with addition of http://view.jqueryui.com/branches.txt
[18:00:37] <clarkbox> will prob turn that into jsonp file
[18:07:18] <clarkbox> of course i meant to say /view.jqueryui.com all along ^^
[19:38:54] <rewolf> anybody there?
[19:39:40] <paul_irish> .
[23:57:59] <gnarf> !+elem.css("opacity") ?
