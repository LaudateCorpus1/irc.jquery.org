[11:02:26] <ikarienator> Hi guys
[11:03:04] <nzakas> howdy!
[11:03:04] <ariya> good morning
[11:03:15] <ariya> give ma few mins to wrap up
[11:04:12] <ariya> is everyone here already?
[11:04:28] <nzakas> ready
[11:04:35] <jeffmo> I‚Äôm here
[11:05:32] <jeffmo> ariya hates  us
[11:05:59] <mikesherov> hi
[11:06:00] <nzakas> it was your "I'm here"
[11:06:02] <nzakas> that did it
[11:06:07] <mikesherov> sorry for my lateness
[11:06:09] <nzakas> I almost logged off, myself
[11:06:10] <nzakas> :)
[11:06:25] <mikesherov> hi ariya
[11:06:35] <ariya> everyone is ready?
[11:06:44] <mikesherov> yup
[11:06:50] <mikesherov> gibson is on vacation this week
[11:06:59] <mikesherov> 'lets get started
[11:07:23] <ariya> yes
[11:07:47] <jeffmo> nzakas: :p
[11:08:17] <mikesherov> oh, there he is
[11:08:23] <gibson0421> hi
[11:08:23] <mikesherov> gibson0421: thought you were on vacay
[11:08:39] <gibson0421> I am ;)
[11:08:53] <mikesherov> ariya: want me to run the agenda?
[11:09:01] <ariya> mikesherov: please do
[11:09:04] <mikesherov> OK
[11:09:07] <mikesherov> so since last meeting
[11:09:15] <mikesherov> we now have sane unit tests
[11:09:20] <mikesherov> hooray!
[11:09:22] <nzakas> ::applause::
[11:09:38] <jeffmo> sane meaning?
[11:09:41] <ikarienator> one we can continue improve on.
[11:09:45] <mikesherov> and we landed classes support WITH changes proposed by estree community!
[11:09:59] <mikesherov> jeffmo: meaning a group of files per input vs. expected output
[11:10:06] <mikesherov> rather than a monothilic 22K line file
[11:10:16] <jeffmo> ah cool
[11:10:22] <ariya> it‚Äôs because ikarienator uses webstorm
[11:10:22] <mikesherov> ikarienator: made a script that can convert them for harmony too, right?
[11:10:30] <ikarienator> Aha!
[11:10:32] <mikesherov> LOL, webstorm cries
[11:10:33] <ariya> ikarienator: my vim doesn‚Äôt haave problem handling it
[11:11:02] <ikarienator> derp..
[11:11:13] <jeffmo> I was going to propose the solution we use for esprima-fb ‚Äî which is to have a huge list of strings, and a script that generates/records ASTs for them in a separate file. Then you simply re-record when you make an ast-affecting change
[11:11:17] <jeffmo> and it shows up in the pull request
[11:11:18] <jeffmo> anyway
[11:11:20] <jeffmo> too little too late :)
[11:11:27] <ariya> ikarienator: does the test runner automatically create *.json if it doesn‚Äôt exist yet?
[11:11:48] <ikarienator> Not yet
[11:12:03] <mikesherov> jeffmo: we can still make that script
[11:12:04] <ariya> mikesherov: see above, I‚Äôll create a ticket for that
[11:12:06] <ikarienator> But definitely easier now than before.
[11:12:24] <mikesherov> OK, great, ariya, on converting harmony tests?
[11:12:30] <jeffmo> ok ‚Äî I also didn‚Äôt propose it because I don‚Äôt actually have the time to work on it anytime soon, heh
[11:12:39] <mikesherov> jeffmo: still propose stuff
[11:12:46] <mikesherov> need that knowledge brain dump :-)
[11:12:56] <ariya> not sure we need to that for harmony since we are migrating stuff from there
[11:12:57] <jeffmo> üëç
[11:13:05] <mikesherov> OK
[11:13:06] <ariya> but it‚Äôs up to jeffmo
[11:13:29] <mikesherov> so, lets move on
[11:13:50] <mikesherov> 2.1?
[11:14:00] <ariya> probably need to postpone
[11:14:20] <jeffmo> Updates on my end: dhe (who offered to work on generators) said he has a talk upcoming that he forgot about, so probably won‚Äôt be able to have it ready this week
[11:14:34] <ariya> we can still retarget generator for 2.2
[11:14:36] <mikesherov> so, lets account for what's left
[11:14:53] * ariya is almost done with let and const
[11:14:54] <mikesherov> seems like only concrete work that still remains (if we push everything else)
[11:15:11] <mikesherov> right, let and const, and rest paramaters for arrow functions which bei is working on?
[11:15:27] <mikesherov> https://github.com/jquery/esprima/issues/1011
[11:15:28] <ikarienator> I needed destructing before I can do it.
[11:15:38] <ariya> OK let‚Äôs postpone rest + arrow
[11:15:52] <ikarienator> specifically, destructuring binding pattern
[11:15:55] <ariya> mikesherov: delay 2.1 by one week?
[11:16:01] <mikesherov> up to team
[11:16:04] <ariya> that makes it 4 weeks after the last 2.0 anyway :-)
[11:16:07] <jeffmo> what is ready now?
[11:16:29] <jeffmo> (since 2.0)
[11:16:33] <mikesherov> https://github.com/jquery/esprima/issues?q=is%3Aissue+milestone%3A2.1+is%3Aclosed
[11:16:41] <mikesherov> computed property names, most of rest parameters
[11:16:46] <mikesherov> most of let and const
[11:17:13] <mikesherov> and some estree compatibility tweaks for handlers vs. handler
[11:17:22] <jeffmo> I‚Äôm confused why we need destructuring to implement rest params for arrows?
[11:17:51] <ikarienator> Actually, for completeness...
[11:18:11] <ikarienator> The conversion is required in arrow functions, not anywhere else.
[11:18:29] <mikesherov> right
[11:18:40] <ikarienator> Destructuring binding pattern is a different story
[11:18:41] <mikesherov> in order to simplify completely, destructuring is required
[11:18:50] <ikarienator> ah. * assignment
[11:19:00] <jeffmo> I guess I don‚Äôt understand why we couldn‚Äôt implement rest params in arrows without destructuring (and then generalize later when destructuring lands)
[11:19:14] <mikesherov> ikarienator: can we?
[11:19:15] <ariya> ikarienator: probably write that description in the ticket?
[11:19:23] <nzakas> I have the same question - we actually did this in Espree fairly easily
[11:19:24] <ikarienator> We can. The issue was to refactor the arrow function parsing
[11:19:49] <mikesherov> ah, so perhaps we delay that full refactor and land the current port from harmony
[11:19:58] <mikesherov> on reason I didn't do it was it was over my head
[11:20:15] <mikesherov> but there is actually a different potential blocker for landing rest parameters at all
[11:20:21] <mikesherov> so maybe we should discuss that now too?
[11:20:23] <mikesherov> https://github.com/estree/estree/issues/3
[11:20:33] <ikarienator> Whether it is a arrow function is determined by the end of parseGroupExpression, we don't need to leak the information anywhere else.
[11:20:50] <ikarienator> So parseAssignmentExpression will be pretty deterministic and simple.
[11:21:12] <jeffmo> perfect and good can be friends ‚Äî need not be enemies :)
[11:21:14] <mikesherov> ok, so ikarienator can we just do that and defer the complete refactor till later?
[11:21:28] <ikarienator> Sure, no problem.
[11:21:36] <mikesherov> so we can say 2.1 next week?
[11:21:39] <ariya> looks like a good trade off
[11:21:42] <mikesherov> but let's resolve https://github.com/estree/estree/issues/3
[11:21:47] <ariya> mikesherov: depends on that AST format for rest
[11:21:51] <mikesherov> right
[11:22:07] <ariya> is SM going to change at all? do we have a guarantee on that?
[11:22:09] <jeffmo> oh man, I hate how far behind I‚Äôm getting‚Ä¶but putting rest params in the params array would be so nice
[11:22:26] <nzakas> +1
[11:22:29] <mikesherov> ariya, lets say we do
[11:22:36] <ikarienator> Standard Model?
[11:22:41] <mikesherov> if SM wants to change, do we like that *design*
[11:22:45] <mikesherov> SpiderMonkey
[11:22:50] <ariya> https://bugzilla.mozilla.org/show_bug.cgi?id=1093504 hasn‚Äôt seen any updates
[11:22:54] <ikarienator> Ah. sure...
[11:23:09] <mikesherov> yes, let's ignore their signal for a moment... do we actually like what acorn has implemented
[11:23:26] <mikesherov> because I think we need to push SM in the right direction here
[11:23:40] <ariya> I am more comfortable with ikarienator point here: https://github.com/estree/estree/issues/3#issuecomment-75364627
[11:23:42] <ikarienator> I do. But I think AssignmentPattern is a misleading name.
[11:24:01] <mikesherov> agreed on name
[11:24:29] <nzakas> +1 to Acorn's approach and ikarienator's comment
[11:25:03] <ikarienator> In fact I think I can finish binding pattern by next week, then we have almost full support in arrow function.
[11:25:16] <jeffmo> ikarienator: you‚Äôre arguing that rest not sit in the params array?
[11:25:18] <ikarienator> If we resolve estree#3 somehow
[11:25:38] <ariya> ikarienator: you need to take/own https://github.com/jquery/esprima/issues/1045 then
[11:25:56] <ikarienator> It should not. It can only be the last, you can only have one of them, and it cannot be binding pattern.
[11:26:12] <ikarienator> So basically, it doesn't belong to the array.
[11:26:19] <jeffmo> I really think it would be far more convenient to have it in the params array ‚Äî it‚Äôs useful when dealing with the list of parameters to a function
[11:26:33] <mikesherov> I agree with jeffmo here.
[11:26:34] <jeffmo> (talking only pragmatics)
[11:26:53] <nzakas> having defaults outside of the params list has been tricky for us, as well
[11:26:55] <mikesherov> agreed on pragmatics, but ikarienator is focused on ability to only produce correct ASTs
[11:27:01] <ikarienator> A list of parameter is easy to get if you have everything in an array only when you don't have binding pattern support.
[11:27:25] <mikesherov> I personally like the "rest" flag on functionlikes
[11:27:39] <jeffmo> Is having an AST structure that cannot represent an invalid program a goal here?
[11:27:49] <mikesherov> but I agree that the actual list of params should include the rest param
[11:27:56] <mikesherov> jeffmo: not saying it is
[11:27:58] <ikarienator> With binding pattern support, it has to be an recursive algorithm anyway, so whether the algorithm starts from function level or array level doesn't matter that much.
[11:28:13] <mikesherov> just saying that I know ikarienator and ariya have this goal in mind in general :-)
[11:28:47] <jeffmo> We have quite a few hacks that deal with the notion of passing around the list of params (whose use cases require information like defaults and rest params) which means we either have to pass the entire function arg around and dig in, or create an entire new data structure from the function DS
[11:28:50] <ikarienator> Yes. We are dealing with transformations.
[11:28:56] <ariya> it‚Äôs problematic because diverging so much from the existing SM AST is not good
[11:28:59] <gibson0421> given all the work around supporting missing close sequences, I'd call "an AST structure that cannot represent an invalid program" an anti-goal
[11:29:06] <mikesherov> Let me reframe the question:
[11:29:09] <ariya> and yet extending it a bit conflicts with other set of conveniences
[11:29:21] <mikesherov> If SM says they like what Acorn has done here... are we in favor of moving in that direction
[11:29:38] <mikesherov> do we foresee problems with that approach from a consumer of the AST standpoint
[11:30:04] <nzakas> no problems from my perspective
[11:30:11] <ariya> mikesherov: it is incompatible with the existing default syntax
[11:30:12] <nzakas> we've had more problems because they're not in the params array
[11:30:25] <mikesherov> like, are we willing to fight for a different way if SM is OK with Acorn's solution. And it's fine if the answer is yes, but we then owe it to the community to get consensus IMO
[11:30:30] <ariya> it seems that rest was designed after default was in
[11:30:37] <jeffmo> Definitely agree that if ESTree goes in a direction I don‚Äôt agree with, we should still follow ESTree
[11:30:54] <ikarienator> What is the problem of passing functions around?
[11:30:54] <mikesherov> ESTree will only go in the direction we all allow it to :-)
[11:30:58] <jeffmo> Just putting forward what I would like to see ESTree take
[11:31:51] <jeffmo> ikarienator: requires special logic to collect the set of bindings being introduced into the function (for example) ‚Äî as opposed to just iterating the params list and handling the possible items in that list
[11:32:02] <ariya> in that https://github.com/estree/estree/issues/3, do we have a bit more detailed explanation why one format is easier than another
[11:32:04] <jeffmo> easy to forget to check ‚Äòrest‚Äô after you‚Äôve iterated through ‚Äòparams‚Äô
[11:32:17] <nzakas> same for 'defaults'
[11:32:22] <jeffmo> yes
[11:32:37] <mikesherov> right, I agree with jeffmo and nzakas here... encountering an unexpected type is preferred to silently missing info
[11:32:51] <ariya> so that‚Äôs why someone needs to put in that ticket
[11:32:59] <mikesherov> ariya: it's listed there
[11:33:00] <jeffmo> I wouldn‚Äôt even call it an unexpected type if it‚Äôs in the spec
[11:33:14] <mikesherov> https://github.com/estree/estree/issues/3#issuecomment-74376265
[11:33:25] <jeffmo> (but if you forgot to deal with that type, at least you‚Äôll fail fast when you encounter it unexpectedly vs missing it altogether)
[11:33:38] <mikesherov> right, that's my point
[11:33:48] <mikesherov> Also from rreverser: This also allows to reuse and share any code from ArrayPatterns for function params.
[11:34:16] <ariya> mikesherov: reuse in the parser itself or the consumer?
[11:34:31] <mikesherov> both
[11:34:41] <ikarienator> Ah, I'm all for separating rest from elements in ArrayPatterns..
[11:34:49] <ikarienator> That's what we do in shift
[11:35:02] <ikarienator> but you have a good point. people may forget about it.
[11:35:11] <nzakas> it's very easy to forget
[11:35:12] <gibson0421> and from a consumer standpoint, the most direct mapping is generally the most desirable‚Äîi.e., a single object describing the entire parameter list and nothing about the function to which it applies
[11:35:34] <ariya> good point
[11:35:39] <ikarienator> I agree
[11:35:47] <ariya> we just need to handle the existing defaults
[11:35:53] <mikesherov> wow, did we just resolve this issue internally with a reasoned debate?
[11:36:00] <mikesherov> HOORAY
[11:36:18] <ariya> mikesherov: are you expecting something else?
[11:36:33] <mikesherov> I've been doing open source too long to expect reasoned debate to resolve issues
[11:36:36] <ariya> ikarienator and I are in the same office
[11:36:41] <mikesherov> :-P
[11:36:43] <jeffmo> yay good people :)
[11:36:43] <ariya> all the wrestling and shouting match already happened
[11:36:48] <mikesherov> HAHAHAHAHA
[11:37:03] <mikesherov> OK, so... seems we're good to go with Acorn's approach?
[11:37:09] <ariya> back to my question: what to do with default?
[11:37:10] <mikesherov> or am I misinterpreting?
[11:37:14] <ariya> the existing defaults array
[11:37:22] <mikesherov> ah, in terms of backcompat
[11:37:34] <ariya> when there is no rest param
[11:37:50] <ikarienator> The existing defaults array should go away in a peaceful way like handlers.
[11:37:57] <nzakas> do we know of any tools currently using it?
[11:38:00] <ariya> ikarienator: yeah, but that still goes to transition
[11:38:07] <mikesherov> nzakas: implicitly some JSCS users are
[11:38:17] <mikesherov> because our esnext option goes off harmony
[11:38:21] <ariya> we can still output ‚Äòdefaults‚Äô, removing it i 3.0
[11:38:29] <mikesherov> and there *might* be custom rules out there
[11:38:35] <ikarienator> Maybe we should have them both for a while before deprecate it.
[11:38:36] <mikesherov> but only in theory
[11:38:48] <mikesherov> OK, I'm fine with that
[11:38:52] <jeffmo> +1 ikarienator
[11:38:53] <mikesherov> someone add a ticket!
[11:38:54] <nzakas> +1
[11:39:25] <jeffmo> just to clarify my understanding after skimming that issue: defaults are moving from a separate array to an inlined node in the params list?
[11:39:28] * ariya wil create one
[11:39:43] <nzakas> jeffmo: yes
[11:39:49] <jeffmo> schweet
[11:40:18] <ariya> https://github.com/jquery/esprima/issues/1081
[11:40:43] <mikesherov> OK, to summarize
[11:41:22] <mikesherov> 2.1 will go out when we finish let and const, rest in arrows (without big refactor), and updating to the new rest/default scheme from estree
[11:41:25] <mikesherov> correct?
[11:41:45] <ikarienator> What about destructing binding pattern?
[11:41:50] <ariya> mikesherov: we have ensure the last one to reach consensur on estree side
[11:42:00] <ariya> ikarienator: it can wait, there‚Äôs always 2.2
[11:42:04] <ariya> and time to think through that
[11:42:06] <ikarienator> Sure.
[11:42:18] <ariya> remember I also need to tackle that ‚Äúlet [‚Äú in for-in
[11:42:41] <mikesherov> yes yes
[11:43:00] <ikarienator> these are the only two most nasty issues we have left in shift parser as well. https://github.com/shapesecurity/shift-parser-js/issues?q=is%3Aopen+is%3Aissue+milestone%3AES6
[11:43:26] <mikesherov> ok
[11:43:29] <mikesherov> let's move on
[11:43:43] <mikesherov> 1.2.5 still waiting?
[11:44:14] <ariya> I found out that the implicit octal handling is not enough
[11:44:21] <ariya> in strict mode, it‚Äôs still invalid
[11:44:33] <ariya> let me work on that first before rolling up the fixes at once to 1.2.5
[11:44:41] <mikesherov> OK
[11:44:57] <ariya> at least, let me create ‚ÄúRelease 1.2.5‚Äù ticket before it‚Äôs forgotten again
[11:44:58] <mikesherov> perhaps wait to do that work until after the let/const work for 2.1?
[11:45:03] <mikesherov> OK, cool
[11:45:29] <mikesherov> Let's move on
[11:45:41] <mikesherov> "Label for closed issue (useful for triaging and future references):"
[11:45:56] <ariya> that‚Äôs my suggestion
[11:46:03] <mikesherov> So this topic is what's the best practice for documenting why an issue is closed
[11:46:17] <jeffmo> mikesherov: s/invalid/unrelated/ (otherwise lgtm)
[11:46:21] <ariya> correct, cause often it‚Äôs not obvious and the closing wording is not always standardized
[11:46:29] <mikesherov> yes, no "invalid"
[11:46:36] <mikesherov> that was a big thing on jQuery
[11:46:43] <ariya> any precedent from other projects?
[11:46:46] * ariya is fine with unrelated
[11:46:47] <mikesherov> people get offended when you tell them they are reporting invalid things
[11:47:09] <ariya> mikesherov: I find that people get offended no matter what you tell them :-P
[11:47:10] <mikesherov> From my perspective, everything other than fixed deserves a label
[11:47:12] <jeffmo> for that we should have a this-is-stupid tag
[11:47:35] <mikesherov> because fixed should be happening in the commit message itself
[11:48:03] <mikesherov> but duplicate / unrelated / as-expected for everything else
[11:48:09] <mikesherov> I'm fine with that
[11:48:13] <jeffmo> +1
[11:48:16] <nzakas> +1
[11:48:18] <ariya> good point, the commit cross-ref indicates the resolve
[11:48:22] <mikesherov> we should color all the resolution labels the same way
[11:48:35] <ariya> who volunteers to create the labels?
[11:48:53] <jeffmo> I can do it
[11:48:55] <mikesherov> yeah, and this is a good time to remind everyone that when landing a PR, you should augment commit message to say "Closes gh-<PR number>"
[11:49:04] <mikesherov> so most commits have two references, the issue, and the PR
[11:49:27] <ariya> do we get anywhere with the landing bot?
[11:49:55] * ariya missed the fun time with WebKit
[11:49:56] <mikesherov> I haven't made an issue for it
[11:50:03] <mikesherov> I will do that
[11:50:09] <ariya> https://github.com/jquery/esprima/issues/1018
[11:50:41] <ariya> I can‚Äôt wait for the day we just write ‚Äú@jquerybot: Please land.‚Äù
[11:50:56] <mikesherov> :-)
[11:50:59] <mikesherov> ok, on it
[11:51:01] <jeffmo> (duplicate/unrelated/as-expected labels now available)
[11:51:14] <mikesherov> ok, next: https://github.com/jquery/esprima/wiki/Deviations-from-ESTree
[11:51:33] <mikesherov> would anyone like to own the process of documenting our deviations / is it worthwhile to do right now?
[11:52:21] <mikesherov> tumbleweeds
[11:52:26] <ariya> estree is still a moving target
[11:52:30] <ariya> due to lots of proposal these days
[11:52:41] <mikesherov> ok, so let's defer that action item, leave as a stub?
[11:52:48] <ariya> agree
[11:53:10] <jeffmo> defer sounds good. Hopefully estree flux dies down in the coming months once more people have hashed out more of the ES6 stuff
[11:53:13] <mikesherov> ok, anyone disagree?
[11:53:17] <mikesherov> yes
[11:53:23] <mikesherov> then we can use ESTree to discuss CST
[11:53:30] <mikesherov> but that's the future...
[11:53:32] * jeffmo ducks
[11:53:47] <ariya> CSTree
[11:54:04] <mikesherov> LOL
[11:54:08] <mikesherov> next item: https://github.com/jquery/esprima/pull/1039#discussion_r24720901
[11:54:24] <mikesherov> this was over my head, but ikarienator and ariya wanted to discuss this, so it's on the agenda
[11:54:32] <mikesherov> ikarienator: ariya care to discuss?
[11:54:46] <ariya> I‚Äôd say, wait until the same experiment with shift results in something
[11:54:49] <ariya> ikarienator: what do you think?
[11:55:22] <jeffmo> experiment?
[11:55:24] <ikarienator> I think we shall wait for our expriments
[11:55:33] <ikarienator> Two phase parsing.
[11:55:41] <jeffmo> ah
[11:55:51] <mikesherov> OK, noted
[11:56:01] <jeffmo> (for early-error stuff, right?)
[11:56:08] <ikarienator> Yes
[11:56:09] <mikesherov> yes jeffmo
[11:56:12] <jeffmo> cool
[11:56:19] <mikesherov> Moving along: https://github.com/estree/estree/issues/11#issuecomment-75278482
[11:56:47] <ariya> oh no, michaelficarra_ is here
[11:56:55] <jeffmo> I‚Äôm down with impinball‚Äôs PR
[11:56:56] <michaelficarra_> am I late?
[11:56:57] <mikesherov> seems consensus was acheived for import, but not yet for export?
[11:56:59] * ariya is grabbing his Adamantium shield
[11:57:02] <mikesherov> michaelficarra_: only by an hour
[11:57:13] <mikesherov> jeffmo: fill us in?
[11:57:20] <jeffmo> https://github.com/estree/estree/pull/35/files
[11:57:32] <jeffmo> (import only in that PR)
[11:57:37] <mikesherov> right
[11:57:47] <mikesherov> so, we agree on import and have a bug to fix?
[11:57:49] <mikesherov> https://github.com/estree/estree/pull/35/files#diff-777fac1355306dc5dded0c710b37acdeR153
[11:58:00] <jeffmo> oh yea, that
[11:58:37] <jeffmo> I‚Äôm down to converge on ESTree (breaking change for us)
[11:58:53] <mikesherov> ariya: ? ikarienator ? gibson0421 ?
[11:58:58] <mikesherov> nzakas: ?
[11:58:59] <ariya> jeffmo: are you still going to s/esprima-fb/flowparser? :-)
[11:59:16] <mikesherov> HA
[11:59:16] <jeffmo> ariya: you mean rename? or eventual replace?
[11:59:19] <ariya> mikesherov: this is harmony branch, I‚Äôm still behind
[11:59:39] <ariya> jeffmo: just moniker, makes it easy to refer from e.g. estree
[11:59:44] <ariya> jeffmo: not a showstopper, though
[11:59:45] <mikesherov> So i've noted in https://github.com/jquery/esprima/issues/1000 that we need to address estree/11
[12:00:03] <nzakas> I'm mostly indifferent but the proposal makes sense to me
[12:00:04] <jeffmo> ariya: ‚Äúflowparser‚Äù would be a little confusing since flow actually has another parser
[12:00:24] <ariya> jeffmo: es6-es7-jsx :-)
[12:00:42] <nzakas> all-the-things-parser
[12:00:55] <jeffmo> :)
[12:00:58] <ariya> last agenda
[12:01:05] <jeffmo> anyone opposed to switching over to ESTree (breaking change)?
[12:01:06] <ariya> ES6 megatracking ticket
[12:01:14] <jeffmo> (just to confirm)
[12:01:16] <ariya> jeffmo: abstain
[12:01:29] <jeffmo> *switching over to estree w.r.t. module stuff
[12:01:45] <nzakas> no opposition here
[12:02:00] <mikesherov> right, I've noted on https://github.com/jquery/esprima/issues/1000 that we need to address estree/11 and https://github.com/jquery/esprima/issues/1077
[12:02:04] <gibson0421> looks like I'm behind too; what's the question?
[12:02:19] <mikesherov> Use `Literal` instead of `ModuleSpecifier` for `ImportDeclaration`'s `source` field
[12:02:20] <jeffmo> gibson0421: https://github.com/estree/estree/pull/35/files#diff-777fac1355306dc5dded0c710b37acdeR153
[12:02:23] <mikesherov> should we do that ^
[12:02:30] <ikarienator> I've no clue which design to choose for import/export :(
[12:02:46] <jeffmo> ikarienator: one that works and everyone else does? :)
[12:02:47] <ariya> ikarienator: roll your dice
[12:03:02] <ariya> ikarienator: or your nearest fibonacci rabbit
[12:03:14] <ikarienator> I'll pass on this :(
[12:03:24] <mikesherov> right, we are aligned with Acorn and SM on imports save for the type of the source of an ImportDeclaration
[12:03:28] <gibson0421> it looks like we're the odd one out and not actually deriving value from the use of ModuleSpecifier
[12:03:48] <jeffmo> that‚Äôs my only motivation for changing: consistency with other tooling. gibson0421 said it well
[12:03:50] <mikesherov> ariya: ikarienator what is the concern here?
[12:04:11] <ariya> mikesherov: nothing, I just don‚Äôt have any data point to decide
[12:04:20] <mikesherov> I see
[12:04:28] <mikesherov> so in lack of evidence, consistency wins?
[12:04:34] <ariya> surething
[12:04:37] <jeffmo> I‚Äôve built an es6 module transpiler
[12:04:41] <jeffmo> it wasn‚Äôt hard with ModuleSpecifier
[12:04:45] <jeffmo> nor will it be with literal
[12:04:47] * ariya is spoiled by TypeScript slightly-different module syntax :-P
[12:05:03] <mikesherov> doesn't seem to be evidence in either direction so we're going for consensus
[12:05:06] <mikesherov> OK, great
[12:05:07] <mikesherov> noted
[12:05:17] <mikesherov> as I said in 1000, we'll address 1077
[12:05:48] <mikesherov> so, no need for backcompat because modules are not in any official release
[12:05:59] <jeffmo> shipit
[12:05:59] <mikesherov> only concern is downstream from jeffmo
[12:06:02] <mikesherov> great
[12:06:06] <mikesherov> last item then
[12:06:13] <mikesherov> we may actually finish close to time!
[12:06:23] <mikesherov> ES6 features main tracking ticket
[12:06:33] <ariya> let‚Äôs do it
[12:06:35] <mikesherov> let's just copy copy https://github.com/shapesecurity/shift-parser-js/issues/8
[12:06:56] <mikesherov> OK, I'll do that, and ping the team to check the boxes once created
[12:06:57] <ariya> which will also tell you that ES6 support is 99.999% done in Shift :-)
[12:07:05] <mikesherov> :-)
[12:07:20] <ariya> mikesherov: should we group it by released version?
[12:07:29] <mikesherov> hey, why not
[12:07:31] <mikesherov> good idea
[12:07:36] <ariya> 2.0, 2.1, and Future (not determined yet)
[12:07:47] <mikesherov> right
[12:08:00] <mikesherov> so, not on agenda, but there was a PR for template literals that someone closed
[12:08:15] <mikesherov> would be great to get that person to resubmit the PR and get some community contribution
[12:08:44] <mikesherov> Can we do template literals in 2.1/2.2 and is someone willing to move that fellow along?
[12:08:46] <ariya> https://github.com/jquery/esprima/pull/1078
[12:09:08] <ariya> the ticket is https://github.com/jquery/esprima/issues/1074
[12:09:22] <ariya> should I edit the desc to follow our syntax, errors, etc?
[12:09:27] <mikesherov> yes, please
[12:09:27] <ariya> or should I open a new one?
[12:09:38] <mikesherov> we need someone to make a bunch of tracking tickets in that style
[12:09:43] <mikesherov> editing 1074 is fine
[12:09:59] <mikesherov> gibson0421: do you have any time to grind on tracking issues for ES6 features?
[12:10:01] <ariya> also, estree needs to have the es6 spec for template literal
[12:10:18] <gibson0421> mmm, probably not before the next meeting
[12:10:43] <ariya> https://github.com/jquery/esprima/labels/es7 needs some TLC as well
[12:10:45] <ariya> jeffmo: ^^^
[12:11:02] <mikesherov> OK, so can we say then next week gibson0421
[12:11:19] <mikesherov> would be a good way for you to get a lay of what is and isn't yet implemented too
[12:11:36] <gibson0421> to be determined, most likely... it might be preempted by jQuery core and/or Sizzle
[12:11:52] <gibson0421> the former is pushing for a 3.0 beta
[12:11:57] <mikesherov> gibson0421: ok, putting you down as tentative there
[12:12:04] <gibson0421> ok
[12:12:05] <jeffmo> ariya: TLC as in helping run discussion?
[12:12:09] <mikesherov> I know you're constrained :-)
[12:12:18] <ariya> jeffmo: in filling the tickets
[12:12:27] <mikesherov> yeah, according to our style
[12:12:27] <ariya> jeffmo: I have written useless stubs there
[12:12:35] <jeffmo> ah
[12:12:50] <mikesherov> and ensuring things like syntax, estree issues, etc. are documented as subtasks
[12:13:01] <ariya> jeffmo: afterall, we want Esprima to have ES7 features before Shift :-P
[12:13:21] <mikesherov> yes!
[12:13:21] <ikarienator> About the estree issue on templates: https://github.com/estree/estree/pull/25
[12:13:42] <ariya> ikarienator: good finding! somehow I mssed that
[12:13:53] <jeffmo> I‚Äôll try to find some time this week or next to run through that stuff. I‚Äôm crazy strapped for time, but this is important I agree
[12:14:02] <jeffmo> (*run through the ES7 stuff)
[12:14:07] <mikesherov> ikarienator: documented that in 1074
[12:14:14] <mikesherov> OK, great
[12:14:23] <mikesherov> looks like we're over time and made good progress
[12:14:33] <mikesherov> ariya, want me to report back to stree our findings?
[12:14:42] <mikesherov> or you want to take it?
[12:14:43] <ikarienator> In fact I filed one and sebmack thought I was completely dumbass: https://github.com/estree/estree/issues/34
[12:14:44] <ariya> mikesherov: surething, thanks
[12:14:55] <nzakas> one question: we still haven't discussed es5/es6/es7 language options
[12:15:07] <nzakas> are people still doing research on that?
[12:15:08] <mikesherov> nzakas: we deferred until after 2.1
[12:15:13] <nzakas> ah ok
[12:15:14] <mikesherov> Ah, yes, research
[12:15:20] <mikesherov> I've started looking into it
[12:15:25] <nzakas> cooleo
[12:15:32] <mikesherov> and I think we can solve the issue with hybrid approach of flags vs. packages
[12:15:41] <nzakas> schweet
[12:15:45] <mikesherov> still formulating thoiughts, but will defer until after 2.1 as requested
[12:15:47] <ariya> better to wait for michaelficarra_‚Äôs ES6 fuzzer as well
[12:15:51] <mikesherov> yes
[12:16:09] <mikesherov> trust me, I want to resolve flags as mucha s you nzakas
[12:16:19] <mikesherov> I want nothing more than for espree to not have to exist
[12:16:31] <nzakas> me too!
[12:16:40] <mikesherov> OK
[12:16:48] <mikesherov> I think that's a wrap everyone!
[12:16:57] <ikarienator> michaelficarra_ reminded me that divergence is not bad once the features are done.
[12:17:06] <mikesherov> hoorsay
[12:17:11] <mikesherov> hooray
[12:17:19] <mikesherov> ikarienator: now just twist ariya's arm enough...
[12:17:29] <mikesherov> I'm not in the same room ;-)
[12:17:37] <mikesherov> OK, bye all. I'm way over on time
[12:17:44] <ikarienator> Let us fight in the office first. Bye guys
[12:17:44] <mikesherov> Thanks for everything!
[12:17:51] <ariya> have a good lunch, for everyone on the pacific side
[12:17:56] <ariya> thanks folks!
